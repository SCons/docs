%!PS-Adobe-3.0
%%Creator: groff version 1.20.1
%%CreationDate: Sun Jul 25 16:20:18 2010
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.20 1
%%Pages: 154
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.20 1
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10.95
/Times-Bold@0 SF -.219(NA)72 84 S(ME).219 E F0(scons \255 a softw)108 96
Q(are construction tool)-.1 E F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0
SF(scons)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF(options)2.5 E F0
2.5(... ]).27 F([)2.5 E F3(name)2.5 E F0(=).18 E F3(val).29 E F0 2.5
(... ]).51 F([)2.5 E F3(tar)2.5 E -.1(ge)-.37 G(ts).1 E F0 2.5(... ]).27
F F1(DESCRIPTION)72 141.6 Q F0(The)108 153.6 Q F2(scons)3.466 E F0 .966
(utility b)3.466 F .966(uilds softw)-.2 F .965(are \(or other \214les\)\
 by determining which component pieces must be reb)-.1 F(uilt)-.2 E
(and e)108 165.6 Q -.15(xe)-.15 G(cuting the necessary commands to reb)
.15 E(uild them.)-.2 E .325(By def)108 189.6 R(ault,)-.1 E F2(scons)
2.825 E F0 .326(searches for a \214le named)2.826 F F3(SConstruct)2.826
E F0(,).68 E F3(Sconstruct)2.826 E F0 2.826(,o).68 G(r)-2.826 E F3
(sconstruct)3.166 E F0 .326(\(in that order\) in the cur)3.506 F(-)-.2 E
.465(rent directory and reads its con\214guration from the \214rst \214\
le found.)108 201.6 R .464(An alternate \214le name may be speci\214ed)
5.465 F(via the)108 213.6 Q F2(-f)2.5 E F0(option.)2.5 E(The)108 237.6 Q
F3(SConstruct)2.972 E F0 .142
(\214le can specify subsidiary con\214guration \214les using the)3.322 F
F2(SConscript)2.643 E F0 .143(\(\) function.)B .143(By con)5.143 F -.15
(ve)-.4 G(n-).15 E .512(tion, these subsidiary \214les are named)108
249.6 R F3(SConscript)3.012 E F0 3.012(,a).68 G .512(lthough an)-3.012 F
3.012(yn)-.15 G .512(ame may be used.)-3.012 F .511
(\(Because of this nam-)5.512 F .183(ing con)108 261.6 R -.15(ve)-.4 G
.183(ntion, the term "SConscript \214les" is sometimes used to refer ge\
nerically to all).15 F F2(scons)2.684 E F0(con\214guration)2.684 E
(\214les, re)108 273.6 Q -.05(ga)-.15 G(rdless of actual \214le name.\))
.05 E .834(The con\214guration \214les specify the tar)108 297.6 R .834
(get \214les to be b)-.18 F .834
(uilt, and \(optionally\) the rules to b)-.2 F .834(uild those tar)-.2 F
(gets.)-.18 E 1.78(Reasonable def)108 309.6 R 1.781(ault rules e)-.1 F
1.781(xist for b)-.15 F 1.781(uilding common softw)-.2 F 1.781
(are components \(e)-.1 F -.15(xe)-.15 G 1.781(cutable programs, object)
.15 F(\214les, libraries\), so that for most softw)108 321.6 Q
(are projects, only the tar)-.1 E
(get and input \214les need be speci\214ed.)-.18 E .066
(Before reading the)108 345.6 R F3(SConstruct)2.896 E F0(\214le,)3.246 E
F2(scons)2.566 E F0 .066(looks for a directory named)2.566 F F3
(site_scons)2.906 E F0 .066(in the directory containing)2.836 F(the)108
357.6 Q F3(SConstruct)2.856 E F0 .027(\214le; if it e)3.206 F(xists,)
-.15 E F3(site_scons)2.867 E F0 .027(is added to sys.path, the \214le)
2.797 F F3(site_scons/site_init.py)2.527 E F0 2.527(,i).32 G 2.527(se)
-2.527 G -.25(va)-2.777 G .027(luated if).25 F .172(it e)108 369.6 R
.172(xists, and the directory)-.15 F F3(site_scons/site_tools)3.012 E F0
.172(is added to the def)2.942 F .172(ault toolpath if it e)-.1 F 2.671
(xist. See)-.15 F(the)2.671 E F3(--no-site-)2.681 E(dir)108 381.6 Q F0
(and)3.23 E F3(--site-dir)2.51 E F0(options for more details.)3.23 E F2
(scons)108 405.6 Q F0 .926(reads and e)3.426 F -.15(xe)-.15 G .926(cute\
s the SConscript \214les as Python scripts, so you may use normal Pytho\
n scripting).15 F .412(capabilities \(such as \215o)108 417.6 R 2.912
(wc)-.25 G .411(ontrol, data manipulation, and imported Python librarie\
s\) to handle complicated)-2.912 F -.2(bu)108 429.6 S .076
(ild situations.).2 F F2(scons)5.076 E F0 2.576(,h)C -.25(ow)-2.576 G
-2.15 -.25(ev e).25 H .876 -.4(r, r).25 H .076(eads and e).4 F -.15(xe)
-.15 G .076(cutes all of the SConscript \214les).15 F F3(befor)2.846 E
(e)-.37 E F0 .077(it be)2.757 F .077(gins b)-.15 F .077(uilding an)-.2 F
(y)-.15 E(tar)108 441.6 Q 2.5(gets. T)-.18 F 2.5(om)-.8 G(ak)-2.5 E 2.5
(et)-.1 G(his ob)-2.5 E(vious,)-.15 E F2(scons)2.5 E F0
(prints the follo)2.5 E(wing messages about what it is doing:)-.25 E 2.5
($s)144 465.6 S(cons foo.out)-2.5 E
(scons: Reading SConscript \214les ...)144 477.6 Q
(scons: done reading SConscript \214les.)144 489.6 Q
(scons: Building tar)144 501.6 Q 2.5(gets ...)-.18 F(cp foo.in foo.out)
144 513.6 Q(scons: done b)144 525.6 Q(uilding tar)-.2 E(gets.)-.18 E($)
144 537.6 Q .21(The status messages \(e)108 561.6 R -.15(ve)-.25 G .21
(rything e).15 F .209(xcept the line that reads "cp foo.in foo.out"\) m\
ay be suppressed using the)-.15 F F2(-Q)108 573.6 Q F0(option.)2.5 E F2
(scons)108 597.6 Q F0 .885(does not automatically propag)3.385 F .886
(ate the e)-.05 F .886(xternal en)-.15 F .886(vironment used to e)-.4 F
-.15(xe)-.15 G(cute).15 E F2(scons)3.386 E F0 .886(to the commands)3.386
F .305(used to b)108 609.6 R .305(uild tar)-.2 F .305(get \214les.)-.18
F .305(This is so that b)5.305 F .305
(uilds will be guaranteed repeatable re)-.2 F -.05(ga)-.15 G .304
(rdless of the en).05 F(vironment)-.4 E -.25(va)108 621.6 S .201
(riables set at the time).25 F F2(scons)2.701 E F0 .201(is in)2.701 F
-.2(vo)-.4 G -.1(ke).2 G 2.701(d. This).1 F .201
(also means that if the compiler or other commands that you)2.701 F -.1
(wa)108 633.6 S .716(nt to use to b).1 F .716(uild your tar)-.2 F .716
(get \214les are not in standard system locations,)-.18 F F2(scons)3.216
E F0 .715(will not \214nd them unless)3.216 F .021(you e)108 645.6 R
.021(xplicitly set the P)-.15 F -1.11(AT)-.92 G 2.521(Ht)1.11 G 2.521
(oi)-2.521 G .021(nclude those locations.)-2.521 F(Whene)5.021 E -.15
(ve)-.25 G 2.521(ry).15 G .022(ou create an)-2.521 F F2(scons)2.522 E F0
.022(construction en)2.522 F(viron-)-.4 E(ment, you can propag)108 657.6
Q(ate the v)-.05 E(alue of P)-.25 E -1.11(AT)-.92 G 2.5(Hf)1.11 G
(rom your e)-2.5 E(xternal en)-.15 E(vironment as follo)-.4 E(ws:)-.25 E
(import os)144 681.6 Q(en)144 693.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(ENV = {'P).4 E -1.11(AT)-.92 G(H' : os.en)1.11 E(viron['P)-.4
E -1.11(AT)-.92 G(H']}\))1.11 E(Similarly)108 717.6 Q 4.751(,i)-.65 G
4.751(ft)-4.751 G 2.251(he commands use e)-4.751 F 2.251(xternal en)-.15
F 2.251(vironment v)-.4 F 2.251(ariables lik)-.25 F 4.751(e$)-.1 G -.92
(PA)-4.751 G 2.251(TH, $HOME, $J)-.19 F -1.35(AVA)-.6 G(_HOME,)1.35 E
($LANG, $SHELL, $TERM, etc., these v)108 729.6 Q(ariables can also be e)
-.25 E(xplicitly propag)-.15 E(ated:)-.05 E(July 2010)286.415 768 Q(1)
209.415 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(import os)
144 84 Q(en)144 96 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(ENV = {'P).4
E -1.11(AT)-.92 G(H' : os.en)1.11 E(viron['P)-.4 E -1.11(AT)-.92 G(H'],)
1.11 E('HOME' : os.en)206.5 108 Q(viron['HOME']}\))-.4 E(Or you may e)
108 132 Q(xplicitly propag)-.15 E(ate the in)-.05 E -.2(vo)-.4 G
(king user').2 E 2.5(sc)-.55 G(omplete e)-2.5 E(xternal en)-.15 E
(vironment:)-.4 E(import os)144 156 Q(en)144 168 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(ENV = os.en).4 E(viron\))-.4 E .789
(This comes at the e)108 192 R .789(xpense of making your b)-.15 F .789
(uild dependent on the user')-.2 F 3.29(se)-.55 G -.4(nv)-3.29 G .79
(ironment being set correctly).4 F(,)-.65 E -.2(bu)108 204 S 2.5(ti).2 G
2.5(tm)-2.5 G(ay be more con)-2.5 E -.15(ve)-.4 G(nient for man).15 E
2.5(yc)-.15 G(on\214gurations.)-2.5 E/F1 10/Times-Bold@0 SF(scons)108
228 Q F0 .971(can scan kno)3.471 F .971
(wn input \214les automatically for dependenc)-.25 F 3.471(yi)-.15 G
.971(nformation \(for e)-3.471 F .97(xample, #include state-)-.15 F .591
(ments in C or C++ \214les\) and will reb)108 240 R .591
(uild dependent \214les appropriately whene)-.2 F -.15(ve)-.25 G 3.092
(ra).15 G .892 -.15(ny ")-3.092 H .592(included" input \214le).15 F
(changes.)108 252 Q F1(scons)5 E F0(supports the ability to de\214ne ne)
2.5 E 2.5(ws)-.25 G(canners for unkno)-2.5 E(wn input \214le types.)-.25
E F1(scons)108 276 Q F0(kno)3.054 E .554(ws ho)-.25 F 3.054(wt)-.25 G
3.054(of)-3.054 G .554(etch \214les automatically from SCCS or RCS subd\
irectories using SCCS, RCS or Bit-)-3.054 F -.25(Ke)108 288 S(eper).25 E
(.)-.55 E F1(scons)108 312 Q F0 1.055(is normally e)3.555 F -.15(xe)-.15
G 1.056(cuted in a top-le).15 F -.15(ve)-.25 G 3.556(ld).15 G 1.056
(irectory containing a)-3.556 F/F2 10/Times-Italic@0 SF(SConstruct)3.886
E F0 1.056(\214le, optionally specifying as)4.236 F(command-line ar)108
324 Q(guments the tar)-.18 E(get \214le or \214les to be b)-.18 E(uilt.)
-.2 E(By def)108 348 Q(ault, the command)-.1 E(scons)144 372 Q .431
(will b)108 396 R .431(uild all tar)-.2 F .431(get \214les in or belo)
-.18 F 2.931(wt)-.25 G .431(he current directory)-2.931 F 5.43(.E)-.65 G
.43(xplicit def)-5.43 F .43(ault tar)-.1 F .43(gets \(to be b)-.18 F .43
(uilt when no tar)-.2 F(-)-.2 E .25(gets are speci\214ed on the command\
 line\) may be de\214ned the SConscript \214le\(s\) using the)108 408 R
F1(Default\(\))2.75 E F0(function,)2.75 E(described belo)108 420 Q -.65
(w.)-.25 G(Ev)108 444 Q .853(en when)-.15 F F1(Default\(\))3.353 E F0
(tar)3.353 E .853
(gets are speci\214ed in the SConscript \214le\(s\), all tar)-.18 F .853
(get \214les in or belo)-.18 F 3.353(wt)-.25 G .852(he current)-3.353 F
(directory may be b)108 456 Q(uilt by e)-.2 E
(xplicitly specifying the current directory \(.\))-.15 E
(as a command-line tar)5 E(get:)-.18 E(scons .)144 480 Q .128
(Building all tar)108 504 R .128(get \214les, including an)-.18 F 2.628
<798c>-.15 G .128(les outside of the current directory)-2.628 F 2.628
(,m)-.65 G .129(ay be speci\214ed by supplying a)-2.628 F
(command-line tar)108 516 Q
(get of the root directory \(on POSIX systems\):)-.18 E(scons /)144 540
Q(or the path name\(s\) of the v)108 564 Q
(olume\(s\) in which all the tar)-.2 E(gets should be b)-.18 E
(uilt \(on W)-.2 E(indo)-.4 E(ws systems\):)-.25 E(scons C:\\ D:\\)144
588 Q 1.6 -.8(To b)108 612 T(uild only speci\214c tar).6 E
(gets, supply them as command-line ar)-.18 E(guments:)-.18 E
(scons foo bar)144 636 Q(in which case only the speci\214ed tar)108 660
Q(gets will be b)-.18 E(uilt \(along with an)-.2 E 2.5(yd)-.15 G(eri)
-2.5 E -.15(ve)-.25 G 2.5<648c>.15 G(les on which the)-2.5 E 2.5(yd)-.15
G(epend\).)-2.5 E .419(Specifying "cleanup" tar)108 684 R .418
(gets in SConscript \214les is not usually necessary)-.18 F 5.418(.T)
-.65 G(he)-5.418 E F1(-c)2.918 E F0 .418(\215ag remo)2.918 F -.15(ve)
-.15 G 2.918(sa).15 G .418(ll \214les nec-)-2.918 F(essary to b)108 696
Q(uild the speci\214ed tar)-.2 E(get:)-.18 E(scons -c .)144 720 Q
(July 2010)286.415 768 Q(2)209.415 E 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(to remo)108
84 Q .3 -.15(ve a)-.15 H(ll tar).15 E(get \214les, or:)-.18 E
(scons -c b)144 108 Q(uild e)-.2 E(xport)-.15 E 1.31(to remo)108 132 R
1.61 -.15(ve t)-.15 H(ar).15 E 1.31(get \214les under b)-.18 F 1.31
(uild and e)-.2 F 3.811(xport. Additional)-.15 F 1.311
(\214les or directories to remo)3.811 F 1.611 -.15(ve c)-.15 H 1.311
(an be speci\214ed).15 F .778(using the)108 144 R/F1 10/Times-Bold@0 SF
(Clean\(\))3.278 E F0 3.278(function. Con)3.278 F -.15(ve)-.4 G(rsely)
.15 E 3.278(,t)-.65 G(ar)-3.278 E .777(gets that w)-.18 F .777
(ould normally be remo)-.1 F -.15(ve)-.15 G 3.277(db).15 G 3.277(yt)
-3.277 G(he)-3.277 E F1(-c)3.277 E F0(in)3.277 E -.2(vo)-.4 G .777
(cation can).2 F(be pre)108 156 Q -.15(ve)-.25 G(nted from being remo)
.15 E -.15(ve)-.15 G 2.5(db).15 G 2.5(yu)-2.5 G(sing the)-2.5 E F1
(NoClean)2.5 E F0(\(\) function.)A 3.137(As)108 180 S .637
(ubset of a hierarchical tree may be b)-3.137 F .638
(uilt by remaining at the top-le)-.2 F -.15(ve)-.25 G 3.138(ld).15 G
.638(irectory \(where the)-3.138 F/F2 10/Times-Italic@0 SF(SConstruct)
3.468 E F0(\214le li)108 192 Q -.15(ve)-.25 G
(s\) and specifying the subdirectory as the tar).15 E(get to be b)-.18 E
(uilt:)-.2 E(scons src/subdir)144 216 Q .418
(or by changing directory and in)108 240 R -.2(vo)-.4 G .418
(king scons with the).2 F F1(-u)2.917 E F0 .417(option, which tra)2.917
F -.15(ve)-.2 G .417(rses up the directory hierarch).15 F(y)-.05 E
(until it \214nds the)108 252 Q F2(SConstruct)2.83 E F0
(\214le, and then b)3.18 E(uilds tar)-.2 E(gets relati)-.18 E -.15(ve)
-.25 G(ly to the current subdirectory:).15 E(cd src/subdir)144 276 Q
(scons -u .)144 288 Q F1(scons)108 312 Q F0 .211(supports b)2.711 F .211
(uilding multiple tar)-.2 F .211(gets in parallel via a)-.18 F F1(-j)
2.711 E F0 .211(option that tak)2.711 F .211(es, as its ar)-.1 F .212
(gument, the number of)-.18 F(simultaneous tasks that may be spa)108 324
Q(wned:)-.15 E(scons -j 4)144 348 Q -.2(bu)108 372 S(ilds four tar).2 E
(gets in parallel, for e)-.18 E(xample.)-.15 E F1(scons)108 396 Q F0
1.568(can maintain a cache of tar)4.069 F 1.568(get \(deri)-.18 F -.15
(ve)-.25 G 1.568(d\) \214les that can be shared between multiple b).15 F
4.068(uilds. When)-.2 F .255
(caching is enabled in a SConscript \214le, an)108 408 R 2.755(yt)-.15 G
(ar)-2.755 E .255(get \214les b)-.18 F .255(uilt by)-.2 F F1(scons)2.755
E F0 .255(will be copied to the cache.)2.755 F .256(If an up-)5.256 F
.638(to-date tar)108 420 R .638
(get \214le is found in the cache, it will be retrie)-.18 F -.15(ve)-.25
G 3.138(df).15 G .638(rom the cache instead of being reb)-3.138 F .637
(uilt locally)-.2 F(.)-.65 E .32(Caching beha)108 432 R .321
(vior may be disabled and controlled in other w)-.2 F .321(ays by the)
-.1 F F1(--cache-f)2.821 E(or)-.25 E(ce)-.18 E F0(,)A F1
(--cache-disable)2.821 E F0 2.821(,a)C(nd)-2.821 E F1(--cache-sho)108
444 Q(w)-.1 E F0 .06(command-line options.)2.56 F(The)5.06 E F1
(--random)2.56 E F0 .06(option is useful to pre)2.56 F -.15(ve)-.25 G
.06(nt multiple b).15 F .06(uilds from trying)-.2 F
(to update the cache simultaneously)108 456 Q(.)-.65 E -1.11(Va)108 480
S(lues of v)1.11 E(ariables to be passed to the SConscript \214le\(s\) \
may be speci\214ed on the command line:)-.25 E(scons deb)144 504 Q
(ug=1 .)-.2 E .412(These v)108 528 R .412(ariables are a)-.25 F -.25(va)
-.2 G .413
(ilable in SConscript \214les through the ARGUMENTS dictionary).25 F
2.913(,a)-.65 G .413(nd can be used in)-2.913 F
(the SConscript \214le\(s\) to modify the b)108 540 Q(uild in an)-.2 E
2.5(yw)-.15 G(ay:)-2.6 E(if ARGUMENTS.get\(')144 564 Q(deb)-.5 E
(ug', 0\):)-.2 E(en)154 576 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(CCFLA).4 E(GS = '-g'\))-.4 E(else:)144 588 Q(en)154 600 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E .082(The command-line v)108
624 R .082(ariable ar)-.25 F .082(guments are also a)-.18 F -.25(va)-.2
G .082(ilable in the ARGLIST list, inde).25 F -.15(xe)-.15 G 2.582(db)
.15 G 2.582(yt)-2.582 G .081(heir order on the)-2.582 F .585
(command line.)108 636 R .585(This allo)5.585 F .585
(ws you to process them in order rather than by name, if necessary)-.25
F 5.585(.A)-.65 G(RGLIST[0])-5.585 E 1.26
(returns a tuple containing \(ar)108 648 R 1.26(gname, ar)-.18 F(gv)-.18
E 3.76(alue\). A)-.25 F 1.259(Python e)3.76 F 1.259(xception is thro)
-.15 F 1.259(wn if you try to access a list)-.25 F
(member that does not e)108 660 Q(xist.)-.15 E F1(scons)108 684 Q F0
.208(requires Python v)2.708 F .208(ersion 1.5.2 or later)-.15 F 5.208
(.T)-.55 G .208
(here should be no other dependencies or requirements to run)-5.208 F F1
(scons.)108 696 Q F0 .452(By def)108 720 R(ault,)-.1 E F1(scons)2.952 E
F0(kno)2.952 E .452(ws ho)-.25 F 2.952(wt)-.25 G 2.951(os)-2.952 G .451
(earch for a)-2.951 F -.25(va)-.2 G .451(ilable programming tools on v)
.25 F .451(arious systems.)-.25 F .451(On W)5.451 F(indo)-.4 E(ws)-.25 E
(July 2010)286.415 768 Q(3)209.415 E 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(systems,)
108 84 Q/F1 10/Times-Bold@0 SF(scons)2.776 E F0 .276
(searches in order for the Microsoft V)2.776 F .277
(isual C++ tools, the MinGW tool chain, the Intel com-)-.6 F .79
(piler tools, and the PharLap ETS compiler)108 96 R 5.79(.O)-.55 G 3.29
(nO)-5.79 G .79(S/2 systems,)-3.29 F F1(scons)3.29 E F0 .79
(searches in order for the OS/2 com-)3.29 F(piler)108 108 Q 3.15(,t)-.4
G .65(he GCC tool chain, and the Microsoft V)-3.15 F .65
(isual C++ tools, On SGI IRIX, IBM AIX, He)-.6 F .65(wlett P)-.25 F
(ackard)-.15 E .166(HP-UX, and Sun Solaris systems,)108 120 R F1(scons)
2.666 E F0 .165(searches for the nati)2.665 F .465 -.15(ve c)-.25 H .165
(ompiler tools \(MIPSpro, V).15 F .165(isual Age, aCC,)-.6 F .283(and F)
108 132 R .283(orte tools respecti)-.15 F -.15(ve)-.25 G .283
(ly\) and the GCC tool chain.).15 F .283
(On all other platforms, including POSIX \(Linux and)5.283 F .408
(UNIX\) platforms,)108 144 R F1(scons)2.908 E F0 .408
(searches in order for the GCC tool chain, the Microsoft V)2.908 F .407
(isual C++ tools, and the)-.6 F 1.629(Intel compiler tools.)108 156 R
-1.1(Yo)6.629 G 4.129(um)1.1 G(ay)-4.129 E 4.129(,o)-.65 G 4.129(fc)
-4.129 G 1.629(ourse, o)-4.129 F -.15(ve)-.15 G 1.629(rride these def)
.15 F 1.629(ault v)-.1 F 1.63(alues by appropriate con\214guration of)
-.25 F(En)108 168 Q(vironment construction v)-.4 E(ariables.)-.25 E/F2
10.95/Times-Bold@0 SF(OPTIONS)72 196.8 Q F0 .249(In general,)108 208.8 R
F1(scons)2.749 E F0 .248(supports the same command-line options as GNU)
2.748 F F1(mak)2.748 E(e)-.1 E F0 2.748(,a)C .248(nd man)-2.748 F 2.748
(yo)-.15 G 2.748(ft)-2.748 G .248(hose supported by)-2.748 F F1(cons)108
220.8 Q F0(.)A(-b)108 249.6 Q(Ignored for compatibility with non-GNU v)
144 249.6 Q(ersions of)-.15 E F1(mak)2.5 E(e.)-.1 E F0
(-c, --clean, --remo)108 278.4 Q -.15(ve)-.15 G .167(Clean up by remo)
144 290.4 R .167(ving all tar)-.15 F .167
(get \214les for which a construction command is speci\214ed.)-.18 F
.168(Also remo)5.168 F -.15(ve)-.15 G(an)144 302.4 Q 3.328<798c>-.15 G
.828
(les or directories associated to the construction command using the)
-3.328 F F1(Clean)3.327 E F0 .827(\(\) function.)B -.4(Wi)5.827 G(ll).4
E(not remo)144 314.4 Q .3 -.15(ve a)-.15 H .3 -.15(ny t).15 H(ar).15 E
(gets speci\214ed by the)-.18 E F1(NoClean)2.5 E F0(\(\) function.)A
(--cache-deb)108 343.2 Q(ug=)-.2 E/F3 10/Times-Italic@0 SF(\214le)1.91 E
F0 .153(Print deb)144 355.2 R .153(ug information about the)-.2 F F1
(CacheDir)2.653 E F0 .153(\(\) deri)B -.15(ve)-.25 G .153
(d-\214le caching to the speci\214ed).15 F F3(\214le)2.654 E F0 5.154
(.I).18 G(f)-5.154 E F3(\214le)4.564 E F0(is)2.834 E F1<ad>2.654 E F0
2.324(\(a h)144 367.2 R 2.323(yphen\), the deb)-.05 F 2.323
(ug information are printed to the standard output.)-.2 F 2.323
(The printed messages)7.323 F 2.234
(describe what signature \214le names are being look)144 379.2 R 2.235
(ed for in, retrie)-.1 F -.15(ve)-.25 G 4.735(df).15 G 2.235
(rom, or written to the)-4.735 F F1(CacheDir)144 391.2 Q F0
(\(\) directory tree.)A(--cache-disable, --no-cache)108 420 Q .08
(Disable the deri)144 432 R -.15(ve)-.25 G .08
(d-\214le caching speci\214ed by).15 F F1(CacheDir)2.58 E F0(\(\).)A F1
(scons)5.08 E F0 .08(will neither retrie)2.58 F .38 -.15(ve \214)-.25 H
.08(les from the).15 F(cache nor cop)144 444 Q 2.5<798c>-.1 G
(les to the cache.)-2.5 E(--cache-force, --cache-populate)108 472.8 Q
1.56(When using)144 484.8 R F1(CacheDir)4.061 E F0 1.561
(\(\), populate a cache by cop)B 1.561(ying an)-.1 F 4.061(ya)-.15 G
(lready-e)-4.061 E 1.561(xisting, up-to-date deri)-.15 F -.15(ve)-.25 G
(d).15 E 1.272(\214les to the cache, in addition to \214les b)144 496.8
R 1.272(uilt by this in)-.2 F -.2(vo)-.4 G 3.772(cation. This).2 F 1.271
(is useful to populate a ne)3.771 F(w)-.25 E .509
(cache with all the current deri)144 508.8 R -.15(ve)-.25 G 3.009<648c>
.15 G .509(les, or to add to the cache an)-3.009 F 3.01(yd)-.15 G(eri)
-3.01 E -.15(ve)-.25 G 3.01<648c>.15 G .51(les recently b)-3.01 F .51
(uilt with)-.2 F(caching disabled via the)144 520.8 Q F1
(--cache-disable)2.5 E F0(option.)2.5 E(--cache-sho)108 549.6 Q(w)-.25 E
1.67(When using)144 561.6 R F1(CacheDir)4.17 E F0 1.67(\(\) and retrie)B
1.669(ving a deri)-.25 F -.15(ve)-.25 G 4.169<648c>.15 G 1.669
(le from the cache, sho)-4.169 F 4.169(wt)-.25 G 1.669(he command that)
-4.169 F -.1(wo)144 573.6 S 1.833(uld ha).1 F 2.133 -.15(ve b)-.2 H
1.833(een e).15 F -.15(xe)-.15 G 1.833(cuted to b).15 F 1.833
(uild the \214le, instead of the usual report, "Retrie)-.2 F -.15(ve)
-.25 G 4.334(d`).15 G 1.834(\214le' from)-4.334 F 3.048(cache." This)144
585.6 R .548(will produce consistent output for b)3.048 F .548
(uild logs, re)-.2 F -.05(ga)-.15 G .548(rdless of whether a tar).05 F
.548(get \214le w)-.18 F(as)-.1 E(reb)144 597.6 Q(uilt or retrie)-.2 E
-.15(ve)-.25 G 2.5(df).15 G(rom the cache.)-2.5 E(--con\214g=)108 626.4
Q F3(mode).38 E F0 1.434(This speci\214es ho)144 638.4 R 3.934(wt)-.25 G
(he)-3.934 E F1(Con\214gur)3.934 E(e)-.18 E F0 1.434
(call should use or generate the results of con\214guration tests.)3.934
F(The option should be speci\214ed from among the follo)144 650.4 Q
(wing choices:)-.25 E(--con\214g=auto)108 679.2 Q .621
(scons will use its normal dependenc)144 691.2 R 3.121(ym)-.15 G .621
(echanisms to decide if a test must be reb)-3.121 F .62(uilt or not.)-.2
F(This)5.62 E(sa)144 703.2 Q -.15(ve)-.2 G 2.785(st).15 G .285
(ime by not running the same con\214guration tests e)-2.785 F -.15(ve)
-.25 G .286(ry time you in).15 F -.2(vo)-.4 G .486 -.1(ke s).2 H .286
(cons, b).1 F .286(ut will o)-.2 F -.15(ve)-.15 G -.2(r-).15 G .149
(look changes in system header \214les or e)144 715.2 R .148
(xternal commands \(such as compilers\) if you don')-.15 F 2.648(ts)-.18
G(pecify)-2.648 E(those dependecies e)144 727.2 Q(xplicitly)-.15 E 5(.T)
-.65 G(his is the def)-5 E(ault beha)-.1 E(vior)-.2 E(.)-.55 E
(July 2010)286.415 768 Q(4)209.415 E 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(--con\214g=force)108 84 Q 1.047(If this option is speci\214ed, all con\
\214guration tests will be re-run re)144 96 R -.05(ga)-.15 G 1.048
(rdless of whether the cached).05 F .253(results are out of date.)144
108 R .252(This can be used to e)5.252 F .252
(xplicitly force the con\214guration tests to be updated in)-.15 F(resp\
onse to an otherwise uncon\214gured change in a system header \214le or\
 compiler)144 120 Q(.)-.55 E(--con\214g=cache)108 148.8 Q 1.079(If this\
 option is speci\214ed, no con\214guration tests will be rerun and all \
results will be tak)144 160.8 R 1.08(en from)-.1 F 2.91(cache. Note)144
172.8 R .41(that scons will still consider it an error if --con\214g=ca\
che is speci\214ed and a necessary)2.91 F(test does not yet ha)144 184.8
Q .3 -.15(ve a)-.2 H .3 -.15(ny r).15 H(esults in the cache.).15 E(-C)
108 213.6 Q/F1 10/Times-Italic@0 SF(dir)2.5 E(ectory)-.37 E F0 5(,-).32
G(-directory=)-5 E F1(dir).35 E(ectory)-.37 E F0 .975
(Change to the speci\214ed)144 225.6 R F1(dir)3.826 E(ectory)-.37 E F0
.976(before searching for the)3.796 F F1(SConstruct)3.476 E F0(,).68 E
F1(Sconstruct)3.476 E F0 3.476(,o).68 G(r)-3.476 E F1(sconstruct)3.816 E
F0 .772(\214le, or doing an)144 237.6 R .772(ything else.)-.15 F
(Multiple)5.772 E/F2 10/Times-Bold@0 SF(-C)3.271 E F0 .771
(options are interpreted relati)3.271 F 1.071 -.15(ve t)-.25 H 3.271(ot)
.15 G .771(he pre)-3.271 F .771(vious one, and)-.25 F 2.318
(the right-most)144 249.6 R F2(-C)4.818 E F0 2.318
(option wins. \(This option is nearly equi)4.818 F -.25(va)-.25 G 2.319
(lent to).25 F F2 2.319(-f dir)4.819 F(ectory/SConstruct)-.18 E F0(,)A
-.15(ex)144 261.6 S(cept that it will search for).15 E F1(SConstruct)2.5
E F0(,).68 E F1(Sconstruct)2.5 E F0 2.5(,o).68 G(r)-2.5 E F1(sconstruct)
2.84 E F0(in the speci\214ed directory)3.18 E(.\))-.65 E(-D)108 302.4 Q
-.8(Wo)144 302.4 S .076(rks e).8 F .076(xactly the same w)-.15 F .076
(ay as the)-.1 F F2(-u)2.576 E F0 .076(option e)2.576 F .076
(xcept for the w)-.15 F .076(ay def)-.1 F .076(ault tar)-.1 F .076
(gets are handled.)-.18 F(When)5.075 E .803
(this option is used and no tar)144 314.4 R .803
(gets are speci\214ed on the command line, all def)-.18 F .803(ault tar)
-.1 F .803(gets are b)-.18 F(uilt,)-.2 E(whether or not the)144 326.4 Q
2.5(ya)-.15 G(re belo)-2.5 E 2.5(wt)-.25 G(he current directory)-2.5 E
(.)-.65 E(--deb)108 355.2 Q(ug=)-.2 E F1(type).13 E F0(Deb)144 367.2 Q
(ug the b)-.2 E(uild process.)-.2 E F1(type)5.13 E F0
(speci\214es what type of deb)2.68 E(ugging:)-.2 E(--deb)108 396 Q
(ug=count)-.2 E 1.356(Print ho)144 408 R 3.856(wm)-.25 G(an)-3.856 E
3.856(yo)-.15 G 1.355(bjects are created of the v)-3.856 F 1.355
(arious classes used internally by SCons before and)-.25 F .077
(after reading the SConscript \214les and before and after b)144 420 R
.077(uilding tar)-.2 F 2.578(gets. This)-.18 F .078
(is not supported when)2.578 F 1.451(run under Python v)144 432 R 1.451
(ersions earlier than 2.1, when SCons is e)-.15 F -.15(xe)-.15 G 1.45
(cuted with the Python).15 F F2(-O)3.95 E F0(\(opti-)3.95 E .773
(mized\) option, or when the SCons modules ha)144 444 R 1.073 -.15(ve b)
-.2 H .773(een compiled with optimization \(that is, when).15 F -.15
(exe)144 456 S(cuting from).15 E F2(*.py)2.5 E(o)-.25 E F0(\214les\).)
2.5 E(--deb)108 484.8 Q(ug=dtree)-.2 E 3.298(As)144 496.8 S(ynon)-3.298
E .798(ym for the ne)-.15 F(wer)-.25 E F2(--tr)3.298 E(ee=deri)-.18 E
-.1(ve)-.1 G(d).1 E F0 3.298(option. This)3.298 F .798
(will be deprecated in some future release)3.298 F(and ultimately remo)
144 508.8 Q -.15(ve)-.15 G(d.).15 E(--deb)108 537.6 Q(ug=e)-.2 E(xplain)
-.15 E .34(Print an e)144 549.6 R .34(xplanation of precisely wh)-.15 F
(y)-.05 E F2(scons)2.841 E F0 .341(is deciding to \(re-\)b)2.841 F .341
(uild an)-.2 F 2.841(yt)-.15 G(ar)-2.841 E 2.841(gets. \(Note: this)-.18
F(does)2.841 E(not print an)144 561.6 Q(ything for tar)-.15 E
(gets that are)-.18 E F1(not)2.86 E F0(reb)3.18 E(uilt.\))-.2 E(--deb)
108 590.4 Q(ug=\214ndlibs)-.2 E .203(Instruct the scanner that searches\
 for libraries to print a message about each potential library name)144
602.4 R(it is searching for)144 614.4 Q 2.5(,a)-.4 G
(nd about the actual libraries it \214nds.)-2.5 E(--deb)108 643.2 Q
(ug=includes)-.2 E 1.038(Print the include tree after each top-le)144
655.2 R -.15(ve)-.25 G 3.539(lt).15 G(ar)-3.539 E 1.039(get is b)-.18 F
3.539(uilt. This)-.2 F 1.039(is generally used to \214nd out what)3.539
F(\214les are included by the sources of a gi)144 667.2 Q -.15(ve)-.25 G
2.5(nd).15 G(eri)-2.5 E -.15(ve)-.25 G 2.5<648c>.15 G(le:)-2.5 E 2.5($s)
144 691.2 S(cons --deb)-2.5 E(ug=includes foo.o)-.2 E(July 2010)286.415
768 Q(5)209.415 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(--deb)108
84 Q(ug=memoizer)-.2 E .852
(Prints a summary of hits and misses using the Memoizer)144 96 R 3.352
(,a)-.4 G 3.352(ni)-3.352 G .852(nternal subsystem that counts ho)-3.352
F(w)-.25 E .081(often SCons uses cached v)144 108 R .082
(alues in memory instead of recomputing them each time the)-.25 F(y')
-.15 E .082(re needed.)-.5 F(Only a)144 120 Q -.25(va)-.2 G
(ilable when using Python 2.2 or later).25 E(.)-.55 E(--deb)108 148.8 Q
(ug=memory)-.2 E .217(Prints ho)144 160.8 R 2.717(wm)-.25 G .217(uch me\
mory SCons uses before and after reading the SConscript \214les and bef\
ore and)-2.717 F(after b)144 172.8 Q(uilding tar)-.2 E(gets.)-.18 E
(--deb)108 201.6 Q(ug=nomemoizer)-.2 E 2.5(Ad)144 213.6 S
(eprecated option preserv)-2.5 E(ed for backw)-.15 E(ards compatibility)
-.1 E(.)-.65 E(--deb)108 242.4 Q(ug=objects)-.2 E .013
(Prints a list of the v)144 254.4 R .013(arious objects of the v)-.25 F
.014(arious classes used internally by SCons.)-.25 F .014(This only w)
5.014 F(orks)-.1 E(when run under Python 2.1 or later)144 266.4 Q(.)-.55
E(--deb)108 295.2 Q(ug=pdb)-.2 E
(Re-run SCons under the control of the pdb Python deb)144 307.2 Q(ugger)
-.2 E(.)-.55 E(--deb)108 336 Q(ug=presub)-.2 E 1.193(Print the ra)144
348 R 3.692(wc)-.15 G 1.192(ommand line used to b)-3.692 F 1.192
(uild each tar)-.2 F 1.192(get before the construction en)-.18 F 1.192
(vironment v)-.4 F(ari-)-.25 E 1.03(ables are substituted.)144 360 R
1.03(Also sho)6.03 F 1.031(ws which tar)-.25 F 1.031(gets are being b)
-.18 F 1.031(uilt by this command.)-.2 F 1.031(Output looks)6.031 F
(something lik)144 372 Q 2.5(et)-.1 G(his:)-2.5 E 2.5($s)144 384 S
(cons --deb)-2.5 E(ug=presub)-.2 E(Building myprog.o with action\(s\):)
144 396 Q($SHCC $SHCFLA)149 408 Q(GS $SHCCFLA)-.4 E(GS $CPPFLA)-.4 E
(GS $_CPPINCFLA)-.4 E(GS -c -o $T)-.4 E(ARGET $SOURCES)-.93 E(...)144
420 Q(--deb)108 448.8 Q(ug=stacktrace)-.2 E(Prints an internal Python s\
tack trace when encountering an otherwise une)144 460.8 Q
(xplained error)-.15 E(.)-.55 E(--deb)108 489.6 Q(ug=stree)-.2 E 2.867
(As)144 501.6 S(ynon)-2.867 E .367(ym for the ne)-.15 F(wer)-.25 E/F1 10
/Times-Bold@0 SF(--tr)2.867 E(ee=all,status)-.18 E F0 2.866
(option. This)2.867 F .366(will be deprecated in some future release)
2.866 F(and ultimately remo)144 513.6 Q -.15(ve)-.15 G(d.).15 E(--deb)
108 542.4 Q(ug=time)-.2 E .028(Prints v)144 554.4 R .028
(arious time pro\214ling information: the time spent e)-.25 F -.15(xe)
-.15 G .029(cuting each indi).15 F .029(vidual b)-.25 F .029
(uild command;)-.2 F 1.683(the total b)144 566.4 R 1.683
(uild time \(time SCons ran from be)-.2 F 1.682
(ginning to end\); the total time spent reading and)-.15 F -.15(exe)144
578.4 S .985(cuting SConscript \214les; the total time spent SCons itse\
lf spend running \(that is, not counting).15 F 1.44(reading and e)144
590.4 R -.15(xe)-.15 G 1.44
(cuting SConscript \214les\); and both the total time spent e).15 F -.15
(xe)-.15 G 1.44(cuting all b).15 F 1.44(uild com-)-.2 F 1.13
(mands and the elapsed w)144 602.4 R 1.131(all-clock time spent e)-.1 F
-.15(xe)-.15 G 1.131(cuting those b).15 F 1.131(uild commands.)-.2 F
(\(When)6.131 E F1(scons)3.631 E F0(is)3.631 E -.15(exe)144 614.4 S .956
(cuted without the).15 F F1(-j)3.456 E F0 .956(option, the elapsed w)
3.456 F .955(all-clock time will typically be slightly longer than)-.1 F
.015(the total time spent e)144 626.4 R -.15(xe)-.15 G .015
(cuting all the b).15 F .015
(uild commands, due to the SCons processing that tak)-.2 F .015
(es place)-.1 F .638(in between e)144 638.4 R -.15(xe)-.15 G .638
(cuting each command.).15 F(When)5.638 E F1(scons)3.138 E F0 .638(is e)
3.138 F -.15(xe)-.15 G(cuted).15 E/F2 10/Times-Italic@0 SF(with)3.478 E
F0(the)3.418 E F1(-j)3.138 E F0 .638(option, and your b)3.138 F(uild)-.2
E 2.444(con\214guration allo)144 650.4 R 2.444
(ws good parallelization, the elapsed w)-.25 F 2.444
(all-clock time should be signi\214cantly)-.1 F .063
(smaller than the total time spent e)144 662.4 R -.15(xe)-.15 G .063
(cuting all the b).15 F .063(uild commands, since multiple b)-.2 F .062
(uild commands)-.2 F(and interv)144 674.4 Q
(ening SCons processing should tak)-.15 E 2.5(ep)-.1 G
(lace in parallel.\))-2.5 E(--deb)108 703.2 Q(ug=tree)-.2 E 3.546(As)144
715.2 S(ynon)-3.546 E 1.046(ym for the ne)-.15 F(wer)-.25 E F1(--tr)
3.546 E(ee=all)-.18 E F0 3.546(option. This)3.546 F 1.046
(will be deprecated in some future release and)3.546 F(ultimately remo)
144 727.2 Q -.15(ve)-.15 G(d.).15 E(July 2010)286.415 768 Q(6)209.415 E
0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(--diskcheck=)108 84 Q/F1 10/Times-Italic@0 SF(types).13 E F0 1.178(Ena\
ble speci\214c checks for whether or not there is a \214le on disk wher\
e the SCons con\214guration)144 96 R -.15(ex)144 108 S .147
(pects a directory \(or vice v).15 F .148
(ersa\), and whether or not RCS or SCCS sources e)-.15 F .148
(xist when searching)-.15 F .549(for source and include \214les.)144 120
R(The)5.549 E F1(types)3.179 E F0(ar)3.319 E .549(gument can be set to:)
-.18 F/F2 10/Times-Bold@0 SF(all)3.049 E F0 3.049(,t)C 3.049(oe)-3.049 G
.548(nable all checks e)-3.049 F(xplicitly)-.15 E .554(\(the def)144 132
R .554(ault beha)-.1 F(vior\);)-.2 E F2(none)3.054 E F0 3.054(,t)C 3.054
(od)-3.054 G .554(isable all such checks;)-3.054 F F2(match)3.054 E F0
3.054(,t)C 3.054(oc)-3.054 G .554(heck that \214les and directories)
-3.054 F .149(on disk match SCons' e)144 144 R .149
(xpected con\214guration;)-.15 F F2 -.18(rc)2.649 G(s).18 E F0 2.649(,t)
C 2.649(oc)-2.649 G .149(heck for the e)-2.649 F .148
(xistence of an RCS source for)-.15 F(an)144 156 Q 3.634(ym)-.15 G 1.134
(issing source or include \214les;)-3.634 F F2(sccs)3.635 E F0 3.635(,t)
C 3.635(oc)-3.635 G 1.135(heck for the e)-3.635 F 1.135
(xistence of an SCCS source for an)-.15 F(y)-.15 E .246
(missing source or include \214les.)144 168 R .246
(Multiple checks can be speci\214ed separated by commas; for e)5.246 F
(xam-)-.15 E(ple,)144 180 Q F2(--diskcheck=sccs,r)2.975 E(cs)-.18 E F0
-.1(wo)2.975 G .475(uld still check for SCCS and RCS sources, b).1 F
.475(ut disable the check for)-.2 F .472
(on-disk matches of \214les and directories.)144 192 R .471
(Disabling some or all of these checks can pro)5.471 F .471(vide a per)
-.15 F(-)-.2 E 1.89(formance boost for lar)144 204 R 1.891(ge con\214gu\
rations, or when the con\214guration will check for \214les and/or)-.18
F 1.62(directories across netw)144 216 R(ork)-.1 E 1.619(ed or shared \
\214le systems, at the slight increased risk of an incorrect)-.1 F -.2
(bu)144 228 S .301(ild or of not handling errors gracefully \(if includ\
e \214les really should be found in SCCS or RCS,).2 F(for e)144 240 Q
(xample, or if a \214le really does e)-.15 E
(xist where the SCons con\214guration e)-.15 E(xpects a directory\).)
-.15 E(--duplicate=)108 268.8 Q F1(ORDER)-.1 E F0 .358
(There are three w)144 280.8 R .358(ays to duplicate \214les in a b)-.1
F .357(uild tree: hard links, soft \(symbolic\) links and copies.)-.2 F
.367(The def)144 292.8 R .367(ault beha)-.1 F .368
(viour of SCons is to prefer hard links to soft links to copies. Y)-.2 F
.368(ou can specify dif-)-1.1 F .161(ferent beha)144 304.8 R .161
(viours with this option.)-.2 F F1(ORDER)5.161 E F0 .161(must be one of)
2.661 F F1(har)2.661 E(d-soft-copy)-.37 E F0 .16(\(the def)2.66 F
(ault\),)-.1 E F1(soft-har)2.66 E(d-)-.37 E(copy)144 316.8 Q F0(,).32 E
F1(har)2.69 E(d-copy)-.37 E F0(,).32 E F1(soft-copy)2.69 E F0(or)2.69 E
F1(copy)2.69 E F0 5.19(.S).32 G .19
(Cons will attempt to duplicate \214les using the mechanisms in)-5.19 F
(the speci\214ed order)144 328.8 Q(.)-.55 E(-f)108 369.6 Q F1(\214le)2.5
E F0 2.5(,-).18 G(-\214le=)-2.5 E F1(\214le)1.91 E F0 2.5(,-).18 G(-mak)
-2.5 E(e\214le=)-.1 E F1(\214le)1.91 E F0 2.5(,-).18 G(-sconstruct=)-2.5
E F1(\214le)1.91 E F0(Use)144 381.6 Q F1(\214le)5.194 E F0 .784
(as the initial SConscript \214le.)3.464 F(Multiple)5.784 E F2(-f)3.284
E F0 .784(options may be speci\214ed, in which case)3.284 F F2(scons)
3.283 E F0(will read all of the speci\214ed \214les.)144 393.6 Q
(-h, --help)108 422.4 Q .371(Print a local help message for this b)144
434.4 R .371(uild, if one is de\214ned in the SConscript \214le\(s\), p\
lus a line that)-.2 F .44(describes the)144 446.4 R F2(-H)2.94 E F0 .44
(option for command-line option help.)2.94 F .44
(If no local help message is de\214ned, prints)5.44 F 1.686
(the standard help message about command-line options.)144 458.4 R 1.687
(Exits after displaying the appropriate)6.686 F(message.)144 470.4 Q
(-H, --help-options)108 499.2 Q
(Print the standard help message about command-line options and e)144
511.2 Q(xit.)-.15 E(-i, --ignore-errors)108 540 Q
(Ignore all errors from commands e)144 552 Q -.15(xe)-.15 G
(cuted to reb).15 E(uild \214les.)-.2 E(-I)108 580.8 Q F1(dir)2.5 E
(ectory)-.37 E F0 2.5(,-).32 G(-include-dir=)-2.5 E F1(dir).35 E(ectory)
-.37 E F0 1.078(Speci\214es a)144 592.8 R F1(dir)3.928 E(ectory)-.37 E
F0 1.077(to search for imported Python modules.)3.898 F 1.077(If se)
6.077 F -.15(ve)-.25 G(ral).15 E F2(-I)3.577 E F0 1.077
(options are used, the)3.577 F
(directories are searched in the order speci\214ed.)144 604.8 Q
(--implicit-cache)108 633.6 Q .644(Cache implicit dependencies.)144
645.6 R .644(This causes)5.644 F F2(scons)3.144 E F0 .644
(to use the implicit \(scanned\) dependencies from)3.144 F .939
(the last time it w)144 657.6 R .939
(as run instead of scanning the \214les for implicit dependencies.)-.1 F
.938(This can signi\214-)5.938 F(cantly speed up SCons, b)144 669.6 Q
(ut with the follo)-.2 E(wing limitations:)-.25 E F2(scons)144 686.4 Q
F0 .89(will not detect changes to implicit dependenc)3.39 F 3.39(ys)-.15
G .89(earch paths \(e.g.)-3.39 F F2(CPPP)5.89 E -.95(AT)-.74 G(H).95 E
F0(,)A F2(LIBP)3.39 E -.95(AT)-.74 G(H).95 E F0(\))A(that w)144 698.4 Q
(ould ordinarily cause dif)-.1 E(ferent v)-.25 E
(ersions of same-named \214les to be used.)-.15 E F2(scons)144 715.2 Q
F0 .337
(will miss changes in the implicit dependencies in cases where a ne)
2.838 F 2.837(wi)-.25 G .337(mplicit dependenc)-2.837 F 2.837(yi)-.15 G
(s)-2.837 E .589(added earlier in the implicit dependenc)144 727.2 R
3.089(ys)-.15 G .589(earch path \(e.g.)-3.089 F F2(CPPP)5.589 E -.95(AT)
-.74 G(H).95 E F0(,)A F2(LIBP)3.089 E -.95(AT)-.74 G(H).95 E F0 3.09
(\)t)C .59(han a current)-3.09 F(July 2010)286.415 768 Q(7)209.415 E 0
Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(implicit dependenc)144 84 Q 2.5(yw)-.15 G(ith the same name.)-2.5 E
(--implicit-deps-changed)108 112.8 Q -.15(Fo)144 124.8 S .092(rces SCon\
s to ignore the cached implicit dependencies. This causes the implicit \
dependencies to).15 F(be rescanned and recached. This implies)144 136.8
Q/F1 10/Times-Bold@0 SF(--implicit-cache)2.5 E F0(.)A
(--implicit-deps-unchanged)108 165.6 Q -.15(Fo)144 177.6 S .712
(rce SCons to ignore changes in the implicit dependencies.).15 F .713
(This causes cached implicit depen-)5.712 F(dencies to al)144 189.6 Q
-.1(wa)-.1 G(ys be used.).1 E(This implies)5 E F1(--implicit-cache)2.5 E
F0(.)A(--interacti)108 218.4 Q -.15(ve)-.25 G .9
(Starts SCons in interacti)144 230.4 R 1.2 -.15(ve m)-.25 H 3.4
(ode. The).15 F .9(SConscript \214les are read once and a)3.4 F F1
(scons>>>)3.4 E F0 .9(prompt is)3.4 F 2.996(printed. T)144 242.4 R(ar)
-.8 E .496(gets may no)-.18 F 2.996(wb)-.25 G 2.996(er)-2.996 G(eb)
-2.996 E .496(uilt by typing commands at interacti)-.2 F .797 -.15(ve p)
-.25 H .497(rompt without ha).15 F .497(ving to)-.2 F
(re-read the SConscript \214les and re-initialize the dependenc)144
254.4 Q 2.5(yg)-.15 G(raph from scratch.)-2.5 E(SCons interacti)144
278.4 Q .3 -.15(ve m)-.25 H(ode supports the follo).15 E(wing commands:)
-.25 E F1 -.2(bu)158 307.2 S(ild).2 E/F2 10/Times-Italic@0 SF
([OPTIONS] [T).29 E(ARGETS] ...)-.5 E F0 .304(Builds the speci\214ed)188
319.2 R F2 -.5(TA)2.804 G(RGETS).5 E F0 .303
(\(and their dependencies\) with the speci\214ed SCons com-)3.384 F
(mand-line)188 331.2 Q F2(OPTIONS)2.5 E F0(.).58 E F1(b)5 E F0(and)2.5 E
F1(scons)2.5 E F0(are synon)2.5 E(yms.)-.15 E(The follo)188 355.2 Q
(wing SCons command-line options af)-.25 E(fect the)-.25 E F1 -.2(bu)2.5
G(ild).2 E F0(command:)2.5 E(--cache-deb)188 379.2 Q(ug=FILE)-.2 E
(--cache-disable, --no-cache)188 391.2 Q
(--cache-force, --cache-populate)188 403.2 Q(--cache-sho)188 415.2 Q(w)
-.25 E(--deb)188 427.2 Q(ug=TYPE)-.2 E(-i, --ignore-errors)188 439.2 Q
(-j N, --jobs=N)188 451.2 Q(-k, --k)188 463.2 Q(eep-going)-.1 E
(-n, --no-e)188 475.2 Q -.15(xe)-.15 G
(c, --just-print, --dry-run, --recon).15 E(-Q)188 487.2 Q
(-s, --silent, --quiet)188 499.2 Q(--taskmastertrace=FILE)188 511.2 Q
(--tree=OPTIONS)188 523.2 Q(An)188 552 Q 2.989(yo)-.15 G .489(ther SCon\
s command-line options that are speci\214ed do not cause errors b)-2.989
F .49(ut ha)-.2 F -.15(ve)-.2 G .819(no ef)188 564 R .819(fect on the)
-.25 F F1 -.2(bu)3.319 G(ild).2 E F0 .818(command \(mainly because the)
3.319 F 3.318(ya)-.15 G -.25(ff)-3.318 G .818(ect ho).25 F 3.318(wt)-.25
G .818(he SConscript \214les)-3.318 F
(are read, which only happens once at the be)188 576 Q
(ginning of interacti)-.15 E .3 -.15(ve m)-.25 H(ode\).).15 E F1(clean)
158 604.8 Q F2([OPTIONS] [T).29 E(ARGETS] ...)-.5 E F0 .07
(Cleans the speci\214ed)188 616.8 R F2 -.5(TA)2.571 G(RGETS).5 E F0 .071
(\(and their dependencies\) with the speci\214ed options.)3.151 F F1(c)
5.071 E F0(is)2.571 E 2.5(as)188 628.8 S(ynon)-2.5 E 2.5(ym. This)-.15 F
(command is itself a synon)2.5 E(ym for)-.15 E F1 -.2(bu)2.5 G
(ild --clean).2 E(exit)158 657.6 Q F0 1.41(Exits SCons interacti)188
657.6 R 1.709 -.15(ve m)-.25 H 3.909(ode. Y).15 F 1.409(ou can also e)
-1.1 F 1.409(xit by terminating input \(CTRL+D on)-.15 F
(UNIX or Linux systems, CTRL+Z on W)188 669.6 Q(indo)-.4 E
(ws systems\).)-.25 E F1(help)158 698.4 Q F2([COMMAND]).29 E F0(Pro)188
710.4 Q .716(vides a help message about the commands a)-.15 F -.25(va)
-.2 G .717(ilable in SCons interacti).25 F 1.017 -.15(ve m)-.25 H 3.217
(ode. If).15 F F2(COMMAND)187.84 722.4 Q F0(is speci\214ed,)2.78 E F1(h)
2.5 E F0(and)2.5 E F1(?)2.5 E F0(are synon)5 E(yms.)-.15 E(July 2010)
286.415 768 Q(8)209.415 E 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(shell)158 84 Q/F2 10/Times-Italic@0 SF([COMMANDLINE])
.29 E F0(Ex)188 96 Q .07(ecutes the speci\214ed)-.15 F F2(COMMANDLINE)
2.41 E F0 .07(in a subshell.)3.3 F .07(If no)5.07 F F2(COMMANDLINE)2.41
E F0 .07(is spec-)3.3 F 1.509(i\214ed, e)188 108 R -.15(xe)-.15 G 1.509
(cutes the interacti).15 F 1.809 -.15(ve c)-.25 H 1.509
(ommand interpreter speci\214ed in the).15 F F1(SHELL)4.009 E F0(en)
4.009 E(viron-)-.4 E .749(ment v)188 120 R .748
(ariable \(on UNIX and Linux systems\) or the)-.25 F F1(COMSPEC)3.248 E
F0(en)3.248 E .748(vironment v)-.4 F(ariable)-.25 E(\(on W)188 132 Q
(indo)-.4 E(ws systems\).)-.25 E F1(sh)5 E F0(and)2.5 E F1(!)2.5 E F0
(are synon)5 E(yms.)-.15 E F1 -.1(ve)158 160.8 S(rsion).1 E F0
(Prints SCons v)188 172.8 Q(ersion information.)-.15 E .174
(An empty line repeats the last typed command.)144 201.6 R .174
(Command-line editing can be used if the)5.174 F F1 -.18(re)2.674 G
(adline).18 E F0(module is a)144 213.6 Q -.25(va)-.2 G(ilable.).25 E 2.5
($s)144 237.6 S(cons --interacti)-2.5 E -.15(ve)-.25 G
(scons: Reading SConscript \214les ...)144 249.6 Q
(scons: done reading SConscript \214les.)144 261.6 Q(scons>>> b)144
273.6 Q(uild -n prog)-.2 E(scons>>> e)144 285.6 Q(xit)-.15 E(-j)108
314.4 Q F2(N)2.5 E F0 2.5(,-)1.1 G(-jobs=)-2.5 E F2(N).7 E F0 1.762
(Speci\214es the number of jobs \(commands\) to run simultaneously)144
326.4 R 6.761(.I)-.65 G 4.261(ft)-6.761 G 1.761(here is more than one)
-4.261 F F1(-j)4.261 E F0(option, the last one is ef)144 338.4 Q(fecti)
-.25 E -.15(ve)-.25 G(.).15 E(-k, --k)108 367.2 Q(eep-going)-.1 E .259
(Continue as much as possible after an error)144 379.2 R 5.259(.T)-.55 G
.259(he tar)-5.259 F .259(get that f)-.18 F .26
(ailed and those that depend on it will)-.1 F(not be remade, b)144 391.2
Q(ut other tar)-.2 E
(gets speci\214ed on the command line will still be processed.)-.18 E
(-m)108 444 Q(Ignored for compatibility with non-GNU v)144 444 Q
(ersions of)-.15 E F1(mak)2.5 E(e)-.1 E F0(.)A(--max-drift=)108 472.8 Q
F2(SECONDS).33 E F0 .496(Set the maximum e)144 484.8 R .495
(xpected drift in the modi\214cation time of \214les to)-.15 F F2
(SECONDS)2.995 E F0 5.495(.T).58 G .495(his v)-5.495 F .495(alue deter)
-.25 F(-)-.2 E .323(mines ho)144 496.8 R 2.823(wl)-.25 G .324(ong a \
\214le must be unmodi\214ed before its cached content signature will be\
 used instead)-2.823 F .13(of calculating a ne)144 508.8 R 2.63(wc)-.25
G .13(ontent signature \(MD5 checksum\) of the \214le')-2.63 F 2.63(sc)
-.55 G 2.63(ontents. The)-2.63 F(def)2.63 E .13(ault v)-.1 F .13
(alue is)-.25 F 2.773(2d)144 520.8 S .273
(ays, which means a \214le must ha)-2.773 F .573 -.15(ve a m)-.2 H .273
(odi\214cation time of at least tw).15 F 2.773(od)-.1 G .273
(ays ago in order to ha)-2.773 F -.15(ve)-.2 G 1.16
(its cached content signature used.)144 532.8 R 3.659(An)6.159 G -2.25
-.15(eg a)-3.659 H(ti).15 E 1.459 -.15(ve v)-.25 H 1.159
(alue means to ne)-.1 F -.15(ve)-.25 G 3.659(rc).15 G 1.159
(ache the content signature)-3.659 F .076(and to ignore the cached v)144
544.8 R .076(alue if there already is one. A v)-.25 F .077
(alue of 0 means to al)-.25 F -.1(wa)-.1 G .077(ys use the cached).1 F
(signature, no matter ho)144 556.8 Q 2.5(wo)-.25 G(ld the \214le is.)
-2.5 E(--md5-chunksize=)108 585.6 Q F2(KILOBYTES).43 E F0 1.161
(Set the block size used to compute MD5 signatures to)144 597.6 R F2
(KILOBYTES)3.661 E F0 6.16(.T).58 G 1.16(his v)-6.16 F 1.16
(alue determines the)-.25 F .881(size of the chunks which are read in a\
t once when computing MD5 signatures.)144 609.6 R .881(Files belo)5.881
F 3.381(wt)-.25 G(hat)-3.381 E .196(size are fully stored in memory bef\
ore performing the signature computation while bigger \214les are)144
621.6 R .542(read in block-by-block. A huge block-size leads to high me\
mory consumption while a v)144 633.6 R .543(ery small)-.15 F
(block-size slo)144 645.6 Q(ws do)-.25 E(wn the b)-.25 E
(uild considerably)-.2 E(.)-.65 E 1.292(The def)144 669.6 R 1.292
(ault v)-.1 F 1.292(alue is to use a chunk size of 64 kilobytes, which \
should be appropriate for most)-.25 F(uses.)144 681.6 Q(July 2010)
286.415 768 Q(9)209.415 E 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(-n, --just-print, --dry-run, --recon)108 84 Q .684(No e)144 96 R -.15
(xe)-.15 G 3.184(cute. Print).15 F .684(the commands that w)3.184 F .684
(ould be e)-.1 F -.15(xe)-.15 G .684(cuted to b).15 F .684(uild an)-.2 F
3.184(yo)-.15 G .684(ut-of-date tar)-3.184 F .684(get \214les, b)-.18 F
(ut)-.2 E(do not e)144 108 Q -.15(xe)-.15 G(cute the commands.).15 E
(--no-site-dir)108 136.8 Q(Pre)144 148.8 Q -.15(ve)-.25 G .756
(nts the automatic addition of the standard).15 F/F1 10/Times-Italic@0
SF(site_scons)3.596 E F0 .756(dir to)3.526 F F1(sys.path)3.256 E F0
5.756(.A).28 G .756(lso pre)-5.756 F -.15(ve)-.25 G .756(nts loading).15
F(the)144 160.8 Q F1(site_scons/site_init.py)2.955 E F0 .116
(module if it e)2.935 F .116(xists, and pre)-.15 F -.15(ve)-.25 G .116
(nts adding).15 F F1(site_scons/site_tools)2.956 E F0 .116(to the tool-)
2.886 F(path.)144 172.8 Q(--pro\214le=)108 213.6 Q F1(\214le)1.91 E F0
.381(Run SCons under the Python pro\214ler and sa)144 225.6 R .681 -.15
(ve t)-.2 H .381(he results in the speci\214ed).15 F F1(\214le)2.881 E
F0 5.381(.T).18 G .381(he results may be)-5.381 F
(analyzed using the Python pstats module.)144 237.6 Q(-q, --question)108
266.4 Q .345(Do not run an)144 278.4 R 2.845(yc)-.15 G .345
(ommands, or print an)-2.845 F 2.845(ything. Just)-.15 F .345
(return an e)2.845 F .345(xit status that is zero if the speci\214ed)
-.15 F(tar)144 290.4 Q(gets are already up to date, non-zero otherwise.)
-.18 E(-Q)108 307.2 Q .604
(Quiets SCons status messages about reading SConscript \214les, b)144
307.2 R .603(uilding tar)-.2 F .603(gets and entering direc-)-.18 F 2.5
(tories. Commands)144 319.2 R(that are e)2.5 E -.15(xe)-.15 G
(cuted to reb).15 E(uild tar)-.2 E(get \214les are still printed.)-.18 E
(--random)108 360 Q .2(Build dependencies in a random order)144 372 R
5.201(.T)-.55 G .201(his is useful when b)-5.201 F .201
(uilding multiple trees simultaneously)-.2 F .06
(with caching enabled, to pre)144 384 R -.15(ve)-.25 G .06
(nt multiple b).15 F .06(uilds from simultaneously trying to b)-.2 F .06
(uild or retrie)-.2 F .36 -.15(ve t)-.25 H(he).15 E(same tar)144 396 Q
(get \214les.)-.18 E(-s, --silent, --quiet)108 424.8 Q 3.574(Silent. Do)
144 436.8 R 1.074(not print commands that are e)3.574 F -.15(xe)-.15 G
1.074(cuted to reb).15 F 1.074(uild tar)-.2 F 1.075(get \214les.)-.18 F
1.075(Also suppresses SCons)6.075 F(status messages.)144 448.8 Q
(-S, --no-k)108 477.6 Q(eep-going, --stop)-.1 E
(Ignored for compatibility with GNU)144 489.6 Q/F2 10/Times-Bold@0 SF
(mak)2.5 E(e)-.1 E F0(.)A(--site-dir=)108 518.4 Q F1(dir).35 E F0 2.597
(Uses the named dir as the site dir rather than the def)144 530.4 R
(ault)-.1 E F1(site_scons)5.436 E F0(dir)5.366 E 7.596(.T)-.55 G 2.596
(his dir will get)-7.596 F 1.35(prepended to)144 542.4 R F1(sys.path)
3.85 E F0 3.85(,t).28 G 1.351(he module)-3.85 F F1(dir)3.851 E F0
(/site_init.p).73 E 3.851(yw)-.1 G 1.351(ill get loaded if it e)-3.851 F
1.351(xists, and)-.15 F F1(dir)3.851 E F0(/site_tools).73 E
(will get added to the def)144 554.4 Q(ault toolpath.)-.1 E
(--stack-size=)108 583.2 Q F1(KILOBYTES).43 E F0 .451
(Set the size stack used to run threads to)144 595.2 R F1(KILOBYTES)
2.951 E F0 5.451(.T).58 G .45(his v)-5.451 F .45
(alue determines the stack size of the)-.25 F 1.416
(threads used to run jobs.)144 607.2 R 1.416
(These are the threads that e)6.416 F -.15(xe)-.15 G 1.417
(cute the actions of the b).15 F 1.417(uilders for the)-.2 F .42
(nodes that are out-of-date.)144 619.2 R .419
(Note that this option has no ef)5.42 F .419(fect unless the)-.25 F F2
(num_jobs)2.919 E F0 .419(option, which)2.919 F 1.226
(corresponds to -j and --jobs, is lar)144 631.2 R 1.226(ger than one.)
-.18 F 1.226(Using a stack size that is too small may cause)6.226 F
1.738(stack o)144 643.2 R -.15(ve)-.15 G(r\215o).15 E 4.238(we)-.25 G
4.237(rrors. This)-4.238 F 1.737(usually sho)4.237 F 1.737(ws up as se)
-.25 F 1.737(gmentation f)-.15 F 1.737(aults that cause scons to abort)
-.1 F .076(before b)144 655.2 R .076(uilding an)-.2 F 2.576
(ything. Using)-.15 F 2.576(as)2.576 G .076(tack size that is too lar)
-2.576 F .077(ge will cause scons to use more memory)-.18 F
(than required and may slo)144 667.2 Q 2.5(wd)-.25 G -.25(ow)-2.5 G 2.5
(nt).25 G(he entire b)-2.5 E(uild process.)-.2 E 1.227(The def)144 691.2
R 1.227(ault v)-.1 F 1.226(alue is to use a stack size of 256 kilobytes\
, which should be appropriate for most)-.25 F 2.5(uses. Y)144 703.2 R
(ou should not need to increase this v)-1.1 E
(alue unless you encounter stack o)-.25 E -.15(ve)-.15 G(r\215o).15 E
2.5(we)-.25 G(rrors.)-2.5 E(July 2010)286.415 768 Q(10)204.415 E 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(-t, --touch)108 84 Q .008(Ignored for compatibility with GNU)144 96 R
/F1 10/Times-Bold@0 SF(mak)2.508 E(e)-.1 E F0 5.008(.\()C -.8(To)-5.008
G .008(uching a \214le to mak).8 F 2.508(ei)-.1 G 2.508(ta)-2.508 G .008
(ppear up-to-date is unnec-)-2.508 F(essary when using)144 108 Q F1
(scons)2.5 E F0(.\))A(--taskmastertrace=)108 136.8 Q/F2 10
/Times-Italic@0 SF(\214le)1.91 E F0 1.173
(Prints trace information to the speci\214ed)144 148.8 R F2(\214le)5.582
E F0 1.172(about ho)3.852 F 3.672(wt)-.25 G 1.172(he internal T)-3.672 F
1.172(askmaster object e)-.8 F -.25(va)-.25 G(luates).25 E .313
(and controls the order in which Nodes are b)144 160.8 R 2.813(uilt. A)
-.2 F .314(\214le name of)2.813 F F1(-)2.814 E F0 .314
(may be used to specify the stan-)2.814 F(dard output.)144 172.8 Q
(-tree=)108 201.6 Q F2(options).23 E F0 .473
(Prints a tree of the dependencies after each top-le)144 213.6 R -.15
(ve)-.25 G 2.973(lt).15 G(ar)-2.973 E .473(get is b)-.18 F 2.973
(uilt. This)-.2 F .472(prints out some or all of)2.973 F(the tree, in v)
144 225.6 Q(arious formats, depending on the)-.25 E F2(options)2.73 E F0
(speci\214ed:)2.77 E(--tree=all)108 254.4 Q 1.003
(Print the entire dependenc)144 266.4 R 3.503(yt)-.15 G 1.003
(ree after each top-le)-3.503 F -.15(ve)-.25 G 3.503(lt).15 G(ar)-3.503
E 1.003(get is b)-.18 F 3.504(uilt. This)-.2 F 1.004
(prints out the complete)3.504 F(dependenc)144 278.4 Q 2.5(yt)-.15 G
(ree, including implicit dependencies and ignored dependencies.)-2.5 E
(--tree=deri)108 307.2 Q -.15(ve)-.25 G(d).15 E
(Restricts the tree output to only deri)144 319.2 Q -.15(ve)-.25 G 2.5
(d\().15 G(tar)-2.5 E(get\) \214les, not source \214les.)-.18 E
(--tree=status)108 348 Q
(Prints status information for each displayed node.)144 360 Q
(--tree=prune)108 388.8 Q .936(Prunes the tree to a)144 400.8 R -.2(vo)
-.2 G .936(id repeating dependenc).2 F 3.436(yi)-.15 G .936
(nformation for nodes that ha)-3.436 F 1.235 -.15(ve a)-.2 H .935
(lready been dis-).15 F 3.412(played. An)144 412.8 R 3.412(yn)-.15 G
.912(ode that has already been displayed will ha)-3.412 F 1.212 -.15
(ve i)-.2 H .912(ts name printed in).15 F F1([squar)3.412 E 3.412(eb)
-.18 G(rack-)-3.412 E(ets])144 424.8 Q F0 2.529(,a)C 2.529(sa)-2.529 G
2.529(ni)-2.529 G .029(ndication that the dependencies for that node ca\
n be found by searching for the rele)-2.529 F -.25(va)-.25 G(nt).25 E
(output higher up in the tree.)144 436.8 Q
(Multiple options may be speci\214ed, separated by commas:)144 465.6 Q
2.5(#P)144 489.6 S(rints only deri)-2.5 E -.15(ve)-.25 G 2.5<648c>.15 G
(les, with status information:)-2.5 E(scons --tree=deri)144 501.6 Q -.15
(ve)-.25 G(d,status).15 E 2.5(#P)144 525.6 S
(rints all dependencies of tar)-2.5 E(get, with status information)-.18
E 2.5(#a)144 537.6 S(nd pruning dependencies of already-visited Nodes:)
-2.5 E(scons --tree=all,prune,status tar)144 549.6 Q(get)-.18 E
(-u, --up, --search-up)108 578.4 Q -.8(Wa)144 590.4 S .798
(lks up the directory structure until an).8 F F2 .798(SConstruct ,)3.628
F(Sconstruct)3.628 E F0(or)3.978 E F2(sconstruct)3.638 E F0 .798
(\214le is found, and)3.978 F .252
(uses that as the top of the directory tree.)144 602.4 R .252(If no tar)
5.252 F .252(gets are speci\214ed on the command line, only tar)-.18 F
(-)-.2 E(gets at or belo)144 614.4 Q 2.5(wt)-.25 G
(he current directory will be b)-2.5 E(uilt.)-.2 E(-U)108 643.2 Q -.8
(Wo)144 643.2 S .075(rks e).8 F .076(xactly the same w)-.15 F .076
(ay as the)-.1 F F1(-u)2.576 E F0 .076(option e)2.576 F .076
(xcept for the w)-.15 F .076(ay def)-.1 F .076(ault tar)-.1 F .076
(gets are handled.)-.18 F(When)5.076 E 1.135
(this option is used and no tar)144 655.2 R 1.135
(gets are speci\214ed on the command line, all def)-.18 F 1.134
(ault tar)-.1 F 1.134(gets that are)-.18 F 1.633
(de\214ned in the SConscript\(s\) in the current directory are b)144
667.2 R 1.633(uilt, re)-.2 F -.05(ga)-.15 G 1.633
(rdless of what directory the).05 F(resultant tar)144 679.2 Q
(gets end up in.)-.18 E(July 2010)286.415 768 Q(11)204.415 E 0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(-v)108 84 Q
2.5(,-)-.65 G(-v)-2.5 E(ersion)-.15 E .47(Print the)144 96 R/F1 10
/Times-Bold@0 SF(scons)2.97 E F0 -.15(ve)2.97 G .469(rsion, cop).15 F
.469(yright information, list of authors, and an)-.1 F 2.969(yo)-.15 G
.469(ther rele)-2.969 F -.25(va)-.25 G .469(nt information.).25 F
(Then e)144 108 Q(xit.)-.15 E(-w)108 136.8 Q 2.5(,-)-.65 G
(-print-directory)-2.5 E(Print a message containing the w)144 148.8 Q
(orking directory before and after other processing.)-.1 E
(--no-print-directory)108 177.6 Q -.45(Tu)144 189.6 S(rn of).45 E 2.5
(f-)-.25 G 1.3 -.65(w, e)-2.5 H -.15(ve).4 G 2.5(ni).15 G 2.5(fi)-2.5 G
2.5(tw)-2.5 G(as turned on implicitly)-2.6 E(.)-.65 E(--w)108 218.4 Q
(arn=)-.1 E/F2 10/Times-Italic@0 SF(type).13 E F0 2.5(,-).18 G(-w)-2.5 E
(arn=no-)-.1 E F2(type).13 E F0(Enable or disable w)144 230.4 Q
(arnings.)-.1 E F2(type)5.13 E F0(speci\214es the type of w)2.68 E
(arnings to be enabled or disabled:)-.1 E(--w)108 259.2 Q(arn=all, --w)
-.1 E(arn=no-all)-.1 E(Enables or disables all w)144 271.2 Q(arnings.)
-.1 E(--w)108 300 Q(arn=cache-write-error)-.1 E 2.5(,-)-.4 G(-w)-2.5 E
(arn=no-cache-write-error)-.1 E 1.866(Enables or disables w)144 312 R
1.866(arnings about errors trying to write a cop)-.1 F 4.367(yo)-.1 G
4.367(fab)-4.367 G 1.867(uilt \214le to a speci\214ed)-4.567 F F1
(CacheDir)144 324 Q F0 2.5(\(\). These)B -.1(wa)2.5 G
(rnings are disabled by def).1 E(ault.)-.1 E(--w)108 352.8 Q
(arn=corrupt-sconsign, --w)-.1 E(arn=no-corrupt-sconsign)-.1 E .969
(Enables or disables w)144 364.8 R .969(arnings about unf)-.1 F .968
(amiliar signature data in)-.1 F F1(.sconsign)3.468 E F0 3.468
(\214les. These)3.468 F -.1(wa)3.468 G(rnings).1 E(are enabled by def)
144 376.8 Q(ault.)-.1 E(--w)108 405.6 Q(arn=dependenc)-.1 E 1.3 -.65
(y, -)-.15 H(-w).65 E(arn=no-dependenc)-.1 E(y)-.15 E
(Enables or disables w)144 417.6 Q(arnings about dependencies.)-.1 E
(These w)5 E(arnings are disabled by def)-.1 E(ault.)-.1 E(--w)108 446.4
Q(arn=deprecated, --w)-.1 E(arn=no-deprecated)-.1 E .933
(Enables or disables all w)144 458.4 R .934
(arnings about use of currently deprecated features.)-.1 F .934(These w)
5.934 F .934(arnings are)-.1 F .537(enabled by def)144 470.4 R 3.037
(ault. Note)-.1 F .537(that the)3.037 F F1(--war)3.037 E(n=no-depr)-.15
E(ecated)-.18 E F0 .536(option does not disable w)3.037 F .536
(arnings about)-.1 F .606(absolutely all deprecated features.)144 482.4
R -.8(Wa)5.606 G .607(rnings for some deprecated features that ha).8 F
.907 -.15(ve a)-.2 H .607(lready been).15 F .52(through se)144 494.4 R
-.15(ve)-.25 G .52(ral releases with deprecation w).15 F .519
(arnings may be mandatory for a release or tw)-.1 F 3.019(ob)-.1 G
(efore)-3.019 E(the)144 506.4 Q 2.953(ya)-.15 G .453(re of)-2.953 F .453
(\214cially no longer supported by SCons.)-.25 F -.8(Wa)5.453 G .453
(rnings for some speci\214c deprecated features).8 F
(may be enabled or disabled indi)144 518.4 Q(vidually; see belo)-.25 E
-.65(w.)-.25 G(--w)144 547.2 Q(arn=deprecated-cop)-.1 E 1.3 -.65(y, -)
-.1 H(-w).65 E(arn=no-deprecated-cop)-.1 E(y)-.1 E
(Enables or disables w)180 559.2 Q(arnings about use of the deprecated)
-.1 E F1(en)2.5 E -.7(v.)-.4 G(Copy\(\)).7 E F0(method.)2.5 E(--w)144
588 Q(arn=deprecated-source-signatures, --w)-.1 E
(arn=no-deprecated-source-signatures)-.1 E .124(Enables or disables w)
180 600 R .124(arnings about use of the deprecated)-.1 F F1(Sour)2.623 E
(ceSignatur)-.18 E(es\(\))-.18 E F0 .123(function or)2.623 F F1(en)180
612 Q -.7(v.)-.4 G(Sour).7 E(ceSignatur)-.18 E(es\(\))-.18 E F0(method.)
2.5 E(--w)144 640.8 Q(arn=deprecated-tar)-.1 E(get-signatures, --w)-.18
E(arn=no-deprecated-tar)-.1 E(get-signatures)-.18 E .251
(Enables or disables w)180 652.8 R .251
(arnings about use of the deprecated)-.1 F F1 -.92(Ta)2.751 G -.1(rg).92
G(etSignatur).1 E(es\(\))-.18 E F0 .251(function or)2.751 F F1(en)180
664.8 Q -.7(v.)-.4 G -.92(Ta).7 G -.1(rg).92 G(etSignatur).1 E(es\(\))
-.18 E F0(method.)2.5 E(--w)108 693.6 Q(arn=duplicate-en)-.1 E
(vironment, --w)-.4 E(arn=no-duplicate-en)-.1 E(vironment)-.4 E .605
(Enables or disables w)144 705.6 R .605
(arnings about attempts to specify a b)-.1 F .604(uild of a tar)-.2 F
.604(get with tw)-.18 F 3.104(od)-.1 G(if)-3.104 E .604(ferent con-)-.25
F(struction en)144 717.6 Q(vironments that use the same action.)-.4 E
(These w)5 E(arnings are enabled by def)-.1 E(ault.)-.1 E(July 2010)
286.415 768 Q(12)204.415 E 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(--w)108 84
Q(arn=fortran-cxx-mix, --w)-.1 E(arn=no-fortran-cxx-mix)-.1 E 1.426
(Enables or disables the speci\214c w)144 96 R 1.426
(arning about linking F)-.1 F 1.426
(ortran and C++ object \214les in a single)-.15 F -.15(exe)144 108 S
(cutable, which can yield unpredictable beha).15 E
(vior with some compilers.)-.2 E(--w)108 136.8 Q
(arn=future-deprecated, --w)-.1 E(arn=no-future-deprecated)-.1 E .41
(Enables or disables w)144 148.8 R .409
(arnings about features that will be deprecated in the future.)-.1 F
.409(These w)5.409 F(arnings)-.1 E .589(are disabled by def)144 160.8 R
3.089(ault. Enabling)-.1 F .589(this w)3.089 F .589
(arning is especially recommended for projects that redis-)-.1 F(trib)
144 172.8 Q .516(ute SCons con\214gurations for other users to b)-.2 F
.516(uild, so that the project can be w)-.2 F .515(arned as soon as)-.1
F(possible about to-be-deprecated features that may require changes to \
the con\214guration.)144 184.8 Q(--w)108 213.6 Q(arn=link, --w)-.1 E
(arn=no-link)-.1 E(Enables or disables w)144 225.6 Q
(arnings about link steps.)-.1 E(--w)108 254.4 Q(arn=misleading-k)-.1 E
-.15(ey)-.1 G -.1(wo).15 G(rds, --w).1 E(arn=no-misleading-k)-.1 E -.15
(ey)-.1 G -.1(wo).15 G(rds).1 E .01(Enables or disables w)144 266.4 R
.01(arnings about use of the misspelled k)-.1 F -.15(ey)-.1 G -.1(wo).15
G(rds).1 E/F1 10/Times-Bold@0 SF(tar)2.51 E(gets)-.1 E F0(and)2.51 E F1
(sour)2.51 E(ces)-.18 E F0 .01(when call-)2.51 F .026(ing Builders.)144
278.4 R .026(\(Note the last)5.026 F F1(s)2.526 E F0 .025
(characters, the correct spellings are)2.525 F F1(tar)2.525 E(get)-.1 E
F0(and)2.525 E F1(sour)2.525 E(ce.\))-.18 E F0 .025(These w)5.025 F
(arn-)-.1 E(ings are enabled by def)144 290.4 Q(ault.)-.1 E(--w)108
319.2 Q(arn=missing-sconscript, --w)-.1 E(arn=no-missing-sconscript)-.1
E 2.001(Enables or disables w)144 331.2 R 2.002
(arnings about missing SConscript \214les.)-.1 F 2.002(These w)7.002 F
2.002(arnings are enabled by)-.1 F(def)144 343.2 Q(ault.)-.1 E(--w)108
372 Q(arn=no-md5-module, --w)-.1 E(arn=no-no-md5-module)-.1 E .821
(Enables or disables w)144 384 R .821(arnings about the v)-.1 F .821
(ersion of Python not ha)-.15 F .82(ving an MD5 checksum module)-.2 F
-.2(av)144 396 S 2.5(ailable. These)-.05 F -.1(wa)2.5 G
(rnings are enabled by def).1 E(ault.)-.1 E(--w)108 424.8 Q
(arn=no-metaclass-support, --w)-.1 E(arn=no-no-metaclass-support)-.1 E
1.36(Enables or disables w)144 436.8 R 1.36(arnings about the v)-.1 F
1.36(ersion of Python not supporting metaclasses when the)-.15 F F1
(--deb)144 448.8 Q(ug=memoizer)-.2 E F0(option is used.)2.5 E(These w)5
E(arnings are enabled by def)-.1 E(ault.)-.1 E(--w)108 477.6 Q
(arn=no-object-count, --w)-.1 E(arn=no-no-object-count)-.1 E 1.362
(Enables or disables w)144 489.6 R 1.362(arnings about the)-.1 F F1
(--deb)3.862 E(ug=object)-.2 E F0 1.361(feature not w)3.862 F 1.361
(orking when)-.1 F F1(scons)3.861 E F0 1.361(is run)3.861 F(with the p)
144 501.6 Q(ython)-.1 E F1<ad4f>2.5 E F0
(option or from optimized Python \(.p)2.5 E(yo\) modules.)-.1 E(--w)108
530.4 Q(arn=no-parallel-support, --w)-.1 E(arn=no-no-parallel-support)
-.1 E .376(Enables or disables w)144 542.4 R .376(arnings about the v)
-.1 F .377(ersion of Python not being able to support parallel b)-.15 F
(uilds)-.2 E(when the)144 554.4 Q F1(-j)2.5 E F0(option is used.)2.5 E
(These w)5 E(arnings are enabled by def)-.1 E(ault.)-.1 E(--w)108 583.2
Q(arn=p)-.1 E(ython-v)-.1 E(ersion, --w)-.15 E(arn=no-p)-.1 E(ython-v)
-.1 E(ersion)-.15 E .292(Enables or disables the w)144 595.2 R .291
(arning about running SCons with a deprecated v)-.1 F .291
(ersion of Python.)-.15 F(These)5.291 E -.1(wa)144 607.2 S
(rnings are enabled by def).1 E(ault.)-.1 E(--w)108 636 Q(arn=reserv)-.1
E(ed-v)-.15 E(ariable, --w)-.25 E(arn=no-reserv)-.1 E(ed-v)-.15 E
(ariable)-.25 E 2.445(Enables or disables w)144 648 R 2.445
(arnings about attempts to set the reserv)-.1 F 2.445(ed construction v)
-.15 F 2.445(ariable names)-.25 F F1(CHANGED_SOURCES)144 660 Q F0(,)A F1
(CHANGED_T)11.818 E(ARGETS)-.9 E F0(,)A F1 -.9(TA)11.818 G(RGET).9 E F0
(,)A F1 -.9(TA)11.817 G(RGETS).9 E F0(,)A F1(SOURCE)11.817 E F0(,)A F1
(SOURCES)144 672 Q F0(,)A F1(UNCHANGED_SOURCES)4.178 E F0(or)4.178 E F1
(UNCHANGED_T)4.178 E(ARGETS)-.9 E F0 6.678(.T)C 1.679(hese w)-6.678 F
1.679(arnings are)-.1 F(disabled by def)144 684 Q(ault.)-.1 E(July 2010)
286.415 768 Q(13)204.415 E 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(--w)108 84
Q(arn=stack-size, --w)-.1 E(arn=no-stack-size)-.1 E .247
(Enables or disables w)144 96 R .246(arnings about requests to set the \
stack size that could not be honored.)-.1 F(These)5.246 E -.1(wa)144 108
S(rnings are enabled by def).1 E(ault.)-.1 E(-Y)108 148.8 Q/F1 10
/Times-Italic@0 SF -.37(re)2.5 G(pository).37 E F0 2.5(,-).32 G
(-repository=)-2.5 E F1 -.37(re)C(pository).37 E F0 2.5(,-).32 G
(-srcdir=)-2.5 E F1 -.37(re)C(pository).37 E F0 .135
(Search the speci\214ed repository for an)144 160.8 R 2.635(yi)-.15 G
.135(nput and tar)-2.635 F .135
(get \214les not found in the local directory hierar)-.18 F(-)-.2 E(ch)
144 172.8 Q 3.894 -.65(y. M)-.05 H(ultiple).65 E/F2 10/Times-Bold@0 SF
(-Y)2.594 E F0 .094(options may be speci\214ed, in which case the repos\
itories are searched in the order)2.594 F(speci\214ed.)144 184.8 Q/F3
10.95/Times-Bold@0 SF(CONFIGURA)72 213.6 Q(TION FILE REFERENCE)-1.04 E
F2(Construction En)87 225.6 Q(vir)-.4 E(onments)-.18 E F0 3.085(Ac)108
237.6 S .585(onstruction en)-3.085 F .585(vironment is the basic means \
by which the SConscript \214les communicate b)-.4 F .585(uild informa-)
-.2 F(tion to)108 249.6 Q F2(scons)2.5 E F0 5(.A)C(ne)-2.5 E 2.5(wc)-.25
G(onstruction en)-2.5 E(vironment is created using the)-.4 E F2(En)2.5 E
(vir)-.4 E(onment)-.18 E F0(function:)2.5 E(en)144 273.6 Q 2.5(v=E)-.4 G
-.4(nv)-2.5 G(ironment\(\)).4 E -1.11(Va)108 297.6 S 1.652
(riables, called)1.11 F F1 1.892(construction variables)4.352 F F0 4.152
(,m).27 G 1.652(ay be set in a construction en)-4.152 F 1.651
(vironment either by specifying)-.4 F(them as k)108 309.6 Q -.15(ey)-.1
G -.1(wo).15 G(rds when the object is created or by assigning them a v)
.1 E(alue after the object is created:)-.25 E(en)144 333.6 Q 2.5(v=E)-.4
G -.4(nv)-2.5 G(ironment\(FOO = 'foo'\)).4 E(en)144 345.6 Q(v['B)-.4 E
(AR'] = 'bar')-.35 E 1.25(As a con)108 369.6 R -.15(ve)-.4 G 1.25
(nience, construction v).15 F 1.25
(ariables may also be set or modi\214ed by the)-.25 F F1(par)5 E
(se_\215a)-.1 E(gs)-.1 E F0 -.1(ke)4.02 G(yw)-.05 E 1.25(ord ar)-.1 F
(gu-)-.18 E .006(ment, which applies the)108 381.6 R F2 -.1(Pa)2.506 G
(rseFlags).1 E F0 .006(method \(described belo)2.506 F .006
(w\) to the ar)-.25 F .006(gument v)-.18 F .006
(alue after all other process-)-.25 F .006(ing is completed.)108 393.6 R
.006(This is useful either if the e)5.006 F .006
(xact content of the \215ags is unkno)-.15 F .006(wn \(for e)-.25 F .006
(xample, read from a)-.15 F
(control \214le\) or if the \215ags are distrib)108 405.6 Q
(uted to a number of construction v)-.2 E(ariables.)-.25 E(en)144 429.6
Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(parse_\215ags = '-Iinclude -DEB)
.4 E(UG -lm'\))-.1 E(This e)108 453.6 Q(xample adds 'include' to)-.15 E
F2(CPPP)2.5 E -.95(AT)-.74 G(H).95 E F0 2.5(,')C(EB)-2.5 E(UG' to)-.1 E
F2(CPPDEFINES)2.5 E F0 2.5(,a)C(nd 'm' to)-2.5 E F2(LIBS)2.5 E F0(.)A
1.2(By def)108 477.6 R 1.2(ault, a ne)-.1 F 3.7(wc)-.25 G 1.2
(onstruction en)-3.7 F 1.199(vironment is initialized with a set of b)
-.4 F 1.199(uilder methods and construction)-.2 F -.25(va)108 489.6 S
1.316(riables that are appropriate for the current platform.).25 F 1.317
(An optional platform k)6.316 F -.15(ey)-.1 G -.1(wo).15 G 1.317(rd ar)
.1 F 1.317(gument may be)-.18 F(used to specify that an en)108 501.6 Q
(vironment should be initialized for a dif)-.4 E(ferent platform:)-.25 E
(en)144 525.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(platform = 'c).4 E
(ygwin'\))-.15 E(en)144 537.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(platform = 'os2'\)).4 E(en)144 549.6 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(platform = 'posix'\)).4 E(en)144 561.6 Q 2.5(v=E)-.4 G
-.4(nv)-2.5 G(ironment\(platform = 'win32'\)).4 E .13
(Specifying a platform initializes the appropriate construction v)108
585.6 R .129(ariables in the en)-.25 F .129(vironment to use and gener)
-.4 F(-)-.2 E(ate \214le names with pre\214x)108 597.6 Q(es and suf)-.15
E<8c78>-.25 E(es appropriate for the platform.)-.15 E 1.222
(Note that the)108 621.6 R F2(win32)3.723 E F0 1.223(platform adds the)
3.723 F F2(SystemDri)3.723 E -.1(ve)-.1 G F0(and)3.823 E F2(SystemRoot)
3.723 E F0 -.25(va)3.723 G 1.223(riables from the user').25 F 3.723(se)
-.55 G(xternal)-3.873 E(en)108 633.6 Q 1.222
(vironment to the construction en)-.4 F(vironment')-.4 E(s)-.55 E F2
(ENV)3.722 E F0(dictionary)3.722 E 6.222(.T)-.65 G 1.221
(his is so that an)-6.222 F 3.721(ye)-.15 G -.15(xe)-3.871 G 1.221
(cuted commands).15 F .526(that use sock)108 645.6 R .526(ets to connec\
t with other systems \(such as fetching source \214les from e)-.1 F .527
(xternal CVS repository)-.15 F .209(speci\214cations lik)108 657.6 R(e)
-.1 E F2(:pser)2.709 E -.1(ve)-.1 G(r:anonymous@cvs.sour).1 E(cef)-.18 E
(or)-.25 E(ge.net:/cvsr)-.1 E(oot/scons)-.18 E F0 2.709(\)w)C .209
(ill w)-2.709 F .208(ork on W)-.1 F(indo)-.4 E .208(ws sys-)-.25 F
(tems.)108 669.6 Q .991(The platform ar)108 693.6 R .991
(gument may be function or callable object, in which case the En)-.18 F
.992(vironment\(\) method will)-.4 F(call the speci\214ed ar)108 705.6 Q
(gument to update the ne)-.18 E 2.5(wc)-.25 G(onstruction en)-2.5 E
(vironment:)-.4 E(def my_platform\(en)144 729.6 Q(v\):)-.4 E(July 2010)
286.415 768 Q(14)204.415 E 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)154 84 Q
(v['V)-.4 E(AR'] = 'xyzzy')-1.35 E(en)144 108 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(platform = my_platform\)).4 E(Additionally)108 132 Q
2.682(,as)-.65 G .181
(peci\214c set of tools with which to initialize the en)-2.682 F .181
(vironment may be speci\214ed as an optional)-.4 F -.1(ke)108 144 S(yw)
-.05 E(ord ar)-.1 E(gument:)-.18 E(en)144 168 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(tools = ['msvc', ').4 E(le)-.1 E(x']\))-.15 E(Non-b)108
192 Q(uilt-in tools may be speci\214ed using the toolpath ar)-.2 E
(gument:)-.18 E(en)144 216 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(tools = [').4 E(def)-.5 E(ault', 'foo'], toolpath = [')-.1 E
(tools']\))-.18 E .849
(This looks for a tool speci\214cation in tools/foo.p)108 240 R 3.349
(y\()-.1 G .85(as well as using the ordinary def)-3.349 F .85
(ault tools for the plat-)-.1 F 3.734(form\). foo.p)108 252 R 3.734(ys)
-.1 G 1.234(hould ha)-3.734 F 1.534 -.15(ve t)-.2 H 1.433 -.1(wo f).15 H
1.233(unctions: generate\(en).1 F 2.533 -.65(v, *)-.4 H 1.233
(*kw\) and e).65 F(xists\(en)-.15 E 3.733(v\). The)-.4 F/F1 10
/Times-Bold@0 SF(generate\(\))3.733 E F0(function)3.733 E 1.347
(modi\214es the passed-in en)108 264 R 1.348(vironment to set up v)-.4 F
1.348(ariables so that the tool can be e)-.25 F -.15(xe)-.15 G 1.348
(cuted; it may use an).15 F(y)-.15 E -.1(ke)108 276 S(yw)-.05 E .15
(ord ar)-.1 F .15(guments that the user supplies \(see belo)-.18 F .15
(w\) to v)-.25 F .15(ary its initialization.)-.25 F(The)5.15 E F1
(exists\(\))2.65 E F0 .15(function should)2.65 F .048(return a true v)
108 288 R .048(alue if the tool is a)-.25 F -.25(va)-.2 G 2.548
(ilable. T).25 F .048(ools in the toolpath are used before an)-.8 F
2.548(yo)-.15 G 2.548(ft)-2.548 G .048(he b)-2.548 F .049(uilt-in ones.)
-.2 F -.15(Fo)5.049 G(r).15 E -.15(ex)108 300 S .611
(ample, adding gcc.p).15 F 3.111(yt)-.1 G 3.111(ot)-3.111 G .611
(he toolpath w)-3.111 F .611(ould o)-.1 F -.15(ve)-.15 G .611
(rride the b).15 F .611(uilt-in gcc tool.)-.2 F .61
(Also note that the toolpath is)5.61 F(stored in the en)108 312 Q
(vironment for use by later calls to)-.4 E F1(Clone)2.5 E F0(\(\) and)A
F1 -.92(To)2.5 G(ol).92 E F0(\(\) methods:)A(base = En)144 336 Q
(vironment\(toolpath=['custom_path']\))-.4 E(deri)144 348 Q -.15(ve)-.25
G 2.5(d=b).15 G(ase.Clone\(tools=['custom_tool']\))-2.5 E(deri)144 360 Q
-.15(ve)-.25 G(d.CustomBuilder\(\)).15 E .929(The elements of the tools\
 list may also be functions or callable objects, in which case the En)
108 384 R(vironment\(\))-.4 E
(method will call the speci\214ed elements to update the ne)108 396 Q
2.5(wc)-.25 G(onstruction en)-2.5 E(vironment:)-.4 E(def my_tool\(en)144
420 Q(v\):)-.4 E(en)154 432 Q(v['XYZZY'] = 'xyzzy')-.4 E(en)144 456 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(tools = [my_tool]\)).4 E .747
(The indi)108 480 R .746
(vidual elements of the tools list may also themselv)-.25 F .746
(es be tw)-.15 F .746(o-element lists of the form \()-.1 F/F2 10
/Times-Italic@0 SF(toolname).13 E F0(,).18 E F2(kw_dict)108.36 492 Q F0
2.524(\). SCons).68 F .024(searches for the)2.524 F F2(toolname)2.654 E
F0 .024(speci\214cation \214le as described abo)2.704 F -.15(ve)-.15 G
2.525(,a).15 G .025(nd passes)-2.525 F F2(kw_dict)2.525 E F0 2.525(,w)
.68 G(hich)-2.525 E .117(must be a dictionary)108 504 R 2.617(,a)-.65 G
2.617(sk)-2.617 G -.15(ey)-2.717 G -.1(wo).15 G .117(rd ar).1 F .117
(guments to the tool')-.18 F(s)-.55 E F1(generate)2.617 E F0 2.617
(function. The)2.617 F F1(generate)2.617 E F0 .116(function can use)
2.617 F .858(the ar)108 516 R .858(guments to modify the tool')-.18 F
3.358(sb)-.55 G(eha)-3.358 E .858(vior by setting up the en)-.2 F .858
(vironment in dif)-.4 F .858(ferent w)-.25 F .859(ays or otherwise)-.1 F
(changing its initialization.)108 528 Q 2.5(#i)144 552 S 2.5(nt)-2.5 G
(ools/my_tool.p)-2.5 E(y:)-.1 E(def generate\(en)144 564 Q 1.3 -.65
(v, *)-.4 H(*kw\):).65 E 2.5(#S)149 576 S(ets MY_T)-2.5 E(OOL to the v)
-.18 E(alue of k)-.25 E -.15(ey)-.1 G -.1(wo).15 G(rd ar).1 E
(gument 'ar)-.18 E(g1' or 1.)-.18 E(en)149 588 Q(v['MY_T)-.4 E(OOL)-.18
E('] = kw)-.92 E(.get\('ar)-.65 E(g1', '1'\))-.18 E(def e)144 600 Q
(xists\(en)-.15 E(v\):)-.4 E(return 1)149 612 Q 2.5(#i)144 636 S 2.5(nS)
-2.5 G(Construct:)-2.5 E(en)144 648 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(tools = [').4 E(def)-.5 E(ault', \('my_tool', {'ar)-.1 E
(g1': 'abc'}\)],)-.18 E(toolpath=[')189 660 Q(tools']\))-.18 E 1.003
(The tool de\214nition \(i.e. my_tool\(\)\) can use the PLA)108 684 R
1.003(TFORM v)-1.11 F 1.002(ariable from the en)-.25 F 1.002
(vironment it recei)-.4 F -.15(ve)-.25 G 3.502(st).15 G(o)-3.502 E
(customize the tool for dif)108 696 Q(ferent platforms.)-.25 E 1.056(If\
 no tool list is speci\214ed, then SCons will auto-detect the installed\
 tools using the P)108 720 R -1.11(AT)-.92 G 3.556(Hv)1.11 G 1.057
(ariable in the)-3.806 F(July 2010)286.415 768 Q(15)204.415 E 0 Cg EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 1.747
(ENV construction v)108 84 R 1.747
(ariable and the platform name when the En)-.25 F 1.747
(vironment is constructed. Changing the)-.4 F -.92(PA)108 96 S(TH v)-.19
E(ariable after the En)-.25 E
(vironment is constructed will not cause the tools to be redetected.)-.4
E(SCons supports the follo)108 120 Q
(wing tool speci\214cations out of the box:)-.25 E(386asm)144 144 Q
(aixc++)144 156 Q(aixcc)144 168 Q(aixf77)144 180 Q(aixlink)144 192 Q(ar)
144 204 Q(as)144 216 Q(bcc32)144 228 Q(c++)144 240 Q(cc)144 252 Q(cvf)
144 264 Q(dmd)144 276 Q(dvipdf)144 288 Q(dvips)144 300 Q(f77)144 312 Q
(f90)144 324 Q(f95)144 336 Q(fortran)144 348 Q(g++)144 360 Q(g77)144 372
Q -.05(ga)144 384 S(s).05 E(gcc)144 396 Q(gfortran)144 408 Q(gnulink)144
420 Q(gs)144 432 Q(hpc++)144 444 Q(hpcc)144 456 Q(hplink)144 468 Q(icc)
144 480 Q(icl)144 492 Q<698d>144 504 Q(ifort)144 516 Q(ilink)144 528 Q
(ilink32)144 540 Q(intelc)144 552 Q(jar)144 564 Q(ja)144 576 Q -.25(va)
-.2 G(c).25 E(ja)144 588 Q -.25(va)-.2 G(h).25 E(late)144 600 Q(x)-.15 E
(le)144 612 Q(x)-.15 E(link)144 624 Q(linkloc)144 636 Q(m4)144 648 Q
(masm)144 660 Q(midl)144 672 Q(mingw)144 684 Q(mslib)144 696 Q(mslink)
144 708 Q(mssdk)144 720 Q(July 2010)286.415 768 Q(16)204.415 E 0 Cg EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(msvc)144 84
Q(msvs)144 96 Q(mwcc)144 108 Q(mwld)144 120 Q(nasm)144 132 Q(pd\215ate)
144 144 Q(x)-.15 E(pdfte)144 156 Q(x)-.15 E(qt)144 168 Q(rmic)144 180 Q
(rpcgen)144 192 Q(sgiar)144 204 Q(sgic++)144 216 Q(sgicc)144 228 Q
(sgilink)144 240 Q(sunar)144 252 Q(sunc++)144 264 Q(suncc)144 276 Q
(sunf77)144 288 Q(sunf90)144 300 Q(sunf95)144 312 Q(sunlink)144 324 Q
(swig)144 336 Q(tar)144 348 Q(te)144 360 Q(x)-.15 E(te)144 372 Q
(xt\214le)-.15 E(tlib)144 384 Q(yacc)144 396 Q(zip)144 408 Q
(Additionally)108 432 Q 3.178(,t)-.65 G .678(here is a "tool" named)
-3.178 F/F1 10/Times-Bold@0 SF(default)3.179 E F0 .679
(which con\214gures the en)3.179 F .679(vironment with a def)-.4 F .679
(ault set of tools)-.1 F(for the current platform.)108 444 Q 2.524
(On posix and c)108 468 R 2.523(ygwin platforms the GNU tools \(e.g. gc\
c\) are preferred by SCons, on W)-.15 F(indo)-.4 E 2.523(ws the)-.25 F
.658(Microsoft tools \(e.g. msvc\) follo)108 480 R .658
(wed by MinGW are preferred by SCons, and in OS/2 the IBM tools \(e.g.)
-.25 F(icc\) are preferred by SCons.)108 492 Q F1(Builder Methods)87
520.8 Q F0 1.115
(Build rules are speci\214ed by calling a construction en)108 532.8 R
(vironment')-.4 E 3.614(sb)-.55 G 1.114(uilder methods.)-3.814 F 1.114
(The ar)6.114 F 1.114(guments to the)-.18 F -.2(bu)108 544.8 S .549
(ilder methods are).2 F F1(tar)3.049 E(get)-.1 E F0 .549
(\(a list of tar)3.049 F .549(gets to be b)-.18 F .549
(uilt, usually \214le names\) and)-.2 F F1(sour)3.049 E(ce)-.18 E F0
.549(\(a list of sources to)3.049 F(be b)108 556.8 Q
(uilt, usually \214le names\).)-.2 E .477
(Because long lists of \214le names can lead to a lot of quoting,)108
580.8 R F1(scons)2.976 E F0 .476(supplies a)2.976 F F1(Split\(\))2.976 E
F0 .476(global function and a)2.976 F 1.014(same-named en)108 592.8 R
1.015(vironment method that split a single string into a list, separate\
d on strings of white-space)-.4 F 2.506(characters. \(These)108 604.8 R
.006(are similar to the string.split\(\) method from the standard Pytho\
n library)2.506 F 2.505(,b)-.65 G .005(ut w)-2.705 F .005(ork e)-.1 F
-.15(ve)-.25 G 2.505(ni).15 G(f)-2.505 E(the input isn')108 616.8 Q 2.5
(tas)-.18 G(tring.\))-2.5 E(Lik)108 640.8 Q 2.638(ea)-.1 G .138
(ll Python ar)-2.638 F .138(guments, the tar)-.18 F .138
(get and source ar)-.18 F .138(guments to a b)-.18 F .139
(uilder method can be speci\214ed either with)-.2 F .199
(or without the "tar)108 652.8 R .198(get" and "source" k)-.18 F -.15
(ey)-.1 G -.1(wo).15 G 2.698(rds. When).1 F .198(the k)2.698 F -.15(ey)
-.1 G -.1(wo).15 G .198(rds are omitted, the tar).1 F .198
(get is \214rst, follo)-.18 F(wed)-.25 E(by the source.)108 664.8 Q
(The follo)5 E(wing are equi)-.25 E -.25(va)-.25 G(lent e).25 E
(xamples of calling the Program b)-.15 E(uilder method:)-.2 E(en)144
688.8 Q -.65(v.)-.4 G(Program\('bar', ['bar).65 E(.c', 'foo.c']\))-.55 E
(en)144 700.8 Q -.65(v.)-.4 G(Program\('bar', Split\('bar).65 E
(.c foo.c'\)\))-.55 E(en)144 712.8 Q -.65(v.)-.4 G(Program\('bar', en)
.65 E -.65(v.)-.4 G(Split\('bar).65 E(.c foo.c'\)\))-.55 E(en)144 724.8
Q -.65(v.)-.4 G(Program\(source =).65 E(['bar)5 E(.c', 'foo.c'], tar)
-.55 E(get = 'bar'\))-.18 E(July 2010)286.415 768 Q(17)204.415 E 0 Cg EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)144 84 Q
-.65(v.)-.4 G(Program\(tar).65 E(get = 'bar', Split\('bar)-.18 E
(.c foo.c'\)\))-.55 E(en)144 96 Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'bar', en)-.18 E -.65(v.)-.4 G(Split\('bar).65 E(.c foo.c'\)\))
-.55 E(en)144 108 Q -.65(v.)-.4 G
(Program\('bar', source = string.split\('bar).65 E(.c foo.c'\)\))-.55 E
-.8(Ta)108 132 S -.18(rg).8 G .7(et and source \214le names that are no\
t absolute path names \(that is, do not be).18 F .701(gin with)-.15 F/F1
10/Times-Bold@0 SF(/)3.201 E F0 .701(on POSIX sys-)3.201 F .365(tems or)
108 144 R .365(on W)5.73 F(indo)-.4 E .365
(ws systems, with or without an optional dri)-.25 F .665 -.15(ve l)-.25
H .365(etter\) are interpreted relati).15 F .665 -.15(ve t)-.25 H 2.865
(ot).15 G .365(he direc-)-2.865 F .122(tory containing the)108 156 R F1
(SConscript)2.622 E F0 .122(\214le being read.)2.622 F .123(An initial)
5.122 F F1(#)2.623 E F0 .123
(\(hash mark\) on a path name means that the rest)2.623 F .074
(of the \214le name is interpreted relati)108 168 R .373 -.15(ve t)-.25
H 2.573(ot).15 G .073(he directory containing the top-le)-2.573 F -.15
(ve)-.25 G(l).15 E F1(SConstruct)2.573 E F0 .073(\214le, e)2.573 F -.15
(ve)-.25 G 2.573(ni).15 G 2.573(ft)-2.573 G(he)-2.573 E F1(#)2.573 E F0
(is follo)108 180 Q
(wed by a directory separator character \(slash or backslash\).)-.25 E
(Examples:)108 204 Q 2.5(#T)144 228 S(he comments describing the tar)
-2.5 E(gets that will be b)-.18 E(uilt)-.2 E 2.5(#a)144 240 S
(ssume these calls are in a SConscript \214le in the)-2.5 E 2.5(#as)144
252 S(ubdirectory named "subdir".)-2.5 E 2.5(#B)144 276 S
(uilds the program "subdir/foo" from "subdir/foo.c":)-2.5 E(en)144 288 Q
-.65(v.)-.4 G(Program\('foo', 'foo.c'\)).65 E 2.5(#B)144 312 S
(uilds the program "/tmp/bar" from "subdir/bar)-2.5 E(.c":)-.55 E(en)144
324 Q -.65(v.)-.4 G(Program\('/tmp/bar', 'bar).65 E(.c'\))-.55 E 2.5(#A)
144 348 S 2.5(ni)-2.5 G(nitial '#' or '#/' are equi)-2.5 E -.25(va)-.25
G(lent; the follo).25 E(wing)-.25 E 2.5(#c)144 360 S(alls b)-2.5 E
(uild the programs "foo" and "bar" \(in the)-.2 E 2.5(#t)144 372 S
(op-le)-2.5 E -.15(ve)-.25 G 2.5(lS).15 G
(Construct directory\) from "subdir/foo.c" and)-2.5 E 2.5(#")144 384 S
(subdir/bar)-2.5 E(.c", respecti)-.55 E -.15(ve)-.25 G(ly:).15 E(en)144
396 Q -.65(v.)-.4 G(Program\('#foo', 'foo.c'\)).65 E(en)144 408 Q -.65
(v.)-.4 G(Program\('#/bar', 'bar).65 E(.c'\))-.55 E 2.5(#B)144 432 S
(uilds the program "other/foo" \(relati)-2.5 E .3 -.15(ve t)-.25 H 2.5
(ot).15 G(he top-le)-2.5 E -.15(ve)-.25 G(l).15 E 2.5(#S)144 444 S
(Construct directory\) from "subdir/foo.c":)-2.5 E(en)144 456 Q -.65(v.)
-.4 G(Program\('#other/foo', 'foo.c'\)).65 E 1.472(When the tar)108 480
R 1.472(get shares the same base name as the source and only the suf)
-.18 F 1.472(\214x v)-.25 F 1.472(aries, and if the b)-.25 F(uilder)-.2
E .04(method has a suf)108 492 R .04(\214x de\214ned for the tar)-.25 F
.04(get \214le type, then the tar)-.18 F .04(get ar)-.18 F .04
(gument may be omitted completely)-.18 F 2.54(,a)-.65 G(nd)-2.54 E F1
(scons)108 504 Q F0 1.294(will deduce the tar)3.794 F 1.294
(get \214le name from the source \214le name.)-.18 F 1.294(The follo)
6.294 F 1.294(wing e)-.25 F 1.294(xamples all b)-.15 F 1.295(uild the)
-.2 F -.15(exe)108 516 S(cutable program).15 E F1(bar)2.5 E F0
(\(on POSIX systems\) or)2.5 E F1(bar)2.5 E(.exe)-1 E F0(\(on W)2.5 E
(indo)-.4 E(ws systems\) from the bar)-.25 E(.c source \214le:)-.55 E
(en)144 540 Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'bar', source = 'bar)-.18 E(.c'\))-.55 E(en)144 552 Q -.65(v.)-.4
G(Program\('bar', source = 'bar).65 E(.c'\))-.55 E(en)144 564 Q -.65(v.)
-.4 G(Program\(source = 'bar).65 E(.c'\))-.55 E(en)144 576 Q -.65(v.)-.4
G(Program\('bar).65 E(.c'\))-.55 E .036(As a con)108 600 R -.15(ve)-.4 G
.036(nience, a).15 F F1(sr)2.536 E(cdir)-.18 E F0 -.1(ke)2.536 G(yw)-.05
E .036(ord ar)-.1 F .036
(gument may be speci\214ed when calling a Builder)-.18 F 5.035(.W)-.55 G
.035(hen speci\214ed, all)-5.035 F .056(source \214le strings that are \
not absolute paths will be interpreted relati)108 612 R .356 -.15(ve t)
-.25 H 2.556(ot).15 G .056(he speci\214ed)-2.556 F F1(sr)2.556 E(cdir)
-.18 E F0 5.056(.T)C .056(he follo)-5.056 F(w-)-.25 E .292(ing e)108 624
R .292(xample will b)-.15 F .292(uild the)-.2 F F1 -.2(bu)2.792 G
(ild/pr).2 E(og)-.18 E F0(\(or)2.792 E F1 -.2(bu)2.792 G(ild/pr).2 E(og)
-.18 E(.exe)-.15 E F0 .292(on W)2.792 F(indo)-.4 E .292
(ws\) program from the \214les)-.25 F F1(sr)2.792 E(c/f1.c)-.18 E F0
(and)2.792 E F1(sr)108 636 Q(c/f2.c)-.18 E F0(:)A(en)144 660 Q -.65(v.)
-.4 G(Program\('b).65 E(uild/prog', ['f1.c', 'f2.c'], srcdir=')-.2 E
(src'\))-.55 E .383(It is possible to o)108 684 R -.15(ve)-.15 G .383
(rride or add construction v).15 F .383(ariables when calling a b)-.25 F
.383(uilder method by passing additional)-.2 F -.1(ke)108 696 S(yw)-.05
E .116(ord ar)-.1 F 2.616(guments. These)-.18 F -.15(ove)2.616 G .116
(rridden or added v).15 F .116(ariables will only be in ef)-.25 F .115
(fect when b)-.25 F .115(uilding the tar)-.2 F .115(get, so)-.18 F(the)
108 708 Q 2.736(yw)-.15 G .236(ill not af)-2.736 F .236
(fect other parts of the b)-.25 F .236(uild. F)-.2 F .236(or e)-.15 F
.236(xample, if you w)-.15 F .236
(ant to add additional libraries for just one)-.1 F(program:)108 720 Q
(July 2010)286.415 768 Q(18)204.415 E 0 Cg EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)144 84 Q
-.65(v.)-.4 G(Program\('hello', 'hello.c', LIBS=['gl', 'glut']\)).65 E
(or generate a shared library with a non-standard suf)108 108 Q(\214x:)
-.25 E(en)144 132 Q -.65(v.)-.4 G(SharedLibrary\('w).65 E(ord', 'w)-.1 E
(ord.cpp',)-.1 E(SHLIBSUFFIX='.ocx',)189 144 Q(LIBSUFFIXES=['.ocx']\))
189 156 Q 1.768(\(Note that both the $SHLIBSUFFIX and $LIBSUFFIXES v)108
180 R 1.768(ariables must be set if you w)-.25 F 1.768(ant SCons to)-.1
F .089(search automatically for dependencies on the non-standard librar\
y names; see the descriptions of these v)108 192 R(ari-)-.25 E
(ables, belo)108 204 Q 1.3 -.65(w, f)-.25 H(or more information.\)).65 E
(It is also possible to use the)108 228 Q/F1 10/Times-Italic@0 SF(par)
3.75 E(se_\215a)-.1 E(gs)-.1 E F0 -.1(ke)2.77 G(yw)-.05 E(ord ar)-.1 E
(gument in an o)-.18 E -.15(ve)-.15 G(rride:).15 E(en)144 252 Q 2.5(v=P)
-.4 G(rogram\('hello', 'hello.c', parse_\215ags = '-Iinclude -DEB)-2.5 E
(UG -lm'\))-.1 E(This e)108 276 Q(xample adds 'include' to)-.15 E/F2 10
/Times-Bold@0 SF(CPPP)2.5 E -.95(AT)-.74 G(H).95 E F0 2.5(,')C(EB)-2.5 E
(UG' to)-.1 E F2(CPPDEFINES)2.5 E F0 2.5(,a)C(nd 'm' to)-2.5 E F2(LIBS)
2.5 E F0(.)A .48(Although the b)108 300 R .48
(uilder methods de\214ned by)-.2 F F2(scons)2.979 E F0 .479(are, in f)
2.979 F .479(act, methods of a construction en)-.1 F .479
(vironment object,)-.4 F(the)108 312 Q 2.5(ym)-.15 G
(ay also be called without an e)-2.5 E(xplicit en)-.15 E(vironment:)-.4
E(Program\('hello', 'hello.c'\))144 336 Q(SharedLibrary\('w)144 348 Q
(ord', 'w)-.1 E(ord.cpp'\))-.1 E .524
(In this case, the methods are called internally using a def)108 372 R
.525(ault construction en)-.1 F .525(vironment that consists of the)-.4
F(tools and v)108 384 Q(alues that)-.25 E F2(scons)2.5 E F0
(has determined are appropriate for the local system.)2.5 E 1.414
(Builder methods that can be called without an e)108 408 R 1.413
(xplicit en)-.15 F 1.413(vironment may be called from custom Python)-.4
F(modules that you import into an SConscript \214le by adding the follo)
108 420 Q(wing to the Python module:)-.25 E(from SCons.Script import *)
144 444 Q .143(All b)108 468 R .143(uilder methods return a list-lik)-.2
F 2.643(eo)-.1 G .144(bject containing Nodes that represent the tar)
-2.643 F .144(get or tar)-.18 F .144(gets that will be)-.18 F -.2(bu)108
480 S 2.5(ilt. A).2 F F1(Node)3.2 E F0
(is an internal SCons object which represents b)2.68 E(uild tar)-.2 E
(gets or sources.)-.18 E .617
(The returned Node-list object can be passed to other b)108 504 R .616
(uilder methods as source\(s\) or passed to an)-.2 F 3.116(yS)-.15 G
(Cons)-3.116 E .114(function or method where a \214lename w)108 516 R
.114(ould normally be accepted.)-.1 F -.15(Fo)5.114 G 2.614(re).15 G
.114(xample, if it were necessary to add)-2.764 F 2.5(as)108 528 S
(peci\214c)-2.5 E F2(-D)2.5 E F0
(\215ag when compiling one speci\214c object \214le:)2.5 E
(bar_obj_list = en)144 552 Q -.65(v.)-.4 G(StaticObject\('bar).65 E
(.c', CPPDEFINES='-DB)-.55 E(AR'\))-.35 E(en)144 564 Q -.65(v.)-.4 G
(Program\(source = ['foo.c', bar_obj_list, 'main.c']\)).65 E .109
(Using a Node in this w)108 588 R .109(ay mak)-.1 F .108
(es for a more portable b)-.1 F .108(uild by a)-.2 F -.2(vo)-.2 G .108
(iding ha).2 F .108(ving to specify a platform-speci\214c)-.2 F
(object suf)108 600 Q(\214x when calling the Program\(\) b)-.25 E
(uilder method.)-.2 E .172(Note that Builder calls will automatically "\
\215atten" the source and tar)108 624 R .173(get \214le lists, so it')
-.18 F 2.673(sa)-.55 G .173(ll right to ha)-2.673 F .473 -.15(ve t)-.2 H
(he).15 E .047(bar_obj list return by the StaticObject\(\) call in the \
middle of the source \214le list.)108 636 R .047
(If you need to manipulate a)5.047 F(list of lists returned by Builders\
 directly using Python, you can either b)108 648 Q
(uild the list by hand:)-.2 E(foo = Object\('foo.c'\))144 672 Q
(bar = Object\('bar)144 684 Q(.c'\))-.55 E(objects = ['be)144 696 Q
(gin.o'] + foo + ['middle.o'] + bar + ['end.o'])-.15 E
(for object in objects:)144 708 Q(print str\(object\))154 720 Q
(July 2010)286.415 768 Q(19)204.415 E 0 Cg EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .87
(Or you can use the)108 84 R/F1 10/Times-Bold@0 SF(Flatten)3.37 E F0
.871(\(\) function supplied by scons to create a list containing just t\
he Nodes, which)B(may be more con)108 96 Q -.15(ve)-.4 G(nient:).15 E
(foo = Object\('foo.c'\))144 120 Q(bar = Object\('bar)144 132 Q(.c'\))
-.55 E(objects = Flatten\(['be)144 144 Q(gin.o', foo, 'middle.o', bar)
-.15 E 2.5(,')-.4 G(end.o']\))-2.5 E(for object in objects:)144 156 Q
(print str\(object\))154 168 Q .709
(Note also that because Builder calls return a list-lik)108 192 R 3.209
(eo)-.1 G .709(bject, not an actual Python list, you should)-3.209 F/F2
10/Times-Italic@0 SF(not)3.568 E F0(use)3.888 E .131(the Python)108 204
R F1(+=)2.631 E F0 .131
(operator to append Builder results to a Python list.)2.631 F .131
(Because the list and the object are dif)5.131 F(fer)-.25 E(-)-.2 E
1.002(ent types, Python will not update the original list in place, b)
108 216 R 1.002(ut will instead create a ne)-.2 F 3.502(wN)-.25 G 1.002
(ode-list object)-3.502 F .45(containing the concatenation of the list \
elements and the Builder results.)108 228 R .45
(This will cause problems for an)5.45 F(y)-.15 E 1.539(other Python v)
108 240 R 1.539(ariables in your SCons con\214guration that still hold \
on to a reference to the original list.)-.25 F(Instead, use the Python)
108 252 Q F1(.extend\(\))2.5 E F0(method to mak)2.5 E 2.5(es)-.1 G
(ure the list is updated in-place.)-2.5 E(Example:)5 E
(object_\214les = [])144 276 Q 2.5(#D)144 300 S 2.5(oN)-2.5 G .8 -.4
(OT u)-2.5 H(se += as follo).4 E(ws:)-.25 E(#)144 312 Q 10(#o)144 324 S
(bject_\214les += Object\('bar)-10 E(.c'\))-.55 E(#)144 336 Q 2.5(#I)144
348 S 2.5(tw)-2.5 G(ill not update the object_\214les list in place.)
-2.5 E(#)144 360 Q 2.5(#I)144 372 S(nstead, use the .e)-2.5 E
(xtend\(\) method:)-.15 E(object_\214les.e)144 384 Q
(xtend\(Object\('bar)-.15 E(.c'\)\))-.55 E(The path name for a Node')108
420 Q 2.5<738c>-.55 G
(le may be used by passing the Node to the Python-b)-2.5 E(uiltin)-.2 E
F1(str\(\))2.5 E F0(function:)2.5 E(bar_obj_list = en)144 444 Q -.65(v.)
-.4 G(StaticObject\('bar).65 E(.c', CPPDEFINES='-DB)-.55 E(AR'\))-.35 E
(print "The path to bar_obj is:", str\(bar_obj_list[0]\))144 456 Q 2.001
(Note ag)108 480 R 2.001
(ain that because the Builder call returns a list, we ha)-.05 F 2.301
-.15(ve t)-.2 H 4.501(oa).15 G 2.001
(ccess the \214rst element in the list)-4.501 F F1(\(bar_obj_list[0]\))
108 492 Q F0
(to get at the Node that actually represents the object \214le.)2.5 E
2.485(Builder calls support a)108 516 R F1(chdir)4.985 E F0 -.1(ke)4.985
G(yw)-.05 E 2.485(ord ar)-.1 F 2.485
(gument that speci\214es that the Builder')-.18 F 4.985(sa)-.55 G 2.485
(ction\(s\) should be)-4.985 F -.15(exe)108 528 S .385
(cuted after changing directory).15 F 5.386(.I)-.65 G 2.886(ft)-5.386 G
(he)-2.886 E F1(chdir)2.886 E F0(ar)2.886 E .386
(gument is a string or a directory Node, scons will change)-.18 F .129
(to the speci\214ed directory)108 540 R 5.129(.I)-.65 G 2.629(ft)-5.129
G(he)-2.629 E F1(chdir)2.629 E F0 .129
(is not a string or Node and is non-zero, then scons will change to the)
2.629 F(tar)108 552 Q(get \214le')-.18 E 2.5(sd)-.55 G(irectory)-2.5 E
(.)-.65 E 2.5(#s)144 576 S(cons will change to the "sub" subdirectory)
-2.5 E 2.5(#b)144 588 S(efore e)-2.5 E -.15(xe)-.15 G
(cuting the "cp" command.).15 E(en)144 600 Q -.65(v.)-.4 G(Command\(')
.65 E(sub/dir/foo.out', ')-.55 E(sub/dir/foo.in',)-.55 E
("cp dir/foo.in dir/foo.out",)174 612 Q(chdir=')174 624 Q(sub'\))-.55 E
2.5(#B)144 648 S(ecause chdir is not a string, scons will change to the)
-2.5 E 2.5(#t)144 660 S(ar)-2.5 E(get')-.18 E 2.5(sd)-.55 G
(irectory \("sub/dir"\) before e)-2.5 E -.15(xe)-.15 G(cuting the).15 E
2.5(#")144 672 S(cp" command.)-2.5 E(en)144 684 Q -.65(v.)-.4 G
(Command\(').65 E(sub/dir/foo.out', ')-.55 E(sub/dir/foo.in',)-.55 E
("cp foo.in foo.out",)174 696 Q(chdir=1\))174 708 Q(July 2010)286.415
768 Q(20)204.415 E 0 Cg EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .606
(Note that scons will)108 84 R/F1 10/Times-Italic@0 SF(not)3.466 E F0
.606(automatically modify its e)3.786 F .607(xpansion of construction v)
-.15 F .607(ariables lik)-.25 F(e)-.1 E/F2 10/Times-Bold@0 SF($T)3.107 E
(ARGET)-.9 E F0(and)3.107 E F2($SOURCE)108 96 Q F0 .005
(when using the chdir k)2.505 F -.15(ey)-.1 G -.1(wo).15 G .005(rd ar).1
F .004(gument--that is, the e)-.18 F .004
(xpanded \214le names will still be relati)-.15 F .304 -.15(ve t)-.25 H
(o).15 E .278(the top-le)108 108 R -.15(ve)-.25 G 2.778(lS).15 G .278
(Construct directory)-2.778 F 2.778(,a)-.65 G .279
(nd consequently incorrect relati)-2.778 F .579 -.15(ve t)-.25 H 2.779
(ot).15 G .279(he chdir directory)-2.779 F 5.279(.I)-.65 G 2.779(fy)
-5.279 G .279(ou use the)-2.779 F .428(chdir k)108 120 R -.15(ey)-.1 G
-.1(wo).15 G .428(rd ar).1 F .427
(gument, you will typically need to supply a dif)-.18 F .427
(ferent command line using e)-.25 F .427(xpansions lik)-.15 F(e)-.1 E F2
(${T)108 132 Q(ARGET)-.9 E(.\214le})-.9 E F0(and)2.5 E F2
(${SOURCE.\214le})2.5 E F0
(to use just the \214lename portion of the tar)2.5 E(gets and source.)
-.18 E F2(scons)108 156 Q F0(pro)2.5 E(vides the follo)-.15 E(wing b)
-.25 E(uilder methods:)-.2 E(CFile\(\))108 196.8 Q(en)108 213.6 Q -.65
(v.)-.4 G(CFile\(\)).65 E .579(Builds a C source \214le gi)144 225.6 R
-.15(ve)-.25 G 3.079(nal).15 G .879 -.15(ex \()-3.079 H F2(.l).15 E F0
3.079(\)o)C 3.079(ry)-3.079 G .58(acc \()-3.079 F F2(.y)A F0 3.08(\)i)C
.58(nput \214le.)-3.08 F .58(The suf)5.58 F .58
(\214x speci\214ed by the $CFILE-)-.25 F .047(SUFFIX construction v)144
237.6 R .047(ariable \()-.25 F F2(.c)A F0 .047(by def)2.547 F .047
(ault\) is automatically added to the tar)-.1 F .047
(get if it is not already)-.18 F 2.5(present. Example:)144 249.6 R 2.5
(#b)144 273.6 S(uilds foo.c)-2.7 E(en)144 285.6 Q -.65(v.)-.4 G
(CFile\(tar).65 E(get = 'foo.c', source = 'foo.l'\))-.18 E 2.5(#b)144
297.6 S(uilds bar)-2.7 E(.c)-.55 E(en)144 309.6 Q -.65(v.)-.4 G
(CFile\(tar).65 E(get = 'bar', source = 'bar)-.18 E(.y'\))-.55 E
(CXXFile\(\))108 338.4 Q(en)108 355.2 Q -.65(v.)-.4 G(CXXFile\(\)).65 E
1.697(Builds a C++ source \214le gi)144 367.2 R -.15(ve)-.25 G 4.198
(nal).15 G 1.998 -.15(ex \()-4.198 H F2(.ll).15 E F0 4.198(\)o)C 4.198
(ry)-4.198 G 1.698(acc \()-4.198 F F2(.yy)A F0 4.198(\)i)C 1.698
(nput \214le.)-4.198 F 1.698(The suf)6.698 F 1.698
(\214x speci\214ed by the)-.25 F .421($CXXFILESUFFIX construction v)144
379.2 R .421(ariable \()-.25 F F2(.cc)A F0 .421(by def)2.921 F .421
(ault\) is automatically added to the tar)-.1 F .42(get if it)-.18 F
(is not already present.)144 391.2 Q(Example:)5 E 2.5(#b)144 415.2 S
(uilds foo.cc)-2.7 E(en)144 427.2 Q -.65(v.)-.4 G(CXXFile\(tar).65 E
(get = 'foo.cc', source = 'foo.ll'\))-.18 E 2.5(#b)144 439.2 S
(uilds bar)-2.7 E(.cc)-.55 E(en)144 451.2 Q -.65(v.)-.4 G(CXXFile\(tar)
.65 E(get = 'bar', source = 'bar)-.18 E(.yy'\))-.55 E -.4(DV)108 480 S
(I\(\)).4 E(en)108 496.8 Q -.65(v.)-.4 G -.4(DV).65 G(I\(\)).4 E .938
(Builds a)144 508.8 R F2(.dvi)3.438 E F0 .938(\214le from a)3.438 F F2
(.tex)3.438 E F0(,)A F2(.ltx)3.438 E F0(or)3.438 E F2(.latex)3.438 E F0
.939(input \214le.)3.438 F .939(If the source \214le suf)5.939 F .939
(\214x is)-.25 F F2(.tex)3.439 E F0(,)A F2(scons)3.439 E F0(will)3.439 E
-.15(ex)144 520.8 S .89(amine the contents of the \214le; if the string)
.15 F F2(ocumentclass)3.39 5 M F0(or)3.39 E F2(ocumentstyle)3.39 5 M F0
.89(is found, the \214le is)3.39 F .725(assumed to be a LaT)144 532.8 R
.725(eX \214le and the tar)-.7 F .725(get is b)-.18 F .725(uilt by in)
-.2 F -.2(vo)-.4 G .725(king the $LA).2 F .725(TEXCOM command line;)
-1.11 F 1.258(otherwise, the $TEXCOM command line is used.)144 544.8 R
1.258(If the \214le is a LaT)6.258 F 1.258(eX \214le, the)-.7 F F2 -.4
(DV)3.758 G(I).4 E F0 1.258(\(\) b)B(uilder)-.2 E .551
(method will also e)144 556.8 R .551(xamine the contents of the)-.15 F
F2(.aux)3.051 E F0 .551(\214le and in)3.051 F -.2(vo)-.4 G .751 -.1
(ke t).2 H .552(he $BIBTEX command line if).1 F .772(the string)144
568.8 R F2(bibdata)3.272 E F0 .772
(is found, start $MAKEINDEX to generate an inde)3.272 F 3.272(xi)-.15 G
3.272(fa)-3.272 G F2(.ind)A F0 .771(\214le is found and)3.271 F .428
(will e)144 580.8 R .428(xamine the contents)-.15 F F2(.log)2.929 E F0
.429(\214le and re-run the $LA)2.929 F .429
(TEXCOM command if the log \214le says it is)-1.11 F(necessary)144 592.8
Q(.)-.65 E 1.82(The suf)144 616.8 R<8c78>-.25 E F2(.dvi)4.32 E F0 1.82
(\(hard-coded within T)4.32 F 1.819
(eX itself\) is automatically added to the tar)-.7 F 1.819
(get if it is not)-.18 F(already present.)144 628.8 Q(Examples:)5 E 2.5
(#b)144 652.8 S(uilds from aaa.te)-2.7 E(x)-.15 E(en)144 664.8 Q -.65
(v.)-.4 G -.4(DV).65 G(I\(tar).4 E(get = 'aaa.dvi', source = 'aaa.te)
-.18 E(x'\))-.15 E 2.5(#b)144 676.8 S(uilds bbb)-2.7 E(.dvi)-.4 E(en)144
688.8 Q -.65(v.)-.4 G -.4(DV).65 G(I\(tar).4 E
(get = 'bbb', source = 'bbb)-.18 E(.ltx'\))-.4 E 2.5(#b)144 700.8 S
(uilds from ccc.late)-2.7 E(x)-.15 E(en)144 712.8 Q -.65(v.)-.4 G -.4
(DV).65 G(I\(tar).4 E(get = 'ccc.dvi', source = 'ccc.late)-.18 E(x'\))
-.15 E(July 2010)286.415 768 Q(21)204.415 E 0 Cg EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(Install\(\))108 84 Q(en)108 100.8 Q -.65(v.)-.4 G(Install\(\)).65 E
.882(Installs one or more source \214les or directories in the speci\
\214ed tar)144 112.8 R .883(get, which must be a directory)-.18 F(.)-.65
E .164(The names of the speci\214ed source \214les or directories remai\
n the same within the destination direc-)144 124.8 R(tory)144 136.8 Q(.)
-.65 E(en)144 160.8 Q -.65(v.)-.4 G
(Install\('/usr/local/bin', source = ['foo', 'bar']\)).65 E
(InstallAs\(\))108 189.6 Q(en)108 206.4 Q -.65(v.)-.4 G(InstallAs\(\))
.65 E .239(Installs one or more source \214les or directories to speci\
\214c names, allo)144 218.4 R .239(wing changing a \214le or direc-)-.25
F .464(tory name as part of the installation.)144 230.4 R .464
(It is an error if the tar)5.464 F .464(get and source ar)-.18 F .463
(guments list dif)-.18 F(ferent)-.25 E
(numbers of \214les or directories.)144 242.4 Q(en)144 266.4 Q -.65(v.)
-.4 G(InstallAs\(tar).65 E(get = '/usr/local/bin/foo',)-.18 E
(source = 'foo_deb)179 278.4 Q(ug'\))-.2 E(en)144 290.4 Q -.65(v.)-.4 G
(InstallAs\(tar).65 E(get = ['../lib/libfoo.a', '../lib/libbar)-.18 E
(.a'],)-.55 E(source = [')179 302.4 Q(libFOO.a', ')-.1 E(libB)-.1 E
(AR.a']\))-.35 E(Jar\(\))108 331.2 Q(en)108 348 Q -.65(v.)-.4 G(Jar\(\))
.65 E .088(Builds a Ja)144 360 R .588 -.25(va a)-.2 H(rchi).25 E .389
-.15(ve \()-.25 H/F1 10/Times-Bold@0 SF(.jar).15 E F0 2.589<298c>C .089
(le from the speci\214ed list of sources.)-2.589 F(An)5.089 E 2.589(yd)
-.15 G .089(irectories in the source list)-2.589 F .425
(will be searched for)144 372 R F1(.class)2.925 E F0 2.925
(\214les\). An)2.925 F(y)-.15 E F1(.ja)2.925 E -.1(va)-.25 G F0 .424
(\214les in the source list will be compiled)3.025 F(to)5.424 E F1
(.class)2.924 E F0(\214les)2.924 E(by calling the)144 384 Q F1 -.15(Ja)
2.5 G -.1(va)-.1 G F0(\(\) Builder).1 E(.)-.55 E .518(If the $J)144 408
R .518(ARCHDIR v)-.6 F .518(alue is set, the)-.25 F F1(jar)3.018 E F0
.518(command will change to the speci\214ed directory using the)3.018 F
F1<ad43>144 420 Q F0 2.773(option. If)2.773 F($J)2.773 E .273
(ARCHDIR is not set e)-.6 F(xplicitly)-.15 E 2.773(,&)-.65 G .272
(SCons; will use the top of an)-2.773 F 2.772(ys)-.15 G .272
(ubdirectory tree)-2.772 F(in which Ja)144 432 Q -.25(va)-.2 G F1
(.class)2.75 E F0(were b)2.5 E(uilt by the)-.2 E F1 -.15(Ja)2.5 G -.1
(va)-.1 G F0(\(\) Builder).1 E(.)-.55 E .58(If the contents an)144 456 R
3.08(yo)-.15 G 3.08(ft)-3.08 G .581(he source \214les be)-3.08 F .581
(gin with the string)-.15 F F1(Manifest-V)3.081 E(ersion)-1 E F0 3.081
(,t)C .581(he \214le is assumed)-3.081 F
(to be a manifest and is passed to the)144 468 Q F1(jar)2.5 E F0
(command with the)2.5 E F1(m)2.5 E F0(option set.)2.5 E(en)144 492 Q
-.65(v.)-.4 G(Jar\(tar).65 E(get = 'foo.jar', source = 'classes'\))-.18
E(en)144 516 Q -.65(v.)-.4 G(Jar\(tar).65 E(get = 'bar)-.18 E(.jar',)
-.55 E(source = ['bar1.ja)164 528 Q -.25(va)-.2 G(', 'bar2.ja).25 E -.25
(va)-.2 G(']\)).25 E(Ja)108 556.8 Q -.25(va)-.2 G(\(\)).25 E(en)108
573.6 Q -.65(v.)-.4 G(Ja).65 E -.25(va)-.2 G(\(\)).25 E .176
(Builds one or more Ja)144 585.6 R .676 -.25(va c)-.2 H .175
(lass \214les.).25 F .175(The sources may be an)5.175 F 2.675(yc)-.15 G
.175(ombination of e)-2.675 F(xplicit)-.15 E F1(.ja)2.675 E -.1(va)-.25
G F0 .175(\214les, or)2.775 F(directory trees which will be scanned for)
144 597.6 Q F1(.ja)2.5 E -.1(va)-.25 G F0(\214les.)2.6 E .463
(SCons will parse each source)144 621.6 R F1(.ja)2.963 E -.1(va)-.25 G
F0 .464(\214le to \214nd the classes \(including inner classes\) de\214\
ned within)3.063 F .459(that \214le, and from that \214gure out the tar)
144 633.6 R(get)-.18 E F1(.class)2.959 E F0 .459
(\214les that will be created.)2.959 F .459(The class \214les will be)
5.459 F(placed underneath the speci\214ed tar)144 645.6 Q(get directory)
-.18 E(.)-.65 E .064(SCons will also search each Ja)144 669.6 R .564
-.25(va \214)-.2 H .064(le for the Ja).25 F .564 -.25(va p)-.2 H .064
(ackage name, which it assumes can be found on).25 F 2.536(al)144 681.6
S .036(ine be)-2.536 F .036(ginning with the string)-.15 F F1(package)
2.535 E F0 .035(in the \214rst column; the resulting)2.535 F F1(.class)
2.535 E F0 .035(\214les will be placed)2.535 F .112
(in a directory re\215ecting the speci\214ed package name.)144 693.6 R
-.15(Fo)5.113 G 2.613(re).15 G .113(xample, the \214le)-2.763 F F1 -.25
(Fo)2.613 G(o.ja).25 E -.1(va)-.25 G F0 .113(de\214ning a sin-)2.713 F
1.818(gle public)144 705.6 R/F2 10/Times-Italic@0 SF -1.05(Fo)4.318 G(o)
1.05 E F0 1.817(class and containing a package name of)4.497 F F2(sub)
4.657 E(.dir)-.4 E F0 1.817(will generate a corresponding)5.047 F F1
(sub/dir/F)144 717.6 Q(oo.class)-.25 E F0(class \214le.)2.5 E(July 2010)
286.415 768 Q(22)204.415 E 0 Cg EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(Examples:)
144 84 Q(en)144 108 Q -.65(v.)-.4 G(Ja).65 E -.25(va)-.2 G(\(tar).25 E
(get = 'classes', source = ')-.18 E(src'\))-.55 E(en)144 120 Q -.65(v.)
-.4 G(Ja).65 E -.25(va)-.2 G(\(tar).25 E(get = 'classes', source = [')
-.18 E(src1', ')-.55 E(src2']\))-.55 E(en)144 132 Q -.65(v.)-.4 G(Ja).65
E -.25(va)-.2 G(\(tar).25 E(get = 'classes', source = ['File1.ja)-.18 E
-.25(va)-.2 G(', 'File2.ja).25 E -.25(va)-.2 G(']\)).25 E(Ja)144 148.8 Q
.548 -.25(va s)-.2 H .048(ource \214les can use the nati).25 F .349 -.15
(ve e)-.25 H .049(ncoding for the underlying OS.).15 F .049
(Since SCons compiles in sim-)5.049 F 1.45(ple ASCII mode by def)144
160.8 R 1.449(ault, the compiler will generate w)-.1 F 1.449
(arnings about unmappable characters,)-.1 F 1.031
(which may lead to errors as the \214le is processed further)144 172.8 R
6.032(.I)-.55 G 3.532(nt)-6.032 G 1.032
(his case, the user must specify the)-3.532 F/F1 10/Times-Bold@0 SF
(LANG)144 184.8 Q F0(en)2.702 E .202(vironment v)-.4 F .201
(ariable to tell the compiler what encoding is used.)-.25 F -.15(Fo)
5.201 G 2.701(rp).15 G(ortibility)-2.701 E 2.701(,i)-.65 G(t')-2.701 E
2.701(sb)-.55 G .201(est if)-2.701 F .38
(the encoding is hard-coded so that the compile will w)144 196.8 R .381
(ork if it is done on a system with a dif)-.1 F(ferent)-.25 E(encoding.)
144 208.8 Q(en)144 232.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E
(en)144 244.8 Q(v['ENV']['LANG'] = 'en_GB.UTF-8')-.4 E(Ja)108 273.6 Q
-.25(va)-.2 G(H\(\)).25 E(en)108 290.4 Q -.65(v.)-.4 G(Ja).65 E -.25(va)
-.2 G(H\(\)).25 E .201
(Builds C header and source \214les for implementing Ja)144 302.4 R .701
-.25(va n)-.2 H(ati).25 E .501 -.15(ve m)-.25 H 2.7(ethods. The).15 F
(tar)2.7 E .2(get can be either a)-.18 F .538(directory in which the he\
ader \214les will be written, or a header \214le name which will contai\
n all of)144 314.4 R .063(the de\214nitions.)144 326.4 R .062
(The source can be the names of)5.063 F F1(.class)2.562 E F0 .062
(\214les, the names of)2.562 F F1(.ja)2.562 E -.1(va)-.25 G F0 .062
(\214les to be compiled)2.662 F(into)144 338.4 Q F1(.class)4.334 E F0
1.834(\214les by calling the)4.334 F F1 -.15(Ja)4.335 G -.1(va)-.1 G F0
1.835(\(\) b).1 F 1.835(uilder method, or the objects returned from the)
-.2 F F1 -.15(Ja)4.335 G -.1(va)-.1 G F0(\(\)).1 E -.2(bu)144 350.4 S
(ilder method.).2 E .285(If the construction v)144 374.4 R .285
(ariable $J)-.25 F -.2 -1.35(AVA C)-.6 H .285
(LASSDIR is set, either in the en)1.35 F .285
(vironment or in the call to the)-.4 F F1 -.15(Ja)144 386.4 S -.1(va)-.1
G(H).1 E F0 .063(\(\) b)B .063(uilder method itself, then the v)-.2 F
.063(alue of the v)-.25 F .063(ariable will be stripped from the be)-.25
F .064(ginning of)-.15 F(an)144 398.4 Q(y)-.15 E F1(.class)2.5 E F0
(\214le names.)2.5 E(Examples:)144 422.4 Q 2.5(#b)144 446.4 S(uilds ja)
-2.7 E -.25(va)-.2 G(_nati).25 E -.15(ve)-.25 G(.h).15 E(classes = en)
144 458.4 Q -.65(v.)-.4 G(Ja).65 E -.25(va)-.2 G(\(tar).25 E
(get = 'classdir', source = ')-.18 E(src'\))-.55 E(en)144 470.4 Q -.65
(v.)-.4 G(Ja).65 E -.25(va)-.2 G(H\(tar).25 E(get = 'ja)-.18 E -.25(va)
-.2 G(_nati).25 E -.15(ve)-.25 G(.h', source = classes\)).15 E 2.5(#b)
144 494.4 S(uilds include/package_foo.h and include/package_bar)-2.7 E
(.h)-.55 E(en)144 506.4 Q -.65(v.)-.4 G(Ja).65 E -.25(va)-.2 G(H\(tar)
.25 E(get = 'include',)-.18 E
(source = ['package/foo.class', 'package/bar)169 518.4 Q(.class']\))-.55
E 2.5(#b)144 542.4 S(uilds e)-2.7 E(xport/foo.h and e)-.15 E(xport/bar)
-.15 E(.h)-.55 E(en)144 554.4 Q -.65(v.)-.4 G(Ja).65 E -.25(va)-.2 G
(H\(tar).25 E(get = 'e)-.18 E(xport',)-.15 E
(source = ['classes/foo.class', 'classes/bar)169 566.4 Q(.class'],)-.55
E -.6(JA)169 578.4 S -.2 -1.35(VA C)-.75 H(LASSDIR = 'classes'\))1.35 E
(Library\(\))108 607.2 Q(en)108 624 Q -.65(v.)-.4 G(Library\(\)).65 E
2.5(As)144 636 S(ynon)-2.5 E(ym for the)-.15 E F1(StaticLibrary)2.5 E F0
(\(\) b)A(uilder method.)-.2 E(LoadableModule\(\))108 664.8 Q(en)108
681.6 Q -.65(v.)-.4 G(LoadableModule\(\)).65 E .84
(On most systems, this is the same as)144 693.6 R F1(Shar)3.339 E
(edLibrary)-.18 E F0 3.339(\(\). On)B .839
(Mac OS X \(Darwin\) platforms, this)3.339 F
(creates a loadable module b)144 705.6 Q(undle.)-.2 E(July 2010)286.415
768 Q(23)204.415 E 0 Cg EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(M4\(\))108
84 Q(en)108 100.8 Q -.65(v.)-.4 G(M4\(\)).65 E .716
(Builds an output \214le from an M4 input \214le.)144 112.8 R .716
(This uses a def)5.716 F .716(ault $M4FLA)-.1 F .716(GS v)-.4 F .716
(alue of)-.25 F/F1 10/Times-Bold@0 SF<ad45>3.216 E F0 3.216(,w)C(hich)
-3.216 E .824(considers all w)144 124.8 R .824(arnings to be f)-.1 F
.824(atal and stops on the \214rst w)-.1 F .823
(arning when using the GNU v)-.1 F .823(ersion of)-.15 F 2.5
(m4. Example:)144 136.8 R(en)144 160.8 Q -.65(v.)-.4 G(M4\(tar).65 E
(get = 'foo.c', source = 'foo.c.m4'\))-.18 E(Moc\(\))108 189.6 Q(en)108
206.4 Q -.65(v.)-.4 G(Moc\(\)).65 E .215(Builds an output \214le from a\
 moc input \214le. Moc input \214les are either header \214les or cxx \
\214les. This)144 218.4 R -.2(bu)144 230.4 S .631(ilder is only a).2 F
-.25(va)-.2 G .631(ilable after using the tool 'qt'. See the $QTDIR v)
.25 F .63(ariable for more information.)-.25 F(Example:)144 242.4 Q(en)
144 266.4 Q -.65(v.)-.4 G(Moc\('foo.h'\) # generates moc_foo.cc).65 E
(en)144 278.4 Q -.65(v.)-.4 G(Moc\('foo.cpp'\) # generates foo.moc).65 E
(MSVSProject\(\))108 307.2 Q(en)108 324 Q -.65(v.)-.4 G(MSVSProject\(\))
.65 E(Builds a Microsoft V)144 336 Q
(isual Studio project \214le, and by def)-.6 E(ault b)-.1 E
(uilds a solution \214le as well.)-.2 E 1.01(This b)144 360 R 1.01
(uilds a V)-.2 F 1.011(isual Studio project \214le, based on the v)-.6 F
1.011(ersion of V)-.15 F 1.011(isual Studio that is con\214gured)-.6 F
.561(\(either the latest installed v)144 372 R .561(ersion, or the v)
-.15 F .561(ersion speci\214ed by $MSVS_VERSION in the En)-.15 F(viron-)
-.4 E 1.007(ment constructor\).)144 384 R -.15(Fo)6.007 G 3.507(rV).15 G
1.007(isual Studio 6, it will generate a)-4.107 F F1(.dsp)3.508 E F0
3.508(\214le. F)3.508 F 1.008(or V)-.15 F 1.008(isual Studio 7 \(.NET\))
-.6 F(and later v)144 396 Q(ersions, it will generate a)-.15 E F1(.vcpr)
2.5 E(oj)-.18 E F0(\214le.)2.5 E .266(By def)144 420 R .265(ault, this \
also generates a solution \214le for the speci\214ed project, a)-.1 F F1
(.dsw)2.765 E F0 .265(\214le for V)2.765 F .265(isual Studio)-.6 F 5.288
(6o)144 432 S 5.288(ra)-5.288 G F1(.sln)A F0 2.788(\214le for V)5.288 F
2.788(isual Studio 7 \(.NET\).)-.6 F 2.788(This beha)7.788 F 2.788
(vior may be disabled by specifying)-.2 F F1(auto_b)144 444 Q
(uild_solution=0)-.2 E F0 1.438(when you call)3.938 F F1(MSVSPr)3.937 E
(oject)-.18 E F0 1.437(\(\), in which case you presumably w)B 1.437
(ant to)-.1 F -.2(bu)144 456 S
(ild the solution \214le\(s\) by calling the).2 E F1(MSVSSolution)2.5 E
F0(\(\) Builder \(see belo)A(w\).)-.25 E(The)144 480 Q F1(MSVSPr)4.405 E
(oject)-.18 E F0 1.905(\(\) b)B 1.905(uilder tak)-.2 F 1.905(es se)-.1 F
-.15(ve)-.25 G 1.905
(ral lists of \214lenames to be placed into the project \214le.).15 F
1.188(These are currently limited to)144 492 R F1(sr)3.687 E(cs)-.18 E
F0(,)A F1(incs)3.687 E F0(,)A F1(localincs)3.687 E F0(,)A F1 -.18(re)
3.687 G(sour).18 E(ces)-.18 E F0 3.687(,a)C(nd)-3.687 E F1(misc)3.687 E
F0 6.187(.T)C 1.187(hese are pretty self-)-6.187 F -.15(ex)144 504 S
(planatory).15 E 2.985(,b)-.65 G .485(ut it should be noted that these \
lists are added to the $SOURCES construction v)-3.185 F(ari-)-.25 E .552
(able as strings, NO)144 516 R 3.052(Ta)-.4 G 3.052(sS)-3.052 G .552
(Cons File Nodes.)-3.052 F .552(This is because the)5.552 F 3.052(yr)
-.15 G .551(epresent \214le names to be added)-3.052 F
(to the project \214le, not the source \214les used to b)144 528 Q
(uild the project \214le.)-.2 E .656(The abo)144 552 R .956 -.15
(ve \214)-.15 H .657(lename lists are all optional, although at least o\
ne must be speci\214ed for the resulting).15 F
(project \214le to be non-empty)144 564 Q(.)-.65 E
(In addition to the abo)144 588 Q .3 -.15(ve l)-.15 H(ists of v).15 E
(alues, the follo)-.25 E(wing v)-.25 E(alues may be speci\214ed:)-.25 E
F1(tar)144 612 Q(get)-.1 E F0 3.581(:T)C 1.081(he name of the tar)-3.581
F(get)-.18 E F1(.dsp)3.581 E F0(or)3.581 E F1(.vcpr)3.581 E(oj)-.18 E F0
3.581(\214le. The)3.581 F 1.08(correct suf)3.58 F 1.08(\214x for the v)
-.25 F 1.08(ersion of V)-.15 F(isual)-.6 E 1.102(Studio must be used, b)
144 624 R 1.102(ut the $MSVSPR)-.2 F 1.103(OJECTSUFFIX construction v)
-.4 F 1.103(ariable will be de\214ned to)-.25 F(the correct v)144 636 Q
(alue \(see e)-.25 E(xample belo)-.15 E(w\).)-.25 E F1 -.1(va)144 660 S
(riant).1 E F0 2.665(:T)C .165(he name of this particular v)-2.665 F
2.665(ariant. F)-.25 F .165(or V)-.15 F .165
(isual Studio 7 projects, this can also be a list of)-.6 F -.25(va)144
672 S 1.018(riant names.).25 F 1.018(These are typically things lik)
6.018 F 3.519(e")-.1 G(Deb)-3.519 E 1.019(ug" or "Release", b)-.2 F
1.019(ut really can be an)-.2 F(ything)-.15 E .123(you w)144 684 R 2.623
(ant. F)-.1 F .123(or V)-.15 F .123(isual Studio 7 projects, the)-.6 F
2.623(ym)-.15 G .122(ay also specify a tar)-2.623 F .122
(get platform separated from the)-.18 F -.25(va)144 696 S .588
(riant name by a).25 F F1(|)3.088 E F0(\(v)3.088 E .588
(ertical pipe\) character:)-.15 F F1(Deb)3.089 E(ug|Xbox)-.2 E F0 5.589
(.T)C .589(he def)-5.589 F .589(ault tar)-.1 F .589(get platform is W)
-.18 F(in32.)-.4 E .518(Multiple calls to)144 708 R F1(MSVSPr)3.018 E
(oject)-.18 E F0 .518(\(\) with dif)B .518(ferent v)-.25 F .518
(ariants are allo)-.25 F .518(wed; all v)-.25 F .518
(ariants will be added to)-.25 F
(the project \214le with their appropriate b)144 720 Q(uild tar)-.2 E
(gets and sources.)-.18 E(July 2010)286.415 768 Q(24)204.415 E 0 Cg EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF -.2(bu)144 84 S(ildtar).2 E(get)-.1 E F0 2.898(:A)C
2.898(no)-2.898 G .398
(ptional string, node, or list of strings or nodes \(one per b)-2.898 F
.399(uild v)-.2 F .399(ariant\), to tell the)-.25 F -.6(Vi)144 96 S .591
(sual Studio deb).6 F .591(ugger what output tar)-.2 F .591
(get to use in what b)-.18 F .59(uild v)-.2 F 3.09(ariant. The)-.25 F
.59(number of)3.09 F F1 -.2(bu)3.09 G(ildtar).2 E(-)-.37 E(get)144 108 Q
F0(entries must match the number of)2.5 E F1 -.1(va)2.5 G(riant).1 E F0
(entries.)2.5 E F1(run\214le)144 132 Q F0 2.582(:T)C .082
(he name of the \214le that V)-2.582 F .082
(isual Studio 7 and later will run and deb)-.6 F 2.582(ug. This)-.2 F
.083(appears as the)2.582 F -.25(va)144 144 S 1.155(lue of the).25 F F1
(Output)3.655 E F0 1.155(\214eld in the resutling V)3.655 F 1.155
(isual Studio project \214le.)-.6 F 1.154
(If this is not speci\214ed, the)6.155 F(def)144 156 Q
(ault is the same as the speci\214ed)-.1 E F1 -.2(bu)2.5 G(ildtar).2 E
(get)-.1 E F0 -.25(va)2.5 G(lue.).25 E .799
(Note that because &SCons; al)144 180 R -.1(wa)-.1 G .799(ys e).1 F -.15
(xe)-.15 G .799(cutes its b).15 F .8
(uild commands from the directory in which the)-.2 F F1(SConstruct)144
192 Q F0 1.141
(\214le is located, if you generate a project \214le in a dif)3.642 F
1.141(ferent directory than the)-.25 F F1(SCon-)3.641 E(struct)144 204 Q
F0(directory)3.075 E 3.075(,u)-.65 G .576(sers will not be able to doub\
le-click on the \214le name in compilation error mes-)-3.075 F .447
(sages displayed in the V)144 216 R .447
(isual Studio console output windo)-.6 F 4.247 -.65(w. T)-.25 H .446
(his can be remedied by adding the).65 F -.6(Vi)144 228 S .398
(sual C/C++).6 F F1(/FC)2.898 E F0 .398(compiler option to the $CCFLA)
2.898 F 2.898(GS v)-.4 F .398
(ariable so that the compiler will print the)-.25 F
(full path name of an)144 240 Q 2.5<798c>-.15 G
(les that cause compilation errors.)-2.5 E(Example usage:)144 264 Q
(barsrcs = ['bar)144 288 Q(.cpp'],)-.55 E(barincs = ['bar)144 300 Q
(.h'],)-.55 E(barlocalincs = ['StdAfx.h'])144 312 Q
(barresources = ['bar)144 324 Q(.rc',)-.55 E -.5('r)-.7 G(esource.h']).5
E(barmisc = ['bar_readme.txt'])144 336 Q(dll = en)144 360 Q -.65(v.)-.4
G(SharedLibrary\(tar).65 E(get = 'bar)-.18 E(.dll',)-.55 E
(source = barsrcs\))204 372 Q(en)144 396 Q -.65(v.)-.4 G
(MSVSProject\(tar).65 E(get = 'Bar' + en)-.18 E(v['MSVSPR)-.4 E
(OJECTSUFFIX'],)-.4 E(srcs = barsrcs,)184 408 Q(incs = barincs,)184 420
Q(localincs = barlocalincs,)184 432 Q(resources = barresources,)184 444
Q(misc = barmisc,)184 456 Q -.2(bu)184 468 S(ildtar).2 E(get = dll,)-.18
E -.25(va)184 480 S(riant = 'Release'\)).25 E(MSVSSolution\(\))108 508.8
Q(en)108 525.6 Q -.65(v.)-.4 G(MSVSSolution\(\)).65 E
(Builds a Microsoft V)144 537.6 Q(isual Studio solution \214le.)-.6 E
.732(This b)144 561.6 R .732(uilds a V)-.2 F .732
(isual Studio solution \214le, based on the v)-.6 F .732(ersion of V)
-.15 F .732(isual Studio that is con\214gured)-.6 F .402
(\(either the latest installed v)144 573.6 R .402(ersion, or the v)-.15
F .403(ersion speci\214ed by $MSVS_VERSION in the construc-)-.15 F .188
(tion en)144 585.6 R 2.687(vironment\). F)-.4 F .187(or V)-.15 F .187
(isual Studio 6, it will generate a)-.6 F F1(.dsw)2.687 E F0 2.687
(\214le. F)2.687 F .187(or V)-.15 F .187(isual Studio 7 \(.NET\), it)-.6
F(will generate a)144 597.6 Q F1(.sln)2.5 E F0(\214le.)2.5 E(The follo)
144 621.6 Q(wing v)-.25 E(alues must be speci\214ed:)-.25 E F1(tar)144
645.6 Q(get)-.1 E F0 2.753(:T)C .254(he name of the tar)-2.753 F .254
(get .dsw or .sln \214le.)-.18 F .254(The correct suf)5.254 F .254
(\214x for the v)-.25 F .254(ersion of V)-.15 F .254(isual Studio)-.6 F
.621(must be used, b)144 657.6 R .621(ut the v)-.2 F .621
(alue $MSVSSOLUTIONSUFFIX will be de\214ned to the correct v)-.25 F .62
(alue \(see)-.25 F -.15(ex)144 669.6 S(ample belo).15 E(w\).)-.25 E F1
-.1(va)144 693.6 S(riant).1 E F0 2.793(:T)C .293
(he name of this particular v)-2.793 F .294(ariant, or a list of v)-.25
F .294(ariant names \(the latter is only supported)-.25 F 1.256
(for MSVS 7 solutions\). These are typically things lik)144 705.6 R
3.756(e")-.1 G(Deb)-3.756 E 1.256(ug" or "Release", b)-.2 F 1.256
(ut really can be)-.2 F(an)144 717.6 Q .988(ything you w)-.15 F .988
(ant. F)-.1 F .988(or MSVS 7 the)-.15 F 3.489(ym)-.15 G .989
(ay also specify tar)-3.489 F .989(get platform, lik)-.18 F 3.489(et)-.1
G .989(his "Deb)-3.489 F(ug|Xbox".)-.2 E(Def)144 729.6 Q
(ault platform is W)-.1 E(in32.)-.4 E(July 2010)286.415 768 Q(25)204.415
E 0 Cg EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(pr)144 84 Q(ojects)-.18 E F0 3.707(:Al)C 1.207
(ist of project \214le names, or Project nodes returned by calls to the)
-3.707 F F1(MSVSPr)3.706 E(oject)-.18 E F0(\(\))A(Builder)144 96 Q 2.679
(,t)-.4 G 2.679(ob)-2.679 G 2.679(ep)-2.679 G .179
(laced into the solution \214le.)-2.679 F .18
(It should be noted that these \214le names are NO)5.179 F 2.68(Ta)-.4 G
(dded)-2.68 E 1.144(to the $SOURCES en)144 108 R 1.144(vironment v)-.4 F
1.144(ariable in form of \214les, b)-.25 F 1.144(ut rather as strings.)
-.2 F 1.144(This is because)8.644 F(the)144 120 Q 2.572(yr)-.15 G .073(\
epresent \214le names to be added to the solution \214le, not the sourc\
e \214les used to b)-2.572 F .073(uild the solu-)-.2 F(tion \214le.)144
132 Q(\(NO)144 156 Q
(TE: Currently only one project is supported per solution.\))-.4 E
(Example Usage:)144 180 Q(en)144 204 Q -.65(v.)-.4 G(MSVSSolution\(tar)
.65 E(get = 'Bar' + en)-.18 E(v['MSVSSOLUTIONSUFFIX'],)-.4 E
(projects = ['bar' + en)186.5 216 Q(v['MSVSPR)-.4 E(OJECTSUFFIX']],)-.4
E -.25(va)186.5 228 S(riant = 'Release'\)).25 E(Object\(\))108 256.8 Q
(en)108 273.6 Q -.65(v.)-.4 G(Object\(\)).65 E 2.5(As)144 285.6 S(ynon)
-2.5 E(ym for the)-.15 E F1(StaticObject)2.5 E F0(\(\) b)A
(uilder method.)-.2 E -.15(Pa)108 314.4 S(ckage\(\)).15 E(en)108 331.2 Q
-.65(v.)-.4 G -.15(Pa).65 G(ckage\(\)).15 E .449(Builds softw)144 343.2
R .449(are distrib)-.1 F .449(ution packages.)-.2 F -.15(Pa)5.449 G .448
(ckages consist of \214les to install and packaging informa-).15 F 3.238
(tion. The)144 355.2 R .739(former may be speci\214ed with the)3.238 F
/F2 10/Times-Italic@0 SF(sour)3.239 E(ce)-.37 E F0 .739
(parameter and may be left out, in which case)3.239 F .468
(the &FindInstalledFiles; function will collect all \214les that ha)144
367.2 R .768 -.15(ve a)-.2 H(n).15 E F1(Install)2.967 E F0 .467(\(\) or)
B F1(InstallAs)2.967 E F0 .467(\(\) Builder)B 2.861(attached. If)144
379.2 R(the)2.861 E F2(tar)2.862 E -.1(ge)-.37 G(t).1 E F0 .362
(is not speci\214ed it will be deduced from additional information gi)
2.862 F -.15(ve)-.25 G 2.862(nt).15 G 2.862(ot)-2.862 G(his)-2.862 E
(Builder)144 391.2 Q(.)-.55 E .346(The packaging information is speci\
\214ed with the help of construction v)144 415.2 R .345
(ariables documented belo)-.25 F -.65(w.)-.25 G .771(This information i\
s called a tag to stress that some of them can also be attached to \214\
les with the)144 427.2 R(&T)144 439.2 Q .133(ag; function.)-.8 F .133
(The mandatory ones will complain if the)5.133 F 2.633(yw)-.15 G .133
(ere not speci\214ed.)-2.633 F(The)5.133 E 2.632(yv)-.15 G .132
(ary depend-)-2.882 F(ing on chosen tar)144 451.2 Q(get packager)-.18 E
(.)-.55 E .065(The tar)144 475.2 R .065
(get packager may be selected with the "P)-.18 F -.4(AC)-.92 G(KA).4 E
.065(GETYPE" command line option or with the)-.4 F($P)144 487.2 Q -.4
(AC)-.92 G(KA).4 E(GETYPE construction v)-.4 E
(ariable. Currently the follo)-.25 E(wing packagers a)-.25 E -.25(va)-.2
G(ilable:).25 E 2.5(*m)146.5 511.2 S(si - Microsoft Installer)-2.5 E 2.5
(*r)146.5 523.2 S(pm - Redhat P)-2.5 E(ackage Manger)-.15 E 2.5(*i)146.5
535.2 S(pkg - Itsy P)-2.5 E(ackage Management System)-.15 E 2.5(*t)146.5
547.2 S(arbz2 - compressed tar)-2.5 E 2.5(*t)146.5 559.2 S(ar)-2.5 E
(gz - compressed tar)-.18 E 2.5(*z)146.5 571.2 S(ip - zip \214le)-2.5 E
2.5(*s)146.5 583.2 S(rc_tarbz2 - compressed tar source)-2.5 E 2.5(*s)
146.5 595.2 S(rc_tar)-2.5 E(gz - compressed tar source)-.18 E 2.5(*s)
146.5 607.2 S(rc_zip - zip \214le source)-2.5 E .522
(An updated list is al)144 631.2 R -.1(wa)-.1 G .522(ys a).1 F -.25(va)
-.2 G .521
(ilable under the "package_type" option when running "scons --help").25
F(on a project that has packaging acti)144 643.2 Q -.25(va)-.25 G(ted.)
.25 E(en)144 655.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(tools=[').4 E
(def)-.5 E(ault', 'packaging']\))-.1 E(en)144 667.2 Q -.65(v.)-.4 G
(Install\('/bin/', 'my_program'\)).65 E(en)144 679.2 Q -.65(v.)-.4 G
-.15(Pa).65 G(ckage\( N).15 E 25(AME =)-.35 F('foo',)2.5 E 17.5
(VERSION =)176.5 691.2 R('1.2.3',)2.5 E -1.06 -.92(PA C)176.5 703.2 T
(KA).92 E(GEVERSION = 0,)-.4 E -1.06 -.92(PA C)176.5 715.2 T(KA).92 E
7.5(GETYPE =)-.4 F -.5('r)2.5 G(pm',).5 E 17.5(LICENSE =)176.5 727.2 R
('gpl',)2.5 E(July 2010)286.415 768 Q(26)204.415 E 0 Cg EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(SUMMAR)
176.5 84 Q 20(Y=)-.65 G('balalalalal',)-17.5 E 7.5(DESCRIPTION =)176.5
96 R -.18('t)2.5 G(his should be really really long',).18 E(X_RPM_GR)
176.5 108 Q 7.5(OUP =)-.4 F('Application/fu',)2.5 E 10(SOURCE_URL =)
176.5 120 R('http://foo.or)2.5 E(g/foo-1.2.3.tar)-.18 E(.gz')-.55 E(\))
164 132 Q(PCH\(\))108 160.8 Q(en)108 177.6 Q -.65(v.)-.4 G(PCH\(\)).65 E
.832(Builds a Microsoft V)144 189.6 R .832(isual C++ precompiled header)
-.6 F 5.832(.C)-.55 G .832(alling this b)-5.832 F .832
(uilder method returns a list of)-.2 F(tw)144 201.6 Q 3.118(ot)-.1 G(ar)
-3.118 E .617(gets: the PCH as the \214rst element, and the object \214\
le as the second element. Normally the)-.18 F .656
(object \214le is ignored.)144 213.6 R .656(This b)5.656 F .657
(uilder method is only pro)-.2 F .657(vided when Microsoft V)-.15 F .657
(isual C++ is being)-.6 F .285(used as the compiler)144 225.6 R 5.285
(.T)-.55 G .285(he PCH b)-5.285 F .285
(uilder method is generally used in conjuction with the PCH con-)-.2 F
(struction v)144 237.6 Q
(ariable to force object \214les to use the precompiled header:)-.25 E
(en)144 261.6 Q(v['PCH'] = en)-.4 E -.65(v.)-.4 G
(PCH\('StdAfx.cpp'\)[0]).65 E(PDF\(\))108 290.4 Q(en)108 307.2 Q -.65
(v.)-.4 G(PDF\(\)).65 E .287(Builds a)144 319.2 R/F1 10/Times-Bold@0 SF
(.pdf)2.787 E F0 .287(\214le from a)2.787 F F1(.dvi)2.787 E F0 .287
(input \214le \(or)2.787 F 2.787(,b)-.4 G 2.787(ye)-2.787 G .287
(xtension, a)-2.937 F F1(.tex)2.787 E F0(,)A F1(.ltx)2.787 E F0 2.787
(,o)C(r)-2.787 E F1(.latex)2.787 E F0 .287(input \214le\).)2.787 F .287
(The suf-)5.287 F .149
(\214x speci\214ed by the $PDFSUFFIX construction v)144 331.2 R .148
(ariable \()-.25 F F1(.pdf)A F0 .148(by def)2.648 F .148
(ault\) is added automatically to)-.1 F(the tar)144 343.2 Q
(get if it is not already present.)-.18 E(Example:)5 E 2.5(#b)144 367.2
S(uilds from aaa.te)-2.7 E(x)-.15 E(en)144 379.2 Q -.65(v.)-.4 G
(PDF\(tar).65 E(get = 'aaa.pdf)-.18 E(', source = 'aaa.te).55 E(x'\))
-.15 E 2.5(#b)144 391.2 S(uilds bbb)-2.7 E(.pdf from bbb)-.4 E(.dvi)-.4
E(en)144 403.2 Q -.65(v.)-.4 G(PDF\(tar).65 E
(get = 'bbb', source = 'bbb)-.18 E(.dvi'\))-.4 E(PostScript\(\))108 432
Q(en)108 448.8 Q -.65(v.)-.4 G(PostScript\(\)).65 E .188(Builds a)144
460.8 R F1(.ps)2.688 E F0 .188(\214le from a)2.688 F F1(.dvi)2.688 E F0
.188(input \214le \(or)2.688 F 2.688(,b)-.4 G 2.688(ye)-2.688 G .188
(xtension, a)-2.838 F F1(.tex)2.688 E F0(,)A F1(.ltx)2.688 E F0 2.688
(,o)C(r)-2.688 E F1(.latex)2.688 E F0 .188(input \214le\).)2.688 F .188
(The suf)5.188 F<8c78>-.25 E .961
(speci\214ed by the $PSSUFFIX construction v)144 472.8 R .961
(ariable \()-.25 F F1(.ps)A F0 .961(by def)3.461 F .96
(ault\) is added automatically to the)-.1 F(tar)144 484.8 Q
(get if it is not already present.)-.18 E(Example:)5 E 2.5(#b)144 508.8
S(uilds from aaa.te)-2.7 E(x)-.15 E(en)144 520.8 Q -.65(v.)-.4 G
(PostScript\(tar).65 E(get = 'aaa.ps', source = 'aaa.te)-.18 E(x'\))-.15
E 2.5(#b)144 532.8 S(uilds bbb)-2.7 E(.ps from bbb)-.4 E(.dvi)-.4 E(en)
144 544.8 Q -.65(v.)-.4 G(PostScript\(tar).65 E
(get = 'bbb', source = 'bbb)-.18 E(.dvi'\))-.4 E(Program\(\))108 573.6 Q
(en)108 590.4 Q -.65(v.)-.4 G(Program\(\)).65 E .055(Builds an e)144
602.4 R -.15(xe)-.15 G .055(cutable gi).15 F -.15(ve)-.25 G 2.555(no).15
G .055(ne or more object \214les or C, C++, D, or F)-2.555 F .056
(ortran source \214les.)-.15 F .056(If an)5.056 F 2.556(yC)-.15 G(,)
-2.556 E 1.134(C++, D or F)144 614.4 R 1.134
(ortran source \214les are speci\214ed, then the)-.15 F 3.634(yw)-.15 G
1.134(ill be automatically compiled to object)-3.634 F 1.238
(\214les using the)144 626.4 R F1(Object)3.738 E F0 1.238(\(\) b)B 1.239
(uilder method; see that b)-.2 F 1.239(uilder method')-.2 F 3.739(sd)
-.55 G 1.239(escription for a list of le)-3.739 F -.05(ga)-.15 G(l).05 E
.14(source \214le suf)144 638.4 R<8c78>-.25 E .14(es and ho)-.15 F 2.64
(wt)-.25 G(he)-2.64 E 2.639(ya)-.15 G .139(re interpreted.)-2.639 F .139
(The tar)5.139 F .139(get e)-.18 F -.15(xe)-.15 G .139
(cutable \214le pre\214x \(speci\214ed by the).15 F($PR)144 650.4 Q
1.306(OGPREFIX construction v)-.4 F 1.306(ariable; nothing by def)-.25 F
1.306(ault\) and suf)-.1 F 1.307(\214x \(speci\214ed by the $PR)-.25 F
(OG-)-.4 E .377(SUFFIX construction v)144 662.4 R .377(ariable; by def)
-.25 F(ault,)-.1 E F1(.exe)2.877 E F0 .377(on W)2.877 F(indo)-.4 E .376
(ws systems, nothing on POSIX systems\))-.25 F
(are automatically added to the tar)144 674.4 Q
(get if not already present.)-.18 E(Example:)5 E(en)144 698.4 Q -.65(v.)
-.4 G(Program\(tar).65 E(get = 'foo', source = ['foo.o', 'bar)-.18 E
(.c', 'baz.f)-.55 E(']\)).55 E(July 2010)286.415 768 Q(27)204.415 E 0 Cg
EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(RES\(\))108
84 Q(en)108 100.8 Q -.65(v.)-.4 G(RES\(\)).65 E 3.151
(Builds a Microsoft V)144 112.8 R 3.151(isual C++ resource \214le.)-.6 F
3.152(This b)8.152 F 3.152(uilder method is only pro)-.2 F 3.152
(vided when)-.15 F .178(Microsoft V)144 124.8 R .178
(isual C++ or MinGW is being used as the compiler)-.6 F 2.678(.T)-.55 G
(he)-2.678 E/F1 10/Times-Bold@0 SF(.r)2.677 E(es)-.18 E F0(\(or)2.677 E
F1(.o)2.677 E F0 .177(for MinGW\) suf)2.677 F<8c78>-.25 E 1.523
(is added to the tar)144 136.8 R 1.524(get name if no other suf)-.18 F
1.524(\214x is gi)-.25 F -.15(ve)-.25 G 4.024(n. The).15 F 1.524
(source \214le is scanned for implicit)4.024 F
(dependencies as though it were a C \214le.)144 148.8 Q(Example:)5 E(en)
144 172.8 Q -.65(v.)-.4 G(RES\(').65 E(resource.rc'\))-.5 E(RMIC\(\))108
201.6 Q(en)108 218.4 Q -.65(v.)-.4 G(RMIC\(\)).65 E .334
(Builds stub and sk)144 230.4 R .334
(eleton class \214les for remote objects from Ja)-.1 F -.25(va)-.2 G F1
(.class)3.083 E F0 2.833(\214les. The)2.833 F(tar)2.833 E .333
(get is a direc-)-.18 F 1.611(tory relati)144 242.4 R 1.911 -.15(ve t)
-.25 H 4.111(ow).15 G 1.611(hich the stub and sk)-4.111 F 1.611
(eleton class \214les will be written.)-.1 F 1.612
(The source can be the)6.611 F(names of)144 254.4 Q F1(.class)2.5 E F0
(\214les, or the objects return from the)2.5 E F1 -.15(Ja)2.5 G -.1(va)
-.1 G F0(\(\) b).1 E(uilder method.)-.2 E .285(If the construction v)144
278.4 R .285(ariable $J)-.25 F -.2 -1.35(AVA C)-.6 H .285
(LASSDIR is set, either in the en)1.35 F .285
(vironment or in the call to the)-.4 F F1(RMIC)144 290.4 Q F0 .032
(\(\) b)B .032(uilder method itself, then the v)-.2 F .032
(alue of the v)-.25 F .033(ariable will be stripped from the be)-.25 F
.033(ginning of)-.15 F(an)144 302.4 Q(y)-.15 E F1(.class)2.5 E F0
(\214le names.)2.5 E(classes = en)144 326.4 Q -.65(v.)-.4 G(Ja).65 E
-.25(va)-.2 G(\(tar).25 E(get = 'classdir', source = ')-.18 E(src'\))
-.55 E(en)144 338.4 Q -.65(v.)-.4 G(RMIC\(tar).65 E
(get = 'outdir1', source = classes\))-.18 E(en)144 362.4 Q -.65(v.)-.4 G
(RMIC\(tar).65 E(get = 'outdir2',)-.18 E
(source = ['package/foo.class', 'package/bar)166.5 374.4 Q(.class']\))
-.55 E(en)144 398.4 Q -.65(v.)-.4 G(RMIC\(tar).65 E(get = 'outdir3',)
-.18 E(source = ['classes/foo.class', 'classes/bar)166.5 410.4 Q
(.class'],)-.55 E -.6(JA)166.5 422.4 S -.2 -1.35(VA C)-.75 H
(LASSDIR = 'classes'\))1.35 E(RPCGenClient\(\))108 451.2 Q(en)108 468 Q
-.65(v.)-.4 G(RPCGenClient\(\)).65 E .46
(Generates an RPC client stub \()144 480 R F1(_clnt.c)A F0 2.96<298c>C
.46(le from a speci\214ed RPC \()-2.96 F F1(.x)A F0 2.96(\)s)C .46
(ource \214le.)-2.96 F .46(Because rpcgen)5.46 F 1.056(only b)144 492 R
1.056(uilds output \214les in the local directory)-.2 F 3.556(,t)-.65 G
1.056(he command will be e)-3.556 F -.15(xe)-.15 G 1.057
(cuted in the source \214le').15 F(s)-.55 E(directory by def)144 504 Q
(ault.)-.1 E 2.5(#B)144 528 S(uilds src/rpcif_clnt.c)-2.5 E(en)144 540 Q
-.65(v.)-.4 G(RPCGenClient\(').65 E(src/rpcif.x'\))-.55 E
(RPCGenHeader\(\))108 568.8 Q(en)108 585.6 Q -.65(v.)-.4 G
(RPCGenHeader\(\)).65 E 1.424(Generates an RPC header \()144 597.6 R F1
(.h)A F0 3.924<298c>C 1.423(le from a speci\214ed RPC \()-3.924 F F1(.x)
A F0 3.923(\)s)C 1.423(ource \214le.)-3.923 F 1.423(Because rpcgen only)
6.423 F -.2(bu)144 609.6 S .71
(ilds output \214les in the local directory).2 F 3.21(,t)-.65 G .71
(he command will be e)-3.21 F -.15(xe)-.15 G .71
(cuted in the source \214le').15 F 3.21(sd)-.55 G(irec-)-3.21 E
(tory by def)144 621.6 Q(ault.)-.1 E 2.5(#B)144 645.6 S
(uilds src/rpcif.h)-2.5 E(en)144 657.6 Q -.65(v.)-.4 G(RPCGenHeader\(')
.65 E(src/rpcif.x'\))-.55 E(RPCGenService\(\))108 686.4 Q(en)108 703.2 Q
-.65(v.)-.4 G(RPCGenService\(\)).65 E .11(Generates an RPC serv)144
715.2 R(er)-.15 E(-sk)-.2 E .11(eleton \()-.1 F F1(_svc.c)A F0 2.61
<298c>C .11(le from a speci\214ed RPC \()-2.61 F F1(.x)A F0 2.61(\)s)C
.11(ource \214le.)-2.61 F .11(Because rpc-)5.11 F 1.369(gen only b)144
727.2 R 1.369(uilds output \214les in the local directory)-.2 F 3.869
(,t)-.65 G 1.37(he command will be e)-3.869 F -.15(xe)-.15 G 1.37
(cuted in the source).15 F(July 2010)286.415 768 Q(28)204.415 E 0 Cg EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(\214le')144
84 Q 2.5(sd)-.55 G(irectory by def)-2.5 E(ault.)-.1 E 2.5(#B)144 108 S
(uilds src/rpcif_svc.c)-2.5 E(en)144 120 Q -.65(v.)-.4 G
(RPCGenClient\(').65 E(src/rpcif.x'\))-.55 E(RPCGenXDR\(\))108 148.8 Q
(en)108 165.6 Q -.65(v.)-.4 G(RPCGenXDR\(\)).65 E .638
(Generates an RPC XDR routine \()144 177.6 R/F1 10/Times-Bold@0 SF(_xdr)
A(.c)-1 E F0 3.138<298c>C .638(le from a speci\214ed RPC \()-3.138 F F1
(.x)A F0 3.138(\)s)C .638(ource \214le.)-3.138 F .638(Because rpc-)5.638
F 1.369(gen only b)144 189.6 R 1.369
(uilds output \214les in the local directory)-.2 F 3.869(,t)-.65 G 1.37
(he command will be e)-3.869 F -.15(xe)-.15 G 1.37(cuted in the source)
.15 F(\214le')144 201.6 Q 2.5(sd)-.55 G(irectory by def)-2.5 E(ault.)-.1
E 2.5(#B)144 225.6 S(uilds src/rpcif_xdr)-2.5 E(.c)-.55 E(en)144 237.6 Q
-.65(v.)-.4 G(RPCGenClient\(').65 E(src/rpcif.x'\))-.55 E
(SharedLibrary\(\))108 266.4 Q(en)108 283.2 Q -.65(v.)-.4 G
(SharedLibrary\(\)).65 E .008(Builds a shared library \()144 295.2 R F1
(.so)A F0 .008(on a POSIX system,)2.508 F F1(.dll)2.508 E F0 .008(on W)
2.508 F(indo)-.4 E .008(ws\) gi)-.25 F -.15(ve)-.25 G 2.508(no).15 G
.007(ne or more object \214les or)-2.508 F 1.017(C, C++, D or F)144
307.2 R 1.017(ortran source \214les.)-.15 F 1.017(If an)6.017 F 3.517
(ys)-.15 G 1.017(ource \214les are gi)-3.517 F -.15(ve)-.25 G 1.017
(n, then the).15 F 3.517(yw)-.15 G 1.017(ill be automatically)-3.517 F
.23(compiled to object \214les.)144 319.2 R .23
(The static library pre\214x and suf)5.23 F .23(\214x \(if an)-.25 F .23
(y\) are automatically added to the)-.15 F(tar)144 331.2 Q 3.656
(get. The)-.18 F(tar)3.656 E 1.157(get library \214le pre\214x \(speci\
\214ed by the $SHLIBPREFIX construction v)-.18 F 1.157(ariable; by)-.25
F(def)144 343.2 Q(ault,)-.1 E F1(lib)5.411 E F0 2.911
(on POSIX systems, nothing on W)5.411 F(indo)-.4 E 2.911
(ws systems\) and suf)-.25 F 2.91(\214x \(speci\214ed by the)-.25 F .954
($SHLIBSUFFIX construction v)144 355.2 R .954(ariable; by def)-.25 F
(ault,)-.1 E F1(.dll)3.454 E F0 .954(on W)3.454 F(indo)-.4 E .954
(ws systems,)-.25 F F1(.so)3.454 E F0 .955(on POSIX sys-)3.454 F
(tems\) are automatically added to the tar)144 367.2 Q
(get if not already present.)-.18 E(Example:)5 E(en)144 391.2 Q -.65(v.)
-.4 G(SharedLibrary\(tar).65 E(get = 'bar', source = ['bar)-.18 E
(.c', 'foo.o']\))-.55 E 1.731(On W)144 408 R(indo)-.4 E 1.731
(ws systems, the)-.25 F F1(Shar)4.231 E(edLibrary)-.18 E F0 1.731
(\(\) b)B 1.731(uilder method will al)-.2 F -.1(wa)-.1 G 1.731(ys b).1 F
1.73(uild an import \()-.2 F F1(.lib)A F0(\))A .198
(library in addition to the shared \()144 420 R F1(.dll)A F0 2.698(\)l)C
(ibrary)-2.698 E 2.698(,a)-.65 G .198(dding a)-2.698 F F1(.lib)2.698 E
F0 .199(library with the same basename if there)2.698 F
(is not already a)144 432 Q F1(.lib)2.5 E F0(\214le e)2.5 E
(xplicitly listed in the tar)-.15 E(gets.)-.18 E(An)144 456 Q 3.518(yo)
-.15 G 1.018(bject \214les listed in the)-3.518 F F1(sour)3.517 E(ce)
-.18 E F0 1.017(must ha)3.517 F 1.317 -.15(ve b)-.2 H 1.017(een b).15 F
1.017(uilt for a shared library \(that is, using the)-.2 F F1(Shar)144
468 Q(edObject)-.18 E F0(\(\) b)A(uilder method\).)-.2 E F1(scons)5 E F0
(will raise an error if there is an)2.5 E 2.5(ym)-.15 G(ismatch.)-2.5 E
1.167(On some platforms, there is a distinction between a shared librar\
y \(loaded automatically by the)144 492 R 1.187(system to resolv)144 504
R 3.687(ee)-.15 G 1.187(xternal references\) and a loadable module \(e)
-3.837 F 1.187(xplicitly loaded by user action\).)-.15 F -.15(Fo)144 516
S 2.5(rm).15 G(aximum portability)-2.5 E 2.5(,u)-.65 G(se the)-2.5 E F1
(LoadableModule)2.5 E F0(\(\) b)A(uilder for the latter)-.2 E(.)-.55 E
1.379(On W)144 540 R(indo)-.4 E 1.379(ws systems, specifying)-.25 F F1
-.18(re)3.879 G(gister=1).18 E F0 1.379(will cause the)3.879 F F1(.dll)
3.879 E F0 1.379(to be re)3.879 F 1.38(gistered after it is b)-.15 F
(uilt)-.2 E .304(using REGSVR32.)144 552 R .304
(The command that is run \("re)5.304 F .304(gsvr32" by def)-.15 F .304
(ault\) is determined by $REGSVR)-.1 F 2.057(construction v)144 564 R
2.057(ariable, and the \215ags passed are determined by $REGSVRFLA)-.25
F 4.558(GS. By)-.4 F(def)4.558 E(ault,)-.1 E($REGSVRFLA)144 576 Q .867
(GS includes the)-.4 F F1(/s)3.366 E F0 .866(option, to pre)3.366 F -.15
(ve)-.25 G .866(nt dialogs from popping up and requiring user).15 F .879
(attention when it is run.)144 588 R .879(If you change $REGSVRFLA)5.879
F .88(GS, be sure to include the)-.4 F F1(/s)3.38 E F0 3.38(option. F)
3.38 F(or)-.15 E -.15(ex)144 600 S(ample,).15 E(en)144 624 Q -.65(v.)-.4
G(SharedLibrary\(tar).65 E(get = 'bar',)-.18 E(source = ['bar)189 636 Q
(.cxx', 'foo.obj'],)-.55 E(re)189 648 Q(gister=1\))-.15 E(will re)144
664.8 Q(gister)-.15 E F1(bar)2.5 E(.dll)-1 E F0
(as a COM object when it is done linking it.)2.5 E(SharedObject\(\))108
693.6 Q(July 2010)286.415 768 Q(29)204.415 E 0 Cg EP
%%Page: 30 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)108 84 Q
-.65(v.)-.4 G(SharedObject\(\)).65 E .035
(Builds an object \214le for inclusion in a shared library)144 96 R
5.035(.S)-.65 G .035(ource \214les must ha)-5.035 F .335 -.15(ve o)-.2 H
.034(ne of the same set of).15 F -.15(ex)144 108 S .714
(tensions speci\214ed abo).15 F 1.014 -.15(ve f)-.15 H .714(or the).15 F
/F1 10/Times-Bold@0 SF(StaticObject)3.214 E F0 .714(\(\) b)B .714
(uilder method.)-.2 F .714(On some platforms b)5.714 F .715(uilding a)
-.2 F .463(shared object requires additional compiler option \(e.g.)144
120 R F1(\255fPIC)2.963 E F0 .463(for gcc\) in addition to those needed)
2.963 F 1.097(to b)144 132 R 1.097(uild a normal \(static\) object, b)
-.2 F 1.098(ut on some platforms there is no dif)-.2 F 1.098
(ference between a shared)-.25 F .376
(object and a normal \(static\) one. When there is a dif)144 144 R .376
(ference, SCons will only allo)-.25 F 2.876(ws)-.25 G .376
(hared objects)-2.876 F .773(to be link)144 156 R .773
(ed into a shared library)-.1 F 3.273(,a)-.65 G .774(nd will use a dif)
-3.273 F .774(ferent suf)-.25 F .774
(\214x for shared objects. On platforms)-.25 F .226
(where there is no dif)144 168 R .226(ference, SCons will allo)-.25 F
2.726(wb)-.25 G .225
(oth normal \(static\) and shared objects to be link)-2.726 F(ed)-.1 E
.028(into a shared library)144 180 R 2.529(,a)-.65 G .029
(nd will use the same suf)-2.529 F .029
(\214x for shared and normal \(static\) objects.)-.25 F .029(The tar)
5.029 F(get)-.18 E .492(object \214le pre\214x \(speci\214ed by the $SH\
OBJPREFIX construction v)144 192 R .491(ariable; by def)-.25 F .491
(ault, the same as)-.1 F .709($OBJPREFIX\) and suf)144 204 R .709
(\214x \(speci\214ed by the $SHOBJSUFFIX construction v)-.25 F .709
(ariable\) are automati-)-.25 F(cally added to the tar)144 216 Q
(get if not already present.)-.18 E(Examples:)5 E(en)144 240 Q -.65(v.)
-.4 G(SharedObject\(tar).65 E(get = ')-.18 E(ddd', source = ')-.5 E
(ddd.c'\))-.5 E(en)144 252 Q -.65(v.)-.4 G(SharedObject\(tar).65 E
(get = 'eee.o', source = 'eee.cpp'\))-.18 E(en)144 264 Q -.65(v.)-.4 G
(SharedObject\(tar).65 E(get = 'f)-.18 E -.25(ff)-.25 G
(.obj', source = 'f).25 E -.25(ff)-.25 G(.for'\)).25 E .117
(Note that the source \214les will be scanned according to the suf)144
280.8 R .116(\214x mappings in the)-.25 F F1(Sour)2.616 E(ceFileScan-)
-.18 E(ner)144 292.8 Q F0 2.5(object. See)2.5 F
(the section "Scanner Objects," belo)2.5 E 1.3 -.65(w, f)-.25 H
(or a more information.).65 E(StaticLibrary\(\))108 321.6 Q(en)108 338.4
Q -.65(v.)-.4 G(StaticLibrary\(\)).65 E .653(Builds a static library gi)
144 350.4 R -.15(ve)-.25 G 3.153(no).15 G .653
(ne or more object \214les or C, C++, D or F)-3.153 F .653
(ortran source \214les.)-.15 F .654(If an)5.654 F(y)-.15 E .736
(source \214les are gi)144 362.4 R -.15(ve)-.25 G .736(n, then the).15 F
3.236(yw)-.15 G .736(ill be automatically compiled to object \214les.)
-3.236 F .736(The static library)5.736 F .15(pre\214x and suf)144 374.4
R .15(\214x \(if an)-.25 F .15(y\) are automatically added to the tar)
-.15 F 2.65(get. The)-.18 F(tar)2.65 E .15
(get library \214le pre\214x \(speci-)-.18 F 1.664
(\214ed by the $LIBPREFIX construction v)144 386.4 R 1.664
(ariable; by def)-.25 F(ault,)-.1 E F1(lib)4.164 E F0 1.664
(on POSIX systems, nothing on)4.164 F -.4(Wi)144 398.4 S(ndo).4 E .143
(ws systems\) and suf)-.25 F .143
(\214x \(speci\214ed by the $LIBSUFFIX construction v)-.25 F .144
(ariable; by def)-.25 F(ault,)-.1 E F1(.lib)2.644 E F0 .922(on W)144
410.4 R(indo)-.4 E .922(ws systems,)-.25 F F1(.a)3.422 E F0 .921
(on POSIX systems\) are automatically added to the tar)3.422 F .921
(get if not already)-.18 F 2.5(present. Example:)144 422.4 R(en)144
446.4 Q -.65(v.)-.4 G(StaticLibrary\(tar).65 E
(get = 'bar', source = ['bar)-.18 E(.c', 'foo.o']\))-.55 E(An)144 463.2
Q 3.794(yo)-.15 G 1.294(bject \214les listed in the)-3.794 F F1(sour)
3.794 E(ce)-.18 E F0 1.294(must ha)3.794 F 1.594 -.15(ve b)-.2 H 1.294
(een b).15 F 1.295(uilt for a static library \(that is, using the)-.2 F
F1(StaticObject)144 475.2 Q F0(\(\) b)A(uilder method\).)-.2 E F1(scons)
5 E F0(will raise an error if there is an)2.5 E 2.5(ym)-.15 G(ismatch.)
-2.5 E(StaticObject\(\))108 504 Q(en)108 520.8 Q -.65(v.)-.4 G
(StaticObject\(\)).65 E .596
(Builds a static object \214le from one or more C, C++, D, or F)144
532.8 R .596(ortran source \214les.)-.15 F .596(Source \214les must)
5.596 F(ha)144 544.8 Q .3 -.15(ve o)-.2 H(ne of the follo).15 E(wing e)
-.25 E(xtensions:)-.15 E 7.5(.asm assembly)149 568.8 R(language \214le)
2.5 E 7.5(.ASM assembly)149 580.8 R(language \214le)2.5 E 12.5(.c C)149
592.8 R(\214le)2.5 E 12.5(.C W)149 604.8 R(indo)-.4 E 2.5(ws: C)-.25 F
(\214le)2.5 E 2.5(POSIX: C++)169 616.8 R(\214le)2.5 E 10(.cc C++)149
628.8 R(\214le)2.5 E 7.5(.cpp C++)149 640.8 R(\214le)2.5 E 7.5(.cxx C++)
149 652.8 R(\214le)2.5 E 7.5(.cxx C++)149 664.8 R(\214le)2.5 E 7.5
(.c++ C++)149 676.8 R(\214le)2.5 E 7.5(.C++ C++)149 688.8 R(\214le)2.5 E
12.5(.d D)149 700.8 R(\214le)2.5 E 12.5(.f F)149 712.8 R(ortran \214le)
-.15 E 12.5(.F W)149 724.8 R(indo)-.4 E 2.5(ws: F)-.25 F(ortran \214le)
-.15 E(July 2010)286.415 768 Q(30)204.415 E 0 Cg EP
%%Page: 31 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5
(POSIX: F)169 84 R(ortran \214le + C pre-processor)-.15 E 7.5(.for F)149
96 R(ortran \214le)-.15 E 7.5(.FOR F)149 108 R(ortran \214le)-.15 E 7.5
(.fpp F)149 120 R(ortran \214le + C pre-processor)-.15 E 7.5(.FPP F)149
132 R(ortran \214le + C pre-processor)-.15 E 12.5(.m Object)149 144 R
2.5<438c>2.5 G(le)-2.5 E 10(.mm Object)149 156 R(C++ \214le)2.5 E 12.5
(.s assembly)149 168 R(language \214le)2.5 E 12.5(.S W)149 180 R(indo)
-.4 E 2.5(ws: assembly)-.25 F(language \214le)2.5 E
(ARM: CodeSourcery Sourcery Lite)169 192 Q 10(.sx assembly)149 204 R
(language \214le + C pre-processor)2.5 E 2.5(POSIX: assembly)169 216 R
(language \214le + C pre-processor)2.5 E 7.5(.spp assembly)149 228 R
(language \214le + C pre-processor)2.5 E 7.5(.SPP assembly)149 240 R
(language \214le + C pre-processor)2.5 E 2.02(The tar)144 256.8 R 2.02(\
get object \214le pre\214x \(speci\214ed by the $OBJPREFIX construction\
 v)-.18 F 2.02(ariable; nothing by)-.25 F(def)144 268.8 Q 1.279
(ault\) and suf)-.1 F 1.278
(\214x \(speci\214ed by the $OBJSUFFIX construction v)-.25 F(ariable;)
-.25 E/F1 10/Times-Bold@0 SF(.obj)3.778 E F0 1.278(on W)3.778 F(indo)-.4
E 1.278(ws sys-)-.25 F(tems,)144 280.8 Q F1(.o)3.416 E F0 .916
(on POSIX systems\) are automatically added to the tar)3.416 F .916
(get if not already present.)-.18 F(Exam-)5.916 E(ples:)144 292.8 Q(en)
144 316.8 Q -.65(v.)-.4 G(StaticObject\(tar).65 E
(get = 'aaa', source = 'aaa.c'\))-.18 E(en)144 328.8 Q -.65(v.)-.4 G
(StaticObject\(tar).65 E(get = 'bbb)-.18 E(.o', source = 'bbb)-.4 E
(.c++'\))-.4 E(en)144 340.8 Q -.65(v.)-.4 G(StaticObject\(tar).65 E
(get = 'ccc.obj', source = 'ccc.f)-.18 E('\)).55 E .383
(Note that the source \214les will be scanned according to the suf)144
357.6 R .383(\214x mappings in)-.25 F F1(Sour)2.882 E(ceFileScanner)-.18
E F0 2.5(object. See)144 369.6 R(the section "Scanner Objects," belo)2.5
E 1.3 -.65(w, f)-.25 H(or a more information.).65 E(Subst\214le\(\))108
398.4 Q(en)108 415.2 Q -.65(v.)-.4 G(Subst\214le\(\)).65 E(The)144 427.2
Q F1(Subst\214le)2.5 E F0(\(\) b)A(uilder generates a single te)-.2 E
.001(xt \214le by concatenating the source \214les.)-.15 F .001
(Nested lists of)5.001 F .402(sources are \215attened.)144 439.2 R
($LINESEP)5.402 E(ARA)-.92 E -.18(TO)-1.11 G 2.902(Ri).18 G 2.902(su)
-2.902 G .401(sed to separate the source \214les; see the description)
-2.902 F(of)144 451.2 Q F1 -.92(Te)2.5 G(xt\214le).92 E F0
(\(\) for details.)A .534(If a single source \214le is present with an)
144 475.2 R F1(.in)3.034 E F0(suf)3.034 E .534(\214x, the suf)-.25 F
.535(\214x is stripped and the remainder is used)-.25 F(as the def)144
487.2 Q(ault tar)-.1 E(get name.)-.18 E .237(The pre\214x and suf)144
511.2 R .237(\214x speci\214ed by the $SUBSTFILEPREFIX and $SUBSTFILESU\
FFIX construc-)-.25 F .249(tion v)144 523.2 R .249
(ariables \(the null string by def)-.25 F .25
(ault in both cases\) are automatically added to the tar)-.1 F .25
(get if the)-.18 F(y)-.15 E(are not already present.)144 535.2 Q .013
(If a construction v)144 559.2 R .013(ariable named $SUBST_DICT is pres\
ent, it may be either a Python dictionary or)-.25 F 2.522(as)144 571.2 S
.022(equence of \(k)-2.522 F -.15(ey)-.1 G(,v)-.5 E .022(alue\) tuples.)
-.25 F .022(If the former)5.022 F 2.522(,t)-.4 G .022
(he dictionary is con)-2.522 F -.15(ve)-.4 G .023
(rted into a list of tuples in an).15 F 1.576(arbitrary order)144 583.2
R 4.076(,s)-.4 G 4.076(oi)-4.076 G 4.076(fo)-4.076 G 1.576(ne k)-4.076 F
1.876 -.15(ey i)-.1 H 4.076(sap).15 G 1.576(re\214x of another k)-4.076
F 1.875 -.15(ey o)-.1 H 4.075(ri).15 G 4.075(fo)-4.075 G 1.575
(ne substitution could be further)-4.075 F -.15(ex)144 595.2 S
(panded by another subsitition, it is unpredictible whether the e).15 E
(xpansion will occur)-.15 E(.)-.55 E(An)144 619.2 Q 3.322(yo)-.15 G .823
(ccurences in the source of a k)-3.322 F 1.123 -.15(ey a)-.1 H .823
(re replaced by the corresponding v).15 F .823(alue, which may be a)-.25
F .019(Python callable function or a string.)144 631.2 R .019(If a v)
5.019 F .019(alue is a function, it is \214rst called \(with no ar)-.25
F .018(guments\) to)-.18 F(produce a string.)144 643.2 Q(The string is)5
E/F2 10/Times-Italic@0 SF(subst)2.5 E F0(-e)A
(xpanded and the result replaces the k)-.15 E -.15(ey)-.1 G(.)-.5 E(en)
144 667.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(tools = [').4 E(def)
-.5 E(ault', ')-.1 E(te)-.18 E(xt\214le']\))-.15 E(en)144 691.2 Q
(v['pre\214x'] = '/usr/bin')-.4 E
(script_dict = {'@pre\214x@': '/bin', @e)144 703.2 Q -.15(xe)-.15 G
(c_pre\214x@: '$pre\214x'}).15 E(en)144 715.2 Q -.65(v.)-.4 G
(Subst\214le\(').65 E(script.in', SUBST_DICT = script_dict\))-.55 E
(July 2010)286.415 768 Q(31)204.415 E 0 Cg EP
%%Page: 32 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(conf_dict = {'%VERSION%': '1.2.3', '%B)144 84 Q(ASE%': 'MyProg'})-.35 E
(en)144 96 Q -.65(v.)-.4 G
(Subst\214le\('con\214g.h.in', conf_dict, SUBST_DICT = conf_dict\)).65 E
2.5(#U)144 120 S(NPREDICT)-2.5 E(ABLE - one k)-.93 E .3 -.15(ey i)-.1 H
2.5(sap).15 G(re\214x of another)-2.5 E
(bad_foo = {'$foo': '$foo', '$foobar': '$foobar'})144 132 Q(en)144 144 Q
-.65(v.)-.4 G(Subst\214le\('foo.in', SUBST_DICT = bad_foo\)).65 E 2.5
(#P)144 168 S(REDICT)-2.5 E(ABLE - k)-.93 E -.15(ey)-.1 G 2.5(sa).15 G
(re applied longest \214rst)-2.5 E
(good_foo = [\('$foobar', '$foobar'\), \('$foo', '$foo'\)])144 180 Q(en)
144 192 Q -.65(v.)-.4 G(Subst\214le\('foo.in', SUBST_DICT = good_foo\))
.65 E 2.5(#U)144 216 S(NPREDICT)-2.5 E
(ABLE - one substitution could be futher e)-.93 E(xpanded)-.15 E
(bad_bar = {'@bar@': '@soap@', '@soap@': ')144 228 Q(lye'})-.1 E(en)144
240 Q -.65(v.)-.4 G(Subst\214le\('bar).65 E
(.in', SUBST_DICT = bad_bar\))-.55 E 2.5(#P)144 264 S(REDICT)-2.5 E
(ABLE - substitutions are e)-.93 E(xpanded in order)-.15 E
(good_bar = \(\('@bar@', '@soap@'\), \('@soap@', ')144 276 Q(lye'\)\))
-.1 E(en)144 288 Q -.65(v.)-.4 G(Subst\214le\('bar).65 E
(.in', SUBST_DICT = good_bar\))-.55 E 2.5(#t)144 312 S
(he SUBST_DICT may be in common \(and not an o)-2.5 E -.15(ve)-.15 G
(rride\)).15 E(substutions = {})144 324 Q(subst = En)144 336 Q
(vironment\(tools = [')-.4 E(te)-.18 E
(xt\214le', SUBST_DICT = substitutions\))-.15 E
(substitutions['@foo@'] = 'foo')144 348 Q
(subst['SUBST_DICT']['@bar@'] = 'bar')144 360 Q
(subst.Subst\214le\('pgm1.c', [V)144 372 Q
(alue\('#include "@foo@.h"'\),)-1.11 E -1.11(Va)211.5 384 S
(lue\('#include "@bar@.h"'\),)1.11 E("common.in",)211.5 396 Q("pgm1.in")
211.5 408 Q(]\))209 420 Q(subst.Subst\214le\('pgm2.c', [V)144 432 Q
(alue\('#include "@foo@.h"'\),)-1.11 E -1.11(Va)211.5 444 S
(lue\('#include "@bar@.h"'\),)1.11 E("common.in",)211.5 456 Q("pgm2.in")
211.5 468 Q(]\))209 480 Q -.8(Ta)108 520.8 S(r\(\)).8 E(en)108 537.6 Q
-.65(v.)-.4 G -.8(Ta).65 G(r\(\)).8 E 1.572(Builds a tar archi)144 549.6
R 1.873 -.15(ve o)-.25 H 4.073(ft).15 G 1.573
(he speci\214ed \214les and/or directories.)-4.073 F(Unlik)6.573 E 4.073
(em)-.1 G 1.573(ost b)-4.073 F 1.573(uilder methods, the)-.2 F/F1 10
/Times-Bold@0 SF -.92(Ta)144 561.6 S(r).92 E F0 .52(\(\) b)B .52
(uilder method may be called multiple times for a gi)-.2 F -.15(ve)-.25
G 3.019(nt).15 G(ar)-3.019 E .519(get; each additional call adds to)-.18
F 1.168(the list of entries that will be b)144 573.6 R 1.168
(uilt into the archi)-.2 F -.15(ve)-.25 G 6.168(.A).15 G 1.468 -.15
(ny s)-6.168 H 1.169(ource directories will be scanned for).15 F 1.481
(changes to an)144 585.6 R 3.981(yo)-.15 G 1.481(n-disk \214les, re)
-3.981 F -.05(ga)-.15 G 1.481(rdless of whether or not).05 F F1(scons)
3.981 E F0(kno)3.98 E 1.48(ws about them from other)-.25 F
(Builder or function calls.)144 597.6 Q(en)144 621.6 Q -.65(v.)-.4 G -.8
(Ta).65 G(r\(').8 E(src.tar', ')-.55 E(src'\))-.55 E 2.5(#C)144 645.6 S
(reate the stuf)-2.5 E(f.tar \214le.)-.25 E(en)144 657.6 Q -.65(v.)-.4 G
-.8(Ta).65 G(r\(').8 E(stuf)-.55 E .55(f')-.25 G 2.5(,[)-.55 G -.55('s)
-2.5 G(ubdir1', ').55 E(subdir2']\))-.55 E 2.5(#A)144 669.6 S
(lso add "another" to the stuf)-2.5 E(f.tar \214le.)-.25 E(en)144 681.6
Q -.65(v.)-.4 G -.8(Ta).65 G(r\(').8 E(stuf)-.55 E .55(f')-.25 G 2.5(,')
-.55 G(another'\))-2.5 E 2.5(#S)144 705.6 S(et T)-2.5 E(ARFLA)-.93 E
(GS to create a gzip-\214ltered archi)-.4 E -.15(ve)-.25 G(.).15 E(en)
144 717.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(T).4 E(ARFLA)-.93 E
(GS = '-c -z'\))-.4 E(en)144 729.6 Q -.65(v.)-.4 G -.8(Ta).65 G
(r\('foo.tar).8 E(.gz', 'foo'\))-.55 E(July 2010)286.415 768 Q(32)
204.415 E 0 Cg EP
%%Page: 33 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5(#A)144
84 S(lso set the suf)-2.5 E(\214x to .tgz.)-.25 E(en)144 96 Q 2.5(v=E)
-.4 G -.4(nv)-2.5 G(ironment\(T).4 E(ARFLA)-.93 E(GS = '-c -z',)-.4 E
-.93(TA)189 108 S(RSUFFIX = '.tgz'\)).93 E(en)144 120 Q -.65(v.)-.4 G
-.8(Ta).65 G(r\('foo'\)).8 E -1.25 -.7(Te x)108 148.8 T(t\214le\(\)).7 E
(en)108 165.6 Q -.65(v.)-.4 G -1.25 -.7(Te x).65 H(t\214le\(\)).7 E(The)
144 177.6 Q/F1 10/Times-Bold@0 SF -.92(Te)3.499 G(xt\214le).92 E F0 .999
(\(\) b)B .999(uilder generates a single te)-.2 F .999(xt \214le.)-.15 F
1(The source strings constitute the lines; nested)5.999 F
(lists of sources are \215attened.)144 189.6 Q($LINESEP)5 E(ARA)-.92 E
-.18(TO)-1.11 G 2.5(Ri).18 G 2.5(su)-2.5 G(sed to separate the strings.)
-2.5 E .68(If present, the $SUBST_DICT construction v)144 213.6 R .679
(ariable is used to modify the strings before the)-.25 F 3.179(ya)-.15 G
(re)-3.179 E(written; see the)144 225.6 Q F1(Subst\214le)2.5 E F0
(\(\) description for details.)A .128(The pre\214x and suf)144 249.6 R
.128(\214x speci\214ed by the $TEXTFILEPREFIX and $TEXTFILESUFFIX const\
ruction)-.25 F -.25(va)144 261.6 S .634(riables \(the null string and)
.25 F F1(.txt)3.134 E F0 .634(by def)3.134 F .634(ault, respecti)-.1 F
-.15(ve)-.25 G .634(ly\) are automatically added to the tar).15 F .634
(get if)-.18 F(the)144 273.6 Q 2.5(ya)-.15 G(re not already present.)
-2.5 E(Examples:)5 E 2.5(#b)144 297.6 S(uilds/writes foo.txt)-2.7 E(en)
144 309.6 Q -.65(v.)-.4 G -1.25 -.7(Te x).65 H(t\214le\(tar).7 E
(get = 'foo.txt', source = ['Goethe', 42, 'Schiller']\))-.18 E 2.5(#b)
144 333.6 S(uilds/writes bar)-2.7 E(.txt)-.55 E(en)144 345.6 Q -.65(v.)
-.4 G -1.25 -.7(Te x).65 H(t\214le\(tar).7 E(get = 'bar',)-.18 E
(source = [')176.5 357.6 Q(lalala', ')-.1 E(tanteratei'],)-.18 E
(LINESEP)176.5 369.6 Q(ARA)-.92 E -.18(TO)-1.11 G(R='|*'\)).18 E 2.5(#n)
144 393.6 S(ested lists are \215attened automatically)-2.5 E(en)144
405.6 Q -.65(v.)-.4 G -1.25 -.7(Te x).65 H(t\214le\(tar).7 E
(get = 'blob',)-.18 E(source = [')176.5 417.6 Q
(lalala', ['Goethe', 42 'Schiller'], ')-.1 E(tanteratei']\))-.18 E 2.5
<238c>144 441.6 S(les may be used as input by wraping them in File\(\))
-2.5 E(en)144 453.6 Q -.65(v.)-.4 G -1.25 -.7(Te x).65 H(t\214le\(tar).7
E(get = 'concat',)-.18 E 2.5(#c)5 G(oncatenate \214les with a mark)-2.5
E(er between)-.1 E(source = [File\('concat1'\), File\('concat2'\)],)
176.5 465.6 Q(LINESEP)176.5 477.6 Q(ARA)-.92 E -.18(TO)-1.11 G 2.5(R=')
.18 G(====================\\n'\))-2.5 E(Results are:)144 501.6 Q
(foo.txt)144 513.6 Q(....8<----)149 525.6 Q(Goethe)149 537.6 Q(42)149
549.6 Q(Schiller)149 561.6 Q(....8<---- \(no linefeed at the end\))149
573.6 Q(bar)144 597.6 Q(.txt:)-.55 E(....8<----)149 609.6 Q
(lalala|*tanteratei)149 621.6 Q(....8<---- \(no linefeed at the end\))
149 633.6 Q(blob)144 657.6 Q(.txt)-.4 E(....8<----)149 669.6 Q(lalala)
149 681.6 Q(Goethe)149 693.6 Q(42)149 705.6 Q(Schiller)149 717.6 Q
(tanteratei)149 729.6 Q(July 2010)286.415 768 Q(33)204.415 E 0 Cg EP
%%Page: 34 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(....8<---- \(no linefeed at the end\))149 84 Q -.8(Ty)108 112.8 S
(peLibrary\(\)).8 E(en)108 129.6 Q -.65(v.)-.4 G -.8(Ty).65 G
(peLibrary\(\)).8 E .211(Builds a W)144 141.6 R(indo)-.4 E .211
(ws type library \()-.25 F/F1 10/Times-Bold@0 SF(.tlb)A F0 2.711<298c>C
.211(le from an input IDL \214le \()-2.711 F F1(.idl)A F0 2.711(\). In)B
.211(addition, it will b)2.711 F .212(uild the)-.2 F .039
(associated intef)144 153.6 R .038(ace stub and proxy source \214les, n\
aming them according to the base name of the)-.1 F F1(.idl)2.538 E F0
2.5(\214le. F)144 165.6 R(or e)-.15 E(xample,)-.15 E(en)144 189.6 Q -.65
(v.)-.4 G -.8(Ty).65 G(peLibrary\(source="foo.idl"\)).8 E -.4(Wi)144
206.4 S(ll create).4 E F1 -.25(fo)2.5 G(o.tlb).25 E F0(,)A F1 -.25(fo)
2.5 G(o.h).25 E F0(,)A F1 -.25(fo)2.5 G(o_i.c).25 E F0(,)A F1 -.25(fo)
2.5 G(o_p.c).25 E F0(and)2.5 E F1 -.25(fo)2.5 G(o_data.c).25 E F0
(\214les.)2.5 E(Uic\(\))108 235.2 Q(en)108 252 Q -.65(v.)-.4 G(Uic\(\))
.65 E .66(Builds a header \214le, an implementation \214le and a moc \
\214le from an ui \214le.)144 264 R .661(and returns the corre-)5.661 F
.871(sponding nodes in the abo)144 276 R 1.171 -.15(ve o)-.15 H(rder).15
E 5.871(.T)-.55 G .871(his b)-5.871 F .871(uilder is only a)-.2 F -.25
(va)-.2 G .87(ilable after using the tool 'qt'. Note:).25 F .061
(you can specify)144 288 R F1(.ui)2.561 E F0 .061
(\214les directly as source \214les to the)2.561 F F1(Pr)2.562 E(ogram)
-.18 E F0(\(\),)A F1(Library)2.562 E F0 .062(\(\) and)B F1(Shar)2.562 E
(edLibrary)-.18 E F0(\(\))A -.2(bu)144 300 S .713
(ilders without using this b).2 F(uilder)-.2 E 3.212(.U)-.55 G .712
(sing this b)-3.212 F .712(uilder lets you o)-.2 F -.15(ve)-.15 G .712
(rride the standard naming con-).15 F -.15(ve)144 312 S .58
(ntions \(be careful: pre\214x).15 F .58(es are al)-.15 F -.1(wa)-.1 G
.58(ys prepended to names of b).1 F .58(uilt \214les; if you don')-.2 F
3.08(tw)-.18 G .58(ant pre-)-3.18 F<8c78>144 324 Q
(es, you may set them to `)-.15 E 2.5(`\). See)-.74 F(the $QTDIR v)2.5 E
(ariable for more information.)-.25 E(Example:)5 E(en)144 348 Q -.65(v.)
-.4 G(Uic\('foo.ui'\) # -> ['foo.h', 'uic_foo.cc', 'moc_foo.cc']).65 E
(en)144 360 Q -.65(v.)-.4 G(Uic\(tar).65 E
(get = Split\('include/foo.h gen/uicfoo.cc gen/mocfoo.cc'\),)-.18 E(sou\
rce = 'foo.ui'\) # -> ['include/foo.h', 'gen/uicfoo.cc', 'gen/mocfoo.cc\
'])164 372 Q(Zip\(\))108 400.8 Q(en)108 417.6 Q -.65(v.)-.4 G(Zip\(\))
.65 E 1.454(Builds a zip archi)144 429.6 R 1.754 -.15(ve o)-.25 H 3.954
(ft).15 G 1.454(he speci\214ed \214les and/or directories.)-3.954 F
(Unlik)6.453 E 3.953(em)-.1 G 1.453(ost b)-3.953 F 1.453
(uilder methods, the)-.2 F F1(Zip)144 441.6 Q F0 .53(\(\) b)B .53
(uilder method may be called multiple times for a gi)-.2 F -.15(ve)-.25
G 3.031(nt).15 G(ar)-3.031 E .531(get; each additional call adds to)-.18
F 1.169(the list of entries that will be b)144 453.6 R 1.168
(uilt into the archi)-.2 F -.15(ve)-.25 G 6.168(.A).15 G 1.468 -.15
(ny s)-6.168 H 1.168(ource directories will be scanned for).15 F 1.48
(changes to an)144 465.6 R 3.98(yo)-.15 G 1.48(n-disk \214les, re)-3.98
F -.05(ga)-.15 G 1.481(rdless of whether or not).05 F F1(scons)3.981 E
F0(kno)3.981 E 1.481(ws about them from other)-.25 F
(Builder or function calls.)144 477.6 Q(en)144 501.6 Q -.65(v.)-.4 G
(Zip\(').65 E(src.zip', ')-.55 E(src'\))-.55 E 2.5(#C)144 525.6 S
(reate the stuf)-2.5 E(f.zip \214le.)-.25 E(en)144 537.6 Q -.65(v.)-.4 G
(Zip\(').65 E(stuf)-.55 E .55(f')-.25 G 2.5(,[)-.55 G -.55('s)-2.5 G
(ubdir1', ').55 E(subdir2']\))-.55 E 2.5(#A)144 549.6 S
(lso add "another" to the stuf)-2.5 E(f.tar \214le.)-.25 E(en)144 561.6
Q -.65(v.)-.4 G(Zip\(').65 E(stuf)-.55 E .55(f')-.25 G 2.5(,')-.55 G
(another'\))-2.5 E .092(All tar)108 590.4 R .092(gets of b)-.18 F .091
(uilder methods automatically depend on their sources.)-.2 F .091(An e)
5.091 F .091(xplicit dependenc)-.15 F 2.591(yc)-.15 G .091(an be speci-)
-2.591 F(\214ed using the)108 602.4 Q F1(Depends)2.5 E F0
(method of a construction en)2.5 E(vironment \(see belo)-.4 E(w\).)-.25
E .113(In addition,)108 626.4 R F1(scons)2.613 E F0 .114
(automatically scans source \214les for v)2.614 F .114
(arious programming languages, so the dependencies)-.25 F 1.577
(do not need to be speci\214ed e)108 638.4 R(xplicitly)-.15 E 6.577(.B)
-.65 G 4.077(yd)-6.577 G(ef)-4.077 E 1.576
(ault, SCons can C source \214les, C++ source \214les, F)-.1 F(ortran)
-.15 E .448(source \214les with)108 650.4 R F1(.F)2.948 E F0 .448
(\(POSIX systems only\),)2.948 F F1(.fpp,)2.948 E F0(or)2.948 E F1(.FPP)
2.948 E F0 .448(\214le e)2.948 F .448
(xtensions, and assembly language \214les with)-.15 F F1(.S)108 662.4 Q
F0 .516(\(POSIX systems only\),)3.016 F F1(.spp,)3.016 E F0(or)3.016 E
F1(.SPP)3.015 E F0 .515(\214les e)3.015 F .515
(xtensions for C preprocessor dependencies.)-.15 F .515(SCons also has)
5.515 F(def)108 674.4 Q .396
(ault support for scanning D source \214les, Y)-.1 F .397
(ou can also write your o)-1.1 F .397
(wn Scanners to add support for addi-)-.25 F .39
(tional source \214le types.)108 686.4 R .39
(These can be added to the def)5.39 F .39
(ault Scanner object used by the)-.1 F F1(Object)2.89 E F0(\(\),)A F1
(StaticOb-)2.89 E(ject)108 698.4 Q F0(\(\), and)A F1(Shar)2.5 E
(edObject)-.18 E F0(\(\) Builders by adding them to the)A F1(Sour)2.5 E
(ceFileScanner)-.18 E F0(object as follo)2.5 E(ws:)-.25 E
(See the section "Scanner Objects," belo)108 722.4 Q 1.3 -.65(w, f)-.25
H(or a more information about de\214ning your o).65 E
(wn Scanner objects.)-.25 E(July 2010)286.415 768 Q(34)204.415 E 0 Cg EP
%%Page: 35 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(Methods and Functions to Do Things)87 84 Q F0 .918
(In addition to Builder methods,)108 96 R F1(scons)3.418 E F0(pro)3.418
E .919(vides a number of other construction en)-.15 F .919
(vironment methods and)-.4 F(global functions to manipulate the b)108
108 Q(uild con\214guration.)-.2 E(Usually)108 132 Q 2.789(,ac)-.65 G
.289(onstruction en)-2.789 F .289
(vironment method and global function with the same name both e)-.4 F
.288(xist so that you)-.15 F(don')108 144 Q 2.675(th)-.18 G -2.25 -.2
(av e)-2.675 H .175(to remember whether to a speci\214c bit of function\
ality must be called with or without a construc-)2.875 F(tion en)108 156
Q 2.5(vironment. In)-.4 F(the follo)2.5 E
(wing list, if you call something as a global function it looks lik)-.25
E(e:)-.1 E(Function\()144 168 Q/F2 10/Times-Italic@0 SF(ar).33 E
(guments)-.37 E F0(\)).27 E
(and if you call something through a construction en)108 180 Q
(vironment it looks lik)-.4 E(e:)-.1 E(en)144 192 Q -.65(v.)-.4 G
(Function\().65 E F2(ar).33 E(guments)-.37 E F0(\)).27 E
(If you can call the functionality in both w)108 204 Q
(ays, then both forms are listed.)-.1 E 1.098(Global functions may be c\
alled from custom Python modules that you import into an SConscript \
\214le by)108 228 R(adding the follo)108 240 Q
(wing to the Python module:)-.25 E(from SCons.Script import *)144 264 Q
.368(Except where otherwise noted, the same-named construction en)108
288 R .369(vironment method and global function pro-)-.4 F .7
(vide the e)108 300 R .7(xact same functionality)-.15 F 5.7(.T)-.65 G .7
(he only dif)-5.7 F .7
(ference is that, where appropriate, calling the functionality)-.25 F
1.543(through a construction en)108 312 R 1.543
(vironment will substitute construction v)-.4 F 1.543(ariables into an)
-.25 F 4.044(ys)-.15 G 1.544(upplied strings.)-4.044 F -.15(Fo)6.544 G
(r).15 E -.15(ex)108 324 S(ample:).15 E(en)144 348 Q 2.5(v=E)-.4 G -.4
(nv)-2.5 G(ironment\(FOO = 'foo'\)).4 E(Def)144 360 Q(ault\('$FOO'\))-.1
E(en)144 372 Q -.65(v.)-.4 G(Def).65 E(ault\('$FOO'\))-.1 E .32
(In the abo)108 396 R .62 -.15(ve ex)-.15 H .32
(ample, the \214rst call to the global).15 F F1(Default\(\))2.819 E F0
.319(function will actually add a tar)2.819 F .319(get named)-.18 F F1
($FOO)2.819 E F0 1.088(to the list of def)108 408 R 1.088(ault tar)-.1 F
1.089(gets, while the second call to the)-.18 F F1(en)3.589 E -.7(v.)-.4
G(Default\(\)).7 E F0 1.089(construction en)3.589 F 1.089
(vironment method)-.4 F .921(will e)108 420 R .921(xpand the v)-.15 F
.921(alue and add a tar)-.25 F .921(get named)-.18 F F1 -.25(fo)3.421 G
(o).25 E F0 .92(to the list of def)3.421 F .92(ault tar)-.1 F 3.42
(gets. F)-.18 F .92(or more on construction)-.15 F -.25(va)108 432 S
(riable e).25 E(xpansion, see the ne)-.15 E
(xt section on construction v)-.15 E(ariables.)-.25 E(Construction en)
108 456 Q(vironment methods and global functions supported by)-.4 E F1
(scons)2.5 E F0(include:)2.5 E(Action\()108 484.8 Q F2(action).33 E F0
2.5(,[).24 G F2(cmd/str/fun)-2.3 E F0 2.5(,[).24 G F2(var)-2.21 E F0 2.5
(,.).73 G(..]] [)-2.5 E F2(option).23 E F0(=).24 E F2(value).29 E F0 2.5
(,.).18 G(..]\))-2.5 E F2(en)108 501.6 Q(v)-.4 E F0(.Action\().32 E F2
(action).33 E F0 2.5(,[).24 G F2(cmd/str/fun)-2.3 E F0 2.5(,[).24 G F2
(var)-2.21 E F0 2.5(,.).73 G(..]] [)-2.5 E F2(option).23 E F0(=).24 E F2
(value).29 E F0 2.5(,.).18 G(..]\))-2.5 E .812
(Creates an Action object for the speci\214ed)144 513.6 R F2(action)
3.312 E F0 5.812(.S).24 G .812(ee the section "Action Objects," belo)
-5.812 F 2.112 -.65(w, f)-.25 H .812(or a).65 F(complete e)144 525.6 Q
(xplanation of the ar)-.15 E(guments and beha)-.18 E(vior)-.2 E(.)-.55 E
.627(Note that the)144 549.6 R F1(en)3.127 E -.7(v.)-.4 G(Action).7 E F0
.627(\(\) form of the in)B -.2(vo)-.4 G .626(cation will e).2 F .626
(xpand construction v)-.15 F .626(ariables in an)-.25 F 3.126(ya)-.15 G
-.18(rg)-3.126 G(u-).18 E .077(ment strings, including the)144 561.6 R
F2(action)2.907 E F0(ar)2.817 E .077
(gument, at the time it is called using the construction v)-.18 F
(ariables)-.25 E .931(in the)144 573.6 R F2(en)3.621 E(v)-.4 E F0 .931
(construction en)3.751 F .931(vironment through which)-.4 F F1(en)3.431
E -.7(v.)-.4 G(Action).7 E F0 .931(\(\) w)B .931(as called.)-.1 F(The)
5.931 E F1(Action)3.43 E F0 .93(\(\) form)B(delays all v)144 585.6 Q
(ariable e)-.25 E(xpansion until the Action object is actually used.)
-.15 E(AddMethod\()108 614.4 Q F2(object,).23 E F0(function)A F2 2.5(,[)
.54 G F0(name)-1.98 E F2(]\)).38 E F0(en)108 631.2 Q -.65(v.)-.4 G
(AddMethod\().65 E F2(function)1.97 E F0 2.5(,[).24 G F2(name)-2.14 E F0
(]\)).18 E .903(When called with the)144 643.2 R F1(AddMethod)3.403 E F0
.903(\(\) form, adds the speci\214ed)B F2(function)5.374 E F0 .904
(to the speci\214ed)3.644 F F2(object)3.634 E F0(as)4.084 E 1.739
(the speci\214ed method)144 655.2 R F2(name)4.239 E F0 6.739(.W).18 G
1.738(hen called with the)-6.739 F F1(en)4.238 E -.7(v.)-.4 G(AddMethod)
.7 E F0 1.738(\(\) form, adds the speci\214ed)B F2(function)145.97 667.2
Q F0 1.69(to the construction en)4.43 F(vironment)-.4 E F2(en)4.381 E(v)
-.4 E F0 1.691(as the speci\214ed method)4.511 F F2(name)4.191 E F0
6.691(.I).18 G 4.191(nb)-6.691 G 1.691(oth cases, if)-4.191 F F2(name)
144.36 679.2 Q F0(is omitted or)2.68 E F1(None)2.5 E F0 2.5(,t)C
(he name of the speci\214ed)-2.5 E F2(function)4.47 E F0
(itself is used for the method name.)2.74 E(Examples:)144 703.2 Q 2.5
(#N)144 727.2 S(ote that the \214rst ar)-2.5 E
(gument to the function to)-.18 E(July 2010)286.415 768 Q(35)204.415 E 0
Cg EP
%%Page: 36 36
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5(#b)144
84 S 2.5(ea)-2.5 G(ttached as a method must be the object through)-2.5 E
2.5(#w)144 96 S(hich the method will be called; the Python)-2.5 E 2.5
(#c)144 108 S(on)-2.5 E -.15(ve)-.4 G(ntion is to call it ').15 E -1.95
(self '.)-.55 F(def my_method\(self, ar)144 120 Q(g\):)-.18 E
(print "my_method\(\) got", ar)154 132 Q(g)-.18 E 2.5(#U)144 156 S
(se the global AddMethod\(\) function to add a method)-2.5 E 2.5(#t)144
168 S 2.5(ot)-2.5 G(he En)-2.5 E(vironment class.)-.4 E(This)5 E
(AddMethod\(En)144 180 Q(vironment, my_method\))-.4 E(en)144 192 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(en)144 204 Q -.65(v.)-.4 G
(my_method\('ar).65 E(g'\))-.18 E 2.5(#A)144 228 S
(dd the function as a method, using the function)-2.5 E 2.5(#n)144 240 S
(ame for the method call.)-2.5 E(en)144 252 Q 2.5(v=E)-.4 G -.4(nv)-2.5
G(ironment\(\)).4 E(en)144 264 Q -.65(v.)-.4 G
(AddMethod\(my_method, 'other_method_name'\)).65 E(en)144 276 Q -.65(v.)
-.4 G(other_method_name\('another ar).65 E(g'\))-.18 E(AddOption\()108
304.8 Q/F1 10/Times-Italic@0 SF(ar).33 E(guments)-.37 E F0(\)).27 E .237
(This function adds a ne)144 316.8 R 2.737(wc)-.25 G .236
(ommand-line option to be recognized.)-2.737 F .236(The speci\214ed)
5.236 F F1(ar)3.066 E(guments)-.37 E F0 .236(are the)3.006 F .685
(same as supported by the standard Python)144 328.8 R/F2 10/Times-Bold@0
SF(optparse.add_option)3.185 E F0 .685(\(\) method \(with a fe)B 3.185
(wa)-.25 G(dditional)-3.185 E 1.574(capabilities noted belo)144 340.8 R
1.574(w\); see the documentation for)-.25 F F2(optparse)4.074 E F0 1.574
(for a thorough discussion of its)4.074 F .049
(option-processing capabities.)144 352.8 R .049
(\(Note that although the)5.049 F F2(optparse)2.549 E F0 .049(module w)
2.549 F .049(as not a standard module)-.1 F .325(until Python 2.3,)144
364.8 R F2(scons)2.825 E F0 .325(contains a compatible v)2.825 F .325
(ersion of the module that is used to pro)-.15 F .325(vide identi-)-.15
F(cal functionality when run by earlier Python v)144 376.8 Q(ersions.\))
-.15 E 1.543(In addition to the ar)144 400.8 R 1.543(guments and v)-.18
F 1.543(alues supported by the)-.25 F F2 1.543(optparse.add_option \(\))
4.043 F F0 1.544(method, the)4.043 F(SCons)144 412.8 Q F2(AddOption)
2.814 E F0 .314(\(\) function allo)B .313(ws you to set the)-.25 F F2
(nar)2.813 E(gs)-.1 E F0 -.1(ke)2.813 G(yw)-.05 E .313(ord v)-.1 F .313
(alue to)-.25 F F2('?')2.813 E F0 .313(\(a string with just)5.313 F
2.053(the question mark\) to indicate that the speci\214ed long option\
\(s\) tak)144 424.8 R 2.053(e\(s\) an)-.1 F F1(optional)4.783 E F0(ar)
5.064 E(gument.)-.18 E(When)144 436.8 Q F2(nar)3.398 E .898(gs = '?')-.1
F F0 .898(is passed to the)5.898 F F2(AddOption)3.398 E F0 .898
(\(\) function, the)B F2(const)3.398 E F0 -.1(ke)3.398 G(yw)-.05 E .898
(ord ar)-.1 F .898(gument may be)-.18 F 1.023(used to supply the "def)
144 448.8 R 1.023(ault" v)-.1 F 1.023
(alue that should be used when the option is speci\214ed on the com-)
-.25 F(mand line without an e)144 460.8 Q(xplicit ar)-.15 E(gument.)-.18
E .94(If no)144 484.8 R F2(default=)3.44 E F0 -.1(ke)3.44 G(yw)-.05 E
.94(ord ar)-.1 F .939(gument is supplied when calling)-.18 F F2
(AddOption)3.439 E F0 .939(\(\), the option will ha)B 1.239 -.15(ve a)
-.2 H(def)144 496.8 Q(ault v)-.1 E(alue of)-.25 E F2(None)2.5 E F0(.)A
1.32(Once a ne)144 520.8 R 3.82(wc)-.25 G 1.321
(ommand-line option has been added with)-3.82 F F2(AddOption)3.821 E F0
1.321(\(\), the option v)B 1.321(alue may be)-.25 F(accessed using)144
532.8 Q F2(GetOption)2.5 E F0(\(\) or)A F2(en)2.5 E -.7(v.)-.4 G
(GetOption).7 E F0(\(\).)A(An)144 712.8 Q 3.376(ys)-.15 G(peci\214ed)
-3.376 E F2(help=)3.376 E F0 .876(strings for the ne)3.376 F 3.376(wo)
-.25 G .876(ption\(s\) will be displayed by the)-3.376 F F2(-H)3.376 E
F0(or)3.376 E F2(-h)3.376 E F0 .875(options \(the)3.375 F 1.185
(latter only if no other help te)144 724.8 R 1.185
(xt is speci\214ed in the SConscript \214les\).)-.15 F 1.185
(The help te)6.185 F 1.185(xt for the local)-.15 F(July 2010)286.415 768
Q(36)204.415 E 0 Cg EP
%%Page: 37 37
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .324
(options speci\214ed by)144 84 R/F1 10/Times-Bold@0 SF(AddOption)2.823 E
F0 .323(\(\) will appear belo)B 2.823(wt)-.25 G .323
(he SCons options themselv)-2.823 F .323(es, under a sepa-)-.15 F(rate)
144 96 Q F1 1.131(Local Options)3.631 F F0 3.631(heading. The)3.631 F
1.132(options will appear in the help te)3.632 F 1.132
(xt in the order in which the)-.15 F F1(AddOption)144 108 Q F0
(\(\) calls occur)A(.)-.55 E(Example:)144 132 Q
(AddOption\('--pre\214x',)144 156 Q(dest='pre\214x',)169 168 Q(nar)169
180 Q(gs=1, type=')-.18 E(string',)-.55 E(action=')169 192 Q(store',)
-.55 E(meta)169 204 Q -.25(va)-.2 G(r='DIR',).25 E
(help='installation pre\214x'\))169 216 Q(en)144 228 Q 2.5(v=E)-.4 G -.4
(nv)-2.5 G(ironment\(PREFIX = GetOption\('pre\214x'\)\)).4 E
(AddPostAction\()108 256.8 Q/F2 10/Times-Italic@0 SF(tar).13 E -.1(ge)
-.37 G(t).1 E F0(,).68 E F2(action)2.83 E F0(\)).24 E(en)108 273.6 Q
-.65(v.)-.4 G(AddPostAction\().65 E F2(tar).13 E -.1(ge)-.37 G(t).1 E F0
(,).68 E F2(action)2.83 E F0(\)).24 E 1.118
(Arranges for the speci\214ed)144 285.6 R F2(action)3.948 E F0 1.117
(to be performed after the speci\214ed)3.858 F F2(tar)3.747 E -.1(ge)
-.37 G(t).1 E F0 1.117(has been b)4.297 F 3.617(uilt. The)-.2 F 1.673
(speci\214ed action\(s\) may be an Action object, or an)144 297.6 R
1.673(ything that can be con)-.15 F -.15(ve)-.4 G 1.674
(rted into an Action).15 F(object \(see belo)144 309.6 Q(w\).)-.25 E
.102(When multiple tar)144 333.6 R .102(gets are supplied, the action m\
ay be called multiple times, once after each action)-.18 F
(that generates one or more tar)144 345.6 Q(gets in the list.)-.18 E
(AddPreAction\()108 374.4 Q F2(tar).13 E -.1(ge)-.37 G(t).1 E F0(,).68 E
F2(action)2.83 E F0(\)).24 E(en)108 391.2 Q -.65(v.)-.4 G
(AddPreAction\().65 E F2(tar).13 E -.1(ge)-.37 G(t).1 E F0(,).68 E F2
(action)2.83 E F0(\)).24 E .746(Arranges for the speci\214ed)144 403.2 R
F2(action)3.576 E F0 .747(to be performed before the speci\214ed)3.486 F
F2(tar)3.377 E -.1(ge)-.37 G(t).1 E F0 .747(is b)3.927 F 3.247
(uilt. The)-.2 F(speci-)3.247 E .007
(\214ed action\(s\) may be an Action object, or an)144 415.2 R .006
(ything that can be con)-.15 F -.15(ve)-.4 G .006
(rted into an Action object \(see).15 F(belo)144 427.2 Q(w\).)-.25 E
.645(When multiple tar)144 451.2 R .646(gets are speci\214ed, the actio\
n\(s\) may be called multiple times, once before each)-.18 F
(action that generates one or more tar)144 463.2 Q(gets in the list.)
-.18 E .383(Note that if an)144 487.2 R 2.883(yo)-.15 G 2.883(ft)-2.883
G .383(he tar)-2.883 F .383(gets are b)-.18 F .383
(uilt in multiple steps, the action will be in)-.2 F -.2(vo)-.4 G -.1
(ke).2 G 2.882(dj).1 G .382(ust before the)-2.882 F 1.432
("\214nal" action that speci\214cally generates the speci\214ed tar)144
499.2 R 3.933(get\(s\). F)-.18 F 1.433(or e)-.15 F 1.433(xample, when b)
-.15 F 1.433(uilding an)-.2 F -.15(exe)144 511.2 S
(cutable program from a speci\214ed source).15 E F1(.c)2.5 E F0
(\214le via an intermediate object \214le:)2.5 E
(foo = Program\('foo.c'\))144 535.2 Q(AddPreAction\(foo, 'pre_action'\))
144 547.2 Q .905(The speci\214ed)108 571.2 R F1(pr)3.405 E(e_action)-.18
E F0 -.1(wo)3.405 G .905(uld be e).1 F -.15(xe)-.15 G .904(cuted before)
.15 F F1(scons)3.404 E F0 .904
(calls the link command that actually generates)3.404 F(the e)108 583.2
Q -.15(xe)-.15 G(cutable program binary).15 E F1 -.25(fo)2.5 G(o).25 E
F0 2.5(,n)C(ot before compiling the)-2.5 E F1 -.25(fo)2.5 G(o.c).25 E F0
(\214le into an object \214le.)2.5 E(Alias\()108 612 Q F2(alias).33 E F0
2.5(,[).27 G F2(tar)-2.37 E -.1(ge)-.37 G(ts).1 E F0 2.5(,[).27 G F2
(action)-2.17 E F0(]]\)).24 E(en)108 628.8 Q -.65(v.)-.4 G(Alias\().65 E
F2(alias).33 E F0 2.5(,[).27 G F2(tar)-2.37 E -.1(ge)-.37 G(ts).1 E F0
2.5(,[).27 G F2(action)-2.17 E F0(]]\)).24 E .87
(Creates one or more phon)144 640.8 R 3.37(yt)-.15 G(ar)-3.37 E .87
(gets that e)-.18 F .871(xpand to one or more other tar)-.15 F 3.371
(gets. An)-.18 F(optional)3.371 E F2(action)3.701 E F0 .718
(\(command\) or list of actions can be speci\214ed that will be e)144
652.8 R -.15(xe)-.15 G .718(cuted whene).15 F -.15(ve)-.25 G 3.218(rt)
.15 G .718(he an)-3.218 F 3.218(yo)-.15 G 3.218(ft)-3.218 G .718
(he alias)-3.218 F(tar)144 664.8 Q .17(gets are out-of-date.)-.18 F .171
(Returns the Node object representing the alias, which e)5.17 F .171
(xists outside of an)-.15 F(y)-.15 E .133(\214le system.)144 676.8 R
.133(This Node object, or the alias name, may be used as a dependenc)
5.133 F 2.632(yo)-.15 G 2.632(fa)-2.632 G .432 -.15(ny o)-2.632 H .132
(ther tar).15 F(get,)-.18 E .147(including another alias.)144 688.8 R F1
(Alias)5.147 E F0 .148
(can be called multiple times for the same alias to add additional tar)
2.647 F(-)-.2 E
(gets to the alias, or additional actions to the list for this alias.)
144 700.8 Q(Examples:)144 724.8 Q(July 2010)286.415 768 Q(37)204.415 E 0
Cg EP
%%Page: 38 38
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(Alias\('install'\))144 84 Q(Alias\('install', '/usr/bin'\))144 96 Q
(Alias\(['install', 'install-lib'], '/usr/local/lib'\))144 108 Q(en)144
132 Q -.65(v.)-.4 G
(Alias\('install', ['/usr/local/bin', '/usr/local/lib']\)).65 E(en)144
144 Q -.65(v.)-.4 G(Alias\('install', ['/usr/local/man']\)).65 E(en)144
168 Q -.65(v.)-.4 G
(Alias\('update', ['\214le1', '\214le2'], "update_database $SOURCES"\))
.65 E(Allo)108 196.8 Q(wSubstExceptions\([)-.25 E/F1 10/Times-Italic@0
SF -.2(ex)C(ception).2 E F0 2.5(,.).24 G(..]\))-2.5 E .695
(Speci\214es the e)144 208.8 R .695(xceptions that will be allo)-.15 F
.695(wed when e)-.25 F .695(xpanding construction v)-.15 F 3.195
(ariables. By)-.25 F(def)3.195 E(ault,)-.1 E(an)144 220.8 Q 3.73(yc)-.15
G 1.23(onstruction v)-3.73 F 1.23(ariable e)-.25 F 1.23
(xpansions that generate a)-.15 F/F2 10/Times-Bold@0 SF(NameErr)3.73 E
(or)-.18 E F0(or)3.73 E F2(IndexErr)3.73 E(or)-.18 E F0 -.15(ex)3.73 G
1.23(ception will).15 F -.15(ex)144 232.8 S .02(pand to a).15 F F2 -.63
('')2.52 G F0 .02(\(a null string\) and not cause scons to f)3.15 F 2.52
(ail. All)-.1 F -.15(ex)2.52 G .02
(ceptions not in the speci\214ed list will).15 F
(generate an error message and terminate processing.)144 244.8 Q(If)144
268.8 Q F2(Allo)3.662 E(wSubstExceptions)-.1 E F0 1.163
(is called multiple times, each call completely o)3.662 F -.15(ve)-.15 G
1.163(rwrites the pre).15 F(vious)-.25 E(list of allo)144 280.8 Q(wed e)
-.25 E(xceptions.)-.15 E(Example:)144 304.8 Q 2.5(#R)144 328.8 S
(equires that all construction v)-2.5 E(ariable names e)-.25 E(xist.)
-.15 E 2.5(#\()144 340.8 S -1.1(Yo)-2.5 G 2.5(um)1.1 G
(ay wish to do this if you w)-2.5 E(ant to enforce strictly)-.1 E 2.5
(#t)144 352.8 S(hat all construction v)-2.5 E
(ariables must be de\214ned before use.\))-.25 E(Allo)144 364.8 Q
(wSubstExceptions\(\))-.25 E 2.5(#A)144 388.8 S(lso allo)-2.5 E 2.5(was)
-.25 G(tring containing a zero-di)-2.5 E(vision e)-.25 E(xpansion)-.15 E
2.5(#l)144 400.8 S(ik)-2.5 E 2.5(e')-.1 G(${1 / 0}' to e)-2.5 E -.25(va)
-.25 G(lute to ').25 E('.)-.74 E(Allo)144 412.8 Q
(wSubstExceptions\(Inde)-.25 E(xError)-.15 E 2.5(,N)-.4 G(ameError)-2.5
E 2.5(,Z)-.4 G(eroDi)-2.5 E(visionError\))-.25 E(Al)108 441.6 Q -.1(wa)
-.1 G(ysBuild\().1 E F1(tar).13 E -.1(ge)-.37 G(t).1 E F0 2.5(,.).68 G
(..\))-2.5 E(en)108 458.4 Q -.65(v.)-.4 G(Al).65 E -.1(wa)-.1 G
(ysBuild\().1 E F1(tar).13 E -.1(ge)-.37 G(t).1 E F0 2.5(,.).68 G(..\))
-2.5 E .072(Marks each gi)144 470.4 R -.15(ve)-.25 G(n).15 E F1(tar)
2.702 E -.1(ge)-.37 G(t).1 E F0 .072(so that it is al)3.252 F -.1(wa)-.1
G .071(ys assumed to be out of date, and will al).1 F -.1(wa)-.1 G .071
(ys be reb).1 F .071(uilt if)-.2 F 3.114(needed. Note,)144 482.4 R(ho)
3.114 E(we)-.25 E -.15(ve)-.25 G 1.414 -.4(r, t).15 H(hat).4 E F2
(AlwaysBuild)3.114 E F0 .615(\(\) does not add its tar)B .615
(get\(s\) to the def)-.18 F .615(ault tar)-.1 F .615(get list, so)-.18 F
.188(the tar)144 494.4 R .188(gets will only be b)-.18 F .188
(uilt if the)-.2 F 2.688(ya)-.15 G .187
(re speci\214ed on the command line, or are a dependent of a tar)-2.688
F(-)-.2 E .65(get speci\214ed on the command line--b)144 506.4 R .651
(ut the)-.2 F 3.151(yw)-.15 G(ill)-3.151 E F1(always)3.481 E F0 .651
(be b)3.421 F .651(uilt if so speci\214ed.)-.2 F .651(Multiple tar)5.651
F(gets)-.18 E(can be passed in to a single call to)144 518.4 Q F2
(AlwaysBuild)2.5 E F0(\(\).)A(en)108 547.2 Q -.65(v.)-.4 G(Append\().65
E F1 -.1(ke)C(y)-.2 E F0(=).32 E F1(val).29 E F0 2.5(,[).51 G(...]\))
-2.5 E .258(Appends the speci\214ed k)144 559.2 R -.15(ey)-.1 G -.1(wo)
.15 G .258(rd ar).1 F .258(guments to the end of construction v)-.18 F
.257(ariables in the en)-.25 F(vironment.)-.4 E .031(If the En)144 571.2
R .031(vironment does not ha)-.4 F .331 -.15(ve t)-.2 H .031
(he speci\214ed construction v).15 F .032
(ariable, it is simply added to the en)-.25 F(vi-)-.4 E 3.197
(ronment. If)144 583.2 R .697(the v)3.197 F .697
(alues of the construction v)-.25 F .697(ariable and the k)-.25 F -.15
(ey)-.1 G -.1(wo).15 G .696(rd ar).1 F .696(gument are the same type,)
-.18 F 1.01(then the tw)144 595.2 R 3.51(ov)-.1 G 1.011
(alues will be simply added together)-3.76 F 6.011(.O)-.55 G 1.011
(therwise, the construction v)-6.011 F 1.011(ariable and the)-.25 F -.25
(va)144 607.2 S .11(lue of the k).25 F -.15(ey)-.1 G -.1(wo).15 G .11
(rd ar).1 F .109
(gument are both coerced to lists, and the lists are added together)-.18
F 5.109(.\()-.55 G .109(See also)-5.109 F(the Prepend method, belo)144
619.2 Q -.65(w.)-.25 G(\)).65 E(Example:)144 643.2 Q(en)144 667.2 Q -.65
(v.)-.4 G(Append\(CCFLA).65 E(GS = ' -g', FOO = ['foo.yyy']\))-.4 E(en)
108 696 Q -.65(v.)-.4 G(AppendENVP).65 E(ath\()-.15 E F1(name).36 E F0
(,).18 E F1(ne)2.86 E(wpath)-.15 E F0 2.5(,[).28 G F1(en)-2.31 E(vname)
-.4 E F0(,).18 E F1(sep)2.84 E F0(,).19 E F1(delete_e)2.85 E(xisting)-.2
E F0(]\)).22 E .502(This appends ne)144 708 R 3.002(wp)-.25 G .502
(ath elements to the gi)-3.002 F -.15(ve)-.25 G 3.002(np).15 G .502
(ath in the speci\214ed e)-3.002 F .502(xternal en)-.15 F .502
(vironment \()-.4 F F2(ENV)A F0(by)3.002 E(def)144 720 Q 4.62
(ault\). This)-.1 F 2.12(will only add an)4.62 F 4.619(yp)-.15 G 2.119
(articular path once \(lea)-4.619 F 2.119
(ving the last one it encounters and)-.2 F(July 2010)286.415 768 Q(38)
204.415 E 0 Cg EP
%%Page: 39 39
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .891
(ignoring the rest, to preserv)144 84 R 3.391(ep)-.15 G .891
(ath order\), and to help assure this, will normalize all paths \(using)
-3.391 F/F1 10/Times-Bold@0 SF(os.path.normpath)144 96 Q F0(and)3.964 E
F1(os.path.normcase)3.964 E F0 3.964(\). This)B 1.463
(can also handle the case where the gi)3.964 F -.15(ve)-.25 G 3.963(no)
.15 G(ld)-3.963 E(path v)144 108 Q(ariable is a list instead of a strin\
g, in which case a list will be returned instead of a string.)-.25 E(If)
144 132 Q/F2 10/Times-Italic@0 SF(delete_e)2.919 E(xisting)-.2 E F0 .069
(is 0, then adding a path that already e)2.789 F .069(xists will not mo)
-.15 F .369 -.15(ve i)-.15 H 2.569(tt).15 G 2.569(ot)-2.569 G .069
(he end; it will stay)-2.569 F(where it is in the list.)144 144 Q
(Example:)144 168 Q(print 'before:',en)144 192 Q(v['ENV']['INCLUDE'])-.4
E(include_path = '/foo/bar:/foo')144 204 Q(en)144 216 Q -.65(v.)-.4 G
(AppendENVP).65 E(ath\('INCLUDE', include_path\))-.15 E
(print 'after:',en)144 228 Q(v['ENV']['INCLUDE'])-.4 E(yields:)144 252 Q
(before: /foo:/biz)144 264 Q(after: /biz:/foo/bar:/foo)144 276 Q(en)108
304.8 Q -.65(v.)-.4 G(AppendUnique\().65 E F2 -.1(ke)C(y)-.2 E F0(=).32
E F2(val).29 E F0 2.5(,[).51 G(...], delete_e)-2.5 E(xisting=0\))-.15 E
.258(Appends the speci\214ed k)144 316.8 R -.15(ey)-.1 G -.1(wo).15 G
.258(rd ar).1 F .258(guments to the end of construction v)-.18 F .257
(ariables in the en)-.25 F(vironment.)-.4 E .031(If the En)144 328.8 R
.031(vironment does not ha)-.4 F .331 -.15(ve t)-.2 H .031
(he speci\214ed construction v).15 F .032
(ariable, it is simply added to the en)-.25 F(vi-)-.4 E 3.689
(ronment. If)144 340.8 R 1.189(the construction v)3.689 F 1.189
(ariable being appended to is a list, then an)-.25 F 3.688(yv)-.15 G
1.188(alue\(s\) that already)-3.938 F -.15(ex)144 352.8 S .19
(ist in the construction v).15 F .19(ariable will)-.25 F F2(not)3.05 E
F0 .19(be added ag)3.37 F .19(ain to the list.)-.05 F(Ho)5.19 E(we)-.25
E -.15(ve)-.25 G .99 -.4(r, i).15 H 2.69(fd).4 G(elete_e)-2.69 E .19
(xisting is)-.15 F .516(1, e)144 364.8 R .516(xisting matching v)-.15 F
.516(alues are remo)-.25 F -.15(ve)-.15 G 3.016<648c>.15 G .516
(rst, so e)-3.016 F .516(xisting v)-.15 F .515(alues in the ar)-.25 F
3.015(gl)-.18 G .515(ist mo)-3.015 F .815 -.15(ve t)-.15 H 3.015(ot).15
G .515(he end of)-3.015 F(the list.)144 376.8 Q(Example:)144 400.8 Q(en)
144 424.8 Q -.65(v.)-.4 G(AppendUnique\(CCFLA).65 E
(GS = '-g', FOO = ['foo.yyy']\))-.4 E(en)108 453.6 Q -.65(v.)-.4 G(BitK)
.65 E(eeper\(\))-.25 E 3.438(Af)144 465.6 S .939(actory function that r\
eturns a Builder object to be used to fetch source \214les using BitK)
-3.538 F(eeper)-.25 E(.)-.55 E
(The returned Builder is intended to be passed to the)144 477.6 Q F1
(Sour)2.5 E(ceCode)-.18 E F0(function.)2.5 E(Example:)144 501.6 Q(en)144
525.6 Q -.65(v.)-.4 G(SourceCode\('.).65 E(', en)-.7 E -.65(v.)-.4 G
(BitK).65 E(eeper\(\)\))-.25 E(BuildDir\()108 554.4 Q F2 -.2(bu)C
(ild_dir).2 E F0(,).73 E F2(sr)2.84 E(c_dir)-.37 E F0 2.5(,[).73 G F2
(duplicate)-2.15 E F0(]\)).18 E(en)108 571.2 Q -.65(v.)-.4 G(BuildDir\()
.65 E F2 -.2(bu)C(ild_dir).2 E F0(,).73 E F2(sr)2.84 E(c_dir)-.37 E F0
2.5(,[).73 G F2(duplicate)-2.15 E F0(]\)).18 E .795(Deprecated synon)144
583.2 R .795(yms for)-.15 F F1 -.92(Va)3.295 G(riantDir).92 E F0 .795
(\(\) and)B F1(en)3.294 E -.7(v.)-.4 G -.92(Va).7 G(riantDir).92 E F0
3.294(\(\). The)B F2 -.2(bu)3.294 G(ild_dir).2 E F0(ar)4.024 E .794
(gument becomes)-.18 F(the)144 595.2 Q F2(variant_dir)2.79 E F0(ar)3.23
E(gument of)-.18 E F1 -.92(Va)2.5 G(riantDir).92 E F0(\(\) or)A F1(en)
2.5 E -.7(v.)-.4 G -.92(Va).7 G(riantDir).92 E F0(\(\).)A(Builder\()108
624 Q F2(action).33 E F0 2.5(,[).24 G F2(ar)-2.17 E(guments)-.37 E F0
(]\)).27 E(en)108 640.8 Q -.65(v.)-.4 G(Builder\().65 E F2(action).33 E
F0 2.5(,[).24 G F2(ar)-2.17 E(guments)-.37 E F0(]\)).27 E .774
(Creates a Builder object for the speci\214ed)144 652.8 R F2(action)
3.275 E F0 5.775(.S).24 G .775(ee the section "Builder Objects," belo)
-5.775 F 2.075 -.65(w, f)-.25 H .775(or a).65 F(complete e)144 664.8 Q
(xplanation of the ar)-.15 E(guments and beha)-.18 E(vior)-.2 E(.)-.55 E
.348(Note that the)144 688.8 R F1(en)2.848 E -.7(v.)-.4 G(Builder).7 E
F0 .348(\(\) form of the in)B -.2(vo)-.4 G .348(cation will e).2 F .348
(xpand construction v)-.15 F .348(ariables in an)-.25 F 2.847(ya)-.15 G
-.18(rg)-2.847 G(u-).18 E .966(ments strings, including the)144 700.8 R
F2(action)3.796 E F0(ar)3.706 E .966
(gument, at the time it is called using the construction v)-.18 F(ari-)
-.25 E .138(ables in the)144 712.8 R F1(en)2.638 E(v)-.4 E F0 .138
(construction en)2.638 F .138(vironment through which)-.4 F F1(en)2.637
E -.7(v.)-.4 G(Builder).7 E F0 .137(\(\) w)B .137(as called.)-.1 F(The)
5.137 E F1(Builder)2.637 E F0(\(\))A(form delays all v)144 724.8 Q
(ariable e)-.25 E
(xpansion until after the Builder object is actually called.)-.15 E
(July 2010)286.415 768 Q(39)204.415 E 0 Cg EP
%%Page: 40 40
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(CacheDir\()
108 84 Q/F1 10/Times-Italic@0 SF(cac).2 E(he_dir)-.15 E F0(\)).73 E(en)
108 100.8 Q -.65(v.)-.4 G(CacheDir\().65 E F1(cac).2 E(he_dir)-.15 E F0
(\)).73 E .742(Speci\214es that)144 112.8 R/F2 10/Times-Bold@0 SF(scons)
3.243 E F0 .743(will maintain a cache of deri)3.243 F -.15(ve)-.25 G
3.243<648c>.15 G .743(les in)-3.243 F F1(cac)3.443 E .743(he_dir .)-.15
F F0 .743(The deri)5.743 F -.15(ve)-.25 G 3.243<648c>.15 G .743
(les in the)-3.243 F .052(cache will be shared among all the b)144 124.8
R .051(uilds using the same)-.2 F F2(CacheDir)2.551 E F0 .051
(\(\) call.)B .051(Specifying a)5.051 F F1(cac)2.751 E(he_dir)-.15 E F0
(of)144 136.8 Q F2(None)2.5 E F0(disables deri)2.5 E -.15(ve)-.25 G 2.5
<648c>.15 G(le caching.)-2.5 E(Calling)144 160.8 Q F2(en)3.647 E -.7(v.)
-.4 G(CacheDir).7 E F0 1.147(\(\) will only af)B 1.147(fect tar)-.25 F
1.147(gets b)-.18 F 1.148(uilt through the speci\214ed construction en)
-.2 F(viron-)-.4 E 3.116(ment. Calling)144 172.8 R F2(CacheDir)3.116 E
F0 .616(\(\) sets a global def)B .616(ault that will be used by all tar)
-.1 F .615(gets b)-.18 F .615(uilt through con-)-.2 F(struction en)144
184.8 Q(vironments that do)-.4 E F1(not)2.86 E F0(ha)3.18 E .3 -.15
(ve a)-.2 H(n).15 E F2(en)2.5 E -.7(v.)-.4 G(CacheDir).7 E F0
(\(\) speci\214ed.)A .086(When a)144 208.8 R F2(CacheDir)2.586 E F0 .086
(\(\) is being used and)B F2(scons)2.586 E F0 .086(\214nds a deri)2.586
F -.15(ve)-.25 G 2.586<648c>.15 G .087(le that needs to be reb)-2.586 F
.087(uilt, it will \214rst)-.2 F 1.038
(look in the cache to see if a deri)144 220.8 R -.15(ve)-.25 G 3.538
<648c>.15 G 1.038(le has already been b)-3.538 F 1.038
(uilt from identical input \214les and an)-.2 F .271(identical b)144
232.8 R .271(uild action \(as incorporated into the MD5 b)-.2 F .271
(uild signature\).)-.2 F .272(If so,)5.271 F F2(scons)2.772 E F0 .272
(will retrie)2.772 F .572 -.15(ve t)-.25 H(he).15 E .936
(\214le from the cache.)144 244.8 R .936(If the deri)5.936 F -.15(ve)
-.25 G 3.435<648c>.15 G .935(le is not present in the cache,)-3.435 F F2
(scons)3.435 E F0 .935(will reb)3.435 F .935(uild it and then)-.2 F .313
(place a cop)144 256.8 R 2.813(yo)-.1 G 2.813(ft)-2.813 G .313(he b)
-2.813 F .313(uilt \214le in the cache \(identi\214ed by its MD5 b)-.2 F
.313(uild signature\), so that it may be)-.2 F(retrie)144 268.8 Q -.15
(ve)-.25 G 2.5(db).15 G 2.5(yo)-2.5 G(ther b)-2.5 E
(uilds that need to b)-.2 E(uild the same deri)-.2 E -.15(ve)-.25 G 2.5
<648c>.15 G(le from identical inputs.)-2.5 E 1.003(Use of a speci\214ed)
144 292.8 R F2(CacheDir\(\))3.503 E F0 1.003(may be disabled for an)
3.503 F 3.503(yi)-.15 G -1.9 -.4(nv o)-3.503 H 1.003
(cation by using the).4 F F2(--cache-disable)3.502 E F0(option.)144
304.8 Q .126(If the)144 328.8 R F2(--cache-f)2.626 E(or)-.25 E(ce)-.18 E
F0 .127(option is used,)2.626 F F2(scons)2.627 E F0 .127
(will place a cop)2.627 F 2.627(yo)-.1 G(f)-2.627 E F1(all)2.957 E F0
(deri)3.137 E -.15(ve)-.25 G 2.627<648c>.15 G .127(les in the cache, e)
-2.627 F -.15(ve)-.25 G 2.627(ni).15 G(f)-2.627 E(the)144 340.8 Q 3.232
(ya)-.15 G .732(lready e)-3.232 F .731(xisted and were not b)-.15 F .731
(uilt by this in)-.2 F -.2(vo)-.4 G 3.231(cation. This).2 F .731
(is useful to populate a cache the)3.231 F(\214rst time)144 352.8 Q F2
(CacheDir)2.5 E F0(\(\) is added to a b)A(uild, or after using the)-.2 E
F2(--cache-disable)2.5 E F0(option.)2.5 E .169(When using)144 376.8 R F2
(CacheDir)2.669 E F0(\(\),)A F2(scons)2.669 E F0 .169
(will report, "Retrie)2.669 F -.15(ve)-.25 G 2.669(d`).15 G .169
(\214le' from cache," unless the)-2.669 F F2(--cache-sho)2.67 E(w)-.1 E
F0 1.816(option is being used.)144 388.8 R 1.816(When the)6.816 F F2
(--cache-sho)4.315 E(w)-.1 E F0 1.815(option is used,)4.315 F F2(scons)
4.315 E F0 1.815(will print the action that)4.315 F F1(would)144.34
400.8 Q F0(ha)4.017 E 1.047 -.15(ve b)-.2 H .747(een used to b).15 F
.747(uild the \214le, without an)-.2 F 3.248(yi)-.15 G .748
(ndication that the \214le w)-3.248 F .748(as actually retrie)-.1 F -.15
(ve)-.25 G(d).15 E .958(from the cache.)144 412.8 R .958
(This is useful to generate b)5.958 F .957(uild logs that are equi)-.2 F
-.25(va)-.25 G .957(lent re).25 F -.05(ga)-.15 G .957
(rdless of whether a).05 F(gi)144 424.8 Q -.15(ve)-.25 G 2.5(nd).15 G
(eri)-2.5 E -.15(ve)-.25 G 2.5<648c>.15 G(le has been b)-2.5 E
(uilt in-place or retrie)-.2 E -.15(ve)-.25 G 2.5(df).15 G
(rom the cache.)-2.5 E(The)144 448.8 Q F2(NoCache)3.99 E F0 1.49
(\(\) method can be used to disable caching of speci\214c \214les.)B
1.491(This can be useful if)6.491 F(inputs and/or outputs of some tool \
are impossible to predict or prohibiti)144 460.8 Q -.15(ve)-.25 G
(ly lar).15 E(ge.)-.18 E(Clean\()108 489.6 Q F1(tar).13 E -.1(ge)-.37 G
(ts).1 E F0(,).27 E F1(\214les_or_dir)4.41 E(s)-.1 E F0(\)).27 E(en)108
506.4 Q -.65(v.)-.4 G(Clean\().65 E F1(tar).13 E -.1(ge)-.37 G(ts).1 E
F0(,).27 E F1(\214les_or_dir)4.41 E(s)-.1 E F0(\)).27 E .192
(This speci\214es a list of \214les or directories which should be remo)
144 518.4 R -.15(ve)-.15 G 2.692(dw).15 G(hene)-2.692 E -.15(ve)-.25 G
2.692(rt).15 G .192(he tar)-2.692 F .191(gets are speci-)-.18 F .685
(\214ed with the)144 530.4 R F2(-c)3.185 E F0 .685(command line option.)
3.185 F .685(The speci\214ed tar)5.685 F .686
(gets may be a list or an indi)-.18 F .686(vidual tar)-.25 F(get.)-.18 E
.526(Multiple calls to)144 542.4 R F2(Clean)3.026 E F0 .526(\(\) are le)
B -.05(ga)-.15 G .526(l, and create ne).05 F 3.026(wt)-.25 G(ar)-3.026 E
.526(gets or add \214les and directories to the clean)-.18 F
(list for the speci\214ed tar)144 554.4 Q(gets.)-.18 E 2.552(Multiple \
\214les or directories should be speci\214ed either as separate ar)144
578.4 R 2.553(guments to the)-.18 F F2(Clean)5.053 E F0(\(\))A .6
(method, or as a list.)144 590.4 R F2(Clean)5.6 E F0 .6
(\(\) will also accept the return v)B .6(alue of an)-.25 F 3.1(yo)-.15 G
3.1(ft)-3.1 G .6(he construction en)-3.1 F(viron-)-.4 E
(ment Builder methods.)144 602.4 Q(Examples:)5 E 1.77(The related)144
626.4 R F2(NoClean)4.27 E F0 1.77(\(\) function o)B -.15(ve)-.15 G 1.77
(rrides calling).15 F F2(Clean)4.27 E F0 1.77(\(\) for the same tar)B
1.77(get, and an)-.18 F 4.27(yt)-.15 G(ar)-4.27 E(gets)-.18 E
(passed to both functions will)144 638.4 Q F1(not)2.86 E F0(be remo)3.18
E -.15(ve)-.15 G 2.5(db).15 G 2.5(yt)-2.5 G(he)-2.5 E F2(-c)2.5 E F0
(option.)2.5 E(Examples:)144 662.4 Q(Clean\('foo', ['bar', 'baz']\))144
686.4 Q(Clean\(')144 698.4 Q(dist', en)-.5 E -.65(v.)-.4 G
(Program\('hello', 'hello.c'\)\)).65 E(Clean\(['foo', 'bar'], ')144
710.4 Q(something_else_to_clean'\))-.55 E(July 2010)286.415 768 Q(40)
204.415 E 0 Cg EP
%%Page: 41 41
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .575
(In this e)108 84 R .575(xample, installing the project creates a subdi\
rectory for the documentation.)-.15 F .575(This statement causes)5.575 F
(the subdirectory to be remo)108 96 Q -.15(ve)-.15 G 2.5(di).15 G 2.5
(ft)-2.5 G(he project is deinstalled.)-2.5 E(Clean\(docdir)144 108 Q 2.5
(,o)-.4 G(s.path.join\(docdir)-2.5 E 2.5(,p)-.4 G(rojectname\)\))-2.5 E
(Command\()108 136.8 Q/F1 10/Times-Italic@0 SF(tar).13 E -.1(ge)-.37 G
(t).1 E F0(,).68 E F1(sour)2.84 E(ce)-.37 E F0(,).18 E F1(action)2.83 E
F0 2.5(,[).24 G F1 -.1(ke)-2.5 G(y)-.2 E F0(=).32 E F1(val).29 E F0 2.5
(,.).51 G(..]\))-2.5 E(en)108 153.6 Q -.65(v.)-.4 G(Command\().65 E F1
(tar).13 E -.1(ge)-.37 G(t).1 E F0(,).68 E F1(sour)2.84 E(ce)-.37 E F0
(,).18 E F1(action)2.83 E F0 2.5(,[).24 G F1 -.1(ke)-2.5 G(y)-.2 E F0(=)
.32 E F1(val).29 E F0 2.5(,.).51 G(..]\))-2.5 E(Ex)144 165.6 Q .303
(ecutes a speci\214c action \(or list of actions\) to b)-.15 F .303
(uild a tar)-.2 F .304(get \214le or \214les.)-.18 F .304
(This is more con)5.304 F -.15(ve)-.4 G(nient).15 E
(than de\214ning a separate Builder object for a single special-case b)
144 177.6 Q(uild.)-.2 E .38(As a special case, the)144 201.6 R/F2 10
/Times-Bold@0 SF(sour)2.88 E(ce_scanner)-.18 E F0 -.1(ke)2.88 G(yw)-.05
E .38(ord ar)-.1 F .38(gument can be used to specify a Scanner object)
-.18 F 1.086(that will be used to scan the sources.)144 213.6 R 1.086
(\(The global)6.086 F F2(DirScanner)3.586 E F0 1.086
(object can be used if an)3.586 F 3.587(yo)-.15 G 3.587(ft)-3.587 G(he)
-3.587 E 1.287(sources will be directories that must be scanned on-disk\
 for changes to \214les that aren')144 225.6 R 3.787(ta)-.18 G(lready)
-3.787 E(speci\214ed in other Builder of function calls.\))144 237.6 Q
(An)144 261.6 Q 2.5(yo)-.15 G(ther k)-2.5 E -.15(ey)-.1 G -.1(wo).15 G
(rd ar).1 E(guments speci\214ed o)-.18 E -.15(ve)-.15 G(rride an).15 E
2.5(ys)-.15 G(ame-named e)-2.5 E(xisting construction v)-.15 E
(ariables.)-.25 E 1.673(An action can be an e)144 285.6 R 1.674(xternal\
 command, speci\214ed as a string, or a callable Python object; see)-.15
F 1.424("Action Objects," belo)144 297.6 R 2.724 -.65(w, f)-.25 H 1.424
(or more complete information.).65 F 1.424
(Also note that a string specifying an)6.424 F -.15(ex)144 309.6 S .442
(ternal command may be preceded by an).15 F F2(@)2.943 E F0 .443
(\(at-sign\) to suppress printing the command in ques-)2.943 F
(tion, or by a)144 321.6 Q F2<ad>2.5 E F0(\(h)2.5 E
(yphen\) to ignore the e)-.05 E(xit status of the e)-.15 E
(xternal command.)-.15 E(Examples:)144 345.6 Q(en)144 369.6 Q -.65(v.)
-.4 G(Command\('foo.out', 'foo.in',).65 E("$FOO_B)174 381.6 Q
(UILD < $SOURCES > $T)-.1 E(ARGET"\))-.93 E(en)144 405.6 Q -.65(v.)-.4 G
(Command\('bar).65 E(.out', 'bar)-.55 E(.in',)-.55 E(["rm -f $T)174
417.6 Q(ARGET",)-.93 E("$B)176.5 429.6 Q(AR_B)-.35 E
(UILD < $SOURCES > $T)-.1 E(ARGET"],)-.93 E(ENV = {'P)174 441.6 Q -1.11
(AT)-.92 G(H' : '/usr/local/bin/'}\))1.11 E(def rename\(en)144 465.6 Q
1.3 -.65(v, t)-.4 H(ar).65 E(get, source\):)-.18 E(import os)154 477.6 Q
(os.rename\('.tmp', str\(tar)154 489.6 Q(get[0]\)\))-.18 E(en)144 513.6
Q -.65(v.)-.4 G(Command\('baz.out', 'baz.in',).65 E(["$B)174 525.6 Q
(AZ_B)-.35 E(UILD < $SOURCES > .tmp",)-.1 E(rename ]\))192.5 537.6 Q
2.004(Note that the)144 566.4 R F2(Command)4.503 E F0 2.003
(\(\) function will usually assume, by def)B 2.003
(ault, that the speci\214ed tar)-.1 F(gets)-.18 E .506(and/or sources a\
re Files, if no other part of the con\214guration identi\214es what typ\
e of entry it is.)144 578.4 R(If)5.507 E(necessary)144 590.4 Q 3.025(,y)
-.65 G .525(ou can e)-3.025 F .525(xplicitly specify that tar)-.15 F
.525(gets or source nodes should be treated as directoriese)-.18 F
(by using the)144 602.4 Q F2(Dir)2.5 E F0(\(\) or)A F2(en)2.5 E -.7(v.)
-.4 G(Dir).7 E F0(\(\) functions.)A(Examples:)144 626.4 Q(en)144 650.4 Q
-.65(v.)-.4 G(Command\(').65 E(ddd.list', Dir\(')-.5 E(ddd'\), ')-.5 E
(ls -l $SOURCE > $T)-.1 E(ARGET'\))-.93 E(en)144 674.4 Q
(v['DISTDIR'] = ')-.4 E(destination/directory')-.5 E(en)144 686.4 Q -.65
(v.)-.4 G(Command\(en).65 E -.65(v.)-.4 G
(Dir\('$DISTDIR'\)\), None, mak).65 E(e_distdir\))-.1 E 1.13
(\(Also note that SCons will usually automatically create an)144 715.2 R
3.631(yd)-.15 G 1.131(irectory necessary to hold a tar)-3.631 F(get)-.18
E(\214le, so you normally don')144 727.2 Q 2.5(tn)-.18 G
(eed to create directories by hand.\))-2.5 E(July 2010)286.415 768 Q(41)
204.415 E 0 Cg EP
%%Page: 42 42
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(Con\214gure\()108 84 Q/F1 10/Times-Italic@0 SF(en).19 E(v)-.4 E F0 2.5
(,[).32 G F1(custom_tests)-2.3 E F0(,).27 E F1(conf_dir)2.7 E F0(,).73 E
F1(lo)2.59 E(g_\214le)-.1 E F0(,).18 E F1(con\214g_h)2.7 E F0(]\)).28 E
(en)108 100.8 Q -.65(v.)-.4 G(Con\214gure\([).65 E F1(custom_tests).2 E
F0(,).27 E F1(conf_dir)2.7 E F0(,).73 E F1(lo)2.59 E(g_\214le)-.1 E F0
(,).18 E F1(con\214g_h)2.7 E F0(]\)).28 E .756
(Creates a Con\214gure object for inte)144 112.8 R .755
(grated functionality similar to GNU autoconf.)-.15 F .755
(See the section)5.755 F("Con\214gure Conte)144 124.8 Q(xts," belo)-.15
E 1.3 -.65(w, f)-.25 H(or a complete e).65 E(xplanation of the ar)-.15 E
(guments and beha)-.18 E(vior)-.2 E(.)-.55 E(en)108 153.6 Q -.65(v.)-.4
G(Clone\([).65 E F1 -.1(ke)C(y)-.2 E F0(=).32 E F1(val).29 E F0 2.5(,.)
.51 G(..]\))-2.5 E .48(Return a separate cop)144 165.6 R 2.98(yo)-.1 G
2.981(fac)-2.98 G .481(onstruction en)-2.981 F 2.981(vironment. If)-.4 F
.481(there are an)2.981 F 2.981(yk)-.15 G -.15(ey)-3.081 G -.1(wo).15 G
.481(rd ar).1 F .481(guments speci-)-.18 F(\214ed, the)144 177.6 Q 2.5
(ya)-.15 G(re added to the returned cop)-2.5 E 1.3 -.65(y, o)-.1 H -.15
(ve).5 G(rwriting an).15 E 2.5(ye)-.15 G(xisting v)-2.65 E
(alues for the k)-.25 E -.15(ey)-.1 G -.1(wo).15 G(rds.).1 E(Example:)
144 201.6 Q(en)144 225.6 Q(v2 = en)-.4 E -.65(v.)-.4 G(Clone\(\)).65 E
(en)144 237.6 Q(v3 = en)-.4 E -.65(v.)-.4 G(Clone\(CCFLA).65 E
(GS = '-g'\))-.4 E(Additionally)144 254.4 Q 2.5(,al)-.65 G
(ist of tools and a toolpath may be speci\214ed, as in the En)-2.5 E
(vironment constructor:)-.4 E(def MyT)144 278.4 Q(ool\(en)-.8 E(v\): en)
-.4 E(v['FOO'] = 'bar')-.4 E(en)144 290.4 Q(v4 = en)-.4 E -.65(v.)-.4 G
(Clone\(tools = ['msvc', MyT).65 E(ool]\))-.8 E(The)108 314.4 Q F1(par)
3.75 E(se_\215a)-.1 E(gs)-.1 E F0 -.1(ke)2.77 G(yw)-.05 E(ord ar)-.1 E
(gument is also recognized:)-.18 E 2.5(#c)144 338.4 S(reate an en)-2.5 E
(vironment for compiling programs that use wxW)-.4 E(idgets)-.4 E(wx_en)
144 350.4 Q 2.5(v=e)-.4 G -.4(nv)-2.5 G
(.Clone\(parse_\215ags = '!wx-con\214g --c\215ags --cxx\215ags'\))-.25 E
(en)108 379.2 Q -.65(v.)-.4 G(Cop).65 E(y\([)-.1 E F1 -.1(ke)C(y)-.2 E
F0(=).32 E F1(val).29 E F0 2.5(,.).51 G(..]\))-2.5 E 2.5(An)144 391.2 S
-.25(ow)-2.5 G(-deprecated synon).25 E(ym for)-.15 E/F2 10/Times-Bold@0
SF(en)2.5 E -.7(v.)-.4 G(Clone\(\)).7 E F0(.)A(en)108 420 Q -.65(v.)-.4
G(CVS\().65 E F1 -.37(re)C(pository).37 E F0(,).32 E F1(module)2.88 E F0
(\)).18 E 3.076(Af)144 432 S .575(actory function that returns a Builde\
r object to be used to fetch source \214les from the speci\214ed)-3.176
F(CVS)144 444 Q F1 -.37(re)2.5 G(pository).37 E F0 5(.T).32 G
(he returned Builder is intended to be passed to the)-5 E F2(Sour)2.5 E
(ceCode)-.18 E F0(function.)2.5 E .039(The optional speci\214ed)144 468
R F1(module)2.919 E F0 .039(will be added to the be)2.719 F .04
(ginning of all repository path names; this can)-.15 F 1.124(be used, i\
n essence, to strip initial directory names from the repository path na\
mes, so that you)144 480 R(only ha)144 492 Q .3 -.15(ve t)-.2 H 2.5(or)
.15 G(eplicate part of the repository directory hierarch)-2.5 E 2.5(yi)
-.05 G 2.5(ny)-2.5 G(our local b)-2.5 E(uild directory)-.2 E(.)-.65 E
(Examples:)144 516 Q 2.5(#W)144 540 S(ill fetch foo/bar/src.c)-2.9 E 2.5
(#f)144 552 S(rom /usr/local/CVSR)-2.5 E(OO)-.4 E(T/foo/bar/src.c.)-.4 E
(en)144 564 Q -.65(v.)-.4 G(SourceCode\('.).65 E(', en)-.7 E -.65(v.)-.4
G(CVS\('/usr/local/CVSR).65 E(OO)-.4 E(T'\)\))-.4 E 2.5(#W)144 588 S
(ill fetch bar/src.c)-2.9 E 2.5(#f)144 600 S(rom /usr/local/CVSR)-2.5 E
(OO)-.4 E(T/foo/bar/src.c.)-.4 E(en)144 612 Q -.65(v.)-.4 G
(SourceCode\('.).65 E(', en)-.7 E -.65(v.)-.4 G(CVS\('/usr/local/CVSR)
.65 E(OO)-.4 E(T', 'foo'\)\))-.4 E 2.5(#W)144 636 S(ill fetch src.c)-2.9
E 2.5(#f)144 648 S(rom /usr/local/CVSR)-2.5 E(OO)-.4 E(T/foo/bar/src.c.)
-.4 E(en)144 660 Q -.65(v.)-.4 G(SourceCode\('.).65 E(', en)-.7 E -.65
(v.)-.4 G(CVS\('/usr/local/CVSR).65 E(OO)-.4 E(T', 'foo/bar'\)\))-.4 E
(Decider\()108 688.8 Q F1(function)1.97 E F0(\)).24 E(en)108 705.6 Q
-.65(v.)-.4 G(Decider\().65 E F1(function)1.97 E F0(\)).24 E .798
(Speci\214es that all up-to-date decisions for tar)144 717.6 R .798
(gets b)-.18 F .799(uilt through this construction en)-.2 F .799
(vironment will)-.4 F .067(be handled by the speci\214ed)144 729.6 R F1
(function)2.567 E F0 5.067(.T).24 G(he)-5.067 E F1(function)4.537 E F0
.067(can be one of the follo)2.807 F .066(wing strings that specify)-.25
F(July 2010)286.415 768 Q(42)204.415 E 0 Cg EP
%%Page: 43 43
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(the type of decision function to be performed:)144 84 Q/F1 10
/Times-Bold@0 SF(timestamp-newer)158 112.8 Q F0 1.881
(Speci\214es that a tar)4.381 F 1.881
(get shall be considered out of date and reb)-.18 F 1.882(uilt if the)
-.2 F(dependenc)188 124.8 Q(y')-.15 E 2.966(st)-.55 G .466
(imestamp is ne)-2.966 F .466(wer than the tar)-.25 F .466(get \214le')
-.18 F 2.966(st)-.55 G 2.966(imestamp. This)-2.966 F .465(is the beha)
2.966 F(vior)-.2 E(of the classic Mak)188 136.8 Q 2.5(eu)-.1 G(tility)
-2.5 E 2.5(,a)-.65 G(nd)-2.5 E F1(mak)2.5 E(e)-.1 E F0
(can be used a synon)2.5 E(ym for)-.15 E F1(timestamp-newer)2.5 E F0(.)A
F1(timestamp-match)158 165.6 Q F0 1.841(Speci\214es that a tar)4.341 F
1.841(get shall be considered out of date and reb)-.18 F 1.842
(uilt if the)-.2 F(dependenc)188 177.6 Q(y')-.15 E 2.535(st)-.55 G .035
(imestamp is dif)-2.535 F .034
(ferent than the timestamp recorded the last time the tar)-.25 F(get)
-.18 E -.1(wa)188 189.6 S 2.799(sb).1 G 2.799(uilt. This)-2.999 F(pro)
2.799 E .299(vides beha)-.15 F .299(vior v)-.2 F .299
(ery similar to the classic Mak)-.15 F 2.8(eu)-.1 G .3
(tility \(in particular)-2.8 F(,)-.4 E .513(\214les are not opened up s\
o that their contents can be checksummed\) e)188 201.6 R .513
(xcept that the tar)-.15 F(-)-.2 E .56(get will also be reb)188 213.6 R
.56(uilt if a dependenc)-.2 F 3.06<798c>-.15 G .56
(le has been restored to a v)-3.06 F .56(ersion with an)-.15 F/F2 10
/Times-Italic@0 SF(ear)3.25 E(-)-.2 E(lier)188 225.6 Q F0
(timestamp, such as can happen when restoring \214les from backup archi)
3.23 E -.15(ve)-.25 G(s.).15 E F1(MD5)158 254.4 Q F0 .128
(Speci\214es that a tar)2.629 F .128
(get shall be considered out of date and reb)-.18 F .128
(uilt if the dependenc)-.2 F(y')-.15 E 2.628(sc)-.55 G(on-)-2.628 E .317
(tent has changed sine the last time the tar)188 266.4 R .317(get w)-.18
F .317(as b)-.1 F .318(uilt, as determined be performing an)-.2 F 2.801
(MD5 checksum on the dependenc)188 278.4 R(y')-.15 E 5.301(sc)-.55 G
2.801(ontents and comparing it to the checksum)-5.301 F
(recorded the last time the tar)188 290.4 Q(get w)-.18 E(as b)-.1 E
(uilt.)-.2 E F1(content)5 E F0(can be used as a synon)2.5 E(ym for)-.15
E F1(MD5)2.5 E F0(.)A F1(MD5-timestamp)158 319.2 Q F0 .071
(Speci\214es that a tar)2.571 F .071
(get shall be considered out of date and reb)-.18 F .072
(uilt if the depen-)-.2 F(denc)188 331.2 Q(y')-.15 E 3.318(sc)-.55 G
.818(ontent has changed sine the last time the tar)-3.318 F .818(get w)
-.18 F .818(as b)-.1 F .818(uilt, e)-.2 F .817(xcept that depen-)-.15 F
2.163(dencies with a timestamp that matches the last time the tar)188
343.2 R 2.164(get w)-.18 F 2.164(as reb)-.1 F 2.164(uilt will be)-.2 F
1.178(assumed to be up-to-date and)188 355.2 R F2(not)4.038 E F0(reb)
4.358 E 3.678(uilt. This)-.2 F(pro)3.678 E 1.178(vides beha)-.15 F 1.177
(vior v)-.2 F 1.177(ery similar to the)-.15 F F1(MD5)188 367.2 Q F0
(beha)4.69 E 2.191(vior of al)-.2 F -.1(wa)-.1 G 2.191
(ys checksumming \214le contents, with an optimization of not).1 F .044
(checking the contents of \214les whose timestamps ha)188 379.2 R -.15
(ve)-.2 G(n').15 E 2.543(tc)-.18 G 2.543(hanged. The)-2.543 F(dra)2.543
E .043(wback is that)-.15 F .785(SCons will)188 391.2 R F2(not)3.645 E
F0 .785(detect if a \214le')3.965 F 3.285(sc)-.55 G .785
(ontent has changed b)-3.285 F .785(ut its timestamp is the same, as)-.2
F .291(might happen in an automated script that runs a b)188 403.2 R .29
(uild, updates a \214le, and runs the b)-.2 F(uild)-.2 E(ag)188 415.2 Q
(ain, all within a single second.)-.05 E(Examples:)144 444 Q 2.5(#U)144
468 S(se e)-2.5 E(xact timestamp matches by def)-.15 E(ault.)-.1 E
(Decider\(')144 480 Q(timestamp-match'\))-.18 E 2.5(#U)144 504 S
(se MD5 content signatures for an)-2.5 E 2.5(yt)-.15 G(ar)-2.5 E(gets b)
-.18 E(uilt)-.2 E 2.5(#w)144 516 S(ith the attached construction en)-2.5
E(vironment.)-.4 E(en)144 528 Q -.65(v.)-.4 G(Decider\('content'\)).65 E
1.992(In addition to the abo)144 556.8 R 2.292 -.15(ve a)-.15 H
(lready-a).15 E -.25(va)-.2 G 1.992(ilable functions, the).25 F F2
(function)6.462 E F0(ar)4.732 E 1.993(gument may be an actual)-.18 F
(Python function that tak)144 568.8 Q(es the follo)-.1 E(wing three ar)
-.25 E(guments:)-.18 E(dependenc)158 597.6 Q(y)-.15 E .795
(The Node \(\214le\) which should cause the)194 609.6 R F2(tar)3.425 E
-.1(ge)-.37 G(t).1 E F0 .795(to be reb)3.975 F .794
(uilt if it has "changed" since)-.2 F(the last tme)194 621.6 Q F2(tar)
2.63 E -.1(ge)-.37 G 2.5(tw).1 G(as b)-2.5 E(uilt.)-.2 E F0(tar)158
650.4 Q(get)-.18 E .731(The Node \(\214le\) being b)194 650.4 R 3.232
(uilt. In)-.2 F .732(the normal case, this is what should get reb)3.232
F .732(uilt if the)-.2 F F2(dependency)194.35 662.4 Q F0(has "changed.")
2.82 E(pre)158 691.2 Q(v_ni)-.25 E .004
(Stored information about the state of the)194 691.2 R F2(dependency)
2.854 E F0 .003(the last time the)2.824 F F2(tar)2.633 E -.1(ge)-.37 G
(t).1 E F0 -.1(wa)3.183 G 2.503(sb).1 G(uilt.)-2.703 E .121
(This can be consulted to match v)194 703.2 R .122
(arious \214le characteristics such as the timestamp, size,)-.25 F
(or content signature.)194 715.2 Q(July 2010)286.415 768 Q(43)204.415 E
0 Cg EP
%%Page: 44 44
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(The)144 84
Q/F1 10/Times-Italic@0 SF(function)4.558 E F0 .088(should return a)2.828
F/F2 10/Times-Bold@0 SF -.74(Tr)2.588 G(ue).74 E F0 .088(\(non-zero\) v)
2.588 F .088(alue if the)-.25 F F1(dependency)2.938 E F0 .088
(has "changed" since the last)2.908 F .628(time the)144 96 R F1(tar)
3.258 E -.1(ge)-.37 G(t).1 E F0 -.1(wa)3.808 G 3.128(sb).1 G .628
(uilt \(indicating that the tar)-3.328 F(get)-.18 E F1(should)3.468 E F0
.628(be reb)3.898 F .628(uilt\), and)-.2 F F2 -.25(Fa)3.128 G(lse).25 E
F0 .628(\(zero\) otherwise)3.128 F .58(\(indicating that the tar)144 108
R .58(get should)-.18 F F1(not)3.44 E F0 .58(be reb)3.76 F 3.08
(uilt\). Note)-.2 F .58(that the decision can be made using what-)3.08 F
-2.15 -.25(ev e)144 120 T 2.5(rc).25 G(riteria are appopriate.)-2.5 E
(Ignoring some or all of the function ar)5 E
(guments is perfectly normal.)-.18 E(Example:)144 144 Q
(def my_decider\(dependenc)144 168 Q 1.3 -.65(y, t)-.15 H(ar).65 E
(get, pre)-.18 E(v_ni\):)-.25 E(return not os.path.e)154 180 Q
(xists\(str\(tar)-.15 E(get\)\))-.18 E(en)144 204 Q -.65(v.)-.4 G
(Decider\(my_decider\)).65 E(Def)108 232.8 Q(ault\()-.1 E F1(tar).13 E
-.1(ge)-.37 G(ts).1 E F0(\)).27 E(en)108 249.6 Q -.65(v.)-.4 G(Def).65 E
(ault\()-.1 E F1(tar).13 E -.1(ge)-.37 G(ts).1 E F0(\)).27 E .572
(This speci\214es a list of def)144 261.6 R .572(ault tar)-.1 F .572
(gets, which will be b)-.18 F .572(uilt by)-.2 F F2(scons)3.072 E F0
.572(if no e)3.072 F .573(xplicit tar)-.15 F .573(gets are gi)-.18 F
-.15(ve)-.25 G(n).15 E(on the command line.)144 273.6 Q
(Multiple calls to)5 E F2(Default)2.5 E F0(\(\) are le)A -.05(ga)-.15 G
(l, and add to the list of def).05 E(ault tar)-.1 E(gets.)-.18 E 1.113
(Multiple tar)144 297.6 R 1.113
(gets should be speci\214ed as separate ar)-.18 F 1.113(guments to the)
-.18 F F2(Default)3.613 E F0 1.112(\(\) method, or as a list.)B F2
(Default)144 309.6 Q F0 .249
(\(\) will also accept the Node returned by an)B 2.749(yo)-.15 G -5.248
2.749(fa c)-2.749 H .25(onstruction en)-2.749 F(vironment')-.4 E 2.75
(sb)-.55 G .25(uilder meth-)-2.95 F(ods.)144 321.6 Q(Examples:)144 345.6
Q(Def)144 369.6 Q(ault\('foo', 'bar', 'baz'\))-.1 E(en)144 381.6 Q -.65
(v.)-.4 G(Def).65 E(ault\(['a', 'b', 'c']\))-.1 E(hello = en)144 393.6 Q
-.65(v.)-.4 G(Program\('hello', 'hello.c'\)).65 E(en)144 405.6 Q -.65
(v.)-.4 G(Def).65 E(ault\(hello\))-.1 E .617(An ar)144 422.4 R .617
(gument to)-.18 F F2(Default)3.117 E F0 .617(\(\) of)B F2(None)3.117 E
F0 .617(will clear all def)3.117 F .617(ault tar)-.1 F 3.117
(gets. Later)-.18 F .617(calls to)3.117 F F2(Default)3.117 E F0 .616
(\(\) will add)B(to the \(no)144 434.4 Q 2.5(we)-.25 G(mpty\) def)-2.5 E
(ault-tar)-.1 E(get list lik)-.18 E 2.5(en)-.1 G(ormal.)-2.5 E 2.501
(The current list of tar)144 458.4 R 2.501(gets added using the)-.18 F
F2(Default)5.001 E F0 2.502(\(\) function or method is a)B -.25(va)-.2 G
2.502(ilable in the).25 F F2(DEF)144 470.4 Q -.5(AU)-.9 G -.92(LT).5 G
(_T).92 E(ARGETS)-.9 E F0(list; see belo)2.5 E -.65(w.)-.25 G(Def)108
499.2 Q(aultEn)-.1 E(vironment\([)-.4 E F1(ar).33 E(gs)-.37 E F0(]\)).27
E 1.011(Creates and returns a def)144 511.2 R 1.011
(ault construction en)-.1 F 1.011(vironment object.)-.4 F 1.011
(This construction en)6.011 F 1.01(vironment is)-.4 F .406
(used internally by SCons in order to e)144 523.2 R -.15(xe)-.15 G .406
(cute man).15 F 2.906(yo)-.15 G 2.906(ft)-2.906 G .406
(he global functions in this list, and to fetch)-2.906 F
(source \214les transparently from source code management systems.)144
535.2 Q(Depends\()108 564 Q F1(tar).13 E -.1(ge)-.37 G(t).1 E F0(,).68 E
F1(dependency)2.85 E F0(\)).32 E(en)108 580.8 Q -.65(v.)-.4 G(Depends\()
.65 E F1(tar).13 E -.1(ge)-.37 G(t).1 E F0(,).68 E F1(dependency)2.85 E
F0(\)).32 E .204(Speci\214es an e)144 592.8 R .203(xplicit dependenc)
-.15 F .203(y; the)-.15 F F1(tar)2.833 E -.1(ge)-.37 G(t).1 E F0 .203
(will be reb)3.383 F .203(uilt whene)-.2 F -.15(ve)-.25 G 2.703(rt).15 G
(he)-2.703 E F1(dependency)3.053 E F0 .203(has changed.)3.023 F .343
(Both the speci\214ed)144 604.8 R F1(tar)2.973 E -.1(ge)-.37 G(t).1 E F0
(and)3.523 E F1(dependency)3.193 E F0 .343
(can be a string \(usually the path name of a \214le or direc-)3.163 F
.085(tory\) or Node objects, or a list of strings or Node objects \(suc\
h as returned by a Builder call\).)144 616.8 R(This)5.085 E
(should only be necessary for cases where the dependenc)144 628.8 Q 2.5
(yi)-.15 G 2.5(sn)-2.5 G(ot caught by a Scanner for the \214le.)-2.5 E
(Example:)144 652.8 Q(en)144 676.8 Q -.65(v.)-.4 G
(Depends\('foo', 'other).65 E(-input-\214le-for)-.2 E(-foo'\))-.2 E
(mylib = en)144 700.8 Q -.65(v.)-.4 G(Library\('mylib).65 E(.c'\))-.4 E
(installed_lib = en)144 712.8 Q -.65(v.)-.4 G(Install\(').65 E
(lib', mylib\))-.1 E(bar = en)144 724.8 Q -.65(v.)-.4 G(Program\('bar)
.65 E(.c'\))-.55 E(July 2010)286.415 768 Q(44)204.415 E 0 Cg EP
%%Page: 45 45
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5(#A)144
84 S(rrange for the library to be copied into the installation)-2.5 E
2.5(#d)144 96 S(irectory before trying to b)-2.5 E
(uild the "bar" program.)-.2 E 2.5(#\()144 108 S
(Note that this is for e)-2.5 E(xample only)-.15 E 5(.A)-.65 G
("real" library)-2.5 E 2.5(#d)144 120 S(ependenc)-2.5 E 2.5(yw)-.15 G
(ould normally be con\214gured through the $LIBS)-2.6 E 2.5(#a)144 132 S
(nd $LIBP)-2.5 E -1.11(AT)-.92 G 2.5(Hv)1.11 G
(ariables, not using an en)-2.75 E -.65(v.)-.4 G(Depends\(\) call.\)).65
E(en)144 156 Q -.65(v.)-.4 G(Depends\(bar).65 E 2.5(,i)-.4 G
(nstalled_lib\))-2.5 E(en)108 184.8 Q -.65(v.)-.4 G(Dictionary\([).65 E
/F1 10/Times-Italic@0 SF(var).29 E(s)-.1 E F0(]\)).27 E 1.074(Returns a\
 dictionary object containing copies of all of the construction v)144
196.8 R 1.075(ariables in the en)-.25 F(viron-)-.4 E 4.557(ment. If)144
208.8 R 2.057(there are an)4.557 F 4.557(yv)-.15 G 2.057
(ariable names speci\214ed, only the speci\214ed construction v)-4.807 F
2.056(ariables are)-.25 F(returned in the dictionary)144 220.8 Q(.)-.65
E(Example:)144 244.8 Q(dict = en)144 268.8 Q -.65(v.)-.4 G
(Dictionary\(\)).65 E(cc_dict = en)144 280.8 Q -.65(v.)-.4 G
(Dictionary\('CC', 'CCFLA).65 E(GS', 'CCCOM'\))-.4 E(Dir\()108 309.6 Q
F1(name).36 E F0 2.5(,[).18 G F1(dir)-2.15 E(ectory)-.37 E F0(]\)).32 E
(en)108 326.4 Q -.65(v.)-.4 G(Dir\().65 E F1(name).36 E F0 2.5(,[).18 G
F1(dir)-2.15 E(ectory)-.37 E F0(]\)).32 E .025(This returns a Directory\
 Node, an object that represents the speci\214ed directory)144 338.4 R
F1(name)2.526 E F0(.).18 E F1(name)5.386 E F0 .026(can be)2.706 F 2.88
(ar)144 350.4 S(elati)-2.88 E .68 -.15(ve o)-.25 H 2.88(ra).15 G .38
(bsolute path.)-2.88 F F1(dir)5.73 E(ectory)-.37 E F0 .379
(is an optional directory that will be used as the parent direc-)3.2 F
(tory)144 362.4 Q 5(.I)-.65 G 2.5(fn)-5 G(o)-2.5 E F1(dir)2.85 E(ectory)
-.37 E F0(is speci\214ed, the current script')2.82 E 2.5(sd)-.55 G
(irectory is used as the parent.)-2.5 E(If)144 386.4 Q F1(name)2.86 E F0
(is a list, SCons returns a list of Dir nodes.)2.68 E(Construction v)5 E
(ariables are e)-.25 E(xpanded in)-.15 E F1(name)2.5 E F0(.).18 E .16
(Directory Nodes can be used an)144 410.4 R .16(ywhere you w)-.15 F .16
(ould supply a string as a directory name to a Builder)-.1 F .92
(method or function.)144 422.4 R .92(Directory Nodes ha)5.92 F 1.219
-.15(ve a)-.2 H(ttrib).15 E .919
(utes and methods that are useful in man)-.2 F 3.419(ys)-.15 G(itua-)
-3.419 E(tions; see "File and Directory Nodes," belo)144 434.4 Q -.65
(w.)-.25 G(en)108 463.2 Q -.65(v.)-.4 G(Dump\([).65 E F1 -.1(ke)C(y)-.2
E F0(]\)).32 E .664(Returns a pretty printable representation of the en)
144 475.2 R(vironment.)-.4 E F1 -.1(ke)5.665 G(y)-.2 E F0 3.165(,i).32 G
3.165(fn)-3.165 G(ot)-3.165 E F1(None)3.165 E F0 3.165(,s).18 G .665
(hould be a string)-3.165 F(containing the name of the v)144 487.2 Q
(ariable of interest.)-.25 E(This SConstruct:)144 511.2 Q(en)144 523.2 Q
(v=En)-.4 E(vironment\(\))-.4 E(print en)144 535.2 Q -.65(v.)-.4 G
(Dump\('CCCOM'\)).65 E(will print:)144 552 Q('$CC -c -o $T)144 564 Q
(ARGET $CCFLA)-.93 E(GS $CPPFLA)-.4 E(GS $_CPPDEFFLA)-.4 E
(GS $_CPPINCFLA)-.4 E(GS $SOURCES')-.4 E(en)144 588 Q(v=En)-.4 E
(vironment\(\))-.4 E(print en)144 600 Q -.65(v.)-.4 G(Dump\(\)).65 E
(will print:)144 616.8 Q 2.5({')144 628.8 S(AR': 'ar',)-2.5 E
('ARCOM': '$AR $ARFLA)149 640.8 Q(GS $T)-.4 E
(ARGET $SOURCES0RANLIB $RANLIBFLA)-.93 E(GS $T)-.4 E(ARGET',)-.93 E
('ARFLA)149 652.8 Q(GS': [')-.4 E(r'],)-.5 E('AS': 'as',)149 664.8 Q
('ASCOM': '$AS $ASFLA)149 676.8 Q(GS -o $T)-.4 E(ARGET $SOURCES',)-.93 E
('ASFLA)149 688.8 Q(GS': [],)-.4 E(...)149 700.8 Q(July 2010)286.415 768
Q(45)204.415 E 0 Cg EP
%%Page: 46 46
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(EnsurePythonV)108 84 Q(ersion\()-1.11 E/F1 10/Times-Italic@0 SF(major)
.38 E F0(,).73 E F1(minor)2.88 E F0(\)).73 E(en)108 100.8 Q -.65(v.)-.4
G(EnsurePythonV).65 E(ersion\()-1.11 E F1(major).38 E F0(,).73 E F1
(minor)2.88 E F0(\)).73 E .462(Ensure that the Python v)144 112.8 R .462
(ersion is at least)-.15 F F1(major)2.962 E F0(.).73 E F1(minor).38 E F0
5.462(.T).73 G .462(his function will print out an error mes-)-5.462 F
(sage and e)144 124.8 Q(xit SCons with a non-zero e)-.15 E
(xit code if the actual Python v)-.15 E(ersion is not late enough.)-.15
E(Example:)144 148.8 Q(EnsurePythonV)144 172.8 Q(ersion\(2,2\))-1.11 E
(EnsureSConsV)108 201.6 Q(ersion\()-1.11 E F1(major).38 E F0(,).73 E F1
(minor)2.88 E F0 2.5(,[).73 G F1 -1.91 -.37(re v)-2.5 H(ision).37 E F0
(]\)).24 E(en)108 218.4 Q -.65(v.)-.4 G(EnsureSConsV).65 E(ersion\()
-1.11 E F1(major).38 E F0(,).73 E F1(minor)2.88 E F0 2.5(,[).73 G F1
-1.91 -.37(re v)-2.5 H(ision).37 E F0(]\)).24 E .11
(Ensure that the SCons v)144 230.4 R .111(ersion is at least)-.15 F F1
(major)2.611 E(.minor)-1.11 E F0 2.611(,o).73 G(r)-2.611 E F1(major)
2.611 E(.minor)-1.11 E(.r)-1.11 E -.15(ev)-.37 G(ision).15 E F0 5.111
(.i).24 G(f)-5.111 E F1 -1.91 -.37(re v)2.611 H(ision).37 E F0 .111
(is speci-)2.851 F 2.76(\214ed. This)144 242.4 R .26
(function will print out an error message and e)2.76 F .26
(xit SCons with a non-zero e)-.15 F .26(xit code if the)-.15 F
(actual SCons v)144 254.4 Q(ersion is not late enough.)-.15 E(Examples:)
144 278.4 Q(EnsureSConsV)144 302.4 Q(ersion\(0,14\))-1.11 E
(EnsureSConsV)144 326.4 Q(ersion\(0,96,90\))-1.11 E(En)108 355.2 Q
(vironment\([)-.4 E F1 -.1(ke)C(y)-.2 E F0(=).32 E F1(value).29 E F0 2.5
(,.).18 G(..]\))-2.5 E(en)108 372 Q -.65(v.)-.4 G(En).65 E(vironment\([)
-.4 E F1 -.1(ke)C(y)-.2 E F0(=).32 E F1(value).29 E F0 2.5(,.).18 G
(..]\))-2.5 E(Return a ne)144 384 Q 2.5(wc)-.25 G(onstruction en)-2.5 E
(vironment initialized with the speci\214ed)-.4 E F1 -.1(ke)2.5 G(y)-.2
E F0(=).32 E F1(value).29 E F0(pairs.)2.5 E(Ex)108 412.8 Q(ecute\()-.15
E F1(action).33 E F0 2.5(,[).24 G F1(strfunction)-2.16 E F0(,).24 E F1
(varlist)2.79 E F0(]\)).68 E(en)108 429.6 Q -.65(v.)-.4 G(Ex).65 E
(ecute\()-.15 E F1(action).33 E F0 2.5(,[).24 G F1(strfunction)-2.16 E
F0(,).24 E F1(varlist)2.79 E F0(]\)).68 E(Ex)144 441.6 Q .309
(ecutes an Action object.)-.15 F .309(The speci\214ed)5.309 F F1(action)
2.809 E F0 .31(may be an Action object \(see the section "Action)2.809 F
.684(Objects," belo)144 453.6 R 1.984 -.65(w, f)-.25 H .683
(or a complete e).65 F .683(xplanation of the ar)-.15 F .683
(guments and beha)-.18 F .683(vior\), or it may be a com-)-.2 F 1.425
(mand-line string, list of commands, or e)144 465.6 R -.15(xe)-.15 G
1.426(cutable Python function, each of which will be con-).15 F -.15(ve)
144 477.6 S .374(rted into an Action object and then e).15 F -.15(xe)
-.15 G 2.874(cuted. The).15 F -.15(ex)2.874 G .373(it v).15 F .373
(alue of the command or return v)-.25 F .373(alue of)-.25 F
(the Python function will be returned.)144 489.6 Q 1.852(Note that)144
513.6 R/F2 10/Times-Bold@0 SF(scons)4.352 E F0 1.852
(will print an error message if the e)4.352 F -.15(xe)-.15 G(cuted).15 E
F1(action)4.683 E F0 -.1(fa)4.593 G 1.853(ils--that is, e).1 F 1.853
(xits with or)-.15 F .499(returns a non-zero v)144 525.6 R(alue.)-.25 E
F2(scons)5.499 E F0(will)2.999 E F1 .499(not ,)3.359 F F0(ho)2.999 E(we)
-.25 E -.15(ve)-.25 G 1.299 -.4(r, a).15 H .498
(utomatically terminate the b).4 F .498(uild if the speci-)-.2 F(\214ed)
144 537.6 Q F1(action)3.979 E F0 -.1(fa)3.889 G 3.649(ils. If).1 F 1.149
(you w)3.649 F 1.149(ant the b)-.1 F 1.15
(uild to stop in response to a f)-.2 F(ailed)-.1 E F2(Execute)3.65 E F0
1.15(\(\) call, you must)B -.15(ex)144 549.6 S
(plicitly check for a non-zero return v).15 E(alue:)-.25 E(Ex)144 573.6
Q(ecute\(Cop)-.15 E(y\('\214le.out', '\214le.in'\)\))-.1 E(if Ex)144
597.6 Q(ecute\("mkdir sub/dir/ectory"\):)-.15 E 2.5(#T)154 609.6 S
(he mkdir f)-2.5 E(ailed, don')-.1 E 2.5(tt)-.18 G(ry to b)-2.5 E(uild.)
-.2 E(Exit\(1\))154 621.6 Q(Exit\([)108 650.4 Q F1(value).29 E F0(]\))
.18 E(en)108 667.2 Q -.65(v.)-.4 G(Exit\([).65 E F1(value).29 E F0(]\))
.18 E .955(This tells)144 679.2 R F2(scons)3.455 E F0 .955(to e)3.455 F
.955(xit immediately with the speci\214ed)-.15 F F1(value)3.455 E F0
5.955(.A).18 G(def)-2.5 E .955(ault e)-.1 F .954(xit v)-.15 F .954
(alue of)-.25 F F2(0)3.454 E F0 .954(\(zero\) is)3.454 F(used if no v)
144 691.2 Q(alue is speci\214ed.)-.25 E(July 2010)286.415 768 Q(46)
204.415 E 0 Cg EP
%%Page: 47 47
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(Export\()
108 84 Q/F1 10/Times-Italic@0 SF(var).29 E(s)-.1 E F0(\)).27 E(en)108
100.8 Q -.65(v.)-.4 G(Export\().65 E F1(var).29 E(s)-.1 E F0(\)).27 E
.132(This tells)144 112.8 R/F2 10/Times-Bold@0 SF(scons)2.632 E F0 .132
(to e)2.632 F .132(xport a list of v)-.15 F .133
(ariables from the current SConscript \214le to all other SConscript)
-.25 F 3.196(\214les. The)144 124.8 R -.15(ex)3.196 G .696(ported v).15
F .696(ariables are k)-.25 F .696
(ept in a global collection, so subsequent calls to)-.1 F F2(Export)
3.196 E F0 .696(\(\) will)B -.15(ove)144 136.8 S -.2(r-).15 G .977
(write pre).2 F .977(vious e)-.25 F .978(xports that ha)-.15 F 1.278
-.15(ve t)-.2 H .978(he same name.).15 F .978(Multiple v)5.978 F .978
(ariable names can be passed to)-.25 F F2(Export)144 148.8 Q F0 .027
(\(\) as separate ar)B .027(guments or as a list.)-.18 F -2.15 -.25
(Ke y)5.027 H -.1(wo).25 G .027(rd ar).1 F .027
(guments can be used to pro)-.18 F .026(vide names and)-.15 F .505
(their v)144 160.8 R 3.005(alues. A)-.25 F .505
(dictionary can be used to map v)3.005 F .506(ariables to a dif)-.25 F
.506(ferent name when e)-.25 F 3.006(xported. Both)-.15 F(local v)144
172.8 Q(ariables and global v)-.25 E(ariables can be e)-.25 E(xported.)
-.15 E(Examples:)144 196.8 Q(en)144 220.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(\)).4 E 2.5(#M)144 232.8 S(ak)-2.5 E 2.5(ee)-.1 G .8 -.4
(nv a)-2.5 H -.25(va).2 G
(ilable for all SConscript \214les to Import\(\).).25 E(Export\("en)144
244.8 Q(v"\))-.4 E(package = 'my_name')144 268.8 Q 2.5(#M)144 280.8 S
(ak)-2.5 E 2.5(ee)-.1 G .8 -.4(nv a)-2.5 H(nd package a).4 E -.25(va)-.2
G(ilable for all SConscript \214les:.).25 E(Export\("en)144 292.8 Q
(v", "package"\))-.4 E 2.5(#M)144 316.8 S(ak)-2.5 E 2.5(ee)-.1 G .8 -.4
(nv a)-2.5 H(nd package a).4 E -.25(va)-.2 G
(ilable for all SConscript \214les:).25 E(Export\(["en)144 328.8 Q
(v", "package"]\))-.4 E 2.5(#M)144 352.8 S(ak)-2.5 E 2.5(ee)-.1 G .8 -.4
(nv a)-2.5 H -.25(va).2 G(ilable using the name deb).25 E(ug:)-.2 E
(Export\(deb)144 364.8 Q(ug = en)-.2 E(v\))-.4 E 2.5(#M)144 388.8 S(ak)
-2.5 E 2.5(ee)-.1 G .8 -.4(nv a)-2.5 H -.25(va).2 G
(ilable using the name deb).25 E(ug:)-.2 E(Export\({"deb)144 400.8 Q
(ug":en)-.2 E(v}\))-.4 E .224(Note that the)144 429.6 R F2(SConscript)
2.724 E F0 .224(\(\) function supports an)B F1 -.2(ex)2.723 G(ports).2 E
F0(ar)2.993 E .223(gument that mak)-.18 F .223(es it easier to to e)-.1
F(xport)-.15 E 3.221(av)144 441.6 S .722(ariable or set of v)-3.471 F
.722(ariables to a single SConscript \214le.)-.25 F .722
(See the description of the)5.722 F F2(SConscript)3.222 E F0(\(\))A
(function, belo)144 453.6 Q -.65(w.)-.25 G(File\()108 482.4 Q F1(name)
.36 E F0 2.5(,[).18 G F1(dir)-2.15 E(ectory)-.37 E F0(]\)).32 E(en)108
499.2 Q -.65(v.)-.4 G(File\().65 E F1(name).36 E F0 2.5(,[).18 G F1(dir)
-2.15 E(ectory)-.37 E F0(]\)).32 E .437(This returns a File Node, an ob\
ject that represents the speci\214ed \214le)144 511.2 R F1(name)2.937 E
F0(.).18 E F1(name)5.797 E F0 .437(can be a relati)3.117 F -.15(ve)-.25
G(or absolute path.)144 523.2 Q F1(dir)5.35 E(ectory)-.37 E F0
(is an optional directory that will be used as the parent directory)2.82
E(.)-.65 E(If)144 547.2 Q F1(name)2.86 E F0
(is a list, SCons returns a list of File nodes.)2.68 E(Construction v)5
E(ariables are e)-.25 E(xpanded in)-.15 E F1(name)2.5 E F0(.).18 E .288
(File Nodes can be used an)144 571.2 R .288(ywhere you w)-.15 F .288
(ould supply a string as a \214le name to a Builder method or)-.1 F
2.881(function. File)144 583.2 R .381(Nodes ha)2.881 F .681 -.15(ve a)
-.2 H(ttrib).15 E .381(utes and methods that are useful in man)-.2 F
2.88(ys)-.15 G .38(ituations; see "File and)-2.88 F
(Directory Nodes," belo)144 595.2 Q -.65(w.)-.25 G(FindFile\()108 624 Q
F1(\214le)1.91 E F0(,).18 E F1(dir)2.85 E(s)-.1 E F0(\)).27 E(en)108
640.8 Q -.65(v.)-.4 G(FindFile\().65 E F1(\214le)1.91 E F0(,).18 E F1
(dir)2.85 E(s)-.1 E F0(\)).27 E 1.356(Search for)144 652.8 R F1(\214le)
5.766 E F0 1.356(in the path speci\214ed by)4.036 F F1(dir)3.856 E(s)-.1
E F0(.).27 E F1(dir)6.706 E(s)-.1 E F0 1.357
(may be a list of directory names or a single)4.126 F 1.56
(directory name.)144 664.8 R 1.56
(In addition to searching for \214les that e)6.56 F 1.56
(xist in the \214lesytem, this function also)-.15 F(searches for deri)
144 676.8 Q -.15(ve)-.25 G 2.5<648c>.15 G(les that ha)-2.5 E .3 -.15
(ve n)-.2 H(ot yet been b).15 E(uilt.)-.2 E(Example:)144 700.8 Q
(foo = en)144 724.8 Q -.65(v.)-.4 G(FindFile\('foo', [').65 E(dir1', ')
-.5 E(dir2']\))-.5 E(July 2010)286.415 768 Q(47)204.415 E 0 Cg EP
%%Page: 48 48
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(FindInstalledFiles\()108 84 Q/F1 10/Times-Italic@0 SF(\)).34 E F0(en)
108 100.8 Q -.65(v.)-.4 G(FindInstalledFiles\().65 E F1(\)).34 E F0
(Returns the list of tar)144 112.8 Q(gets set up by the)-.18 E/F2 10
/Times-Bold@0 SF(Install\(\))2.5 E F0(or)2.5 E F2(InstallAs\(\))2.5 E F0
-.2(bu)2.5 G(ilders.).2 E(This function serv)144 136.8 Q(es as a con)
-.15 E -.15(ve)-.4 G
(nient method to select the contents of a binary package.).15 E
(Example:)144 160.8 Q(Install\( '/bin', [ 'e)144 184.8 Q -.15(xe)-.15 G
(cutable_a', 'e).15 E -.15(xe)-.15 G(cutable_b' ] \)).15 E 2.5(#w)144
208.8 S(ill return the \214le node list)-2.5 E 2.5(#[')144 220.8 S
(/bin/e)-2.5 E -.15(xe)-.15 G(cutable_a', '/bin/e).15 E -.15(xe)-.15 G
(cutable_b' ]).15 E(FindInstalledFiles\(\))144 232.8 Q
(Install\( '/lib', [ ')144 256.8 Q(some_library' ] \))-.55 E 2.5(#w)144
280.8 S(ill return the \214le node list)-2.5 E 2.5(#[')144 292.8 S
(/bin/e)-2.5 E -.15(xe)-.15 G(cutable_a', '/bin/e).15 E -.15(xe)-.15 G
(cutable_b', '/lib/some_library' ]).15 E(FindInstalledFiles\(\))144
304.8 Q(FindSourceFiles\()108 333.6 Q F1(node).36 E F0(=).18 E F1('"."')
-1.01 E F0(\)).07 E(en)108 350.4 Q -.65(v.)-.4 G(FindSourceFiles\().65 E
F1(node).36 E F0(=).18 E F1('"."')-1.01 E F0(\)).07 E .643
(Returns the list of nodes which serv)144 374.4 R 3.143(ea)-.15 G 3.143
(st)-3.143 G .643(he source of the b)-3.143 F .643(uilt \214les.)-.2 F
.644(It does so by inspecting the)5.643 F(dependenc)144 386.4 Q 3.77(yt)
-.15 G 1.27(ree starting at the optional ar)-3.77 F(gument)-.18 E F2
(node)3.769 E F0 1.269(which def)3.769 F 1.269
(aults to the '"."'-node. It will)-.1 F(then return all lea)144 398.4 Q
-.15(ve)-.2 G 2.5(so).15 G(f)-2.5 E F2(node.)2.5 E F0
(These are all children which ha)5 E .3 -.15(ve n)-.2 H 2.5(of).15 G
(urther children.)-2.5 E(This function is a con)144 422.4 Q -.15(ve)-.4
G(nient method to select the contents of a Source P).15 E(ackage.)-.15 E
(Example:)144 446.4 Q(Program\( ')144 470.4 Q(src/main_a.c' \))-.55 E
(Program\( ')144 482.4 Q(src/main_b)-.55 E(.c' \))-.4 E
(Program\( 'main_c.c' \))144 494.4 Q 2.5(#r)144 518.4 S
(eturns ['main_c.c', ')-2.5 E(src/main_a.c', 'SConstruct', ')-.55 E
(src/main_b)-.55 E(.c'])-.4 E(FindSourceFiles\(\))144 530.4 Q 2.5(#r)144
554.4 S(eturns [')-2.5 E(src/main_b)-.55 E(.c', ')-.4 E(src/main_a.c' ])
-.55 E(FindSourceFiles\( ')144 566.4 Q(src' \))-.55 E .377
(As you can see b)144 595.2 R .377
(uild support \214les \(SConstruct in the abo)-.2 F .677 -.15(ve ex)-.15
H .377(ample\) will also be returned by this).15 F(function.)144 607.2 Q
(FindP)108 636 Q(athDirs\()-.15 E F1(variable).29 E F0(\)).18 E .273(Re\
turns a function \(actually a callable Python object\) intended to be u\
sed as the)144 648 R F2(path_function)2.773 E F0(of)2.773 E 3.325(aS)144
660 S .825(canner object.)-3.325 F .825
(The returned object will look up the speci\214ed)5.825 F F1(variable)
3.616 E F0 .826(in a construction en)3.506 F(vi-)-.4 E 1.974
(ronment and treat the construction v)144 672 R(ariable')-.25 E 4.474
(sv)-.55 G 1.974(alue as a list of directory paths that should be)-4.724
F(searched \(lik)144 684 Q(e)-.1 E F2(CPPP)2.5 E -.95(AT)-.74 G(H).95 E
F0(,)A F2(LIBP)2.5 E -.95(AT)-.74 G(H).95 E F0 2.5(,e)C(tc.\).)-2.5 E
1.111(Note that use of)144 708 R F2(FindP)3.611 E(athDirs)-.1 E F0 1.112
(\(\) is generally preferable to writing your o)B(wn)-.25 E F2
(path_function)3.612 E F0(for)3.612 E .57(the follo)144 720 R .57(wing \
reasons: 1\) The returned list will contain all appropriate directories\
 found in source)-.25 F(July 2010)286.415 768 Q(48)204.415 E 0 Cg EP
%%Page: 49 49
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .106
(trees \(when)144 84 R/F1 10/Times-Bold@0 SF -.92(Va)2.606 G(riantDir)
.92 E F0 .106(\(\) is used\) or in code repositories \(when)B F1
(Repository)2.606 E F0 .106(\(\) or the)B F1<ad59>2.606 E F0 .106
(option are)2.606 F 2.734(used\). 2\))144 96 R .233
(scons will identify e)2.734 F .233(xpansions of)-.15 F/F2 10
/Times-Italic@0 SF(variable)3.023 E F0 .233(that e)2.913 F -.25(va)-.25
G .233(luate to the same list of directories as,).25 F(in f)144 108 Q
(act, the same list, and a)-.1 E -.2(vo)-.2 G
(id re-scanning the directories for \214les, when possible.).2 E
(Example:)144 132 Q(def my_scan\(node, en)144 156 Q 1.3 -.65(v, p)-.4 H
(ath, ar).65 E(g\):)-.18 E 2.5(#C)154 168 S
(ode to scan \214le contents goes here...)-2.5 E(return include_\214les)
154 180 Q(scanner = Scanner\(name = 'myscanner',)144 204 Q
(function = my_scan,)189 216 Q(path_function = FindP)189 228 Q
(athDirs\('MYP)-.15 E -1.11(AT)-.92 G(H'\)\))1.11 E(Flatten\()108 256.8
Q F2(sequence).34 E F0(\)).18 E(en)108 273.6 Q -.65(v.)-.4 G(Flatten\()
.65 E F2(sequence).34 E F0(\)).18 E -.8(Ta)144 285.6 S -.1(ke).8 G 3.138
(sas).1 G .639(equence \(that is, a Python list or tuple\) that may con\
tain nested sequences and returns a)-3.138 F .022
(\215attened list containing all of the indi)144 297.6 R .021
(vidual elements in an)-.25 F 2.521(ys)-.15 G 2.521(equence. This)-2.521
F .021(can be helpful for col-)2.521 F .707(lecting the lists returned \
by calls to Builders; other Builders will automatically \215atten lists\
 speci-)144 309.6 R(\214ed as input, b)144 321.6 Q
(ut direct Python manipulation of these lists does not.)-.2 E(Examples:)
144 345.6 Q(foo = Object\('foo.c'\))144 369.6 Q(bar = Object\('bar)144
381.6 Q(.c'\))-.55 E 2.5(#B)144 405.6 S
(ecause `foo' and `bar' are lists returned by the Object\(\) Builder)
-2.5 E(,)-.4 E 2.5(#`)144 417.6 S
(objects' will be a list containing nested lists:)-2.5 E
(objects = ['f1.o', foo, 'f2.o', bar)144 429.6 Q 2.5(,')-.4 G(f3.o'])
-2.5 E 2.5(#P)144 453.6 S
(assing such a list to another Builder is all right because)-2.65 E 2.5
(#t)144 465.6 S(he Builder will \215atten the list automatically:)-2.5 E
(Program\(source = objects\))144 477.6 Q 2.5(#I)144 501.6 S 2.5(fy)-2.5
G(ou need to manipulate the list directly using Python, you need to)-2.5
E 2.5(#c)144 513.6 S
(all Flatten\(\) yourself, or otherwise handle nested lists:)-2.5 E
(for object in Flatten\(objects\):)144 525.6 Q(print str\(object\))154
537.6 Q(GetBuildF)108 566.4 Q(ailures\(\))-.15 E .487
(Returns a list of e)144 578.4 R .487(xceptions for the actions that f)
-.15 F .487(ailed while attempting to b)-.1 F .487(uild tar)-.2 F 2.986
(gets. Each)-.18 F(ele-)2.986 E .923(ment in the returned list is a)144
590.4 R F1(BuildErr)3.423 E(or)-.18 E F0 .923(object with the follo)
3.423 F .924(wing attrib)-.25 F .924(utes that record v)-.2 F(arious)
-.25 E(aspects of the b)144 602.4 Q(uild f)-.2 E(ailure:)-.1 E F1(.node)
144 626.4 Q F0(The node that w)2.5 E(as being b)-.1 E(uilt when the b)
-.2 E(uild f)-.2 E(ailure occurred.)-.1 E F1(.status)144 650.4 Q F0 .42
(The numeric e)2.92 F .42
(xit status returned by the command or Python function that f)-.15 F .42
(ailed when try-)-.1 F(ing to b)144 662.4 Q(uild the speci\214ed Node.)
-.2 E F1(.errstr)144 686.4 Q F0 .728
(The SCons error string describing the b)3.228 F .728(uild f)-.2 F 3.228
(ailure. \(This)-.1 F .728(is often a generic message lik)3.228 F(e)-.1
E("Error 2" to indicate that an e)144 698.4 Q -.15(xe)-.15 G
(cuted command e).15 E(xited with a status of 2.\))-.15 E F1
(.\214lename)144 722.4 Q F0 .419
(The name of the \214le or directory that actually caused the f)2.92 F
2.919(ailure. This)-.1 F .419(may be dif)2.919 F(ferent)-.25 E
(July 2010)286.415 768 Q(49)204.415 E 0 Cg EP
%%Page: 50 50
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .826
(from the)144 84 R/F1 10/Times-Bold@0 SF(.node)3.326 E F0(attrib)3.326 E
3.326(ute. F)-.2 F .826(or e)-.15 F .826(xample, if an attempt to b)-.15
F .826(uild a tar)-.2 F .826(get named)-.18 F F1(sub/dir/tar)3.326 E
(get)-.1 E F0 -.1(fa)3.326 G(ils).1 E .374(because the)144 96 R F1
(sub/dir)2.874 E F0 .374(directory could not be created, then the)2.874
F F1(.node)2.873 E F0(attrib)2.873 E .373(ute will be)-.2 F F1
(sub/dir/tar)2.873 E(get)-.1 E F0 -.2(bu)144 108 S 2.5(tt).2 G(he)-2.5 E
F1(.\214lename)2.5 E F0(attrib)2.5 E(ute will be)-.2 E F1(sub/dir)2.5 E
F0(.)A F1(.executor)144 132 Q F0 .246(The SCons Ex)2.746 F .247
(ecutor object for the tar)-.15 F .247(get Node being b)-.18 F 2.747
(uilt. This)-.2 F .247(can be used to retrie)2.747 F -.15(ve)-.25 G
(the construction en)144 144 Q(vironment used for the f)-.4 E
(ailed action.)-.1 E F1(.action)144 168 Q F0 .133
(The actual SCons Action object that f)2.633 F 2.632(ailed. This)-.1 F
.132(will be one speci\214c action out of the pos-)2.632 F
(sible list of actions that w)144 180 Q(ould ha)-.1 E .3 -.15(ve b)-.2 H
(een e).15 E -.15(xe)-.15 G(cuted to b).15 E(uild the tar)-.2 E(get.)
-.18 E F1(.command)144 204 Q F0 .065(The actual e)2.565 F .065
(xpanded command that w)-.15 F .065(as e)-.1 F -.15(xe)-.15 G .065
(cuted and f).15 F .066(ailed, after e)-.1 F .066(xpansion of)-.15 F F1
($T)2.566 E(AR-)-.9 E(GET)144 216 Q F0(,)A F1($SOURCE)2.5 E F0 2.5(,a)C
(nd other construction v)-2.5 E(ariables.)-.25 E .587(Note that the)144
240 R F1(GetBuildF)3.087 E(ailur)-.25 E(es)-.18 E F0 .587
(\(\) function will al)B -.1(wa)-.1 G .586
(ys return an empty list until an).1 F 3.086(yb)-.15 G .586(uild f)
-3.286 F(ailure)-.1 E 1.496(has occurred, which means that)144 252 R F1
(GetBuildF)3.996 E(ailur)-.25 E(es)-.18 E F0 1.496(\(\) will al)B -.1
(wa)-.1 G 1.496(ys return an empty list while the).1 F F1(SConscript)144
264 Q F0 1.146(\214les are being read.)3.646 F 1.146
(Its primary intended use is for functions that will be e)6.146 F -.15
(xe)-.15 G(cuted).15 E(before SCons e)144 276 Q
(xits by passing them to the standard Python)-.15 E F1(atexit.r)2.5 E
(egister)-.18 E F0(\(\) function.)A(Example:)5 E(import ate)144 300 Q
(xit)-.15 E(def print_b)144 324 Q(uild_f)-.2 E(ailures\(\):)-.1 E
(from SCons.Script import GetBuildF)154 336 Q(ailures)-.15 E
(for bf in GetBuildF)154 348 Q(ailures\(\):)-.15 E(print "%s f)164 360 Q
(ailed: %s" % \(bf.node, bf.errstr\))-.1 E(ate)144 384 Q(xit.re)-.15 E
(gister\(print_b)-.15 E(uild_f)-.2 E(ailures\))-.1 E(GetBuildP)108 412.8
Q(ath\()-.15 E/F2 10/Times-Italic@0 SF(\214le)1.91 E F0 2.5(,[).18 G F2
(...)-2.27 E F0(]\))A(en)108 429.6 Q -.65(v.)-.4 G(GetBuildP).65 E
(ath\()-.15 E F2(\214le)1.91 E F0 2.5(,[).18 G F2(...)-2.27 E F0(]\))A
.421(Returns the)144 441.6 R F1(scons)2.921 E F0 .421
(path name \(or names\) for the speci\214ed)2.921 F F2(\214le)4.831 E F0
.421(\(or \214les\).)3.101 F .421(The speci\214ed)5.421 F F2(\214le)
4.832 E F0 .422(or \214les)3.102 F(may be)144 453.6 Q F1(scons)2.5 E F0
(Nodes or strings representing path names.)2.5 E(GetLaunchDir\(\))108
482.4 Q(en)108 499.2 Q -.65(v.)-.4 G(GetLaunchDir\(\)).65 E .327
(Returns the absolute path name of the directory from which)144 511.2 R
F1(scons)2.827 E F0 -.1(wa)2.826 G 2.826(si).1 G .326(nitially in)-2.826
F -.2(vo)-.4 G -.1(ke).2 G 2.826(d. This).1 F(can)2.826 E .281
(be useful when using the)144 523.2 R F1<ad75>2.781 E F0(,)A F1<ad55>
2.781 E F0(or)2.781 E F1<ad44>2.781 E F0 .281
(options, which internally change to the directory in which)2.781 F(the)
144 535.2 Q F1(SConstruct)2.5 E F0(\214le is found.)2.5 E(GetOption\()
108 564 Q F2(name).36 E F0(\)).18 E(en)108 580.8 Q -.65(v.)-.4 G
(GetOption\().65 E F2(name).36 E F0(\)).18 E .565(This function pro)144
592.8 R .564(vides a w)-.15 F .564(ay to query the v)-.1 F .564
(alue of SCons options set on scons command line \(or)-.25 F
(set using the)144 604.8 Q F2(SetOption)2.5 E F0(\(\) function\).).24 E
(The options supported are:)5 E F1(cache_deb)158 633.6 Q(ug)-.2 E F0
(which corresponds to --cache-deb)188 645.6 Q(ug;)-.2 E F1
(cache_disable)158 662.4 Q F0(which corresponds to --cache-disable;)188
674.4 Q F1(cache_f)158 691.2 Q(or)-.25 E(ce)-.18 E F0
(which corresponds to --cache-force;)188 703.2 Q(July 2010)286.415 768 Q
(50)204.415 E 0 Cg EP
%%Page: 51 51
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(cache_sho)158 84 Q(w)-.1 E F0
(which corresponds to --cache-sho)188 96 Q(w;)-.25 E F1(clean)158 112.8
Q F0(which corresponds to -c, --clean and --remo)188 112.8 Q -.15(ve)
-.15 G(;).15 E F1(con\214g)158 129.6 Q F0
(which corresponds to --con\214g;)188 141.6 Q F1(dir)158 158.4 Q(ectory)
-.18 E F0(which corresponds to -C and --directory;)188 170.4 Q F1
(diskcheck)158 187.2 Q F0(which corresponds to --diskcheck)188 199.2 Q
F1(duplicate)158 216 Q F0(which corresponds to --duplicate;)188 228 Q F1
(\214le)158 244.8 Q F0(which corresponds to -f, --\214le, --mak)188
244.8 Q(e\214le and --sconstruct;)-.1 E F1(help)158 261.6 Q F0
(which corresponds to -h and --help;)188 261.6 Q F1(ignor)158 278.4 Q
(e_err)-.18 E(ors)-.18 E F0(which corresponds to --ignore-errors;)188
290.4 Q F1(implicit_cache)158 307.2 Q F0
(which corresponds to --implicit-cache;)188 319.2 Q F1
(implicit_deps_changed)158 336 Q F0
(which corresponds to --implicit-deps-changed;)188 348 Q F1
(implicit_deps_unchanged)158 364.8 Q F0
(which corresponds to --implicit-deps-unchanged;)188 376.8 Q F1
(interacti)158 393.6 Q -.1(ve)-.1 G F0
(which corresponds to --interact and --interacti)188 405.6 Q -.15(ve)
-.25 G(;).15 E F1 -.1(ke)158 422.4 S(ep_going).1 E F0
(which corresponds to -k and --k)188 434.4 Q(eep-going;)-.1 E F1
(max_drift)158 451.2 Q F0(which corresponds to --max-drift;)188 463.2 Q
F1(no_exec)158 480 Q F0(which corresponds to -n, --no-e)188 492 Q -.15
(xe)-.15 G(c, --just-print, --dry-run and --recon;).15 E F1(no_site_dir)
158 508.8 Q F0(which corresponds to --no-site-dir;)188 520.8 Q F1
(num_jobs)158 537.6 Q F0(which corresponds to -j and --jobs;)188 549.6 Q
F1(pr)158 566.4 Q(o\214le_\214le)-.18 E F0
(which corresponds to --pro\214le;)188 578.4 Q F1(question)158 595.2 Q
F0(which corresponds to -q and --question;)188 607.2 Q F1(random)158 624
Q F0(which corresponds to --random;)188 636 Q F1 -.18(re)158 652.8 S
(pository).18 E F0(which corresponds to -Y)188 664.8 Q 2.5(,-)-1.29 G
(-repository and --srcdir;)-2.5 E F1(silent)158 681.6 Q F0
(which corresponds to -s, --silent and --quiet;)188 681.6 Q F1(site_dir)
158 698.4 Q F0(which corresponds to --site-dir;)188 710.4 Q(July 2010)
286.415 768 Q(51)204.415 E 0 Cg EP
%%Page: 52 52
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(stack_size)158 84 Q F0
(which corresponds to --stack-size;)188 96 Q F1(taskmastertrace_\214le)
158 112.8 Q F0(which corresponds to --taskmastertrace; and)188 124.8 Q
F1(war)158 141.6 Q(n)-.15 E F0(which corresponds to --w)188 141.6 Q
(arn and --w)-.1 E(arning.)-.1 E .104(See the documentation for the cor\
responding command line object for information about each spe-)144 170.4
R(ci\214c option.)144 182.4 Q(Glob\()108 211.2 Q/F2 10/Times-Italic@0 SF
(pattern)1.25 E F0 2.5(,[).24 G F2(ondisk)-2.27 E F0(,).67 E F2(sour)
2.84 E(ce)-.37 E F0(,).18 E F2(strings)2.84 E F0(]\)).27 E(en)108 228 Q
-.65(v.)-.4 G(Glob\().65 E F2(pattern)1.25 E F0 2.5(,[).24 G F2(ondisk)
-2.27 E F0(,).67 E F2(sour)2.84 E(ce)-.37 E F0(,).18 E F2(strings)2.84 E
F0(]\)).27 E .452
(Returns Nodes \(or strings\) that match the speci\214ed)144 240 R F2
(pattern)2.952 E F0 2.952(,r).24 G(elati)-2.952 E .752 -.15(ve t)-.25 H
2.952(ot).15 G .452(he directory of the current)-2.952 F F1(SConscript)
144 252 Q F0 2.887(\214le. The)2.887 F F1(en)2.887 E -.7(v.)-.4 G(Glob)
.7 E F0 .387(\(\) form performs string substition on)B F2(pattern)4.138
E F0 .388(and returns whate)3.128 F -.15(ve)-.25 G(r).15 E
(matches the resulting e)144 264 Q(xpanded pattern.)-.15 E
(The speci\214ed)144 288 Q F2(pattern)3.75 E F0
(uses Unix shell style metacharacters for matching:)2.74 E 17.5(*m)149
312 S(atches e)-17.5 E -.15(ve)-.25 G(rything).15 E 17.5(?m)149 324 S
(atches an)-17.5 E 2.5(ys)-.15 G(ingle character)-2.5 E 5([seq] matches)
149 336 R(an)2.5 E 2.5(yc)-.15 G(haracter in seq)-2.5 E 2.5
([!seq] matches)149 348 R(an)2.5 E 2.5(yc)-.15 G(har not in seq)-2.5 E
.031(If the \214rst character of a \214lename is a dot, it must be matc\
hed e)144 376.8 R(xplicitly)-.15 E 5.03(.C)-.65 G .03
(haracter matches do)-5.03 F F2(not)2.89 E F0
(span directory separators.)144 388.8 Q(The)144 412.8 Q F1(Glob)3.398 E
F0 .898(\(\) kno)B .898(ws about repositories \(see the)-.25 F F1
(Repository)3.398 E F0 .899
(\(\) function\) and source directories \(see)B(the)144 424.8 Q F1 -.92
(Va)3.929 G(riantDir).92 E F0 1.429(\(\) function\) and returns a Node \
\(or string, if so con\214gured\) in the local \(SCon-)B 1.825
(script\) directory if matching Node is found an)144 436.8 R 1.826
(ywhere in a corresponding repository or source)-.15 F(directory)144
448.8 Q(.)-.65 E(The)144 472.8 Q F1(ondisk)3.315 E F0(ar)3.315 E .814
(gument may be set to)-.18 F F1 -.25(Fa)3.314 G(lse).25 E F0 .814
(\(or an)3.314 F 3.314(yo)-.15 G .814(ther non-true v)-3.314 F .814
(alue\) to disable the search for)-.25 F 1.57(matches on disk, thereby \
only returning matches among already-con\214gured File or Dir Nodes.)144
484.8 R(The def)144 496.8 Q(ault beha)-.1 E
(vior is to return corresponding Nodes for an)-.2 E 2.5(yo)-.15 G
(n-disk matches found.)-2.5 E(The)144 520.8 Q F1(sour)2.943 E(ce)-.18 E
F0(ar)2.943 E .443(gument may be set to)-.18 F F1 -.74(Tr)2.942 G(ue).74
E F0 .442(\(or an)2.942 F 2.942(ye)-.15 G(qui)-2.942 E -.25(va)-.25 G
.442(lent v).25 F .442(alue\) to specify that, when the local)-.25 F
.012(directory is a)144 532.8 R F1 -.92(Va)2.512 G(riantDir).92 E F0
.012(\(\), the returned Nodes should be from the corresponding source d\
irectory)B(,)-.65 E(not the local directory)144 544.8 Q(.)-.65 E(The)144
568.8 Q F1(strings)3.535 E F0(ar)3.535 E 1.035(gument may be set to)-.18
F F1 -.74(Tr)3.535 G(ue).74 E F0 1.035(\(or an)3.535 F 3.535(ye)-.15 G
(qui)-3.535 E -.25(va)-.25 G 1.035(lent v).25 F 1.035(alue\) to ha)-.25
F 1.335 -.15(ve t)-.2 H(he).15 E F1(Glob)3.535 E F0 1.035(\(\) function)
B .433(return strings, not Nodes, that represent the matched \214les or\
 directories.)144 580.8 R .433(The returned strings will)5.433 F .244
(be relati)144 592.8 R .544 -.15(ve t)-.25 H 2.743(ot).15 G .243
(he local \(SConscript\) directory)-2.743 F 5.243(.\()-.65 G .243
(Note that This may mak)-5.243 F 2.743(ei)-.1 G 2.743(te)-2.743 G .243
(asier to perform arbi-)-2.743 F .915
(trary manipulation of \214le names, b)144 604.8 R .915
(ut if the returned strings are passed to a dif)-.2 F(ferent)-.25 E F1
(SConscript)3.416 E F0 .094(\214le, an)144 616.8 R 2.594(yN)-.15 G .094
(ode translation will be relati)-2.594 F .393 -.15(ve t)-.25 H 2.593(ot)
.15 G .093(he other)-2.593 F F1(SConscript)2.593 E F0(directory)2.593 E
2.593(,n)-.65 G .093(ot the original)-2.593 F F1(SCon-)2.593 E(script)
144 628.8 Q F0(directory)2.5 E(.\))-.65 E(Examples:)144 652.8 Q
(Program\('foo', Glob\('*.c'\)\))144 676.8 Q(Zip\('/tmp/e)144 688.8 Q
-.15(ve)-.25 G(rything', Glob\('.??*'\) + Glob\('*'\)\)).15 E(July 2010)
286.415 768 Q(52)204.415 E 0 Cg EP
%%Page: 53 53
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(Help\()108
84 Q/F1 10/Times-Italic@0 SF(te).13 E(xt)-.2 E F0(\)).68 E(en)108 100.8
Q -.65(v.)-.4 G(Help\().65 E F1(te).13 E(xt)-.2 E F0(\)).68 E .399
(This speci\214es help te)144 112.8 R .399(xt to be printed if the)-.15
F/F2 10/Times-Bold@0 SF(-h)2.899 E F0(ar)2.899 E .399(gument is gi)-.18
F -.15(ve)-.25 G 2.899(nt).15 G(o)-2.899 E F2(scons)2.899 E F0 5.399(.I)
C(f)-5.399 E F2(Help)2.899 E F0 .399(is called multi-)2.899 F
(ple times, the te)144 124.8 Q
(xt is appended together in the order that)-.15 E F2(Help)2.5 E F0
(is called.)2.5 E(Ignore\()108 153.6 Q F1(tar).13 E -.1(ge)-.37 G(t).1 E
F0(,).68 E F1(dependency)2.85 E F0(\)).32 E(en)108 170.4 Q -.65(v.)-.4 G
(Ignore\().65 E F1(tar).13 E -.1(ge)-.37 G(t).1 E F0(,).68 E F1
(dependency)2.85 E F0(\)).32 E 1.631(The speci\214ed dependenc)144 182.4
R 4.131<798c>-.15 G 1.631
(le\(s\) will be ignored when deciding if the tar)-4.131 F 1.63
(get \214le\(s\) need to be)-.18 F(reb)144 194.4 Q(uilt.)-.2 E -1.1(Yo)
144 218.4 S 2.971(uc)1.1 G .471(an also use)-2.971 F F2(Ignor)2.971 E
(e\(\))-.18 E F0 .471(to remo)2.971 F .771 -.15(ve a t)-.15 H(ar).15 E
.471(get from the def)-.18 F .471(ault b)-.1 F 2.971(uild. In)-.2 F .471
(order to do this you must)2.971 F .451(specify the directory the tar)
144 230.4 R .451(get will be b)-.18 F .451(uilt in as the tar)-.2 F .45
(get, and the \214le you w)-.18 F .45(ant to skip b)-.1 F(uilding)-.2 E
(as the dependenc)144 242.4 Q -.65(y.)-.15 G .47
(Note that this will only remo)144 266.4 R .77 -.15(ve t)-.15 H .471
(he dependencies listed from the \214les b).15 F .471(uilt by def)-.2 F
2.971(ault. It)-.1 F .471(will still)2.971 F .48(be b)144 278.4 R .48
(uilt if that dependenc)-.2 F 2.98(yi)-.15 G 2.98(sn)-2.98 G .479
(eeded by another object being b)-2.98 F 2.979(uilt. See)-.2 F .479
(the third and forth e)2.979 F(xam-)-.15 E(ples belo)144 290.4 Q -.65
(w.)-.25 G(Examples:)144 314.4 Q(en)144 338.4 Q -.65(v.)-.4 G
(Ignore\('foo', 'foo.c'\)).65 E(en)144 350.4 Q -.65(v.)-.4 G
(Ignore\('bar', ['bar1.h', 'bar2.h']\)).65 E(en)144 362.4 Q -.65(v.)-.4
G(Ignore\('.).65 E(',)-.7 E('foobar)-.7 E(.obj'\))-.55 E(en)144 374.4 Q
-.65(v.)-.4 G(Ignore\('bar',).65 E('bar/foobar)-.7 E(.obj'\))-.55 E
(Import\()108 403.2 Q F1(var).29 E(s)-.1 E F0(\)).27 E(en)108 420 Q -.65
(v.)-.4 G(Import\().65 E F1(var).29 E(s)-.1 E F0(\)).27 E .382
(This tells)144 432 R F2(scons)2.882 E F0 .382(to import a list of v)
2.882 F .383
(ariables into the current SConscript \214le. This will import v)-.25 F
(ari-)-.25 E 1.491(ables that were e)144 444 R 1.491(xported with)-.15 F
F2(Export)3.991 E F0 1.491(\(\) or in the)B F1 -.2(ex)3.991 G(ports).2 E
F0(ar)4.261 E 1.49(gument to)-.18 F F2(SConscript)3.99 E F0 3.99
(\(\). V)B(ariables)-1.11 E -.15(ex)144 456 S .035(ported by).15 F F2
(SConscript)2.535 E F0 .035(\(\) ha)B .335 -.15(ve p)-.2 H 2.535
(recedence. Multiple).15 F -.25(va)2.535 G .036
(riable names can be passed to).25 F F2(Import)2.536 E F0 .036(\(\) as)B
(separate ar)144 468 Q(guments or as a list. The v)-.18 E
(ariable "*" can be used to import all v)-.25 E(ariables.)-.25 E
(Examples:)144 492 Q(Import\("en)144 516 Q(v"\))-.4 E(Import\("en)144
528 Q(v", "v)-.4 E(ariable"\))-.25 E(Import\(["en)144 540 Q(v", "v)-.4 E
(ariable"]\))-.25 E(Import\("*"\))144 552 Q(Literal\()108 580.8 Q F1
(string).34 E F0(\)).22 E(en)108 597.6 Q -.65(v.)-.4 G(Literal\().65 E
F1(string).34 E F0(\)).22 E(The speci\214ed)144 609.6 Q F1(string)2.84 E
F0(will be preserv)2.72 E(ed as-is and not ha)-.15 E .3 -.15(ve c)-.2 H
(onstruction v).15 E(ariables e)-.25 E(xpanded.)-.15 E(Local\()108 638.4
Q F1(tar).13 E -.1(ge)-.37 G(ts).1 E F0(\)).27 E(en)108 655.2 Q -.65(v.)
-.4 G(Local\().65 E F1(tar).13 E -.1(ge)-.37 G(ts).1 E F0(\)).27 E .942
(The speci\214ed)144 667.2 R F1(tar)3.572 E -.1(ge)-.37 G(ts).1 E F0
.942(will ha)3.712 F 1.241 -.15(ve c)-.2 H .941
(opies made in the local tree, e).15 F -.15(ve)-.25 G 3.441(ni).15 G
3.441(fa)-3.441 G 3.441(na)-3.441 G .941(lready up-to-date cop)-3.441 F
(y)-.1 E -.15(ex)144 679.2 S(ists in a repository).15 E 5(.R)-.65 G
(eturns a list of the tar)-5 E(get Node or Nodes.)-.18 E(July 2010)
286.415 768 Q(53)204.415 E 0 Cg EP
%%Page: 54 54
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)108 84 Q
-.65(v.)-.4 G(Mer).65 E(geFlags\()-.18 E/F1 10/Times-Italic@0 SF(ar).33
E(g)-.37 E F0 2.5(,[).22 G F1(unique)-2.42 E F0(]\)).18 E(Mer)144 96 Q
1.135(ges the speci\214ed)-.18 F F1(ar)3.965 E(g)-.37 E F0 -.25(va)3.855
G 1.135(lues to the construction en).25 F(vironment')-.4 E 3.635(sc)-.55
G 1.135(onstruction v)-3.635 F 3.635(ariables. If)-.25 F(the)3.635 E F1
(ar)144.33 108 Q(g)-.37 E F0(ar)3.642 E .922(gument is not a dictionary)
-.18 F 3.421(,i)-.65 G 3.421(ti)-3.421 G 3.421(sc)-3.421 G(on)-3.421 E
-.15(ve)-.4 G .921(rted to one by calling).15 F/F2 10/Times-Bold@0 SF
(en)3.421 E -.7(v.)-.4 G -.1(Pa).7 G(rseFlags\(\)).1 E F0 .921
(on the ar)3.421 F(gu-)-.18 E .319(ment before the v)144 120 R .319
(alues are mer)-.25 F 2.819(ged. Note)-.18 F(that)2.819 E F1(ar)3.149 E
(g)-.37 E F0 .32(must be a single v)3.039 F .32
(alue, so multiple strings must)-.25 F
(be passed in as a list, not as separate ar)144 132 Q(guments to)-.18 E
F2(en)2.5 E -.7(v.)-.4 G(Mer).7 E(geFlags)-.1 E F0(\(\).)A .966(By def)
144 156 R .966(ault, duplicate v)-.1 F .965
(alues are eliminated; you can, ho)-.25 F(we)-.25 E -.15(ve)-.25 G 1.765
-.4(r, s).15 H(pecify).4 E F2(unique=0)3.465 E F0 .965(to allo)3.465 F
3.465(wd)-.25 G(upli-)-3.465 E 1.006(cate v)144 168 R 1.006
(alues to be added.)-.25 F 1.006(When eliminating duplicate v)6.006 F
1.006(alues, an)-.25 F 3.506(yc)-.15 G 1.006(onstruction v)-3.506 F
1.007(ariables that end)-.25 F .841(with the string)144 180 R F2 -.74
(PA)3.341 G(TH)-.21 E F0 -.1(ke)3.341 G .841(ep the left-most unique v)
.1 F 3.341(alue. All)-.25 F .84(other construction v)3.341 F .84
(ariables k)-.25 F .84(eep the)-.1 F(right-most unique v)144 192 Q
(alue.)-.25 E(Examples:)144 216 Q 2.5(#A)144 240 S
(dd an optimization \215ag to $CCFLA)-2.5 E(GS.)-.4 E(en)144 252 Q -.65
(v.)-.4 G(Mer).65 E(geFlags\('-O3'\))-.18 E 2.5(#C)144 276 S(ombine the\
 \215ags returned from running pkg-con\214g with an optimization)-2.5 E
2.5<238d>144 288 S(ag and mer)-2.5 E
(ge the result into the construction v)-.18 E(ariables.)-.25 E(en)144
300 Q -.65(v.)-.4 G(Mer).65 E
(geFlags\(['!pkg-con\214g gtk+-2.0 --c\215ags', '-O3']\))-.18 E 2.5(#C)
144 324 S(ombine an optimization \215ag with the \215ags returned from \
running pkg-con\214g)-2.5 E 2.5(#t)144 336 S(wice and mer)-2.5 E
(ge the result into the construction v)-.18 E(ariables.)-.25 E(en)144
348 Q -.65(v.)-.4 G(Mer).65 E(geFlags\(['-O3',)-.18 E
('!pkg-con\214g gtk+-2.0 --c\215ags --libs',)181.5 360 Q
('!pkg-con\214g libpng12 --c\215ags --libs']\))181.5 372 Q(NoCache\()108
400.8 Q F1(tar).13 E -.1(ge)-.37 G(t).1 E F0 2.5(,.).68 G(..\))-2.5 E
(en)108 417.6 Q -.65(v.)-.4 G(NoCache\().65 E F1(tar).13 E -.1(ge)-.37 G
(t).1 E F0 2.5(,.).68 G(..\))-2.5 E 1.195
(Speci\214es a list of \214les which should)144 429.6 R F1(not)4.055 E
F0 1.195(be cached whene)4.375 F -.15(ve)-.25 G 3.696(rt).15 G(he)-3.696
E F2(CacheDir)3.696 E F0 1.196(\(\) method has been)B(acti)144 441.6 Q
-.25(va)-.25 G 2.5(ted. The).25 F(speci\214ed tar)2.5 E
(gets may be a list or an indi)-.18 E(vidual tar)-.25 E(get.)-.18 E .75
(Multiple \214les should be speci\214ed either as separate ar)144 465.6
R .749(guments to the)-.18 F F2(NoCache)3.249 E F0 .749
(\(\) method, or as a)B(list.)144 477.6 Q F2(NoCache)5.767 E F0 .768
(\(\) will also accept the return v)B .768(alue of an)-.25 F 3.268(yo)
-.15 G 3.268(ft)-3.268 G .768(he construction en)-3.268 F .768
(vironment Builder)-.4 F(methods.)144 489.6 Q(Calling)144 513.6 Q F2
(NoCache)3.309 E F0 .809
(\(\) on directories and other non-File Node types has no ef)B .808
(fect because only File)-.25 F(Nodes are cached.)144 525.6 Q(Examples:)
144 549.6 Q -1.95(NoCache\('foo.elf '\))144 573.6 R(NoCache\(en)144
585.6 Q -.65(v.)-.4 G(Program\('hello', 'hello.c'\)\)).65 E(NoClean\()
108 614.4 Q F1(tar).13 E -.1(ge)-.37 G(t).1 E F0 2.5(,.).68 G(..\))-2.5
E(en)108 631.2 Q -.65(v.)-.4 G(NoClean\().65 E F1(tar).13 E -.1(ge)-.37
G(t).1 E F0 2.5(,.).68 G(..\))-2.5 E .716
(Speci\214es a list of \214les or directories which should)144 643.2 R
F1(not)3.576 E F0 .716(be remo)3.896 F -.15(ve)-.15 G 3.216(dw).15 G
(hene)-3.216 E -.15(ve)-.25 G 3.217(rt).15 G .717(he tar)-3.217 F .717
(gets \(or their)-.18 F .658(dependencies\) are speci\214ed with the)144
655.2 R F2(-c)3.158 E F0 .657(command line option.)3.157 F .657
(The speci\214ed tar)5.657 F .657(gets may be a list)-.18 F 1.175
(or an indi)144 667.2 R 1.175(vidual tar)-.25 F 3.675(get. Multiple)-.18
F 1.175(calls to)3.675 F F2(NoClean)3.675 E F0 1.175(\(\) are le)B -.05
(ga)-.15 G 1.175(l, and pre).05 F -.15(ve)-.25 G 1.175
(nt each speci\214ed tar).15 F(get)-.18 E(from being remo)144 679.2 Q
-.15(ve)-.15 G 2.5(db).15 G 2.5(yc)-2.5 G(alls to the)-2.5 E F2(-c)2.5 E
F0(option.)2.5 E 1.612(Multiple \214les or directories should be speci\
\214ed either as separate ar)144 703.2 R 1.612(guments to the)-.18 F F2
(NoClean)4.112 E F0(\(\))A .665(method, or as a list.)144 715.2 R F2
(NoClean)5.665 E F0 .665(\(\) will also accept the return v)B .665
(alue of an)-.25 F 3.166(yo)-.15 G 3.166(ft)-3.166 G .666
(he construction en)-3.166 F(vi-)-.4 E(ronment Builder methods.)144
727.2 Q(July 2010)286.415 768 Q(54)204.415 E 0 Cg EP
%%Page: 55 55
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(Calling)144
84 Q/F1 10/Times-Bold@0 SF(NoClean)4.533 E F0 2.033(\(\) for a tar)B
2.033(get o)-.18 F -.15(ve)-.15 G 2.033(rrides calling).15 F F1(Clean)
4.533 E F0 2.033(\(\) for the same tar)B 2.033(get, and an)-.18 F 4.532
(yt)-.15 G(ar)-4.532 E(gets)-.18 E(passed to both functions will)144 96
Q/F2 10/Times-Italic@0 SF(not)2.86 E F0(be remo)3.18 E -.15(ve)-.15 G
2.5(db).15 G 2.5(yt)-2.5 G(he)-2.5 E F1(-c)2.5 E F0(option.)2.5 E
(Examples:)144 120 Q -1.95(NoClean\('foo.elf '\))144 144 R(NoClean\(en)
144 156 Q -.65(v.)-.4 G(Program\('hello', 'hello.c'\)\)).65 E(en)108
184.8 Q -.65(v.)-.4 G -.15(Pa).65 G(rseCon\214g\().15 E F2(command).2 E
F0 2.5(,[).77 G F2(function)-.53 E F0(,).24 E F2(unique)2.58 E F0(]\))
.18 E .971(Calls the speci\214ed)144 196.8 R F2(function)5.441 E F0 .971
(to modify the en)3.711 F .971
(vironment as speci\214ed by the output of)-.4 F F2 .972(command .)3.672
F F0 1.43(The def)144 208.8 R(ault)-.1 E F2(function)5.9 E F0(is)4.17 E
F1(en)3.93 E -.7(v.)-.4 G(Mer).7 E(geFlags)-.1 E F0 1.43(\(\), which e)B
1.43(xpects the output of a typical)-.15 F F2 1.43(*-con\214g com-)3.15
F(mand)144 220.8 Q F0 .095(\(for e)3.365 F(xample,)-.15 E F1
(gtk-con\214g)2.595 E F0 2.595(\)a)C .095
(nd adds the options to the appropriate construction v)-2.595 F 2.596
(ariables. By)-.25 F(def)144 232.8 Q .298(ault, duplicate v)-.1 F .297
(alues are not added to an)-.25 F 2.797(yc)-.15 G .297(onstruction v)
-2.797 F .297(ariables; you can specify)-.25 F F1(unique=0)2.797 E F0
(to)2.797 E(allo)144 244.8 Q 2.5(wd)-.25 G(uplicate v)-2.5 E
(alues to be added.)-.25 E 1.167
(Interpreted options and the construction v)144 268.8 R 1.167
(ariables the)-.25 F 3.667(ya)-.15 G -.25(ff)-3.667 G 1.167
(ect are as speci\214ed for the).25 F F1(en)3.667 E -.7(v.)-.4 G -.1(Pa)
.7 G(rse-).1 E(Flags)144 280.8 Q F0 1.409
(\(\) method \(which this method calls\).)B 1.409(See that method')6.409
F 3.908(sd)-.55 G 1.408(escription, belo)-3.908 F 2.708 -.65(w, f)-.25 H
1.408(or a table of).65 F(options and construction v)144 292.8 Q
(ariables.)-.25 E -.15(Pa)108 321.6 S(rseDepends\().15 E F2(\214lename)
1.91 E F0 2.5(,[).18 G F2(must_e)-2.12 E(xist)-.2 E F0(,).68 E F2
(only_one)2.73 E F0(]\)).18 E(en)108 338.4 Q -.65(v.)-.4 G -.15(Pa).65 G
(rseDepends\().15 E F2(\214lename)1.91 E F0 2.5(,[).18 G F2(must_e)-2.12
E(xist)-.2 E F0(,).68 E F2(only_one)2.73 E F0(]\)).18 E -.15(Pa)144
350.4 S 1.376(rses the contents of the speci\214ed).15 F F2(\214lename)
5.786 E F0 1.376(as a list of dependencies in the style of)4.056 F F1
(Mak)3.876 E(e)-.1 E F0(or)3.876 E F1(mkdep)144 362.4 Q F0 2.5(,a)C
(nd e)-2.5 E(xplicitly establishes all of the listed dependencies.)-.15
E .045(By def)144 386.4 R .044
(ault, it is not an error if the speci\214ed)-.1 F F2(\214lename)4.454 E
F0 .044(does not e)2.724 F 2.544(xist. The)-.15 F(optional)2.544 E F2
(must_e)2.924 E(xist)-.2 E F0(ar)3.224 E(gu-)-.18 E .33
(ment may be set to a non-zero v)144 398.4 R .33(alue to ha)-.25 F .63
-.15(ve s)-.2 H .33(cons thro).15 F 2.83(wa)-.25 G 2.83(ne)-2.83 G .33
(xception and generate an error if the)-2.98 F(\214le does not e)144
410.4 Q(xist, or is otherwise inaccessible.)-.15 E .081(The optional)144
434.4 R F2(only_one)2.811 E F0(ar)2.761 E .081
(gument may be set to a non-zero v)-.18 F .08(alue to ha)-.25 F .38 -.15
(ve s)-.2 H .08(cons thro).15 F .08(wn an e)-.25 F(xception)-.15 E .854
(and generate an error if the \214le contains dependenc)144 446.4 R
3.354(yi)-.15 G .854(nformation for more than one tar)-3.354 F 3.354
(get. This)-.18 F 1.085(can pro)144 458.4 R 1.084
(vide a small sanity check for \214les intended to be generated by)-.15
F 3.584(,f)-.65 G 1.084(or e)-3.584 F 1.084(xample, the)-.15 F F1 1.084
(gcc -M)3.584 F F0 1.137
(\215ag, which should typically only write dependenc)144 470.4 R 3.637
(yi)-.15 G 1.137(nformation for one output \214le into a corre-)-3.637 F
(sponding)144 482.4 Q F1(.d)2.5 E F0(\214le.)2.5 E(The)144 506.4 Q F2
(\214lename)5.37 E F0 .96
(and all of the \214les listed therein will be interpreted relati)3.64 F
1.26 -.15(ve t)-.25 H 3.46(ot).15 G .96(he directory of the)-3.46 F F2
(SConscript)144.33 518.4 Q F0(\214le which calls the)3.18 E F1 -.1(Pa)
2.5 G(rseDepends).1 E F0(function.)2.5 E(en)108 547.2 Q -.65(v.)-.4 G
-.15(Pa).65 G(rseFlags\().15 E F2<8d61>1.91 E(gs)-.1 E F0 2.5(,.).27 G
(..\))-2.5 E -.15(Pa)144 559.2 S .284(rses one or more strings containi\
ng typical command-line \215ags for GCC tool chains and returns).15 F
2.727(ad)144 571.2 S .226(ictionary with the \215ag v)-2.727 F .226
(alues separated into the appropriate SCons construction v)-.25 F 2.726
(ariables. This)-.25 F 1.77(is intended as a companion to the)144 583.2
R F1(en)4.271 E -.7(v.)-.4 G(Mer).7 E(geFlags)-.1 E F0 1.771
(\(\) method, b)B 1.771(ut allo)-.2 F 1.771(ws for the v)-.25 F 1.771
(alues in the)-.25 F .882
(returned dictionary to be modi\214ed, if necessary)144 595.2 R 3.382
(,b)-.65 G .881(efore mer)-3.382 F .881
(ging them into the construction en)-.18 F(vi-)-.4 E 2.908
(ronment. \(Note)144 607.2 R(that)2.908 E F1(en)2.908 E -.7(v.)-.4 G
(Mer).7 E(geFlags)-.1 E F0 .408(\(\) will call this method if its ar)B
.408(gument is not a dictionary)-.18 F 2.908(,s)-.65 G(o)-2.908 E .284
(it is usually not necessary to call)144 619.2 R F1(en)2.784 E -.7(v.)
-.4 G -.1(Pa).7 G(rseFlags).1 E F0 .284(\(\) directly unless you w)B
.284(ant to manipulate the v)-.1 F(al-)-.25 E(ues.\))144 631.2 Q .376
(If the \214rst character in an)144 655.2 R 2.876(ys)-.15 G .376
(tring is an e)-2.876 F .376
(xclamation mark \(!\), the rest of the string is e)-.15 F -.15(xe)-.15
G .376(cuted as a).15 F .217(command, and the output from the command i\
s parsed as GCC tool chain command-line \215ags and)144 667.2 R
(added to the resulting dictionary)144 679.2 Q(.)-.65 E 1.202(Flag v)144
703.2 R 1.203(alues are translated accordig to the pre\214x found, and \
added to the follo)-.25 F 1.203(wing construction)-.25 F -.25(va)144
715.2 S(riables:).25 E(July 2010)286.415 768 Q(55)204.415 E 0 Cg EP
%%Page: 56 56
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 35
(-arch CCFLA)144 84 R(GS, LINKFLA)-.4 E(GS)-.4 E 42.5(-D CPPDEFINES)144
96 R(-frame)144 108 Q -.1(wo)-.25 G 22.5(rk FRAMEW).1 F(ORKS)-.1 E
(-frame)144 120 Q -.1(wo)-.25 G 12.5(rkdir= FRAMEW).1 F(ORKP)-.1 E -1.11
(AT)-.92 G(H)1.11 E 27.5(-include CCFLA)144 132 R(GS)-.4 E 25
(-isysroot CCFLA)144 144 R(GS, LINKFLA)-.4 E(GS)-.4 E 42.5(-I CPPP)144
156 R -1.11(AT)-.92 G(H)1.11 E 42.5(-l LIBS)144 168 R 42.5(-L LIBP)144
180 R -1.11(AT)-.92 G(H)1.11 E(-mno-c)144 192 Q 20(ygwin CCFLA)-.15 F
(GS, LINKFLA)-.4 E(GS)-.4 E(-mwindo)144 204 Q 25(ws LINKFLA)-.25 F(GS)
-.4 E 27.5(-pthread CCFLA)144 216 R(GS, LINKFLA)-.4 E(GS)-.4 E 35
(-std= CFLA)144 228 R(GS)-.4 E(-W)144 240 Q 37.5(a, ASFLA)-.8 F
(GS, CCFLA)-.4 E(GS)-.4 E 20(-Wl,-rpath= RP)144 252 R -1.11(AT)-.92 G(H)
1.11 E 30(-Wl,-R, RP)144 264 R -1.11(AT)-.92 G(H)1.11 E 32.5(-Wl,-R RP)
144 276 R -1.11(AT)-.92 G(H)1.11 E 37.5(-Wl, LINKFLA)144 288 R(GS)-.4 E
37.5(-Wp, CPPFLA)144 300 R(GS)-.4 E 47.5(-C)144 312 S(CFLA)-47.5 E(GS)
-.4 E 47.5(+C)144 324 S(CFLA)-47.5 E(GS, LINKFLA)-.4 E(GS)-.4 E(An)144
352.8 Q 3.097(yo)-.15 G .596(ther strings not associated with options a\
re assumed to be the names of libraries and added)-3.097 F(to the)144
364.8 Q/F1 10/Times-Bold@0 SF(LIBS)2.5 E F0(construction v)2.5 E
(ariable.)-.25 E(Examples \(all of which produce the same result\):)144
388.8 Q(dict = en)144 412.8 Q -.65(v.)-.4 G -.15(Pa).65 G
(rseFlags\('-O2 -Dfoo -Dbar=1'\)).15 E(dict = en)144 424.8 Q -.65(v.)-.4
G -.15(Pa).65 G(rseFlags\('-O2', '-Dfoo', '-Dbar=1'\)).15 E(dict = en)
144 436.8 Q -.65(v.)-.4 G -.15(Pa).65 G
(rseFlags\(['-O2', '-Dfoo -Dbar=1']\)).15 E(dict = en)144 448.8 Q -.65
(v.)-.4 G -.15(Pa).65 G(rseFlags\('-O2', '!echo -Dfoo -Dbar=1'\)).15 E
(en)108 477.6 Q -.65(v.)-.4 G(Perforce\(\)).65 E 3.174(Af)144 489.6 S
.674(actory function that returns a Builder object to be used to fetch \
source \214les from the Perforce)-3.274 F 1.121
(source code management system.)144 501.6 R 1.121
(The returned Builder is intended to be passed to the)6.121 F F1(Sour)
3.62 E(ce-)-.18 E(Code)144 513.6 Q F0(function.)2.5 E(Example:)144 537.6
Q(en)144 561.6 Q -.65(v.)-.4 G(SourceCode\('.).65 E(', en)-.7 E -.65(v.)
-.4 G(Perforce\(\)\)).65 E 1.529(Perforce uses a number of e)144 578.4 R
1.529(xternal en)-.15 F 1.529(vironment v)-.4 F 1.529
(ariables for its operation.)-.25 F(Consequently)6.53 E 4.03(,t)-.65 G
(his)-4.03 E 1.75(function adds the follo)144 590.4 R 1.749(wing v)-.25
F 1.749(ariables from the user')-.25 F 4.249(se)-.55 G 1.749(xternal en)
-4.399 F 1.749(vironment to the construction)-.4 F(en)144 602.4 Q
(vironment')-.4 E 8.175(sE)-.55 G 5.675(NV dictionary: P4CHARSET)-8.175
F 8.175(,P)-.74 G(4CLIENT)-8.175 E 8.175(,P)-.74 G(4LANGU)-8.175 E -.4
(AG)-.4 G 5.675(E, P4P).4 F(ASSWD,)-.92 E(P4POR)144 614.4 Q 1.48 -.74
(T, P)-.6 H(4USER, SystemRoot, USER, and USERN).74 E(AME.)-.35 E
(Platform\()108 643.2 Q/F2 10/Times-Italic@0 SF(string).34 E F0(\)).22 E
.782(Returns a callable object that can be used to initialize a constru\
ction en)144 655.2 R .782(vironment using the plat-)-.4 F(form k)144
667.2 Q -.15(ey)-.1 G -.1(wo).15 G(rd of the En).1 E
(vironment\(\) method.)-.4 E(Example:)144 691.2 Q(en)144 715.2 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(platform = Platform\('win32'\)\)).4 E
(July 2010)286.415 768 Q(56)204.415 E 0 Cg EP
%%Page: 57 57
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)108 84 Q
-.65(v.)-.4 G(Platform\().65 E/F1 10/Times-Italic@0 SF(string).34 E F0
(\)).22 E .46(Applies the callable object for the speci\214ed platform)
144 96 R F1(string)3.3 E F0 .46(to the en)3.18 F .46
(vironment through which the)-.4 F(method w)144 108 Q(as called.)-.1 E
(en)144 132 Q -.65(v.)-.4 G(Platform\('posix'\)).65 E 1.207
(Note that the)144 148.8 R/F2 10/Times-Bold@0 SF(win32)3.706 E F0 1.206
(platform adds the)3.706 F F2(SystemDri)3.706 E -.1(ve)-.1 G F0(and)
3.806 E F2(SystemRoot)3.706 E F0 -.25(va)3.706 G 1.206
(riables from the user').25 F(s)-.55 E -.15(ex)144 160.8 S 2.407
(ternal en).15 F 2.407(vironment to the construction en)-.4 F
(vironment')-.4 E(s)-.55 E F2(ENV)4.907 E F0(dictionary)4.908 E 7.408
(.T)-.65 G 2.408(his is so that an)-7.408 F(y)-.15 E -.15(exe)144 172.8
S .74(cuted commands that use sock).15 F .739
(ets to connect with other systems \(such as fetching source \214les)-.1
F 9.423(from e)144 184.8 R 9.423
(xternal CVS repository speci\214cations lik)-.15 F(e)-.1 E F2(:pser)
11.924 E -.1(ve)-.1 G(r:anonymous@cvs.sour).1 E(ce-)-.18 E -.25(fo)144
196.8 S -.1(rg).25 G(e.net:/cvsr).1 E(oot/scons)-.18 E F0 2.5(\)w)C
(ill w)-2.5 E(ork on W)-.1 E(indo)-.4 E(ws systems.)-.25 E(Progress\()
108 225.6 Q F1(callable).2 E F0 2.5(,[).18 G F1(interval)-2.49 E F0(]\))
.51 E(Progress\()108 242.4 Q F1(string).34 E F0 2.5(,[).22 G F1
(interval)-2.49 E F0(,).51 E F1(\214le)4.41 E F0(,).18 E F1 -.1(ov)2.5 G
(erwrite).1 E F0(]\)).18 E(Progress\()108 259.2 Q F1(list_of_strings).09
E F0 2.5(,[).27 G F1(interval)-2.49 E F0(,).51 E F1(\214le)4.41 E F0(,)
.18 E F1 -.1(ov)2.5 G(erwrite).1 E F0(]\)).18 E(Allo)144 271.2 Q .385
(ws SCons to sho)-.25 F 2.885(wp)-.25 G .385(rogress made during the b)
-2.885 F .385(uild by displaying a string or calling a function)-.2 F
(while e)144 283.2 Q -.25(va)-.25 G(luating Nodes \(e.g. \214les\).).25
E 1.037(If the \214rst speci\214ed ar)144 307.2 R 1.037
(gument is a Python callable \(a function or an object that has a)-.18 F
F2(__call__)3.538 E F0(\(\))A .801
(method\), the function will be called once e)144 319.2 R -.15(ve)-.25 G
(ry).15 E F1(interval)3.311 E F0 .8(times a Node is e)3.811 F -.25(va)
-.25 G 3.3(luated. The).25 F(callable)3.3 E .313(will be passed the e)
144 331.2 R -.25(va)-.25 G .314(luated Node as its only ar).25 F 2.814
(gument. \(F)-.18 F .314(or future compatibility)-.15 F 2.814(,i)-.65 G
(t')-2.814 E 2.814(sag)-.55 G .314(ood idea)-2.814 F .478(to also add)
144 343.2 R F2(*ar)2.977 E(gs)-.1 E F0(and)2.977 E F2(**kw)2.977 E F0
.477(as ar)2.977 F .477(guments to your function or method.)-.18 F .477
(This will pre)5.477 F -.15(ve)-.25 G .477(nt the code).15 F .06
(from breaking if SCons e)144 355.2 R -.15(ve)-.25 G 2.56(rc).15 G .061
(hanges the interf)-2.56 F .061
(ace to call the function with additional ar)-.1 F .061(guments in)-.18
F(the future.\))144 367.2 Q .95(An e)144 391.2 R .95(xample of a simple\
 custom progress function that prints a string containing the Node name)
-.15 F -2.15 -.25(ev e)144 403.2 T(ry 10 Nodes:).25 E
(def my_progress_function\(node, *ar)144 427.2 Q(gs, **kw\):)-.18 E
(print 'Ev)154 439.2 Q(aluating node %s!' % node)-.25 E
(Progress\(my_progress_function, interv)144 451.2 Q(al=10\))-.25 E 3.006
(Am)144 468 S .506(ore complicated e)-3.006 F .506(xample of a custom p\
rogress display object that prints a string containing a)-.15 F .033
(count e)144 480 R -.15(ve)-.25 G .033(ry 100 e).15 F -.25(va)-.25 G
.032(luated Nodes.).25 F .032(Note the use of)5.032 F F2(\\r)2.532 E F0
.032(\(a carriage return\) at the end so that the string)2.532 F(will o)
144 492 Q -.15(ve)-.15 G(rwrite itself on a display:).15 E(import sys)
144 516 Q(class ProgressCounter:)144 528 Q(count = 0)154 540 Q
(def __call__\(self, node, *ar)154 552 Q(gs, **kw\):)-.18 E
(self.count += 100)164 564 Q(sys.stderr)164 576 Q(.write\('Ev)-.55 E
(aluated %s nodes\\r' % self.count\))-.25 E
(Progress\(ProgressCounter\(\), interv)144 588 Q(al=100\))-.25 E 1.132
(If the \214rst ar)144 604.8 R(gument)-.18 E F2(Pr)3.632 E(ogr)-.18 E
(ess)-.18 E F0 1.132(\(\) is a string, the string will be displayed e)B
-.15(ve)-.25 G(ry).15 E F1(interval)3.642 E F0 -.25(eva)4.142 G(luated)
.25 E 3.683(Nodes. The)144 616.8 R(def)3.683 E 1.182(ault is to print t\
he string on standard output; an alternate output stream may be)-.1 F
.11(speci\214ed with the)144 628.8 R F2(\214le=)2.61 E F0(ar)2.61 E 2.61
(gument. The)-.18 F(follo)2.61 E .111
(wing will print a series of dots on the error output, one)-.25 F
(dot for e)144 640.8 Q -.15(ve)-.25 G(ry 100 e).15 E -.25(va)-.25 G
(luated Nodes:).25 E(import sys)144 664.8 Q(Progress\('.)144 676.8 Q
(', interv)-.7 E(al=100, \214le=sys.stderr\))-.25 E .707
(If the string contains the v)144 693.6 R .707(erbatim substring)-.15 F
F2($T)3.207 E(ARGET)-.9 E(,)-.74 E F0 .706
(it will be replaced with the Node.)3.207 F(Note)5.706 E .807
(that, for performance reasons, this is)144 705.6 R F1(not)3.667 E F0
3.307(ar)3.987 G -.15(eg)-3.307 G .807(ular SCons v).15 F .807
(ariable substition, so you can not use)-.25 F .343(other v)144 717.6 R
.343(ariables or use curly braces.)-.25 F .343(The follo)5.343 F .343
(wing e)-.25 F .342(xample will print the name of e)-.15 F -.15(ve)-.25
G .342(ry e).15 F -.25(va)-.25 G(luated).25 E 1.937(Node, using a)144
729.6 R F2(\\r)4.437 E F0 1.937
(\(carriage return\) to cause each line to o)4.437 F -.15(ve)-.15 G
1.937(rwritten by the ne).15 F 1.937(xt line, and the)-.15 F(July 2010)
286.415 768 Q(57)204.415 E 0 Cg EP
%%Page: 58 58
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF -.1(ove)144 84 S(rwrite=).1 E F0 -.1(ke)3.387 G(yw)-.05
E .887(ord ar)-.1 F .887(gument to mak)-.18 F 3.387(es)-.1 G .887
(ure the pre)-3.387 F .886(viously-printed \214le name is o)-.25 F -.15
(ve)-.15 G .886(rwritten with).15 F(blank spaces:)144 96 Q(import sys)
144 120 Q(Progress\('$T)144 132 Q(ARGET\\r', o)-.93 E -.15(ve)-.15 G
(rwrite=T).15 E(rue\))-.35 E .009(If the \214rst ar)144 148.8 R .009
(gument to)-.18 F F1(Pr)2.509 E(ogr)-.18 E(ess)-.18 E F0 .009(\(\) is a\
 list of strings, then each string in the list will be displayed in)B
.133(rotating f)144 160.8 R .133(ashion e)-.1 F -.15(ve)-.25 G(ry).15 E
/F2 10/Times-Italic@0 SF(interval)2.643 E F0 -.25(eva)3.143 G .133
(luated Nodes.).25 F .132
(This can be used to implement a "spinner" on the)5.133 F(user')144
172.8 Q 2.5(ss)-.55 G(creen as follo)-2.5 E(ws:)-.25 E
(Progress\(['-\\r', '\\\\\\r', '|\\r', '/\\r'], interv)144 196.8 Q
(al=5\))-.25 E(Precious\()108 225.6 Q F2(tar).13 E -.1(ge)-.37 G(t).1 E
F0 2.5(,.).68 G(..\))-2.5 E(en)108 242.4 Q -.65(v.)-.4 G(Precious\().65
E F2(tar).13 E -.1(ge)-.37 G(t).1 E F0 2.5(,.).68 G(..\))-2.5 E .207
(Marks each gi)144 254.4 R -.15(ve)-.25 G(n).15 E F2(tar)2.837 E -.1(ge)
-.37 G(t).1 E F0 .208(as precious so it is not deleted before it is reb)
3.387 F .208(uilt. Normally)-.2 F F1(scons)2.708 E F0(deletes)2.708 E
2.5(at)144 266.4 S(ar)-2.5 E(get before b)-.18 E(uilding it.)-.2 E
(Multiple tar)5 E(gets can be passed in to a single call to)-.18 E F1
(Pr)2.5 E(ecious)-.18 E F0(\(\).)A(en)108 295.2 Q -.65(v.)-.4 G
(Prepend\().65 E F2 -.1(ke)C(y)-.2 E F0(=).32 E F2(val).29 E F0 2.5(,[)
.51 G(...]\))-2.5 E .803(Appends the speci\214ed k)144 307.2 R -.15(ey)
-.1 G -.1(wo).15 G .803(rd ar).1 F .803(guments to the be)-.18 F .803
(ginning of construction v)-.15 F .803(ariables in the en)-.25 F(vi-)-.4
E 3.022(ronment. If)144 319.2 R .523(the En)3.022 F .523
(vironment does not ha)-.4 F .823 -.15(ve t)-.2 H .523
(he speci\214ed construction v).15 F .523(ariable, it is simply added)
-.25 F .927(to the en)144 331.2 R 3.427(vironment. If)-.4 F .927(the v)
3.427 F .927(alues of the construction v)-.25 F .926(ariable and the k)
-.25 F -.15(ey)-.1 G -.1(wo).15 G .926(rd ar).1 F .926(gument are the)
-.18 F .038(same type, then the tw)144 343.2 R 2.538(ov)-.1 G .039
(alues will be simply added together)-2.788 F 5.039(.O)-.55 G .039
(therwise, the construction v)-5.039 F(ariable)-.25 E .682(and the v)144
355.2 R .681(alue of the k)-.25 F -.15(ey)-.1 G -.1(wo).15 G .681(rd ar)
.1 F .681
(gument are both coerced to lists, and the lists are added together)-.18
F(.)-.55 E(\(See also the Append method, abo)144 367.2 Q -.15(ve)-.15 G
(.\)).15 E(Example:)144 391.2 Q(en)144 415.2 Q -.65(v.)-.4 G
(Prepend\(CCFLA).65 E(GS = '-g ', FOO = ['foo.yyy']\))-.4 E(en)108 444 Q
-.65(v.)-.4 G(PrependENVP).65 E(ath\()-.15 E F2(name).36 E F0(,).18 E F2
(ne)2.86 E(wpath)-.15 E F0 2.5(,[).28 G F2(en)-2.31 E(vname)-.4 E F0(,)
.18 E F2(sep)2.84 E F0(,).19 E F2(delete_e)2.85 E(xisting)-.2 E F0(]\))
.22 E .502(This appends ne)144 456 R 3.002(wp)-.25 G .502
(ath elements to the gi)-3.002 F -.15(ve)-.25 G 3.002(np).15 G .502
(ath in the speci\214ed e)-3.002 F .502(xternal en)-.15 F .502
(vironment \()-.4 F F1(ENV)A F0(by)3.002 E(def)144 468 Q 2.712
(ault\). This)-.1 F .212(will only add an)2.712 F 2.711(yp)-.15 G .211
(articular path once \(lea)-2.711 F .211
(ving the \214rst one it encounters and ignor)-.2 F(-)-.2 E 2.21
(ing the rest, to preserv)144 480 R 4.71(ep)-.15 G 2.211
(ath order\), and to help assure this, will normalize all paths \(using)
-4.71 F F1(os.path.normpath)144 492 Q F0(and)3.964 E F1
(os.path.normcase)3.964 E F0 3.964(\). This)B 1.463
(can also handle the case where the gi)3.964 F -.15(ve)-.25 G 3.963(no)
.15 G(ld)-3.963 E(path v)144 504 Q(ariable is a list instead of a strin\
g, in which case a list will be returned instead of a string.)-.25 E(If)
144 528 Q F2(delete_e)3.552 E(xisting)-.2 E F0 .702
(is 0, then adding a path that already e)3.422 F .702(xists will not mo)
-.15 F 1.002 -.15(ve i)-.15 H 3.203(tt).15 G 3.203(ot)-3.203 G .703
(he be)-3.203 F .703(ginning; it)-.15 F
(will stay where it is in the list.)144 540 Q(Example:)144 564 Q
(print 'before:',en)144 588 Q(v['ENV']['INCLUDE'])-.4 E
(include_path = '/foo/bar:/foo')144 600 Q(en)144 612 Q -.65(v.)-.4 G
(PrependENVP).65 E(ath\('INCLUDE', include_path\))-.15 E
(print 'after:',en)144 624 Q(v['ENV']['INCLUDE'])-.4 E(The abo)108 648 Q
.3 -.15(ve ex)-.15 H(maple will print:).15 E(before: /biz:/foo)144 672 Q
(after: /foo/bar:/foo:/biz)144 684 Q(July 2010)286.415 768 Q(58)204.415
E 0 Cg EP
%%Page: 59 59
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)108 84 Q
-.65(v.)-.4 G(PrependUnique\().65 E/F1 10/Times-Italic@0 SF -.1(ke)C(y)
-.2 E F0(=).32 E F1(val).29 E F0 2.5(,d).51 G(elete_e)-2.5 E
(xisting=0, [...]\))-.15 E .803(Appends the speci\214ed k)144 96 R -.15
(ey)-.1 G -.1(wo).15 G .803(rd ar).1 F .803(guments to the be)-.18 F
.803(ginning of construction v)-.15 F .803(ariables in the en)-.25 F
(vi-)-.4 E 3.022(ronment. If)144 108 R .523(the En)3.022 F .523
(vironment does not ha)-.4 F .823 -.15(ve t)-.2 H .523
(he speci\214ed construction v).15 F .523(ariable, it is simply added)
-.25 F .497(to the en)144 120 R 2.997(vironment. If)-.4 F .496
(the construction v)2.997 F .496
(ariable being appended to is a list, then an)-.25 F 2.996(yv)-.15 G
.496(alue\(s\) that)-3.246 F 2.878(already e)144 132 R 2.878
(xist in the construction v)-.15 F 2.879(ariable will)-.25 F F1(not)
5.739 E F0 2.879(be added ag)6.059 F 2.879(ain to the list.)-.05 F(Ho)
7.879 E(we)-.25 E -.15(ve)-.25 G 3.679 -.4(r, i).15 H(f).4 E(delete_e)
144 144 Q .96(xisting is 1, e)-.15 F .96(xisting matching v)-.15 F .96
(alues are remo)-.25 F -.15(ve)-.15 G 3.46<648c>.15 G .96(rst, so e)
-3.46 F .96(xisting v)-.15 F .96(alues in the ar)-.25 F 3.46(gl)-.18 G
(ist)-3.46 E(mo)144 156 Q .3 -.15(ve t)-.15 H 2.5(ot).15 G
(he front of the list.)-2.5 E(Example:)144 180 Q(en)144 204 Q -.65(v.)
-.4 G(PrependUnique\(CCFLA).65 E(GS = '-g', FOO = ['foo.yyy']\))-.4 E
(en)108 232.8 Q -.65(v.)-.4 G(RCS\(\)).65 E 3.564(Af)144 244.8 S 1.065(\
actory function that returns a Builder object to be used to fetch sourc\
e \214les from RCS.)-3.664 F(The)6.065 E
(returned Builder is intended to be passed to the)144 256.8 Q/F2 10
/Times-Bold@0 SF(Sour)2.5 E(ceCode)-.18 E F0(function:)2.5 E(Examples:)
144 280.8 Q(en)144 304.8 Q -.65(v.)-.4 G(SourceCode\('.).65 E(', en)-.7
E -.65(v.)-.4 G(RCS\(\)\)).65 E .257(Note that)144 321.6 R F2(scons)
2.757 E F0 .256
(will fetch source \214les from RCS subdirectories automatically)2.756 F
2.756(,s)-.65 G 2.756(oc)-2.756 G .256(on\214guring RCS)-2.756 F .952
(as demonstrated in the abo)144 333.6 R 1.252 -.15(ve ex)-.15 H .953
(ample should only be necessary if you are fetching from RCS,v).15 F
.063(\214les in the same directory as the source \214les, or if you nee\
d to e)144 345.6 R .063(xplicitly specify RCS for a speci\214c)-.15 F
(subdirectory)144 357.6 Q(.)-.65 E(en)108 386.4 Q -.65(v.)-.4 G
(Replace\().65 E F1 -.1(ke)C(y)-.2 E F0(=).32 E F1(val).29 E F0 2.5(,[)
.51 G(...]\))-2.5 E(Replaces construction v)144 398.4 Q
(ariables in the En)-.25 E(vironment with the speci\214ed k)-.4 E -.15
(ey)-.1 G -.1(wo).15 G(rd ar).1 E(guments.)-.18 E(Example:)144 422.4 Q
(en)144 446.4 Q -.65(v.)-.4 G(Replace\(CCFLA).65 E
(GS = '-g', FOO = 'foo.xxx'\))-.4 E(Repository\()108 475.2 Q F1(dir).35
E(ectory)-.37 E F0(\)).32 E(en)108 492 Q -.65(v.)-.4 G(Repository\().65
E F1(dir).35 E(ectory)-.37 E F0(\)).32 E .476(Speci\214es that)144 504 R
F1(dir)3.326 E(ectory)-.37 E F0 .477
(is a repository to be searched for \214les.)3.296 F .477
(Multiple calls to)5.477 F F2(Repository)2.977 E F0 .477(\(\) are)B(le)
144 516 Q -.05(ga)-.15 G(l, and each one adds to the list of repositori\
es that will be searched.).05 E -.8(To)144 540 S F2(scons)4.272 E F0
3.472(,ar)C .971(epository is a cop)-3.472 F 3.471(yo)-.1 G 3.471(ft)
-3.471 G .971(he source tree, from the top-le)-3.471 F -.15(ve)-.25 G
3.471(ld).15 G .971(irectory on do)-3.471 F .971(wn, which)-.25 F .349
(may contain both source \214les and deri)144 552 R -.15(ve)-.25 G 2.849
<648c>.15 G .349(les that can be used to b)-2.849 F .349(uild tar)-.2 F
.349(gets in the local source)-.18 F 3.302(tree. The)144 564 R .802
(canonical e)3.302 F .802(xample w)-.15 F .801(ould be an of)-.1 F .801
(\214cial source tree maintained by an inte)-.25 F(grator)-.15 E 5.801
(.I)-.55 G 3.301(ft)-5.801 G(he)-3.301 E .473(repository contains deri)
144 576 R -.15(ve)-.25 G 2.973<648c>.15 G .473(les, then the deri)-2.973
F -.15(ve)-.25 G 2.973<648c>.15 G .473(les should ha)-2.973 F .773 -.15
(ve b)-.2 H .474(een b).15 F .474(uilt using)-.2 F F2(scons)2.974 E F0
2.974(,s)C 2.974(ot)-2.974 G(hat)-2.974 E .475
(the repository contains the necessary signature information to allo)144
588 R(w)-.25 E F2(scons)2.975 E F0 .474(to \214gure out when it is)2.975
F(appropriate to use the repository cop)144 600 Q 2.5(yo)-.1 G 2.5(fad)
-2.5 G(eri)-2.5 E -.15(ve)-.25 G 2.5<648c>.15 G(le, instead of b)-2.5 E
(uilding one locally)-.2 E(.)-.65 E .31(Note that if an up-to-date deri)
144 624 R -.15(ve)-.25 G 2.81<648c>.15 G .31(le already e)-2.81 F .31
(xists in a repository)-.15 F(,)-.65 E F2(scons)2.81 E F0(will)2.81 E F1
(not)3.17 E F0(mak)3.49 E 2.81(eac)-.1 G(op)-2.81 E 2.81(yi)-.1 G(n)
-2.81 E 1.541(the local directory tree.)144 636 R 1.541
(In order to guarantee that a local cop)6.541 F 4.04(yw)-.1 G 1.54
(ill be made, use the)-4.04 F F2(Local\(\))4.04 E F0(method.)144 648 Q
(Requires\()108 676.8 Q F1(tar).13 E -.1(ge)-.37 G(t).1 E F0(,).68 E F1
(pr)3.75 E(er)-.37 E(equisite)-.37 E F0(\)).18 E(en)108 693.6 Q -.65(v.)
-.4 G(Requires\().65 E F1(tar).13 E -.1(ge)-.37 G(t).1 E F0(,).68 E F1
(pr)3.75 E(er)-.37 E(equisite)-.37 E F0(\)).18 E .445
(Speci\214es an order)144 705.6 R .446
(-only relationship between the speci\214ed tar)-.2 F .446
(get \214le\(s\) and the speci\214ed prerequi-)-.18 F .815
(site \214le\(s\).)144 717.6 R .815
(The prerequisite \214le\(s\) will be \(re\)b)5.815 F .815
(uilt, if necessary)-.2 F(,)-.65 E F1(befor)3.585 E(e)-.37 E F0 .814
(the tar)3.494 F .814(get \214le\(s\), b)-.18 F .814(ut the)-.2 F(tar)
144 729.6 Q .263(get \214le\(s\) do not actually depend on the prerequi\
sites and will not be reb)-.18 F .264(uilt simply because the)-.2 F
(July 2010)286.415 768 Q(59)204.415 E 0 Cg EP
%%Page: 60 60
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(prerequisite \214le\(s\) change.)144 84 Q(Example:)144 108 Q(en)144 132
Q -.65(v.)-.4 G(Requires\('foo', '\214le-that-must-be-b).65 E
(uilt-before-foo'\))-.2 E(Return\([)108 160.8 Q/F1 10/Times-Italic@0 SF
(var).29 E(s)-.1 E F0(... ,).27 E F1(stop=)2.84 E F0(]\))A .695(By def)
144 172.8 R .695(ault, this stops processing the current SConscript \
\214le and returns to the calling SConscript)-.1 F 1.438(\214le the v)
144 184.8 R 1.438(alues of the v)-.25 F 1.439(ariables named in the)-.25
F F1(var)4.229 E(s)-.1 E F0 1.439(string ar)4.209 F 3.939
(guments. Multiple)-.18 F 1.439(strings contaning)3.939 F -.25(va)144
196.8 S(riable names may be passed to).25 E/F2 10/Times-Bold@0 SF(Retur)
2.5 E(n)-.15 E F0 2.5(\(\). An)B 2.5(ys)-.15 G
(trings that contain white space)-2.5 E .634(The optional)144 220.8 R F2
(stop=)3.134 E F0 -.1(ke)3.133 G(yw)-.05 E .633(ord ar)-.1 F .633
(gument may be set to a f)-.18 F .633(alse v)-.1 F .633
(alue to continue processing the rest)-.25 F .62
(of the SConscript \214le after the)144 232.8 R F2(Retur)3.12 E(n)-.15 E
F0 .621(\(\) call.)B .621(This w)5.621 F .621(as the def)-.1 F .621
(ault beha)-.1 F .621(vior prior to SCons 0.98.)-.2 F(Ho)144 244.8 Q(we)
-.25 E -.15(ve)-.25 G 1.923 -.4(r, t).15 H 1.123(he v).4 F 1.123
(alues returned are still the v)-.25 F 1.122(alues of the v)-.25 F 1.122
(ariables in the named)-.25 F F1(var)3.912 E(s)-.1 E F0 1.122
(at the point)3.892 F F2(Retur)144 256.8 Q(n)-.15 E F0(\(\) is called.)A
(Examples:)144 280.8 Q 2.5(#R)144 304.8 S(eturns without returning a v)
-2.5 E(alue.)-.25 E(Return\(\))144 316.8 Q 2.5(#R)144 340.8 S
(eturns the v)-2.5 E(alue of the 'foo' Python v)-.25 E(ariable.)-.25 E
(Return\("foo"\))144 352.8 Q 2.5(#R)144 376.8 S(eturns the v)-2.5 E
(alues of the Python v)-.25 E(ariables 'foo' and 'bar'.)-.25 E
(Return\("foo", "bar"\))144 388.8 Q 2.5(#R)144 412.8 S(eturns the v)-2.5
E(alues of Python v)-.25 E(ariables ')-.25 E -.25(va)-.5 G(l1' and ').25
E -.25(va)-.5 G(l2'.).25 E(Return\(')144 424.8 Q -.25(va)-.5 G(l1 v).25
E(al2'\))-.25 E(Scanner\()108 453.6 Q F1(function)1.97 E F0 2.5(,[).24 G
F1(ar)-2.17 E(gument)-.37 E F0(,).68 E F1 -.1(ke)2.5 G(ys)-.2 E F0(,).27
E F1(path_function)3.75 E F0(,).24 E F1(node_class)2.86 E F0(,).27 E F1
(node_factory)2.86 E F0(,).32 E F1(scan_c)2.84 E(hec)-.15 E(k)-.2 E F0
(,).67 E F1 -.37(re)2.5 G(cur).37 E(sive)-.1 E F0(]\)).18 E(en)108 470.4
Q -.65(v.)-.4 G(Scanner\().65 E F1(function)1.97 E F0 2.5(,[).24 G F1
(ar)-2.17 E(gument)-.37 E F0(,).68 E F1 -.1(ke)2.5 G(ys)-.2 E F0(,).27 E
F1(path_function)3.75 E F0(,).24 E F1(node_class)2.86 E F0(,).27 E F1
(node_factory)2.86 E F0(,).32 E F1(scan_c)2.84 E(hec)-.15 E(k)-.2 E F0
(,).67 E F1 -.37(re)2.5 G(cur).37 E(sive)-.1 E F0(]\)).18 E .454
(Creates a Scanner object for the speci\214ed)144 482.4 R F1(function)
2.954 E F0 5.454(.S).24 G .455(ee the section "Scanner Objects," belo)
-5.454 F 1.755 -.65(w, f)-.25 H(or).65 E 2.5(ac)144 494.4 S(omplete e)
-2.5 E(xplanation of the ar)-.15 E(guments and beha)-.18 E(vior)-.2 E(.)
-.55 E(en)108 523.2 Q -.65(v.)-.4 G(SCCS\(\)).65 E 3.238(Af)144 535.2 S
.738(actory function that returns a Builder object to be used to fetch \
source \214les from SCCS.)-3.338 F(The)5.737 E
(returned Builder is intended to be passed to the)144 547.2 Q F2(Sour)
2.5 E(ceCode)-.18 E F0(function.)2.5 E(Example:)144 571.2 Q(en)144 595.2
Q -.65(v.)-.4 G(SourceCode\('.).65 E(', en)-.7 E -.65(v.)-.4 G
(SCCS\(\)\)).65 E 1.597(Note that)144 612 R F2(scons)4.097 E F0 1.598
(will fetch source \214les from SCCS subdirectories automatically)4.097
F 4.098(,s)-.65 G 4.098(oc)-4.098 G(on\214guring)-4.098 E 1.082
(SCCS as demonstrated in the abo)144 624 R 1.382 -.15(ve ex)-.15 H 1.082
(ample should only be necessary if you are fetching from).15 F F1
(s.SCCS)144.34 636 Q F0 .138(\214les in the same directory as the sourc\
e \214les, or if you need to e)3.217 F .138(xplicitly specify SCCS for)
-.15 F 2.5(as)144 648 S(peci\214c subdirectory)-2.5 E(.)-.65 E
(SConscript\()108 676.8 Q F1(scripts).34 E F0 2.5(,[).27 G F1 -.2(ex)
-2.5 G(ports).2 E F0(,).27 E F1(variant_dir)2.79 E F0(,).73 E F1
(duplicate)2.85 E F0(]\)).18 E(en)108 693.6 Q -.65(v.)-.4 G
(SConscript\().65 E F1(scripts).34 E F0 2.5(,[).27 G F1 -.2(ex)-2.5 G
(ports).2 E F0(,).27 E F1(variant_dir)2.79 E F0(,).73 E F1(duplicate)
2.85 E F0(]\)).18 E(July 2010)286.415 768 Q(60)204.415 E 0 Cg EP
%%Page: 61 61
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(SConscript\(dirs=)108 84 Q/F1 10/Times-Italic@0 SF(subdir).34 E(s)-.1 E
F0 2.5(,[).27 G(name=)-2.5 E F1(script).34 E F0(,).68 E F1 -.2(ex)2.5 G
(ports).2 E F0(,).27 E F1(variant_dir)2.79 E F0(,).73 E F1(duplicate)
2.85 E F0(]\)).18 E(en)108 100.8 Q -.65(v.)-.4 G(SConscript\(dirs=).65 E
F1(subdir).34 E(s)-.1 E F0 2.5(,[).27 G(name=)-2.5 E F1(script).34 E F0
(,).68 E F1 -.2(ex)2.5 G(ports).2 E F0(,).27 E F1(variant_dir)2.79 E F0
(,).73 E F1(duplicate)2.85 E F0(]\)).18 E .369(This tells)144 112.8 R/F2
10/Times-Bold@0 SF(scons)2.869 E F0 .369(to e)2.869 F -.15(xe)-.15 G
.368
(cute one or more subsidiary SConscript \(con\214guration\) \214les.).15
F(An)5.368 E 2.868(yv)-.15 G(ariables)-3.118 E .355
(returned by a called script using)144 124.8 R F2(Retur)2.855 E(n)-.15 E
F0 .355(\(\) will be returned by the call to)B F2(SConscript)2.855 E F0
2.855(\(\). There)B(are)2.855 E(tw)144 136.8 Q 2.5(ow)-.1 G
(ays to call the)-2.6 E F2(SConscript)2.5 E F0(\(\) function.)A 1.2
(The \214rst w)144 160.8 R 1.2(ay you can call)-.1 F F2(SConscript)3.7 E
F0 1.2(\(\) is to e)B 1.2(xplicitly specify one or more)-.15 F F1
(scripts)4.04 E F0 1.2(as the \214rst)3.97 F(ar)144 172.8 Q 2.979
(gument. A)-.18 F .479(single script may be speci\214ed as a string; mu\
ltiple scripts must be speci\214ed as a list)2.979 F(\(either e)144
184.8 Q(xplicitly or as created by a function lik)-.15 E(e)-.1 E F2
(Split)2.5 E F0 2.5(\(\)\). Examples:)B 12.5
(SConscript\('SConscript'\) #)144 196.8 R
(run SConscript in the current directory)2.5 E(SConscript\(')144 208.8 Q
2.5(src/SConscript'\) #)-.55 F(run SConscript in the src directory)2.5 E
(SConscript\([')144 220.8 Q(src/SConscript', ')-.55 E
(doc/SConscript']\))-.5 E(con\214g = SConscript\('MyCon\214g.p)144 232.8
Q(y'\))-.1 E 1.073(The second w)108 256.8 R 1.073(ay you can call)-.1 F
F2(SConscript)3.573 E F0 1.072
(\(\) is to specify a list of \(sub\)directory names as a dirs=)B F1
(subdir).34 E(s)-.1 E F0 -.1(ke)108 268.8 S(yw)-.05 E 1.979(ord ar)-.1 F
4.479(gument. In)-.18 F 1.979(this case,)4.479 F F2(scons)4.479 E F0
1.979(will, by def)4.479 F 1.979(ault, e)-.1 F -.15(xe)-.15 G 1.98
(cute a subsidiary con\214guration \214le named).15 F F2(SConscript)108
280.8 Q F0 .059(in each of the speci\214ed directories.)2.559 F -1.1(Yo)
5.059 G 2.559(um)1.1 G .059(ay specify a name other than)-2.559 F F2
(SConscript)2.558 E F0 .058(by supply-)2.558 F .13
(ing an optional name=)108 292.8 R F1(script).34 E F0 -.1(ke)2.63 G(yw)
-.05 E .13(ord ar)-.1 F 2.63(gument. The)-.18 F .13(\214rst three e)2.63
F .13(xamples belo)-.15 F 2.63(wh)-.25 G -2.25 -.2(av e)-2.63 H .13
(the same ef)2.83 F .13(fect as the)-.25 F(\214rst three e)108 304.8 Q
(xamples abo)-.15 E -.15(ve)-.15 G(:).15 E(SConscript\(dirs='.)144 316.8
Q 12.5('\) #)-.7 F(run SConscript in the current directory)2.5 E
(SConscript\(dirs=')144 328.8 Q 7.5(src'\) #)-.55 F
(run SConscript in the src directory)2.5 E(SConscript\(dirs=[')144 340.8
Q(src', ')-.55 E(doc']\))-.5 E(SConscript\(dirs=[')144 352.8 Q(sub1', ')
-.55 E(sub2'], name='MySConscript'\))-.55 E .012(The optional)108 376.8
R F1 -.2(ex)2.512 G(ports).2 E F0(ar)2.781 E .011(gument pro)-.18 F .011
(vides a list of v)-.15 F .011(ariable names or a dictionary of named v)
-.25 F .011(alues to e)-.25 F .011(xport to)-.15 F(the)108 388.8 Q F1
(script\(s\))4.138 E F0 6.638(.T).06 G 1.638(hese v)-6.638 F 1.639
(ariables are locally e)-.25 F 1.639(xported only to the speci\214ed)
-.15 F F1(script\(s\))4.139 E F0 4.139(,a).06 G 1.639(nd do not af)
-4.139 F 1.639(fect the)-.25 F 1.294(global pool of v)108 400.8 R 1.294
(ariables used by the)-.25 F F2(Export)3.793 E F0 1.293(\(\) function.)B
1.293(The subsidiary)6.293 F F1(script\(s\))4.133 E F0 1.293
(must use the)3.853 F F2(Import)3.793 E F0(\(\))A
(function to import the v)108 412.8 Q 2.5(ariables. Examples:)-.25 F
(foo = SConscript\(')144 424.8 Q(sub/SConscript', e)-.55 E(xports='en)
-.15 E(v'\))-.4 E(SConscript\(')144 436.8 Q(dir/SConscript', e)-.5 E
(xports=['en)-.15 E(v', ')-.4 E -.25(va)-.5 G(riable']\)).25 E
(SConscript\(dirs=')144 448.8 Q(subdir', e)-.55 E(xports='en)-.15 E 2.5
(vv)-.4 G(ariable'\))-2.75 E(SConscript\(dirs=['one', ')144 460.8 Q(tw)
-.18 E(o', ')-.1 E(three'], e)-.18 E(xports=')-.15 E(shared_info'\))-.55
E .822(If the optional)108 484.8 R F1(variant_dir)3.612 E F0(ar)4.052 E
.823(gument is present, it causes an ef)-.18 F .823(fect equi)-.25 F
-.25(va)-.25 G .823(lent to the).25 F F2 -.92(Va)3.323 G(riantDir).92 E
F0 .823(\(\) method)B .47(described belo)108 496.8 R 4.27 -.65(w. \()
-.25 H(If).65 E F1(variant_dir)3.26 E F0 .47(is not present, the)3.7 F
F1(duplicate)3.32 E F0(ar)3.15 E .47(gument is ignored.\))-.18 F(The)
5.47 E F1(variant_dir)3.26 E F0(ar)3.7 E(gu-)-.18 E .411
(ment is interpreted relati)108 508.8 R .711 -.15(ve t)-.25 H 2.911(ot)
.15 G .411(he directory of the calling)-2.911 F F2(SConscript)2.911 E F0
2.911(\214le. See)2.911 F .412(the description of the)2.911 F F2 -.92
(Va)2.912 G(ri-).92 E(antDir)108 520.8 Q F0(\(\) function belo)A 2.5(wf)
-.25 G(or additional details and restrictions.)-2.5 E(If)108 544.8 Q F1
(variant_dir)3.342 E F0 .551
(is present, the source directory is the directory in which the)3.782 F
F2(SConscript)3.051 E F0 .551(\214le resides and the)3.051 F F2
(SConscript)108 556.8 Q F0(\214le is e)2.5 E -.25(va)-.25 G
(luated as if it were in the).25 E F1(variant_dir)2.79 E F0(directory:)
3.23 E(SConscript\(')144 568.8 Q(src/SConscript', v)-.55 E
(ariant_dir = 'b)-.25 E(uild'\))-.2 E(is equi)108 580.8 Q -.25(va)-.25 G
(lent to).25 E -1.11(Va)144 592.8 S(riantDir\('b)1.11 E(uild', ')-.2 E
(src'\))-.55 E(SConscript\('b)144 604.8 Q(uild/SConscript'\))-.2 E(This\
 later paradigm is often used when the sources are in the same director\
y as the)108 616.8 Q F2(SConstruct:)2.5 E F0
(SConscript\('SConscript', v)144 628.8 Q(ariant_dir = 'b)-.25 E(uild'\))
-.2 E(is equi)108 640.8 Q -.25(va)-.25 G(lent to).25 E -1.11(Va)144
652.8 S(riantDir\('b)1.11 E(uild', '.)-.2 E('\))-.7 E(SConscript\('b)144
664.8 Q(uild/SConscript'\))-.2 E(Here are some composite e)108 700.8 Q
(xamples:)-.15 E 2.5(#c)144 724.8 S
(ollect the con\214guration information and use it to b)-2.5 E
(uild src and doc)-.2 E(July 2010)286.415 768 Q(61)204.415 E 0 Cg EP
%%Page: 62 62
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(shared_info = SConscript\('MyCon\214g.p)144 84 Q(y'\))-.1 E
(SConscript\(')144 96 Q(src/SConscript', e)-.55 E(xports=')-.15 E
(shared_info'\))-.55 E(SConscript\(')144 108 Q(doc/SConscript', e)-.5 E
(xports=')-.15 E(shared_info'\))-.55 E 2.5(#b)144 132 S(uild deb)-2.7 E
(ugging and production v)-.2 E 2.5(ersions. SConscript)-.15 F 2.5(#c)144
144 S(an use Dir\('.)-2.5 E('\).path to determine v)-.7 E(ariant.)-.25 E
(SConscript\('SConscript', v)144 156 Q(ariant_dir=')-.25 E(deb)-.5 E
(ug', duplicate=0\))-.2 E(SConscript\('SConscript', v)144 168 Q
(ariant_dir='prod', duplicate=0\))-.25 E 2.5(#b)144 192 S(uild deb)-2.7
E(ugging and production v)-.2 E 2.5(ersions. SConscript)-.15 F 2.5(#i)
144 204 S 2.5(sp)-2.5 G(assed \215ags to use.)-2.5 E
(opts = { 'CPPDEFINES' : ['DEB)144 216 Q(UG'], 'CCFLA)-.1 E
(GS' : '-pgdb' })-.4 E(SConscript\('SConscript', v)144 228 Q
(ariant_dir=')-.25 E(deb)-.5 E(ug', duplicate=0, e)-.2 E(xports=opts\))
-.15 E(opts = { 'CPPDEFINES' : ['NODEB)144 240 Q(UG'], 'CCFLA)-.1 E
(GS' : '-O' })-.4 E(SConscript\('SConscript', v)144 252 Q
(ariant_dir='prod', duplicate=0, e)-.25 E(xports=opts\))-.15 E 2.5(#b)
144 276 S(uild common documentation and compile for dif)-2.7 E
(ferent architectures)-.25 E(SConscript\(')144 288 Q(doc/SConscript', v)
-.5 E(ariant_dir='b)-.25 E(uild/doc', duplicate=0\))-.2 E(SConscript\(')
144 300 Q(src/SConscript', v)-.55 E(ariant_dir='b)-.25 E
(uild/x86', duplicate=0\))-.2 E(SConscript\(')144 312 Q
(src/SConscript', v)-.55 E(ariant_dir='b)-.25 E
(uild/ppc', duplicate=0\))-.2 E(SConscriptChdir\()108 340.8 Q/F1 10
/Times-Italic@0 SF(value).29 E F0(\)).18 E(en)108 357.6 Q -.65(v.)-.4 G
(SConscriptChdir\().65 E F1(value).29 E F0(\)).18 E .862(By def)144
369.6 R(ault,)-.1 E/F2 10/Times-Bold@0 SF(scons)3.362 E F0 .863
(changes its w)3.363 F .863
(orking directory to the directory in which each subsidiary SCon-)-.1 F
(script \214le li)144 381.6 Q -.15(ve)-.25 G 2.5(s. This).15 F(beha)2.5
E(vior may be disabled by specifying either:)-.2 E(SConscriptChdir\(0\))
144 405.6 Q(en)144 417.6 Q -.65(v.)-.4 G(SConscriptChdir\(0\)).65 E .929
(in which case)144 434.4 R F2(scons)3.429 E F0 .929
(will stay in the top-le)3.429 F -.15(ve)-.25 G 3.429(ld).15 G .928
(irectory while reading all SConscript \214les.)-3.429 F(\(This)5.928 E
.908(may be necessary when b)144 446.4 R .909(uilding from repositories\
, when all the directories in which SConscript)-.2 F .022
(\214les may be found don')144 458.4 R 2.522(tn)-.18 G .022
(ecessarily e)-2.522 F .022(xist locally)-.15 F 2.522(.\) Y)-.65 F .022
(ou may enable and disable this ability by call-)-1.1 F
(ing SConscriptChdir\(\) multiple times.)144 470.4 Q(Example:)144 494.4
Q(en)144 518.4 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E
(SConscriptChdir\(0\))144 530.4 Q 23.17
(SConscript\('foo/SConscript'\) #)144 542.4 R(will not chdir to foo)2.5
E(en)144 554.4 Q -.65(v.)-.4 G(SConscriptChdir\(1\)).65 E 23.73
(SConscript\('bar/SConscript'\) #)144 566.4 R(will chdir to bar)2.5 E
(SConsignFile\([)108 595.2 Q F1(\214le)1.91 E F0(,).18 E F1(dbm_module)
.35 E F0(]\)).18 E(en)108 612 Q -.65(v.)-.4 G(SConsignFile\([).65 E F1
(\214le)1.91 E F0(,).18 E F1(dbm_module).35 E F0(]\)).18 E .07
(This tells)144 624 R F2(scons)2.57 E F0 .07
(to store all \214le signatures in the speci\214ed database)2.57 F F1
(\214le)2.57 E F0 5.07(.I).18 G 2.57(ft)-5.07 G(he)-2.57 E F1(\214le)
4.48 E F0 .07(name is omitted,)2.75 F F2(.sconsign)144 636 Q F0 1.175
(is used by def)3.675 F 3.675(ault. \(The)-.1 F 1.175
(actual \214le name\(s\) stored on disk may ha)3.675 F 1.474 -.15(ve a)
-.2 H 3.674(na).15 G(ppropriated)-3.674 E(suf)144 648 Q .301
(\214x appended by the)-.25 F F1(dbm_module)2.801 E F0 2.801(.\) If).18
F F1(\214le)4.711 E F0 .301
(is not an absolute path name, the \214le is placed in the)2.981 F
(same directory as the top-le)144 660 Q -.15(ve)-.25 G(l).15 E F2
(SConstruct)2.5 E F0(\214le.)2.5 E(If)144 684 Q F1(\214le)5.139 E F0(is)
3.409 E F2(None)3.229 E F0 3.229(,t)C(hen)-3.229 E F2(scons)3.228 E F0
.728(will store \214le signatures in a separate)3.228 F F2(.sconsign)
3.228 E F0 .728(\214le in each directory)3.228 F(,)-.65 E
(not in one global database \214le.)144 696 Q(\(This w)5 E(as the def)
-.1 E(ault beha)-.1 E(vior prior to SCons 0.96.91 and 0.97.\))-.2 E
1.101(The optional)144 720 R F1(dbm_module)3.951 E F0(ar)3.781 E 1.102
(gument can be used to specify which Python database module The)-.18 F
(July 2010)286.415 768 Q(62)204.415 E 0 Cg EP
%%Page: 63 63
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(def)144 84
Q 1.826(ault is to use a custom)-.1 F/F1 10/Times-Bold@0 SF
(SCons.dblite)4.326 E F0 1.825
(module that uses pickled Python data structures, and)4.326 F(which w)
144 96 Q(orks on all Python v)-.1 E(ersions from 1.5.2 on.)-.15 E
(Examples:)144 120 Q 2.5(#E)144 144 S
(xplicitly stores signatures in ".sconsign.dblite")-2.5 E 2.5(#i)144 156
S 2.5(nt)-2.5 G(he top-le)-2.5 E -.15(ve)-.25 G 2.5(lS).15 G
(Construct directory \(the)-2.5 E 2.5(#d)144 168 S(ef)-2.5 E(ault beha)
-.1 E(vior\).)-.2 E(SConsignFile\(\))144 180 Q 2.5(#S)144 204 S
(tores signatures in the \214le "etc/scons-signatures")-2.5 E 2.5(#r)144
216 S(elati)-2.5 E .3 -.15(ve t)-.25 H 2.5(ot).15 G(he top-le)-2.5 E
-.15(ve)-.25 G 2.5(lS).15 G(Construct directory)-2.5 E(.)-.65 E
(SConsignFile\("etc/scons-signatures"\))144 228 Q 2.5(#S)144 252 S
(tores signatures in the speci\214ed absolute \214le name.)-2.5 E
(SConsignFile\("/home/me/SCons/signatures"\))144 264 Q 2.5(#S)144 288 S
(tores signatures in a separate .sconsign \214le)-2.5 E 2.5(#i)144 300 S
2.5(ne)-2.5 G(ach directory)-2.5 E(.)-.65 E(SConsignFile\(None\))144 312
Q(en)108 340.8 Q -.65(v.)-.4 G(SetDef).65 E(ault\(k)-.1 E -.15(ey)-.1 G
/F2 10/Times-Italic@0 SF(=)-.21 E F0 -.25(va)C(l).25 E F2 2.5(,[).54 G
(...]\))-2.5 E F0 .394(Sets construction v)144 352.8 R .394
(ariables to def)-.25 F .394(ault v)-.1 F .394
(alues speci\214ed with the k)-.25 F -.15(ey)-.1 G -.1(wo).15 G .394
(rd ar).1 F .395(guments if \(and only if\))-.18 F(the v)144 364.8 Q
(ariables are not already set.)-.25 E(The follo)5 E
(wing statements are equi)-.25 E -.25(va)-.25 G(lent:).25 E(en)144 388.8
Q -.65(v.)-.4 G(SetDef).65 E(ault\(FOO = 'foo'\))-.1 E(if not en)144
412.8 Q -.65(v.)-.4 G(has_k).65 E -.15(ey)-.1 G(\('FOO'\): en).15 E
(v['FOO'] = 'foo')-.4 E(SetOption\()108 441.6 Q F2(name).36 E F0(,).18 E
F2(value)2.79 E F0(\)).18 E(en)108 458.4 Q -.65(v.)-.4 G(SetOption\().65
E F2(name).36 E F0(,).18 E F2(value)2.79 E F0(\)).18 E 1.498
(This function pro)144 470.4 R 1.498(vides a w)-.15 F 1.498
(ay to set a select subset of the scons command line options from a)-.1
F(SConscript \214le. The options supported are:)144 482.4 Q F1(clean)158
511.2 Q F0(which corresponds to -c, --clean and --remo)188 511.2 Q -.15
(ve)-.15 G(;).15 E F1(duplicate)158 528 Q F0
(which corresponds to --duplicate;)188 540 Q F1(help)158 556.8 Q F0
(which corresponds to -h and --help;)188 556.8 Q F1(implicit_cache)158
573.6 Q F0(which corresponds to --implicit-cache;)188 585.6 Q F1
(max_drift)158 602.4 Q F0(which corresponds to --max-drift;)188 614.4 Q
F1(no_exec)158 631.2 Q F0(which corresponds to -n, --no-e)188 643.2 Q
-.15(xe)-.15 G(c, --just-print, --dry-run and --recon;).15 E F1
(num_jobs)158 660 Q F0(which corresponds to -j and --jobs;)188 672 Q F1
(random)158 688.8 Q F0(which corresponds to --random; and)188 700.8 Q
(July 2010)286.415 768 Q(63)204.415 E 0 Cg EP
%%Page: 64 64
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(stack_size)158 84 Q F0
(which corresponds to --stack-size.)188 96 Q .104(See the documentation\
 for the corresponding command line object for information about each s\
pe-)144 124.8 R(ci\214c option.)144 136.8 Q(Example:)144 160.8 Q
(SetOption\('max_drift', 1\))144 184.8 Q(SideEf)108 213.6 Q(fect\()-.25
E/F2 10/Times-Italic@0 SF(side_ef).34 E(fect)-.18 E F0(,).68 E F2(tar)
2.63 E -.1(ge)-.37 G(t).1 E F0(\)).68 E(en)108 230.4 Q -.65(v.)-.4 G
(SideEf).65 E(fect\()-.25 E F2(side_ef).34 E(fect)-.18 E F0(,).68 E F2
(tar)2.63 E -.1(ge)-.37 G(t).1 E F0(\)).68 E(Declares)144 242.4 Q F2
(side_ef)3.093 E(fect)-.18 E F0 .253(as a side ef)3.433 F .253
(fect of b)-.25 F(uilding)-.2 E F2(tar)2.752 E -.1(ge)-.37 G(t).1 E F0
5.252(.B).68 G(oth)-5.252 E F2(side_ef)3.092 E(fect)-.18 E F0(and)3.432
E F2(tar)2.882 E -.1(ge)-.37 G(t).1 E F0 .252(can be a list, a)3.432 F
.026(\214le name, or a node.)144 254.4 R 2.527(As)5.027 G .027(ide ef)
-2.527 F .027(fect is a tar)-.25 F .027
(get \214le that is created or updated as a side ef)-.18 F .027
(fect of b)-.25 F(uild-)-.2 E .332(ing other tar)144 266.4 R 2.832
(gets. F)-.18 F .332(or e)-.15 F .332(xample, a W)-.15 F(indo)-.4 E .332
(ws PDB \214le is created as a side ef)-.25 F .331(fect of b)-.25 F .331
(uilding the .obj)-.2 F 1.168(\214les for a static library)144 278.4 R
3.668(,a)-.65 G 1.168(nd v)-3.668 F 1.168
(arious log \214les are created updated as side ef)-.25 F 1.169
(fects of v)-.25 F 1.169(arious T)-.25 F(eX)-.7 E 2.632(commands. If)144
290.4 R 2.632(at)2.632 G(ar)-2.632 E .131(get is a side ef)-.18 F .131
(fect of multiple b)-.25 F .131(uild commands,)-.2 F F1(scons)2.631 E F0
.131(will ensure that only one)2.631 F .541(set of commands is e)144
302.4 R -.15(xe)-.15 G .542(cuted at a time.).15 F(Consequently)5.542 E
3.042(,y)-.65 G .542(ou only need to use this method for side-)-3.042 F
(ef)144 314.4 Q(fect tar)-.25 E(gets that are b)-.18 E
(uilt as a result of multiple b)-.2 E(uild commands.)-.2 E .472
(Because multiple b)144 338.4 R .472
(uild commands may update the same side ef)-.2 F .471
(fect \214le, by def)-.25 F .471(ault the)-.1 F F2(side_ef)3.311 E(fect)
-.18 E F0(tar)144 350.4 Q .341(get is)-.18 F F2(not)3.201 E F0 .341
(automatically remo)3.521 F -.15(ve)-.15 G 2.841(dw).15 G .341(hen the)
-2.841 F F2(tar)2.971 E -.1(ge)-.37 G(t).1 E F0 .341(is remo)3.521 F
-.15(ve)-.15 G 2.841(db).15 G 2.842(yt)-2.841 G(he)-2.842 E F1(-c)2.842
E F0 2.842(option. \(Note,)2.842 F(ho)2.842 E(we)-.25 E -.15(ve)-.25 G
-.4(r,).15 G .855(that the)144 362.4 R F2(side_ef)3.695 E(fect)-.18 E F0
.855(might be remo)4.035 F -.15(ve)-.15 G 3.355(da).15 G 3.355(sp)-3.355
G .855(art of cleaning the directory in which it li)-3.355 F -.15(ve)
-.25 G 3.354(s.\) If).15 F(you)3.354 E -.1(wa)144 374.4 S .291
(nt to mak).1 F 2.792(es)-.1 G .292(ure the)-2.792 F F2(side_ef)3.132 E
(fect)-.18 E F0 .292(is cleaned whene)3.472 F -.15(ve)-.25 G 2.792(ras)
.15 G(peci\214c)-2.792 E F2(tar)2.922 E -.1(ge)-.37 G(t).1 E F0 .292
(is cleaned, you must spec-)3.472 F(ify this e)144 386.4 Q
(xplicitly with the)-.15 E F1(Clean)2.5 E F0(\(\) or)A F1(en)2.5 E -.7
(v.)-.4 G(Clean).7 E F0(\(\) function.)A(SourceCode\()108 415.2 Q F2
(entries).19 E F0(,).27 E F2 -.2(bu)2.5 G(ilder).2 E F0(\)).73 E(en)108
432 Q -.65(v.)-.4 G(SourceCode\().65 E F2(entries).19 E F0(,).27 E F2
-.2(bu)2.5 G(ilder).2 E F0(\)).73 E .605(Arrange for non-e)144 444 R
.604(xistent source \214les to be fetched from a source code management\
 system using)-.15 F .575(the speci\214ed)144 456 R F2 -.2(bu)3.075 G
(ilder).2 E F0 5.576(.T).73 G .576(he speci\214ed)-5.576 F F2(entries)
3.266 E F0 .576(may be a Node, string or list of both, and may repre-)
3.346 F(sent either indi)144 468 Q(vidual source \214les or directories\
 in which source \214les can be found.)-.25 E -.15(Fo)144 492 S 3.005
(ra).15 G .805 -.15(ny n)-3.005 H(on-e).15 E .505
(xistent source \214les,)-.15 F F1(scons)3.005 E F0 .505
(will search up the directory tree and use the \214rst)3.005 F F1(Sour)
3.005 E(ce-)-.18 E(Code)144 504 Q F0 -.2(bu)3.848 G 1.348
(ilder it \214nds.).2 F 1.348(The speci\214ed)6.348 F F2 -.2(bu)3.848 G
(ilder).2 E F0 1.348(may be)4.578 F F1(None)3.848 E F0 3.848(,i)C 3.848
(nw)-3.848 G 1.348(hich case)-3.848 F F1(scons)3.848 E F0 1.349
(will not use a)3.849 F -.2(bu)144 516 S .199
(ilder to fetch source \214les for the speci\214ed).2 F F2(entries)2.699
E F0 2.699(,e).27 G -.15(ve)-2.949 G 2.699(ni).15 G 2.699(fa)-2.699 G F1
(Sour)A(ceCode)-.18 E F0 -.2(bu)2.698 G .198(ilder has been speci-).2 F
(\214ed for a directory higher up the tree.)144 528 Q F1(scons)144 552 Q
F0 .181(will, by def)2.681 F .182
(ault, fetch \214les from SCCS or RCS subdirectories without e)-.1 F
.182(xplicit con\214guration.)-.15 F .89(This tak)144 564 R .89
(es some e)-.1 F .889(xtra processing time to search for the necessary \
source code management \214les)-.15 F 1.167(on disk.)144 576 R -1.1(Yo)
6.167 G 3.667(uc)1.1 G 1.167(an a)-3.667 F -.2(vo)-.2 G 1.167
(id these e).2 F 1.168(xtra searches and speed up your b)-.15 F 1.168
(uild a little by disabling these)-.2 F(searches as follo)144 588 Q(ws:)
-.25 E(en)144 612 Q -.65(v.)-.4 G(SourceCode\('.).65 E(', None\))-.7 E
.019(Note that if the speci\214ed)144 640.8 R F2 -.2(bu)2.519 G(ilder).2
E F0 .019(is one you create by hand, it must ha)3.249 F .318 -.15(ve a)
-.2 H 2.518(na).15 G .018(ssociated construction)-2.518 F(en)144 652.8 Q
(vironment to use when fetching a source \214le.)-.4 E F1(scons)144
676.8 Q F0(pro)2.771 E .271(vides a set of canned f)-.15 F .272
(actory functions that return appropriate Builders for v)-.1 F .272
(arious popu-)-.25 F(lar source code management systems.)144 688.8 Q
(Canonical e)5 E(xamples of in)-.15 E -.2(vo)-.4 G(cation include:).2 E
(en)144 712.8 Q -.65(v.)-.4 G(SourceCode\('.).65 E(', en)-.7 E -.65(v.)
-.4 G(BitK).65 E(eeper\('/usr/local/BKsources'\)\))-.25 E(en)144 724.8 Q
-.65(v.)-.4 G(SourceCode\(').65 E(src', en)-.55 E -.65(v.)-.4 G
(CVS\('/usr/local/CVSR).65 E(OO)-.4 E(T'\)\))-.4 E(July 2010)286.415 768
Q(64)204.415 E 0 Cg EP
%%Page: 65 65
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)144 84 Q
-.65(v.)-.4 G(SourceCode\('/', en).65 E -.65(v.)-.4 G(RCS\(\)\)).65 E
(en)144 96 Q -.65(v.)-.4 G(SourceCode\(['f1.c', 'f2.c'], en).65 E -.65
(v.)-.4 G(SCCS\(\)\)).65 E(en)144 108 Q -.65(v.)-.4 G
(SourceCode\('no_source.c', None\)).65 E(en)108 136.8 Q -.65(v.)-.4 G
(subst\().65 E/F1 10/Times-Italic@0 SF(input).01 E F0 2.5(,[).68 G F1
-.15(ra)-2.5 G(w).15 E F0(,).31 E F1(tar)2.63 E -.1(ge)-.37 G(t).1 E F0
(,).68 E F1(sour)2.84 E(ce)-.37 E F0(,).18 E F1(con)2.7 E(v)-.4 E F0
(]\)).32 E(Performs construction v)144 148.8 Q
(ariable interpolation on the speci\214ed string or sequence ar)-.25 E
(gument)-.18 E F1(input)2.5 E F0(.).68 E .7(By def)144 172.8 R .7
(ault, leading or trailing white space will be remo)-.1 F -.15(ve)-.15 G
3.199(df).15 G .699(rom the result.)-3.199 F .699(and all sequences of)
5.699 F .534(white space will be compressed to a single space character)
144 184.8 R 5.534(.A)-.55 G(dditionally)-5.534 E 3.034(,a)-.65 G -.15
(ny)-3.034 G/F2 10/Times-Bold@0 SF($\()3.184 E F0(and)3.034 E F2($\))
3.034 E F0(character)3.034 E .423
(sequences will be stripped from the returned string, The optional)144
196.8 R F1 -.15(ra)2.922 G(w).15 E F0(ar)3.232 E .422
(gument may be set to)-.18 F F2(1)2.922 E F0(if)2.922 E .568(you w)144
208.8 R .568(ant to preserv)-.1 F 3.069(ew)-.15 G .569(hite space and)
-3.069 F F2($\()3.069 E F0(-)A F2($\))A F0 3.069(sequences. The)3.069 F
F1 -.15(ra)3.069 G(w).15 E F0(ar)3.379 E .569(gument may be set to)-.18
F F2(2)3.069 E F0 .569(if you)3.069 F -.1(wa)144 220.8 S
(nt to strip all characters between an).1 E(y)-.15 E F2($\()2.5 E F0
(and)2.5 E F2($\))2.5 E F0
(pairs \(as is done for signature calculation\).)2.5 E .331
(If the input is a sequence \(list or tuple\), the indi)144 244.8 R .331
(vidual elements of the sequence will be e)-.25 F(xpanded,)-.15 E
(and the results will be returned as a list.)144 256.8 Q .305
(The optional)144 280.8 R F1(tar)2.935 E -.1(ge)-.37 G(t).1 E F0(and)
3.485 E F1(sour)3.145 E(ce)-.37 E F0 -.1(ke)2.985 G(yw)-.05 E .305
(ord ar)-.1 F .305(guments must be set to lists of tar)-.18 F .305
(get and source nodes,)-.18 F(respecti)144 292.8 Q -.15(ve)-.25 G(ly).15
E 3.122(,i)-.65 G 3.122(fy)-3.122 G .622(ou w)-3.122 F .622(ant the)-.1
F F2($T)3.122 E(ARGET)-.9 E F0(,)A F2($T)3.122 E(ARGETS)-.9 E F0(,)A F2
($SOURCE)3.122 E F0(and)3.122 E F2($SOURCES)3.121 E F0 .621(to be a)
3.121 F -.25(va)-.2 G(il-).25 E .597(able for e)144 304.8 R 3.097
(xpansion. This)-.15 F .597(is usually necessary if you are calling)
3.097 F F2(en)3.098 E -.7(v.)-.4 G(subst).7 E F0 .598
(\(\) from within a Python)B(function used as an SCons action.)144 316.8
Q .11(Returned string v)144 340.8 R .11
(alues or sequence elements are con)-.25 F -.15(ve)-.4 G .11
(rted to their string representation by def).15 F(ault.)-.1 E 1.007
(The optional)144 352.8 R F1(con)3.707 E(v)-.4 E F0(ar)3.827 E 1.007
(gument may specify a con)-.18 F -.15(ve)-.4 G 1.008
(rsion function that will be used in place of the).15 F(def)144 364.8 Q
4.376(ault. F)-.1 F 1.876(or e)-.15 F 1.876(xample, if you w)-.15 F
1.876(ant Python objects \(including SCons Nodes\) to be returned as)-.1
F .253(Python objects, you can use the Python)144 376.8 R F2(lambda)
2.753 E F0 .253(idiom to pass in an unnamed function that simply)2.753 F
(returns its uncon)144 388.8 Q -.15(ve)-.4 G(rted ar).15 E(gument.)-.18
E(Example:)144 412.8 Q(print en)144 436.8 Q -.65(v.)-.4 G
(subst\("The C compiler is: $CC"\)).65 E(def compile\(tar)144 460.8 Q
(get, source, en)-.18 E(v\):)-.4 E(sourceDir = en)154 472.8 Q -.65(v.)
-.4 G(subst\("${SOURCE.srcdir}",).65 E(tar)209 484.8 Q(get=tar)-.18 E
(get,)-.18 E(source=source\))209 496.8 Q(source_nodes = en)144 520.8 Q
-.65(v.)-.4 G(subst\('$EXP).65 E(AND_T)-.92 E(O_NODELIST',)-.18 E(con)
206.5 532.8 Q(v=lambda x: x\))-.4 E(SourceSignatures\()108 573.6 Q F1
(type).13 E F0(\)).18 E(en)108 590.4 Q -.65(v.)-.4 G(SourceSignatures\()
.65 E F1(type).13 E F0(\)).18 E 3.901(Note: Although)144 602.4 R 1.401
(it is not yet of)3.901 F 1.401
(\214cially deprecated, use of this function is discouraged.)-.25 F 1.4
(See the)6.4 F F2(Decider)144 614.4 Q F0 .119
(\(\) function for a more \215e)B .119(xible and straightforw)-.15 F
.119(ard w)-.1 F .119(ay to con\214gure SCons' decision-mak-)-.1 F(ing.)
144 626.4 Q(The)144 650.4 Q F2(Sour)3.115 E(ceSignatur)-.18 E(es)-.18 E
F0 .615(\(\) function tells)B F2(scons)3.115 E F0(ho)3.115 E 3.115(wt)
-.25 G 3.115(od)-3.115 G .615
(ecide if a source \214le \(a \214le that is not b)-3.115 F(uilt)-.2 E
.973(from an)144 662.4 R 3.473(yo)-.15 G .973
(ther \214les\) has changed since the last time it w)-3.473 F .974
(as used to b)-.1 F .974(uild a particular tar)-.2 F .974(get \214le.)
-.18 F(Le)144 674.4 Q -.05(ga)-.15 G 2.5(lv).05 G(alues are)-2.75 E F2
(MD5)2.5 E F0(or)2.5 E F2(timestamp)2.5 E F0(.)A .248(If the en)144
698.4 R .247(vironment method is used, the speci\214ed type of source s\
ignature is only used when decid-)-.4 F 1.376(ing whether tar)144 710.4
R 1.376(gets b)-.18 F 1.376(uilt with that en)-.2 F 1.376
(vironment are up-to-date or must be reb)-.4 F 3.876(uilt. If)-.2 F
1.376(the global)3.876 F .633(function is used, the speci\214ed type of\
 source signature becomes the def)144 722.4 R .633
(ault used for all decisions)-.1 F(July 2010)286.415 768 Q(65)204.415 E
0 Cg EP
%%Page: 66 66
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(about whether tar)144 84 Q(gets are up-to-date.)-.18 E/F1 10
/Times-Bold@0 SF(MD5)144 108 Q F0(means)2.775 E F1(scons)2.775 E F0 .275
(decides that a source \214le has changed if the MD5 checksum of its co\
ntents has)2.775 F(changed since the last time it w)144 120 Q
(as used to reb)-.1 E(uild a particular tar)-.2 E(get \214le.)-.18 E F1
(timestamp)144 144 Q F0(means)2.535 E F1(scons)2.535 E F0 .035(decides \
that a source \214le has changed if its timestamp \(modi\214cation time\
\))2.535 F .662(has changed since the last time it w)144 156 R .662
(as used to reb)-.1 F .663(uild a particular tar)-.2 F .663(get \214le.)
-.18 F .663(\(Note that although)5.663 F .895
(this is similar to the beha)144 168 R .895(vior of Mak)-.2 F .895
(e, by def)-.1 F .894(ault it will also reb)-.1 F .894
(uild if the dependenc)-.2 F 3.394(yi)-.15 G(s)-3.394 E/F2 10
/Times-Italic@0 SF(older)3.624 E F0(than the last time it w)144 180 Q
(as used to reb)-.1 E(uild the tar)-.2 E(get \214le.\))-.18 E
(There is no dif)144 204 Q(ferent between the tw)-.25 E 2.5(ob)-.1 G
(eha)-2.5 E(viors for Python)-.2 E F1 -.92(Va)2.5 G(lue).92 E F0
(\(\) node objects.)A F1(MD5)144 228 Q F0 .961(signatures tak)3.461 F
3.461(el)-.1 G .961(onger to compute, b)-3.461 F .962
(ut are more accurate than)-.2 F F1(timestamp)3.462 E F0 3.462
(signatures. The)3.462 F(def)144 240 Q(ault v)-.1 E(alue is)-.25 E F1
(MD5)2.5 E F0(.)A .078(Note that the def)144 264 R(ault)-.1 E F1 -.92
(Ta)2.578 G -.1(rg).92 G(etSignatur).1 E(es)-.18 E F0 .078
(\(\) setting \(see belo)B .078(w\) is to use this)-.25 F F1(Sour)2.577
E(ceSignatur)-.18 E(es)-.18 E F0 .077(\(\) set-)B .6(ting for an)144 276
R 3.1(yt)-.15 G(ar)-3.1 E .6(get \214les that are used to b)-.18 F .6
(uild other tar)-.2 F .6(get \214les.)-.18 F(Consequently)5.6 E 3.1(,c)
-.65 G .6(hanging the v)-3.1 F(alue)-.25 E(of)144 288 Q F1(Sour)3.242 E
(ceSignatur)-.18 E(es)-.18 E F0 .742(\(\) will, by def)B .742(ault, af)
-.1 F .742(fect the up-to-date decision for all \214les in the b)-.25 F
.742(uild \(or)-.2 F(all \214les b)144 300 Q
(uilt with a speci\214c construction en)-.2 E(vironment when)-.4 E F1
(en)2.5 E -.7(v.)-.4 G(Sour).7 E(ceSignatur)-.18 E(es)-.18 E F0
(\(\) is used\).)A(Split\()108 328.8 Q F2(ar).33 E(g)-.37 E F0(\)).22 E
(en)108 345.6 Q -.65(v.)-.4 G(Split\().65 E F2(ar).33 E(g)-.37 E F0(\))
.22 E .613(Returns a list of \214le names or other objects.)144 357.6 R
.613(If ar)5.613 F 3.113(gi)-.18 G 3.113(sas)-3.113 G .613
(tring, it will be split on strings of white-)-3.113 F 1.707(space char\
acters within the string, making it easier to write long lists of \214l\
e names.)144 369.6 R 1.706(If ar)6.706 F 4.206(gi)-.18 G(s)-4.206 E
1.403(already a list, the list will be returned untouched.)144 381.6 R
1.403(If ar)6.403 F 3.903(gi)-.18 G 3.903(sa)-3.903 G 1.703 -.15(ny o)
-3.903 H 1.403(ther type of object, it will be).15 F
(returned as a list containing just the object.)144 393.6 Q(Example:)144
417.6 Q(\214les = Split\("f1.c f2.c f3.c"\))144 441.6 Q(\214les = en)144
453.6 Q -.65(v.)-.4 G(Split\("f4.c f5.c f6.c"\)).65 E
(\214les = Split\(""")144 465.6 Q(f7.c)180 477.6 Q(f8.c)180 489.6 Q
(f9.c)180 501.6 Q("""\))144 513.6 Q -.8(Ta)108 542.4 S(g\().8 E F2(node)
.36 E F0(,).18 E F2(ta)2.63 E(gs)-.1 E F0(\)).27 E .215
(Annotates \214le or directory Nodes with information about ho)144 554.4
R 2.714(wt)-.25 G(he)-2.714 E F1 -.1(Pa)2.714 G(ckage).1 E F0 .214
(\(\) Builder should pack-)B(age those \214les or directories.)144 566.4
Q(All tags are optional.)5 E(Examples:)144 590.4 Q 2.5(#m)144 614.4 S
(ak)-2.5 E(es sure the b)-.1 E
(uilt library will be installed with 0644 \214le)-.2 E 2.5(#a)144 626.4
S(ccess mode)-2.5 E -.8(Ta)144 638.4 S(g\( Library\( ').8 E(lib)-.1 E
(.c' \), UNIX_A)-.4 E(TTR="0644" \))-1.11 E 2.5(#m)144 662.4 S
(arks \214le2.txt to be a documentation \214le)-2.5 E -.8(Ta)144 674.4 S
(g\( '\214le2.txt', DOC \)).8 E -.8(Ta)108 703.2 S -.18(rg).8 G
(etSignatures\().18 E F2(type).13 E F0(\)).18 E(July 2010)286.415 768 Q
(66)204.415 E 0 Cg EP
%%Page: 67 67
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)108 84 Q
-.65(v.)-.4 G -.8(Ta).65 G -.18(rg).8 G(etSignatures\().18 E/F1 10
/Times-Italic@0 SF(type).13 E F0(\)).18 E 3.9(Note: Although)144 96 R
1.4(it is not yet of)3.9 F 1.401
(\214cially deprecated, use of this function is discouraged.)-.25 F
1.401(See the)6.401 F/F2 10/Times-Bold@0 SF(Decider)144 108 Q F0 .119
(\(\) function for a more \215e)B .119(xible and straightforw)-.15 F
.119(ard w)-.1 F .119(ay to con\214gure SCons' decision-mak-)-.1 F(ing.)
144 120 Q(The)144 144 Q F2 -.92(Ta)2.995 G -.1(rg).92 G(etSignatur).1 E
(es)-.18 E F0 .495(\(\) function tells)B F2(scons)2.995 E F0(ho)2.995 E
2.995(wt)-.25 G 2.995(od)-2.995 G .495(ecide if a tar)-2.995 F .495
(get \214le \(a \214le that)-.18 F F1(is)3.006 E F0 -.2(bu)3.266 G .496
(ilt from).2 F(an)144 156 Q 3.222(yo)-.15 G .722
(ther \214les\) has changed since the last time it w)-3.222 F .722
(as used to b)-.1 F .721(uild some other tar)-.2 F .721(get \214le.)-.18
F(Le)5.721 E -.05(ga)-.15 G(l).05 E -.25(va)144 168 S(lues are).25 E F2
-.2(bu)2.5 G(ild).2 E F0(;)A F2(content)2.5 E F0(\(or its synon)2.5 E
(ym)-.15 E F2(MD5)2.5 E F0(\);)A F2(timestamp)2.5 E F0 2.5(;o)C(r)-2.5 E
F2(sour)2.5 E(ce)-.18 E F0(.)A .998(If the en)144 192 R .999
(vironment method is used, the speci\214ed type of tar)-.4 F .999
(get signature is only used for tar)-.18 F(gets)-.18 E -.2(bu)144 204 S
.184(ilt with that en).2 F 2.684(vironment. If)-.4 F .183
(the global function is used, the speci\214ed type of signature becomes)
2.684 F 1.214(the def)144 216 R 1.214(ault used for all tar)-.1 F 1.214
(get \214les that don')-.18 F 3.714(th)-.18 G -2.25 -.2(av e)-3.714 H
1.215(an e)3.914 F 1.215(xplicit tar)-.15 F 1.215
(get signature type speci\214ed for)-.18 F(their en)144 228 Q
(vironments.)-.4 E F2(content)144 252 Q F0 1.407(\(or its synon)3.907 F
(ym)-.15 E F2(MD5)3.907 E F0 3.906(\)m)C(eans)-3.906 E F2(scons)3.906 E
F0 1.406(decides that a tar)3.906 F 1.406
(get \214le has changed if the MD5)-.18 F .695
(checksum of its contents has changed since the last time it w)144 264 R
.695(as used to reb)-.1 F .695(uild some other tar)-.2 F(get)-.18 E
3.243(\214le. This)144 276 R(means)3.243 E F2(scons)3.243 E F0 .742
(will open up MD5 sum the contents of tar)3.243 F .742
(get \214les after the)-.18 F(y')-.15 E .742(re b)-.5 F .742(uilt, and)
-.2 F 1.482(may decide that it does not need to reb)144 288 R 1.482
(uild "do)-.2 F 1.482(wnstream" tar)-.25 F 1.483
(get \214les if a \214le w)-.18 F 1.483(as reb)-.1 F 1.483(uilt with)-.2
F -.15(ex)144 300 S(actly the same contents as the last time.).15 E F2
(timestamp)144 324 Q F0(means)2.786 E F2(scons)2.786 E F0 .286
(decides that a tar)2.786 F .286
(get \214le has changed if its timestamp \(modi\214cation time\))-.18 F
.727(has changed since the last time it w)144 336 R .727(as used to reb)
-.1 F .727(uild some other tar)-.2 F .727(get \214le.)-.18 F .727
(\(Note that although)5.727 F .895(this is similar to the beha)144 348 R
.895(vior of Mak)-.2 F .895(e, by def)-.1 F .894(ault it will also reb)
-.1 F .894(uild if the dependenc)-.2 F 3.394(yi)-.15 G(s)-3.394 E F1
(older)3.624 E F0(than the last time it w)144 360 Q(as used to reb)-.1 E
(uild the tar)-.2 E(get \214le.\))-.18 E F2(sour)144 384 Q(ce)-.18 E F0
(means)4.665 E F2(scons)4.665 E F0 2.166(decides that a tar)4.665 F
2.166(get \214le has changed as speci\214ed by the corresponding)-.18 F
F2(Sour)144 396 Q(ceSignatur)-.18 E(es)-.18 E F0 .556(\(\) setting \()B
F2(MD5)A F0(or)3.056 E F2(timestamp)3.056 E F0 3.056(\). This)B .555
(means that)3.055 F F2(scons)3.055 E F0 .555
(will treat all input \214les)3.055 F .456(to a tar)144 408 R .456
(get the same w)-.18 F(ay)-.1 E 2.956(,r)-.65 G -2.25 -.15(eg a)-2.956 H
.456(rdless of whether the).15 F 2.956(ya)-.15 G .456
(re source \214les or ha)-2.956 F .756 -.15(ve b)-.2 H .456(een b).15 F
.457(uilt from other)-.2 F(\214les.)144 420 Q F2 -.2(bu)144 444 S(ild).2
E F0(means)2.901 E F2(scons)2.901 E F0 .401(decides that a tar)2.901 F
.401(get \214le has changed if it has been reb)-.18 F .4
(uilt in this in)-.2 F -.2(vo)-.4 G .4(cation or).2 F 1.211
(if its content or timestamp ha)144 456 R 1.512 -.15(ve c)-.2 H 1.212
(hanged as speci\214ed by the corresponding).15 F F2(Sour)3.712 E
(ceSignatur)-.18 E(es)-.18 E F0(\(\))A 3.508(setting. This)144 468 R
("propag)3.508 E 1.008(ates" the status of a reb)-.05 F 1.007
(uilt \214le so that other "do)-.2 F 1.007(wnstream" tar)-.25 F 1.007
(get \214les will)-.18 F(al)144 480 Q -.1(wa)-.1 G(ys be reb).1 E
(uilt, e)-.2 E -.15(ve)-.25 G 2.5(ni).15 G 2.5(ft)-2.5 G
(he contents or the timestamp ha)-2.5 E .3 -.15(ve n)-.2 H(ot changed.)
.15 E F2 -.2(bu)144 504 S(ild).2 E F0 .615(signatures are f)3.115 F .615
(astest because)-.1 F F2(content)3.116 E F0(\(or)3.116 E F2(MD5)3.116 E
F0 3.116(\)s)C .616(ignatures tak)-3.116 F 3.116(el)-.1 G .616
(onger to compute, b)-3.116 F .616(ut are)-.2 F 1.629
(more accurate than)144 516 R F2(timestamp)4.129 E F0 1.629
(signatures, and can pre)4.129 F -.15(ve)-.25 G 1.629
(nt unnecessary "do).15 F 1.629(wnstream" reb)-.25 F(uilds)-.2 E .865
(when a tar)144 528 R .865(get \214le is reb)-.18 F .865(uilt to the e)
-.2 F .865(xact same contents as the pre)-.15 F .866(vious b)-.25 F
3.366(uild. The)-.2 F F2(sour)3.366 E(ce)-.18 E F0(setting)3.366 E(pro)
144 540 Q .397(vides the most consistent beha)-.15 F .397
(vior when other tar)-.2 F .397(get \214les may be reb)-.18 F .396
(uilt from both source and)-.2 F(tar)144 552 Q(get input \214les.)-.18 E
(The def)5 E(ault v)-.1 E(alue is)-.25 E F2(sour)2.5 E(ce)-.18 E F0(.)A
1.337(Because the def)144 576 R 1.337(ault setting is)-.1 F F2(sour)
3.837 E(ce)-.18 E F0 3.837(,u)C(sing)-3.837 E F2(Sour)3.838 E
(ceSignatur)-.18 E(es)-.18 E F0 1.338(\(\) is generally preferable to)B
F2 -.92(Ta)3.838 G -.37(r-).92 G(getSignatur)144 588 Q(es)-.18 E F0
(\(\))A F2(,)A F0 .036(so that the up-to-date decision will be consiste\
nt for all \214les \(or all \214les b)2.536 F .035(uilt with)-.2 F 2.5
(as)144 600 S .001(peci\214c construction en)-2.5 F 2.501
(vironment\). Use)-.4 F(of)2.501 E F2 -.92(Ta)2.501 G -.1(rg).92 G
(etSignatur).1 E(es)-.18 E F0 .001(\(\) pro)B .001
(vides speci\214c control for ho)-.15 F(w)-.25 E -.2(bu)144 612 S
(ilt tar).2 E(get \214les af)-.18 E(fect their "do)-.25 E
(wnstream" dependencies.)-.25 E -.8(To)108 640.8 S(ol\().8 E F1(string)
.34 E F0([,).22 E F1(toolpath).13 E F0(,).28 E F1(**kw)1.72 E F0(]\)).31
E .707(Returns a callable object that can be used to initialize a const\
ruction en)144 652.8 R .707(vironment using the tools)-.4 F -.1(ke)144
664.8 S(yw)-.05 E .191(ord of the En)-.1 F .191(vironment\(\) method.)
-.4 F .192(The object may be called with a construction en)5.191 F
(vironment)-.4 E .345(as an ar)144 676.8 R .345
(gument, in which case the object will add the necessary v)-.18 F .345
(ariables to the construction en)-.25 F(vi-)-.4 E
(ronment and the name of the tool will be added to the)144 688.8 Q F2
($T)2.5 E(OOLS)-.18 E F0(construction v)2.5 E(ariable.)-.25 E
(Additional k)144 712.8 Q -.15(ey)-.1 G -.1(wo).15 G(rd ar).1 E
(guments are passed to the tool')-.18 E(s)-.55 E F2(generate\(\))2.5 E
F0(method.)2.5 E(July 2010)286.415 768 Q(67)204.415 E 0 Cg EP
%%Page: 68 68
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(Examples:)
144 84 Q(en)144 108 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(tools = [ T)
.4 E(ool\('msvc'\) ]\))-.8 E(en)144 132 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(\)).4 E 2.5(t=T)144 144 S(ool\('msvc'\))-3.3 E(t\(en)144 156
Q 2.5(v\) #)-.4 F(adds 'msvc' to the T)2.5 E(OOLS v)-.18 E(ariable)-.25
E 2.5(u=T)144 168 S(ool\('opengl', toolpath = [')-3.3 E(tools']\))-.18 E
(u\(en)144 180 Q 2.5(v\) #)-.4 F(adds 'opengl' to the T)2.5 E(OOLS v)
-.18 E(ariable)-.25 E(en)108 196.8 Q -.65(v.)-.4 G -.8(To).65 G(ol\().8
E/F1 10/Times-Italic@0 SF(string).34 E F0([,).22 E F1(toolpath).13 E F0
(,).28 E F1(**kw)1.72 E F0(]\)).31 E 1.808
(Applies the callable object for the speci\214ed tool)144 208.8 R F1
(string)4.649 E F0 1.809(to the en)4.529 F 1.809
(vironment through which the)-.4 F(method w)144 220.8 Q(as called.)-.1 E
(Additional k)144 244.8 Q -.15(ey)-.1 G -.1(wo).15 G(rd ar).1 E
(guments are passed to the tool')-.18 E(s)-.55 E/F2 10/Times-Bold@0 SF
(generate\(\))2.5 E F0(method.)2.5 E(en)144 268.8 Q -.65(v.)-.4 G -.8
(To).65 G(ol\('gcc'\)).8 E(en)144 280.8 Q -.65(v.)-.4 G -.8(To).65 G
(ol\('opengl', toolpath = ['b).8 E(uild/tools']\))-.2 E -1.11(Va)108
309.6 S(lue\()1.11 E F1(value).29 E F0 2.5(,[).18 G F1 -.2(bu)-2.5 G
(ilt_value).2 E F0(]\)).18 E(en)108 326.4 Q -.65(v.)-.4 G -1.11(Va).65 G
(lue\()1.11 E F1(value).29 E F0 2.5(,[).18 G F1 -.2(bu)-2.5 G(ilt_value)
.2 E F0(]\)).18 E 2.079
(Returns a Node object representing the speci\214ed Python v)144 338.4 R
4.578(alue. V)-.25 F 2.078(alue Nodes can be used as)-1.11 F .828
(dependencies of tar)144 350.4 R 3.328(gets. If)-.18 F .828
(the result of calling)3.328 F F2(str\()3.329 E F0 -.25(va)C(lue).25 E
F2(\))A F0 .829(changes between SCons runs, an)3.329 F 3.329(yt)-.15 G
(ar)-3.329 E(-)-.2 E 1.907(gets depending on)144 362.4 R F2 -.92(Va)
4.407 G(lue\().92 E F0 -.25(va)C(lue).25 E F2(\))A F0 1.907(will be reb)
4.407 F 4.406(uilt. \(This)-.2 F 1.906(is true e)4.406 F -.15(ve)-.25 G
4.406(nw).15 G 1.906(hen using timestamps to)-4.406 F .158
(decide if \214les are up-to-date.\))144 374.4 R .158
(When using timestamp source signatures, V)5.158 F .159
(alue Nodes' timestamps)-1.11 F
(are equal to the system time when the Node is created.)144 386.4 Q .267
(The returned V)144 410.4 R .267(alue Node object has a)-1.11 F F2
(write)2.767 E F0 .267(\(\) method that can be used to "b)B .266
(uild" a V)-.2 F .266(alue Node by)-1.11 F .654(setting a ne)144 422.4 R
3.154(wv)-.25 G 3.154(alue. The)-3.404 F(optional)3.154 E F1 -.2(bu)
3.155 G(ilt_value).2 E F0(ar)3.335 E .655
(gument can be speci\214ed when the V)-.18 F .655(alue Node is)-1.11 F
.078(created to indicate the Node should already be considered "b)144
434.4 R 2.578(uilt." There)-.2 F .078(is a corresponding)2.578 F F2 -.18
(re)2.577 G(ad).18 E F0(\(\))A(method that will return the b)144 446.4 Q
(uilt v)-.2 E(alue of the Node.)-.25 E(Examples:)144 470.4 Q(en)144
494.4 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(def create\(tar)
144 518.4 Q(get, source, en)-.18 E(v\):)-.4 E 2.5(#Af)154 530.4 S
(unction that will write a 'pre\214x=$SOURCE')-2.5 E 2.5(#s)154 542.4 S
(tring into the \214le name speci\214ed as the)-2.5 E 2.5(#$)154 554.4 S
-.93(TA)-2.5 G(RGET).93 E(.)-.74 E 2.5(f=o)154 566.4 S(pen\(str\(tar)
-2.5 E(get[0]\), 'wb'\))-.18 E
(f.write\('pre\214x=' + source[0].get_contents\(\)\))154 578.4 Q 2.5(#F)
144 602.4 S(etch the pre\214x= ar)-2.5 E(gument, if an)-.18 E 1.3 -.65
(y, f)-.15 H(rom the command).65 E 2.5(#l)144 614.4 S
(ine, and use /usr/local as the def)-2.5 E(ault.)-.1 E
(pre\214x = ARGUMENTS.get\('pre\214x', '/usr/local'\))144 626.4 Q 2.5
(#A)144 650.4 S(ttach a .Con\214g\(\) b)-2.5 E(uilder for the abo)-.2 E
.3 -.15(ve f)-.15 H(unction action).15 E 2.5(#t)144 662.4 S 2.5(ot)-2.5
G(he construction en)-2.5 E(vironment.)-.4 E(en)144 674.4 Q(v['B)-.4 E
(UILDERS']['Con\214g'] = Builder\(action = create\))-.1 E(en)144 686.4 Q
-.65(v.)-.4 G(Con\214g\(tar).65 E(get = 'package-con\214g', source = V)
-.18 E(alue\(pre\214x\)\))-1.11 E(def b)144 710.4 Q(uild_v)-.2 E
(alue\(tar)-.25 E(get, source, en)-.18 E(v\):)-.4 E 2.5(#Af)154 722.4 S
(unction that "b)-2.5 E(uilds" a Python V)-.2 E(alue by updating)-1.11 E
(July 2010)286.415 768 Q(68)204.415 E 0 Cg EP
%%Page: 69 69
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5(#t)154
84 S(he the Python v)-2.5 E(alue with the contents of the \214le)-.25 E
2.5(#s)154 96 S
(peci\214ed as the source of the Builder call \($SOURCE\).)-2.5 E(tar)
154 108 Q(get[0].write\(source[0].get_contents\(\)\))-.18 E(output = en)
144 132 Q -.65(v.)-.4 G -1.11(Va).65 G(lue\('before'\))1.11 E
(input = en)144 144 Q -.65(v.)-.4 G -1.11(Va).65 G(lue\('after'\))1.11 E
2.5(#A)144 168 S(ttach a .UpdateV)-2.5 E(alue\(\) b)-1.11 E
(uilder for the abo)-.2 E .3 -.15(ve f)-.15 H(unction).15 E 2.5(#a)144
180 S(ction to the construction en)-2.5 E(vironment.)-.4 E(en)144 192 Q
(v['B)-.4 E(UILDERS']['UpdateV)-.1 E(alue'] = Builder\(action = b)-1.11
E(uild_v)-.2 E(alue\))-.25 E(en)144 204 Q -.65(v.)-.4 G(UpdateV).65 E
(alue\(tar)-1.11 E(get = V)-.18 E(alue\(output\), source = V)-1.11 E
(alue\(input\)\))-1.11 E -1.11(Va)108 232.8 S(riantDir\()1.11 E/F1 10
/Times-Italic@0 SF(variant_dir).29 E F0(,).73 E F1(sr)2.84 E(c_dir)-.37
E F0 2.5(,[).73 G F1(duplicate)-2.15 E F0(]\)).18 E(en)108 249.6 Q -.65
(v.)-.4 G -1.11(Va).65 G(riantDir\()1.11 E F1(variant_dir).29 E F0(,).73
E F1(sr)2.84 E(c_dir)-.37 E F0 2.5(,[).73 G F1(duplicate)-2.15 E F0(]\))
.18 E 1.52(Use the)144 261.6 R/F2 10/Times-Bold@0 SF -.92(Va)4.02 G
(riantDir).92 E F0 1.52(\(\) function to create a cop)B 4.021(yo)-.1 G
4.021(fy)-4.021 G 1.521(our sources in another location: if a name)
-4.021 F(under)144 273.6 Q F1(variant_dir)4.074 E F0 1.574
(is not found b)4.074 F 1.574(ut e)-.2 F 1.574(xists under)-.15 F F1(sr)
4.074 E(c_dir)-.37 E F0 4.074(,t).73 G 1.574
(he \214le or directory is copied to)-4.074 F F1(vari-)4.073 E(ant_dir)
144 285.6 Q F0 5.331(.T).73 G(ar)-6.131 E .331(get \214les can be b)-.18
F .331(uilt in a dif)-.2 F .331
(ferent directory than the original sources by simply refer)-.25 F(-)-.2
E(ing to the sources \(and tar)144 297.6 Q(gets\) within the v)-.18 E
(ariant tree.)-.25 E F2 -.92(Va)144 321.6 S(riantDir).92 E F0 .09
(\(\) can be called multiple times with the same)B F1(sr)2.93 E(c_dir)
-.37 E F0 .09(to set up multiple b)3.32 F .09(uilds with dif-)-.2 F
1.755(ferent options \()144 333.6 R F1(variants).29 E F0 4.255(\). The)
.27 F F1(sr)4.595 E(c_dir)-.37 E F0 1.756
(location must be in or underneath the SConstruct \214le')4.985 F(s)-.55
E(directory)144 345.6 Q 2.5(,a)-.65 G(nd)-2.5 E F1(variant_dir)2.79 E F0
(may not be underneath)3.23 E F1(sr)2.5 E(c_dir)-.37 E F0(.).73 E .399
(The def)144 369.6 R .399(ault beha)-.1 F .399(vior is for)-.2 F F2
(scons)2.899 E F0 .399(to ph)2.899 F .399
(ysically duplicate the source \214les in the v)-.05 F .398
(ariant tree.)-.25 F(Thus,)5.398 E 4.153(ab)144 381.6 S 1.653
(uild performed in the v)-4.353 F 1.654
(ariant tree is guaranteed to be identical to a b)-.25 F 1.654
(uild performed in the)-.2 F 1.333(source tree e)144 393.6 R -.15(ve)
-.25 G 3.832(ni).15 G 3.832(fi)-3.832 G 1.332
(ntermediate source \214les are generated during the b)-3.832 F 1.332
(uild, or preprocessors or)-.2 F .485
(other scanners search for included \214les relati)144 405.6 R .785 -.15
(ve t)-.25 H 2.985(ot).15 G .485(he source \214le, or indi)-2.985 F .486
(vidual compilers or other)-.25 F(in)144 417.6 Q -.2(vo)-.4 G -.1(ke).2
G 2.5(dt).1 G(ools are hard-coded to put deri)-2.5 E -.15(ve)-.25 G 2.5
<648c>.15 G(les in the same directory as source \214les.)-2.5 E .78(If \
possible on the platform, the duplication is performed by linking rathe\
r than cop)144 441.6 R .78(ying; see also)-.1 F(the)144 453.6 Q F1
(--duplicate)2.65 E F0 .15(command-line option.)2.65 F(Moreo)5.151 E
-.15(ve)-.15 G .951 -.4(r, o).15 H .151
(nly the \214les needed for the b).4 F .151(uild are duplicated;)-.2 F
(\214les and directories that are not used are not present in)144 465.6
Q F1(variant_dir)2.5 E F0(.).73 E .955
(Duplicating the source tree may be disabled by setting the)144 489.6 R
F1(duplicate)3.805 E F0(ar)3.634 E .954(gument to 0 \(zero\).)-.18 F
(This)5.954 E .926(will cause)144 501.6 R F2(scons)3.426 E F0 .926
(to in)3.426 F -.2(vo)-.4 G 1.126 -.1(ke B).2 H .926
(uilders using the path names of source \214les in).1 F F1(sr)3.767 E
(c_dir)-.37 E F0 .927(and the path)4.157 F .718(names of deri)144 513.6
R -.15(ve)-.25 G 3.218<648c>.15 G .718(les within)-3.218 F F1
(variant_dir)3.218 E F0 5.718(.T).73 G .718(his is al)-5.718 F -.1(wa)
-.1 G .718(ys more ef).1 F .718(\214cient than)-.25 F F1(duplicate)3.218
E F0 .717(=1, and is).18 F(usually safe for most b)144 525.6 Q
(uilds \(b)-.2 E(ut see abo)-.2 E .3 -.15(ve f)-.15 H
(or cases that may cause problems\).).15 E 1.67(Note that)144 549.6 R F2
-.92(Va)4.17 G(riantDir).92 E F0 1.671(\(\) w)B 1.671
(orks most naturally with a subsidiary SConscript \214le.)-.1 F(Ho)6.671
E(we)-.25 E -.15(ve)-.25 G 2.471 -.4(r, y).15 H(ou).4 E -.1(wo)144 561.6
S .695(uld then call the subsidiary SConscript \214le not in the source\
 directory).1 F 3.195(,b)-.65 G .695(ut in the)-3.395 F F1 .695
(variant_dir ,)3.485 F F0(re)144 573.6 Q -.05(ga)-.15 G .688
(rdless of the v).05 F .688(alue of)-.25 F F1(duplicate)3.188 E F0 5.688
(.T).18 G .688(his is ho)-5.688 F 3.188(wy)-.25 G .688(ou tell)-3.188 F
F2(scons)3.188 E F0 .689(which v)3.188 F .689
(ariant of a source tree to)-.25 F -.2(bu)144 585.6 S(ild:).2 E 2.5(#r)
144 609.6 S(un src/SConscript in tw)-2.5 E 2.5(ov)-.1 G
(ariant directories)-2.75 E -1.11(Va)144 621.6 S(riantDir\('b)1.11 E
(uild/v)-.2 E(ariant1', ')-.25 E(src'\))-.55 E(SConscript\('b)144 633.6
Q(uild/v)-.2 E(ariant1/SConscript'\))-.25 E -1.11(Va)144 645.6 S
(riantDir\('b)1.11 E(uild/v)-.2 E(ariant2', ')-.25 E(src'\))-.55 E
(SConscript\('b)144 657.6 Q(uild/v)-.2 E(ariant2/SConscript'\))-.25 E
.045(See also the)144 686.4 R F2(SConscript)2.545 E F0 .045
(\(\) function, described abo)B -.15(ve)-.15 G 2.545(,f).15 G .045
(or another w)-2.545 F .045(ay to specify a v)-.1 F .045
(ariant directory)-.25 F
(in conjunction with calling a subsidiary SConscript \214le.)144 698.4 Q
(Examples:)144 722.4 Q(July 2010)286.415 768 Q(69)204.415 E 0 Cg EP
%%Page: 70 70
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5(#u)144
84 S(se names in the b)-2.5 E(uild directory)-.2 E 2.5(,n)-.65 G
(ot the source directory)-2.5 E -1.11(Va)144 96 S(riantDir\('b)1.11 E
(uild', ')-.2 E(src', duplicate=0\))-.55 E(Program\('b)144 108 Q
(uild/prog', 'b)-.2 E(uild/source.c'\))-.2 E 2.5(#t)144 132 S(his b)-2.5
E(uilds both the source and docs in a separate subtree)-.2 E -1.11(Va)
144 144 S(riantDir\('b)1.11 E(uild', '.)-.2 E(', duplicate=0\))-.7 E
(SConscript\(dirs=['b)144 156 Q(uild/src',)-.2 E('b)-.7 E(uild/doc']\))
-.2 E 2.5(#s)144 180 S(ame as pre)-2.5 E(vious e)-.25 E(xample, b)-.15 E
(ut only uses SConscript)-.2 E(SConscript\(dirs=')144 192 Q(src', v)-.55
E(ariant_dir='b)-.25 E(uild/src', duplicate=0\))-.2 E
(SConscript\(dirs=')144 204 Q(doc', v)-.5 E(ariant_dir='b)-.25 E
(uild/doc', duplicate=0\))-.2 E(WhereIs\()108 232.8 Q/F1 10
/Times-Italic@0 SF(pr)1.25 E -.1(og)-.45 G -.15(ra).1 G(m).15 E F0 2.5
(,[).32 G F1(path)-1.25 E F0(,).28 E F1(pathe)3.75 E(xt)-.2 E F0(,).68 E
F1 -.37(re)2.5 G(ject).37 E F0(]\)).68 E(en)108 249.6 Q -.65(v.)-.4 G
(WhereIs\().65 E F1(pr)1.25 E -.1(og)-.45 G -.15(ra).1 G(m).15 E F0 2.5
(,[).32 G F1(path)-1.25 E F0(,).28 E F1(pathe)3.75 E(xt)-.2 E F0(,).68 E
F1 -.37(re)2.5 G(ject).37 E F0(]\)).68 E .415
(Searches for the speci\214ed e)144 273.6 R -.15(xe)-.15 G(cutable).15 E
F1(pr)4.165 E -.1(og)-.45 G -.15(ra).1 G(m,).15 E F0 .416
(returning the full path name to the program if it is)2.915 F 1.087
(found, and returning None if not.)144 285.6 R 1.087
(Searches the speci\214ed)6.087 F F1(path,)4.837 E F0 1.086(the v)3.587
F 1.086(alue of the calling en)-.25 F(viron-)-.4 E(ment')144 297.6 Q
2.684(sP)-.55 G -1.11(AT)-3.604 G 2.684(H\()1.11 G(en)-2.684 E
(v['ENV']['P)-.4 E -1.11(AT)-.92 G .184(H']\), or the user')1.11 F 2.684
(sc)-.55 G .184(urrent e)-2.684 F .184(xternal P)-.15 F -1.11(AT)-.92 G
2.684(H\()1.11 G(os.en)-2.684 E(viron['P)-.4 E -1.11(AT)-.92 G .184
(H']\) by)1.11 F(def)144 309.6 Q 3.541(ault. On)-.1 F -.4(Wi)3.541 G
(ndo).4 E 1.041(ws systems, searches for e)-.25 F -.15(xe)-.15 G 1.041
(cutable programs with an).15 F 3.541(yo)-.15 G 3.54(ft)-3.541 G 1.04
(he \214le e)-3.54 F(xtensions)-.15 E .127(listed in the speci\214ed)144
321.6 R F1(pathe)3.877 E(xt,)-.2 E F0 .127(the calling en)2.627 F
(vironment')-.4 E 2.627(sP)-.55 G -1.11(AT)-3.547 G .127(HEXT \(en)1.11
F(v['ENV']['P)-.4 E -1.11(AT)-.92 G .127(HEXT']\) or)1.11 F .4
(the user')144 333.6 R 2.9(sc)-.55 G .4(urrent P)-2.9 F -1.11(AT)-.92 G
.4(HEXT \(os.en)1.11 F(viron['P)-.4 E -1.11(AT)-.92 G .4
(HEXT']\) by def)1.11 F 2.9(ault. W)-.1 F .4(ill not select an)-.4 F 2.9
(yp)-.15 G .4(ath name)-2.9 F(or names in the speci\214ed)144 345.6 Q F1
-.37(re)2.5 G(ject).37 E F0(list, if an)3.18 E -.65(y.)-.15 G/F2 10
/Times-Bold@0 SF(SConscript V)87 374.4 Q(ariables)-.92 E F0 .755
(In addition to the global functions and methods,)108 386.4 R F2(scons)
3.255 E F0 .755(supports a number of Python v)3.255 F .756
(ariables that can be)-.25 F .02(used in SConscript \214les to af)108
398.4 R .02(fect ho)-.25 F 2.52(wy)-.25 G .02(ou w)-2.52 F .019
(ant the b)-.1 F .019(uild to be performed.)-.2 F .019(These v)5.019 F
.019(ariables may be accessed)-.25 F .213(from custom Python modules th\
at you import into an SConscript \214le by adding the follo)108 410.4 R
.213(wing to the Python)-.25 F(module:)108 422.4 Q
(from SCons.Script import *)144 446.4 Q(ARGLIST)108 475.2 Q 2.588(Al)144
487.2 S(ist)-2.588 E F1 -.1(ke)2.588 G(ywor)-.2 E(d)-.37 E F0(=).77 E F1
(value).29 E F0(ar)2.588 E .088
(guments speci\214ed on the command line.)-.18 F .087
(Each element in the list is a tuple)5.087 F .453(containing the \()144
499.2 R F1 -.1(ke)C(ywor)-.2 E(d)-.37 E F0(,).77 E F1(value).29 E F0
2.953(\)o).18 G 2.953(ft)-2.953 G .453(he ar)-2.953 F 2.953(gument. The)
-.18 F(separate)2.953 E F1 -.1(ke)2.953 G(ywor)-.2 E(d)-.37 E F0(and)
3.723 E F1(value)3.243 E F0 .453(elements of the)3.133 F
(tuple can be accessed by subscripting for element)144 511.2 Q F2([0])
2.5 E F0(and)2.5 E F2([1])2.5 E F0(of the tuple, respecti)2.5 E -.15(ve)
-.25 G(ly).15 E(.)-.65 E(Example:)144 535.2 Q(print "\214rst k)144 559.2
Q -.15(ey)-.1 G -.1(wo).15 G(rd, v).1 E
(alue =", ARGLIST[0][0], ARGLIST[0][1])-.25 E(print "second k)144 571.2
Q -.15(ey)-.1 G -.1(wo).15 G(rd, v).1 E
(alue =", ARGLIST[1][0], ARGLIST[1][1])-.25 E(third_tuple = ARGLIST[2])
144 583.2 Q(print "third k)144 595.2 Q -.15(ey)-.1 G -.1(wo).15 G(rd, v)
.1 E(alue =", third_tuple[0], third_tuple[1])-.25 E(for k)144 607.2 Q
-.15(ey)-.1 G 2.5(,v)-.5 G(alue in ARGLIST)-2.75 E(:)-.5 E 2.5(#p)154
619.2 S(rocess k)-2.5 E .3 -.15(ey a)-.1 H(nd v).15 E(alue)-.25 E
(ARGUMENTS)108 648 Q 3.187(Ad)144 660 S .686(ictionary of all the)-3.187
F F1 -.1(ke)3.186 G(ywor)-.2 E(d)-.37 E F0(=).77 E F1(value).29 E F0(ar)
3.186 E .686(guments speci\214ed on the command line.)-.18 F .686
(The dictionary)5.686 F .011(is not in order)144 672 R 2.511(,a)-.4 G
.011(nd if a gi)-2.511 F -.15(ve)-.25 G 2.511(nk).15 G -.15(ey)-2.611 G
-.1(wo).15 G .012(rd has more than one v).1 F .012
(alue assigned to it on the command line,)-.25 F
(the last \(right-most\) v)144 684 Q(alue is the one in the)-.25 E F2
(ARGUMENTS)2.5 E F0(dictionary)2.5 E(.)-.65 E(Example:)144 708 Q
(July 2010)286.415 768 Q(70)204.415 E 0 Cg EP
%%Page: 71 71
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(if ARGUMENTS.get\(')144 84 Q(deb)-.5 E(ug', 0\):)-.2 E(en)154 96 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(CCFLA).4 E(GS = '-g'\))-.4 E(else:)
144 108 Q(en)154 120 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E -.1
(BU)108 148.8 S(ILD_T).1 E(ARGETS)-.93 E 3.063(Al)144 160.8 S .563
(ist of the tar)-3.063 F .563(gets which)-.18 F/F1 10/Times-Bold@0 SF
(scons)3.063 E F0 .563(will actually try to b)3.063 F .563(uild, re)-.2
F -.05(ga)-.15 G .563(rdless of whether the).05 F 3.063(yw)-.15 G .562
(ere speci-)-3.063 F .633(\214ed on the command line or via the)144
172.8 R F1(Default)3.133 E F0 .633(\(\) function or method.)B .633
(The elements of this list may)5.633 F .774(be strings)144 184.8 R/F2 10
/Times-Italic@0 SF(or)3.504 E F0 .773
(nodes, so you should run the list through the Python)4.004 F F1(str)
3.273 E F0 .773(function to mak)3.273 F 3.273(es)-.1 G .773(ure an)
-3.273 F(y)-.15 E(Node path names are con)144 196.8 Q -.15(ve)-.4 G
(rted to strings.).15 E 1.228(Because this list may be tak)144 220.8 R
1.229(en from the list of tar)-.1 F 1.229(gets speci\214ed using the)
-.18 F F1(Default)3.729 E F0 1.229(\(\) function or)B 2.654
(method, the contents of the list may change on each successi)144 232.8
R 2.953 -.15(ve c)-.25 H 2.653(all to).15 F F1(Default)5.153 E F0 5.153
(\(\). See)B(the)5.153 E F1(DEF)144 244.8 Q -.5(AU)-.9 G -.92(LT).5 G
(_T).92 E(ARGETS)-.9 E F0(list, belo)2.5 E 1.3 -.65(w, f)-.25 H
(or additional information.).65 E(Example:)144 268.8 Q(if 'foo' in B)144
292.8 Q(UILD_T)-.1 E(ARGETS:)-.93 E(print "Don')154 304.8 Q 2.5(tf)-.18
G(or)-2.5 E(get to test the `foo' program!")-.18 E(if ')144 316.8 Q
(special/program' in B)-.55 E(UILD_T)-.1 E(ARGETS:)-.93 E(SConscript\(')
154 328.8 Q(special'\))-.55 E .756(Note that the)144 345.6 R F1 -.1(BU)
3.257 G(ILD_T).1 E(ARGETS)-.9 E F0 .757(list only contains tar)3.257 F
.757(gets e)-.18 F .757(xpected listed on the command line)-.15 F .224
(or via calls to the)144 357.6 R F1(Default)2.724 E F0 .224
(\(\) function or method.)B .223(It does)5.224 F F2(not)3.083 E F0 .223
(contain all dependent tar)3.403 F .223(gets that will)-.18 F(be b)144
369.6 Q(uilt as a result of making the sure the e)-.2 E
(xplicitly-speci\214ed tar)-.15 E(gets are up to date.)-.18 E
(COMMAND_LINE_T)108 398.4 Q(ARGETS)-.93 E 3.164(Al)144 410.4 S .664
(ist of the tar)-3.164 F .664(gets e)-.18 F .664
(xplicitly speci\214ed on the command line.)-.15 F .664
(If there are no tar)5.664 F .665(gets speci\214ed on)-.18 F .768
(the command line, the list is empty)144 422.4 R 5.768(.T)-.65 G .768
(his can be used, for e)-5.768 F .767(xample, to tak)-.15 F 3.267(es)-.1
G .767(peci\214c actions only)-3.267 F(when a certain tar)144 434.4 Q
(get or tar)-.18 E(gets is e)-.18 E(xplicitly being b)-.15 E(uilt.)-.2 E
(Example:)144 458.4 Q(if 'foo' in COMMAND_LINE_T)144 482.4 Q(ARGETS:)
-.93 E(print "Don')154 494.4 Q 2.5(tf)-.18 G(or)-2.5 E
(get to test the `foo' program!")-.18 E(if ')144 506.4 Q
(special/program' in COMMAND_LINE_T)-.55 E(ARGETS:)-.93 E(SConscript\(')
154 518.4 Q(special'\))-.55 E(DEF)108 547.2 Q -.55(AU)-.74 G -.92(LT).55
G(_T).92 E(ARGETS)-.93 E 3.566(Al)144 559.2 S 1.067(ist of the tar)
-3.566 F(get)-.18 E F2(nodes)3.927 E F0 1.067(that ha)3.837 F 1.367 -.15
(ve b)-.2 H 1.067(een speci\214ed using the).15 F F1(Default)3.567 E F0
1.067(\(\) function or method.)B(The)6.067 E .756(elements of the list \
are nodes, so you need to run them through the Python)144 571.2 R F1
(str)3.256 E F0 .756(function to get at)3.256 F
(the path name for each Node.)144 583.2 Q(Example:)144 607.2 Q
(print str\(DEF)144 631.2 Q -.55(AU)-.74 G -.92(LT).55 G(_T).92 E
(ARGETS[0]\))-.93 E(if 'foo' in map\(str)144 643.2 Q 2.5(,D)-.4 G(EF)
-2.5 E -.55(AU)-.74 G -.92(LT).55 G(_T).92 E(ARGETS\):)-.93 E
(print "Don')154 655.2 Q 2.5(tf)-.18 G(or)-2.5 E
(get to test the `foo' program!")-.18 E .055(The contents of the)144 672
R F1(DEF)2.555 E -.5(AU)-.9 G -.92(LT).5 G(_T).92 E(ARGETS)-.9 E F0 .056
(list change on on each successi)2.556 F .356 -.15(ve c)-.25 H .056
(all to the).15 F F1(Default)2.556 E F0(\(\))A(function:)144 684 Q
(print map\(str)144 708 Q 2.5(,D)-.4 G(EF)-2.5 E -.55(AU)-.74 G -.92(LT)
.55 G(_T).92 E 5(ARGETS\) #)-.93 F(originally [])2.5 E(Def)144 720 Q
(ault\('foo'\))-.1 E(July 2010)286.415 768 Q(71)204.415 E 0 Cg EP
%%Page: 72 72
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(print map\(str)144 84 Q 2.5(,D)-.4 G(EF)-2.5 E -.55(AU)-.74 G -.92(LT)
.55 G(_T).92 E 5(ARGETS\) #)-.93 F(no)2.5 E 2.5(wan)-.25 G(ode ['foo'])
-2.5 E(Def)144 96 Q(ault\('bar'\))-.1 E(print map\(str)144 108 Q 2.5(,D)
-.4 G(EF)-2.5 E -.55(AU)-.74 G -.92(LT).55 G(_T).92 E 5(ARGETS\) #)-.93
F(no)2.5 E 2.5(wan)-.25 G(ode ['foo', 'bar'])-2.5 E(Def)144 120 Q
(ault\(None\))-.1 E(print map\(str)144 132 Q 2.5(,D)-.4 G(EF)-2.5 E -.55
(AU)-.74 G -.92(LT).55 G(_T).92 E 5(ARGETS\) #)-.93 F(back to [])2.5 E
(Consequently)144 148.8 Q 2.672(,b)-.65 G 2.672(es)-2.672 G .172
(ure to use)-2.672 F/F1 10/Times-Bold@0 SF(DEF)2.672 E -.5(AU)-.9 G -.92
(LT).5 G(_T).92 E(ARGETS)-.9 E F0 .172(only after you')2.672 F .471 -.15
(ve m)-.5 H .171(ade all of your).15 F F1(Default)2.671 E F0(\(\))A .166
(calls, or else simply be careful of the order of these statements in y\
our SConscript \214les so that you)144 160.8 R(don')144 172.8 Q 2.5(tl)
-.18 G(ook for a speci\214c def)-2.5 E(ault tar)-.1 E(get before it')
-.18 E 2.5(sa)-.55 G(ctually been added to the list.)-2.5 E F1
(Construction V)87 201.6 Q(ariables)-.92 E F0 2.855(Ac)108 213.6 S .355
(onstruction en)-2.855 F .354(vironment has an associated dictionary of)
-.4 F/F2 10/Times-Italic@0 SF .354(construction variables)3.054 F F0
.354(that are used by b)3.124 F(uilt-in)-.2 E .725(or user)108 225.6 R
.725(-supplied b)-.2 F .725(uild rules.)-.2 F .725(Construction v)5.725
F .725(ariables must follo)-.25 F 3.225(wt)-.25 G .725
(he same rules for Python identi\214ers: the)-3.225 F
(initial character must be an underscore or letter)108 237.6 Q 2.5(,f)
-.4 G(ollo)-2.5 E(wed by an)-.25 E 2.5(yn)-.15 G
(umber of underscores, letters, or digits.)-2.5 E 2.965(An)108 261.6 S
.465(umber of useful construction v)-2.965 F .464(ariables are automati\
cally de\214ned by scons for each supported platform,)-.25 F .215
(and additional construction v)108 273.6 R .215
(ariables can be de\214ned by the user)-.25 F 2.715(.T)-.55 G .215
(he follo)-2.715 F .216(wing is a list of the automatically)-.25 F
(de\214ned construction v)108 285.6 Q(ariables:)-.25 E(AR)108 326.4 Q
(The static library archi)144 326.4 Q -.15(ve)-.25 G -.55(r.).15 G
(ARCHITECTURE)108 355.2 Q .813
(Speci\214es the system architecture for which the package is being b)
144 367.2 R 3.312(uilt. The)-.2 F(def)3.312 E .812(ault is the system)
-.1 F .747(architecture of the machine on which SCons is running.)144
379.2 R .748(This is used to \214ll in the)5.748 F F1(Ar)3.248 E
(chitectur)-.18 E(e:)-.18 E F0(\214eld in an Ipkg)144 391.2 Q F1(contr)
2.5 E(ol)-.18 E F0
(\214le, and as part of the name of a generated RPM \214le.)2.5 E(ARCOM)
108 420 Q(The command line used to generate a static library from objec\
t \214les.)144 432 Q(ARCOMSTR)108 460.8 Q 1.029(The string displayed wh\
en an object \214le is generated from an assembly-language source \214l\
e.)144 472.8 R(If)6.029 E
(this is not set, then $ARCOM \(the command line\) is displayed.)144
484.8 Q(en)144 508.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(ARCOMSTR = "Archi).4 E(ving $T)-.25 E(ARGET"\))-.93 E(ARFLA)
108 537.6 Q(GS)-.4 E(General options passed to the static library archi)
144 549.6 Q -.15(ve)-.25 G -.55(r.).15 G(AS)108 578.4 Q(The assembler)
144 578.4 Q(.)-.55 E(ASCOM)108 607.2 Q(The command line used to generat\
e an object \214le from an assembly-language source \214le.)144 619.2 Q
(ASCOMSTR)108 648 Q 1.029(The string displayed when an object \214le is\
 generated from an assembly-language source \214le.)144 660 R(If)6.03 E
(this is not set, then $ASCOM \(the command line\) is displayed.)144 672
Q(en)144 696 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(ASCOMSTR = "Assembling $T).4 E(ARGET"\))-.93 E(July 2010)
286.415 768 Q(72)204.415 E 0 Cg EP
%%Page: 73 73
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(ASFLA)108
84 Q(GS)-.4 E(General options passed to the assembler)144 96 Q(.)-.55 E
(ASPPCOM)108 124.8 Q .311(The command line used to assemble an assembly\
-language source \214le into an object \214le after \214rst)144 136.8 R
2.791(running the \214le through the C preprocessor)144 148.8 R 7.792
(.A)-.55 G 3.092 -.15(ny o)-7.792 H 2.792
(ptions speci\214ed in the $ASFLA).15 F 2.792(GS and)-.4 F($CPPFLA)144
160.8 Q(GS construction v)-.4 E
(ariables are included on this command line.)-.25 E(ASPPCOMSTR)108 189.6
Q .554(The string displayed when an object \214le is generated from an \
assembly-language source \214le after)144 201.6 R .045
(\214rst running the \214le through the C preprocessor)144 213.6 R 5.046
(.I)-.55 G 2.546(ft)-5.046 G .046
(his is not set, then $ASPPCOM \(the command)-2.546 F
(line\) is displayed.)144 225.6 Q(en)144 249.6 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(ASPPCOMSTR = "Assembling $T).4 E(ARGET"\))-.93 E
(ASPPFLA)108 278.4 Q(GS)-.4 E .195(General options when an assembling a\
n assembly-language source \214le into an object \214le after \214rst)
144 290.4 R(running the \214le through the C preprocessor)144 302.4 Q 5
(.T)-.55 G(he def)-5 E(ault is to use the v)-.1 E(alue of $ASFLA)-.25 E
(GS.)-.4 E(BIBTEX)108 331.2 Q .26(The bibliograph)144 343.2 R 2.76(yg)
-.05 G .261(enerator for the T)-2.76 F .261
(eX formatter and typesetter and the LaT)-.7 F .261
(eX structured format-)-.7 F(ter and typesetter)144 355.2 Q(.)-.55 E
(BIBTEXCOM)108 384 Q .067(The command line used to call the bibliograph)
144 396 R 2.567(yg)-.05 G .067(enerator for the T)-2.567 F .066
(eX formatter and typesetter and)-.7 F(the LaT)144 408 Q
(eX structured formatter and typesetter)-.7 E(.)-.55 E(BIBTEXCOMSTR)108
436.8 Q 1.181(The string displayed when generating a bibliograph)144
448.8 R 3.681(yf)-.05 G 1.181(or T)-3.681 F 1.181(eX or LaT)-.7 F 3.681
(eX. If)-.7 F 1.182(this is not set, then)3.681 F
($BIBTEXCOM \(the command line\) is displayed.)144 460.8 Q(en)144 484.8
Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(BIBTEXCOMSTR = "Generating bibliograph).4 E 2.5(y$)-.05 G
-.93(TA)-2.5 G(RGET"\)).93 E(BIBTEXFLA)108 513.6 Q(GS)-.4 E .449
(General options passed to the bibliograph)144 525.6 R 2.949(yg)-.05 G
.449(enerator for the T)-2.949 F .448
(eX formatter and typesetter and the)-.7 F(LaT)144 537.6 Q
(eX structured formatter and typesetter)-.7 E(.)-.55 E(BITKEEPER)108
566.4 Q(The BitK)144 578.4 Q(eeper e)-.25 E -.15(xe)-.15 G(cutable.).15
E(BITKEEPERCOM)108 607.2 Q
(The command line for fetching source \214les using BitK)144 619.2 Q
(eeper)-.25 E(.)-.55 E(BITKEEPERCOMSTR)108 648 Q 1.232
(The string displayed when fetching a source \214le using BitK)144 660 R
(eeper)-.25 E 6.232(.I)-.55 G 3.732(ft)-6.232 G 1.232
(his is not set, then $BIT)-3.732 F(-)-.92 E
(KEEPERCOM \(the command line\) is displayed.)144 672 Q(BITKEEPERGET)108
700.8 Q(The command \($BITKEEPER\) and subcommand for fetching source \
\214les using BitK)144 712.8 Q(eeper)-.25 E(.)-.55 E(July 2010)286.415
768 Q(73)204.415 E 0 Cg EP
%%Page: 74 74
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(BITKEEPERGETFLA)108 84 Q(GS)-.4 E(Options that are passed to the BitK)
144 96 Q(eeper)-.25 E/F1 10/Times-Bold@0 SF(get)2.5 E F0(subcommand.)2.5
E -.1(BU)108 124.8 S(ILDERS).1 E 3.11(Ad)144 136.8 S .609
(ictionary mapping the names of the b)-3.11 F .609(uilders a)-.2 F -.25
(va)-.2 G .609(ilable through this en).25 F .609
(vironment to underlying)-.4 F 1.143(Builder objects.)144 148.8 R 1.144
(Builders named Alias, CFile, CXXFile, D)6.143 F 1.144(VI, Library)-.4 F
3.644(,O)-.65 G 1.144(bject, PDF)-3.644 F 3.644(,P)-.8 G(ostScript,)
-3.644 E .726(and Program are a)144 160.8 R -.25(va)-.2 G .726
(ilable by def).25 F 3.226(ault. If)-.1 F .726(you initialize this v)
3.226 F .726(ariable when an En)-.25 F .726(vironment is cre-)-.4 F
(ated:)144 172.8 Q(en)144 196.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(B).4 E(UILDERS = {'Ne)-.1 E(wBuilder' : foo}\))-.25 E 1.119
(the def)144 213.6 R 1.119(ault Builders will no longer be a)-.1 F -.25
(va)-.2 G 3.619(ilable. T).25 F 3.619(ou)-.8 G 1.119(se a ne)-3.619 F
3.62(wB)-.25 G 1.12(uilder object in addition to the)-3.62 F(def)144
225.6 Q(ault Builders, add your ne)-.1 E 2.5(wB)-.25 G
(uilder object lik)-2.5 E 2.5(et)-.1 G(his:)-2.5 E(en)144 249.6 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(en)144 261.6 Q -.65(v.)-.4 G
(Append\(B).65 E(UILDERS = {'Ne)-.1 E(wBuilder' : foo}\))-.25 E
(or this:)144 278.4 Q(en)144 302.4 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(\)).4 E(en)144 314.4 Q(v['B)-.4 E(UILDERS]['Ne)-.1 E
(wBuilder'] = foo)-.25 E(CC)108 343.2 Q(The C compiler)144 343.2 Q(.)
-.55 E(CCCOM)108 372 Q .035(The command line used to compile a C source\
 \214le to a \(static\) object \214le.)144 384 R(An)5.035 E 2.535(yo)
-.15 G .035(ptions speci\214ed in)-2.535 F 1.435(the $CFLA)144 396 R
1.435(GS, $CCFLA)-.4 F 1.435(GS and $CPPFLA)-.4 F 1.435
(GS construction v)-.4 F 1.436(ariables are included on this com-)-.25 F
(mand line.)144 408 Q(CCCOMSTR)108 436.8 Q .01(The string displayed whe\
n a C source \214le is compiled to a \(static\) object \214le.)144 448.8
R .01(If this is not set, then)5.01 F
($CCCOM \(the command line\) is displayed.)144 460.8 Q(en)144 484.8 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(CCCOMSTR = "Compiling static object $T).4 E(ARGET"\))-.93 E
(CCFLA)108 513.6 Q(GS)-.4 E
(General options that are passed to the C and C++ compilers.)144 525.6 Q
(CCPCHFLA)108 554.4 Q(GS)-.4 E .629
(Options added to the compiler command line to support b)144 566.4 R .63
(uilding with precompiled headers.)-.2 F(The)5.63 E(def)144 578.4 Q
1.684(ault v)-.1 F 1.684(alue e)-.25 F 1.684(xpands e)-.15 F 1.684
(xpands to the appropriate Microsoft V)-.15 F 1.683
(isual C++ command-line options)-.6 F(when the $PCH construction v)144
590.4 Q(ariable is set.)-.25 E(CCPDBFLA)108 619.2 Q(GS)-.4 E 2.38
(Options added to the compiler command line to support storing deb)144
631.2 R 2.38(ugging information in a)-.2 F .317(Microsoft V)144 643.2 R
.317(isual C++ PDB \214le.)-.6 F .317(The def)5.317 F .317(ault v)-.1 F
.317(alue e)-.25 F .317(xpands e)-.15 F .317
(xpands to appropriate Microsoft V)-.15 F(is-)-.6 E
(ual C++ command-line options when the $PDB construction v)144 655.2 Q
(ariable is set.)-.25 E .695(The V)144 679.2 R .695
(isual C++ compiler option that SCons uses by def)-.6 F .696
(ault to generate PDB information is)-.1 F F1(/Z7)3.196 E F0(.)A .016
(This w)144 691.2 R .016(orks correctly with parallel \()-.1 F F1<ad6a>A
F0 2.515(\)b)C .015(uilds because it embeds the deb)-2.715 F .015
(ug information in the inter)-.2 F(-)-.2 E .254(mediate object \214les,\
 as opposed to sharing a single PDB \214le between multiple object \214\
les.)144 703.2 R .255(This is)5.255 F .749(also the only w)144 715.2 R
.749(ay to get deb)-.1 F .749
(ug information embedded into a static library)-.2 F 5.748(.U)-.65 G
.748(sing the)-5.748 F F1(/Zi)3.248 E F0(instead)3.248 E
(may yield impro)144 727.2 Q -.15(ve)-.15 G 2.5(dl).15 G
(ink-time performance, although parallel b)-2.5 E
(uilds will no longer w)-.2 E(ork.)-.1 E(July 2010)286.415 768 Q(74)
204.415 E 0 Cg EP
%%Page: 75 75
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R -1.1(Yo)144
84 S 2.528(uc)1.1 G .028(an generate PDB \214les with the)-2.528 F/F1 10
/Times-Bold@0 SF(/Zi)2.529 E F0 .029(switch by o)2.529 F -.15(ve)-.15 G
.029(rriding the def).15 F .029(ault $CCPDBFLA)-.1 F .029(GS v)-.4 F
(ariable)-.25 E(as follo)144 96 Q(ws:)-.25 E(en)144 120 Q(v['CCPDBFLA)
-.4 E(GS'] = ['${\(PDB and "/Zi /Fd%s" % File\(PDB\)\) or ""}'])-.4 E
.359(An alternati)144 136.8 R .659 -.15(ve w)-.25 H .359
(ould be to use the).05 F F1(/Zi)2.858 E F0 .358(to put the deb)2.858 F
.358(ugging information in a separate)-.2 F F1(.pdb)2.858 E F0 .358
(\214le for)2.858 F(each object \214le by o)144 148.8 Q -.15(ve)-.15 G
(rriding the $CCPDBFLA).15 E(GS v)-.4 E(ariable as follo)-.25 E(ws:)-.25
E(en)144 172.8 Q(v['CCPDBFLA)-.4 E(GS'] = '/Zi /Fd${T)-.4 E(ARGET}.pdb')
-.93 E(CCVERSION)108 201.6 Q .606(The v)144 213.6 R .606
(ersion number of the C compiler)-.15 F 5.606(.T)-.55 G .606
(his may or may not be set, depending on the speci\214c C)-5.606 F
(compiler being used.)144 225.6 Q(CFILESUFFIX)108 254.4 Q .953(The suf)
144 266.4 R .953(\214x for C source \214les.)-.25 F .953
(This is used by the internal CFile b)5.953 F .953
(uilder when generating C \214les)-.2 F .576(from Le)144 278.4 R 3.076
(x\()-.15 G .576(.l\) or Y)-3.076 F -.4(AC)-1.2 G 3.076(C\().4 G .576
(.y\) input \214les.)-3.076 F .577(The def)5.577 F .577(ault suf)-.1 F
.577(\214x, of course, is)-.25 F F1(.c)3.077 E F0(\(lo)3.077 E .577
(wer case\).)-.25 F .577(On case-)5.577 F(insensiti)144 290.4 Q .3 -.15
(ve s)-.25 H(ystems \(lik).15 E 2.5(eW)-.1 G(indo)-2.9 E
(ws\), SCons also treats)-.25 E F1(.C)2.5 E F0
(\(upper case\) \214les as C \214les.)2.5 E(CFLA)108 319.2 Q(GS)-.4 E
(General options that are passed to the C compiler \(C only; not C++\).)
144 331.2 Q(CHANGE_SPECFILE)108 360 Q 2.568(Ah)144 372 S .067
(ook for modifying the \214le that controls the packaging b)-2.568 F
.067(uild \(the)-.2 F F1(.spec)2.567 E F0 .067(for RPM, the)2.567 F F1
(contr)2.567 E(ol)-.18 E F0(for)2.567 E .172(Ipkg, the)144 384 R F1
(.wxs)2.672 E F0 .172(for MSI\).)2.672 F .173(If set, the function will\
 be called after the SCons template for the \214le has)5.172 F
(been written.)144 396 Q(XXX)5 E(CHANGED_SOURCES)108 424.8 Q 3.162(Ar)
144 436.8 S(eserv)-3.162 E .662(ed v)-.15 F .661
(ariable name that may not be set or used in a construction en)-.25 F
3.161(vironment. \(See)-.4 F("V)3.161 E(ari-)-1.11 E
(able Substitution," belo)144 448.8 Q -.65(w.)-.25 G(\)).65 E(CHANGED_T)
108 477.6 Q(ARGETS)-.93 E 3.161(Ar)144 489.6 S(eserv)-3.161 E .661(ed v)
-.15 F .661
(ariable name that may not be set or used in a construction en)-.25 F
3.162(vironment. \(See)-.4 F("V)3.162 E(ari-)-1.11 E
(able Substitution," belo)144 501.6 Q -.65(w.)-.25 G(\)).65 E(CHANGELOG)
108 530.4 Q .53(The name of a \214le containing the change log te)144
542.4 R .53(xt to be included in the package.)-.15 F .53
(This is included)5.53 F(as the)144 554.4 Q F1(%changelog)2.5 E F0
(section of the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E(_concat)108
583.2 Q 3.75(Af)144 595.2 S 1.25(unction used to produce v)-3.75 F 1.25
(ariables lik)-.25 F 3.75(e$)-.1 G(_CPPINCFLA)-3.75 E 1.25(GS. It tak)
-.4 F 1.25(es four or \214v)-.1 F 3.75(ea)-.15 G -.18(rg)-3.75 G 1.25
(uments: a).18 F .709
(pre\214x to concatenate onto each element, a list of elements, a suf)
144 607.2 R .708(\214x to concatenate onto each ele-)-.25 F 1.43
(ment, an en)144 619.2 R 1.43(vironment for v)-.4 F 1.431
(ariable interpolation, and an optional function that will be called to)
-.25 F(transform the list before concatenation.)144 631.2 Q(en)144 655.2
Q(v['_CPPINCFLA)-.4 E(GS'] = '$\( ${_concat\(INCPREFIX, CPPP)-.4 E -1.11
(AT)-.92 G(H, INCSUFFIX, __en)1.11 E(v__, RDirs\)} $\)',)-.4 E
(CONFIGUREDIR)108 684 Q 2.476
(The name of the directory in which Con\214gure conte)144 696 R 2.476
(xt test \214les are written.)-.15 F 2.476(The def)7.476 F 2.476
(ault is)-.1 F F1(.sconf_temp)144 708 Q F0(in the top-le)2.5 E -.15(ve)
-.25 G 2.5(ld).15 G(irectory containing the)-2.5 E F1(SConstruct)2.5 E
F0(\214le.)2.5 E(July 2010)286.415 768 Q(75)204.415 E 0 Cg EP
%%Page: 76 76
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(CONFIGURELOG)108 84 Q 1.27(The name of the Con\214gure conte)144 96 R
1.271(xt log \214le.)-.15 F 1.271(The def)6.271 F 1.271(ault is)-.1 F/F1
10/Times-Bold@0 SF(con\214g)3.771 E(.log)-.15 E F0 1.271(in the top-le)
3.771 F -.15(ve)-.25 G 3.771(ld).15 G(irectory)-3.771 E(containing the)
144 108 Q F1(SConstruct)2.5 E F0(\214le.)2.5 E(_CPPDEFFLA)108 136.8 Q
(GS)-.4 E 1.972(An automatically-generated construction v)144 148.8 R
1.971(ariable containing the C preprocessor command-line)-.25 F .02
(options to de\214ne v)144 160.8 R 2.52(alues. The)-.25 F -.25(va)2.52 G
.02(lue of $_CPPDEFFLA).25 F .02(GS is created by appending $CPPDEFPRE-)
-.4 F(FIX and $CPPDEFSUFFIX to the be)144 172.8 Q
(ginning and end of each de\214nition in $CPPDEFINES.)-.15 E(CPPDEFINES)
108 201.6 Q 2.911(Ap)144 213.6 S .411
(latform independent speci\214cation of C preprocessor de\214nitions.)
-2.911 F .411(The de\214nitions will be added)5.411 F 1.321
(to command lines through the automatically-generated $_CPPDEFFLA)144
225.6 R 1.322(GS construction v)-.4 F(ariable)-.25 E(\(see abo)144 237.6
Q -.15(ve)-.15 G(\), which is constructed according to the type of v).15
E(alue of $CPPDEFINES:)-.25 E 1.376(If $CPPDEFINES is a string, the v)
144 261.6 R 1.376(alues of the $CPPDEFPREFIX and $CPPDEFSUFFIX con-)-.25
F(struction v)144 273.6 Q(ariables will be added to the be)-.25 E
(ginning and end.)-.15 E 2.5(#W)144 297.6 S
(ill add -Dxyz to POSIX compiler command lines,)-2.9 E 2.5(#a)144 309.6
S(nd /Dxyz to Microsoft V)-2.5 E(isual C++ command lines.)-.6 E(en)144
321.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(CPPDEFINES='xyz'\)).4 E
.635(If $CPPDEFINES is a list, the v)144 338.4 R .635
(alues of the $CPPDEFPREFIX and $CPPDEFSUFFIX construc-)-.25 F .893
(tion v)144 350.4 R .893(ariables will be appended to the be)-.25 F .892
(ginning and end of each element in the list.)-.15 F .892(If an)5.892 F
3.392(ye)-.15 G(le-)-3.392 E(ment is a list or tuple, then the \214rst \
item is the name being de\214ned and the second item is its v)144 362.4
Q(alue:)-.25 E 2.5(#W)144 386.4 S(ill add -DB=2 -D)-2.9 E 2.5(At)-.4 G
2.5(oP)-2.5 G(OSIX compiler command lines,)-2.5 E 2.5(#a)144 398.4 S
(nd /DB=2 /D)-2.5 E 2.5(At)-.4 G 2.5(oM)-2.5 G(icrosoft V)-2.5 E
(isual C++ command lines.)-.6 E(en)144 410.4 Q 2.5(v=E)-.4 G -.4(nv)-2.5
G(ironment\(CPPDEFINES=[\('B', 2\), 'A).4 E(']\))-1.11 E 1.787
(If $CPPDEFINES is a dictionary)144 427.2 R 4.287(,t)-.65 G 1.787(he v)
-4.287 F 1.788(alues of the $CPPDEFPREFIX and $CPPDEFSUFFIX)-.25 F .178
(construction v)144 439.2 R .178(ariables will be appended to the be)
-.25 F .178(ginning and end of each item from the dictionary)-.15 F(.)
-.65 E 1.142(The k)144 451.2 R 1.442 -.15(ey o)-.1 H 3.642(fe).15 G
1.143
(ach dictionary item is a name being de\214ned to the dictionary item')
-3.642 F 3.643(sc)-.55 G(orresponding)-3.643 E -.25(va)144 463.2 S
(lue; if the v).25 E(alue is)-.25 E F1(None)2.5 E F0 2.5(,t)C
(hen the name is de\214ned without an e)-2.5 E(xplicit v)-.15 E 2.5
(alue. Note)-.25 F(that the result-)2.5 E .118
(ing \215ags are sorted by k)144 475.2 R -.15(ey)-.1 G -.1(wo).15 G .118
(rd to ensure that the order of the options on the command line is con-)
.1 F(sistent each time)144 487.2 Q F1(scons)2.5 E F0(is run.)2.5 E 2.5
(#W)144 511.2 S(ill add -D)-2.9 E 2.5(A-)-.4 G
(DB=2 to POSIX compiler command lines,)-2.5 E 2.5(#a)144 523.2 S(nd /D)
-2.5 E 2.5(A/)-.4 G(DB=2 to Microsoft V)-2.5 E(isual C++ command lines.)
-.6 E(en)144 535.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(CPPDEFINES={'B':2, 'A).4 E(':None}\))-1.11 E(CPPDEFPREFIX)108
564 Q .31(The pre\214x used to specify preprocessor de\214nitions on th\
e C compiler command line.)144 576 R .31(This will be)5.31 F .089
(appended to the be)144 588 R .089
(ginning of each de\214nition in the $CPPDEFINES construction v)-.15 F
.09(ariable when the)-.25 F($_CPPDEFFLA)144 600 Q(GS v)-.4 E
(ariable is automatically generated.)-.25 E(CPPDEFSUFFIX)108 628.8 Q
.364(The suf)144 640.8 R .363(\214x used to specify preprocessor de\214\
nitions on the C compiler command line.)-.25 F .363(This will be)5.363 F
2.044(appended to the end of each de\214nition in the $CPPDEFINES const\
ruction v)144 652.8 R 2.044(ariable when the)-.25 F($_CPPDEFFLA)144
664.8 Q(GS v)-.4 E(ariable is automatically generated.)-.25 E(CPPFLA)108
693.6 Q(GS)-.4 E(User)144 705.6 Q 1.093
(-speci\214ed C preprocessor options.)-.2 F 1.092
(These will be included in an)6.092 F 3.592(yc)-.15 G 1.092
(ommand that uses the C)-3.592 F(preprocessor)144 717.6 Q 2.667(,i)-.4 G
.168(ncluding not just compilation of C and C++ source \214les via the \
$CCCOM, $SHCC-)-2.667 F 3.779
(COM, $CXXCOM and $SHCXXCOM command lines, b)144 729.6 R 3.779
(ut also the $FOR)-.2 F(TRANPPCOM,)-.6 E(July 2010)286.415 768 Q(76)
204.415 E 0 Cg EP
%%Page: 77 77
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R($SHFOR)144
84 Q 1.779
(TRANPPCOM, $F77PPCOM and $SHF77PPCOM command lines used to compile a)
-.6 F -.15(Fo)144 96 S 1.117(rtran source \214le, and the $ASPPCOM comm\
and line used to assemble an assembly language).15 F 1.087(source \214l\
e, after \214rst running each \214le through the C preprocessor)144 108
R 6.088(.N)-.55 G 1.088(ote that this v)-6.088 F 1.088(ariable does)-.25
F/F1 10/Times-Italic@0 SF(not)144.36 120 Q F0(contain)4.517 E/F2 10
/Times-Bold@0 SF<ad49>3.837 E F0 1.336(\(or similar\) include search pa\
th options that scons generates automatically from)3.836 F($CPPP)144 132
Q -1.11(AT)-.92 G 2.5(H. See)1.11 F($_CPPINCFLA)2.5 E(GS, belo)-.4 E 1.3
-.65(w, f)-.25 H(or the v).65 E(ariable that e)-.25 E
(xpands to those options.)-.15 E(_CPPINCFLA)108 160.8 Q(GS)-.4 E 1.971
(An automatically-generated construction v)144 172.8 R 1.971
(ariable containing the C preprocessor command-line)-.25 F .152
(options for specifying directories to be searched for include \214les.)
144 184.8 R .152(The v)5.152 F .152(alue of $_CPPINCFLA)-.25 F(GS)-.4 E
.523(is created by appending $INCPREFIX and $INCSUFFIX to the be)144
196.8 R .523(ginning and end of each direc-)-.15 F(tory in $CPPP)144
208.8 Q -1.11(AT)-.92 G(H.)1.11 E(CPPP)108 237.6 Q -1.11(AT)-.92 G(H)
1.11 E 1.989(The list of directories that the C preprocessor will searc\
h for include directories. The C/C++)144 249.6 R 1.586
(implicit dependenc)144 261.6 R 4.086(ys)-.15 G 1.587
(canner will search these directories for include \214les. Don')-4.086 F
4.087(te)-.18 G 1.587(xplicitly put)-4.237 F .308(include directory ar)
144 273.6 R .308(guments in CCFLA)-.18 F .308(GS or CXXFLA)-.4 F .307
(GS because the result will be non-portable)-.4 F .118
(and the directories will not be searched by the dependenc)144 285.6 R
2.619(ys)-.15 G(canner)-2.619 E 2.619(.N)-.55 G .119
(ote: directory names in CPP-)-2.619 F -.92(PA)144 297.6 S .162
(TH will be look)-.19 F .162(ed-up relati)-.1 F .462 -.15(ve t)-.25 H
2.662(ot).15 G .162(he SConscript directory when the)-2.662 F 2.662(ya)
-.15 G .162(re used in a command. T)-2.662 F(o)-.8 E(force)144 309.6 Q
F2(scons)2.5 E F0(to look-up a directory relati)2.5 E .3 -.15(ve t)-.25
H 2.5(ot).15 G(he root of the source tree use #:)-2.5 E(en)144 333.6 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(CPPP).4 E -1.11(AT)-.92 G
(H='#/include'\))1.11 E
(The directory look-up can also be forced using the)144 350.4 Q F2(Dir)
2.5 E F0(\(\) function:)A(include = Dir\('include'\))144 374.4 Q(en)144
386.4 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(CPPP).4 E -1.11(AT)-.92 G
(H=include\))1.11 E 4.515(The directory list will be added to command l\
ines through the automatically-generated)144 403.2 R($_CPPINCFLA)144
415.2 Q 1.944(GS construction v)-.4 F 1.944
(ariable, which is constructed by appending the v)-.25 F 1.943
(alues of the)-.25 F .12($INCPREFIX and $INCSUFFIX construction v)144
427.2 R .121(ariables to the be)-.25 F .121
(ginning and end of each directory)-.15 F 2.004(in $CPPP)144 439.2 R
-1.11(AT)-.92 G 4.503(H. An)1.11 F 4.503(yc)-.15 G 2.003
(ommand lines you de\214ne that need the CPPP)-4.503 F -1.11(AT)-.92 G
4.503(Hd)1.11 G 2.003(irectory list should)-4.503 F(include $_CPPINCFLA)
144 451.2 Q(GS:)-.4 E(en)144 475.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(CCCOM="my_compiler $_CPPINCFLA).4 E(GS -c -o $T)-.4 E
(ARGET $SOURCE"\))-.93 E(CPPSUFFIXES)108 504 Q .152(The list of suf)144
516 R<8c78>-.25 E .153(es of \214les that will be scanned for C preproc\
essor implicit dependencies \(#include)-.15 F 2.5(lines\). The)144 528 R
(def)2.5 E(ault list is:)-.1 E
([".c", ".C", ".cxx", ".cpp", ".c++", ".cc",)144 552 Q
(".h", ".H", ".hxx", ".hpp", ".hh",)146.5 564 Q(".F", ".fpp", ".FPP",)
146.5 576 Q(".m", ".mm",)146.5 588 Q(".S", ".spp", ".SPP"])146.5 600 Q
(CVS)108 628.8 Q(The CVS e)144 628.8 Q -.15(xe)-.15 G(cutable.).15 E
(CVSCOFLA)108 657.6 Q(GS)-.4 E(Options that are passed to the CVS check)
144 669.6 Q(out subcommand.)-.1 E(CVSCOM)108 698.4 Q
(The command line used to fetch source \214les from a CVS repository)144
710.4 Q(.)-.65 E(July 2010)286.415 768 Q(77)204.415 E 0 Cg EP
%%Page: 78 78
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(CVSCOMSTR)
108 84 Q 1.145(The string displayed when fetching a source \214le from \
a CVS repository)144 96 R 6.145(.I)-.65 G 3.645(ft)-6.145 G 1.145
(his is not set, then)-3.645 F
($CVSCOM \(the command line\) is displayed.)144 108 Q(CVSFLA)108 136.8 Q
(GS)-.4 E 1.479(General options that are passed to CVS.)144 148.8 R
1.479(By def)6.479 F 1.479(ault, this is set to)-.1 F/F1 10/Times-Bold@0
SF 1.48(-d $CVSREPOSIT)3.98 F(OR)-.18 E(Y)-.35 E F0(to)3.98 E
(specify from where the \214les must be fetched.)144 160.8 Q(CVSREPOSIT)
108 189.6 Q(OR)-.18 E(Y)-.65 E(The path to the CVS repository)144 201.6
Q 5(.T)-.65 G(his is referenced in the def)-5 E(ault $CVSFLA)-.1 E(GS v)
-.4 E(alue.)-.25 E(CXX)108 230.4 Q(The C++ compiler)144 230.4 Q(.)-.55 E
(CXXCOM)108 259.2 Q .86(The command line used to compile a C++ source \
\214le to an object \214le.)144 271.2 R(An)5.86 E 3.36(yo)-.15 G .86
(ptions speci\214ed in)-3.36 F(the $CXXFLA)144 283.2 Q(GS and $CPPFLA)
-.4 E(GS construction v)-.4 E
(ariables are included on this command line.)-.25 E(CXXCOMSTR)108 312 Q
.455(The string displayed when a C++ source \214le is compiled to a \(s\
tatic\) object \214le.)144 324 R .455(If this is not set,)5.455 F
(then $CXXCOM \(the command line\) is displayed.)144 336 Q(en)144 360 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(CXXCOMSTR = "Compiling static object $T).4 E(ARGET"\))-.93 E
(CXXFILESUFFIX)108 388.8 Q 1.255(The suf)144 400.8 R 1.255
(\214x for C++ source \214les.)-.25 F 1.255
(This is used by the internal CXXFile b)6.255 F 1.254
(uilder when generating)-.2 F .086(C++ \214les from Le)144 412.8 R 2.586
(x\()-.15 G .086(.ll\) or Y)-2.586 F -.4(AC)-1.2 G 2.587(C\().4 G .087
(.yy\) input \214les.)-2.587 F .087(The def)5.087 F .087(ault suf)-.1 F
.087(\214x is)-.25 F F1(.cc)2.587 E F0 5.087(.S)C .087
(Cons also treats \214les)-5.087 F .316(with the suf)144 424.8 R<8c78>
-.25 E(es)-.15 E F1(.cpp)2.816 E F0(,)A F1(.cxx)2.816 E F0(,)A F1(.c++)
2.816 E F0 2.816(,a)C(nd)-2.816 E F1(.C++)2.816 E F0 .316
(as C++ \214les, and \214les with)2.816 F F1(.mm)2.816 E F0(suf)2.816 E
<8c78>-.25 E .315(es as Objecti)-.15 F -.15(ve)-.25 G .831(C++ \214les.)
144 436.8 R .831(On case-sensiti)5.831 F 1.131 -.15(ve s)-.25 H .832
(ystems \(Linux, UNIX, and other POSIX-alik).15 F .832
(es\), SCons also treats)-.1 F F1(.C)144 448.8 Q F0
(\(upper case\) \214les as C++ \214les.)2.5 E(CXXFLA)108 477.6 Q(GS)-.4
E 2.267(General options that are passed to the C++ compiler)144 489.6 R
7.267(.B)-.55 G 4.767(yd)-7.267 G(ef)-4.767 E 2.266
(ault, this includes the v)-.1 F 2.266(alue of)-.25 F($CCFLA)144 501.6 Q
.465(GS, so that setting $CCFLA)-.4 F .465(GS af)-.4 F .465
(fects both C and C++ compilation.)-.25 F .466(If you w)5.466 F .466
(ant to add)-.1 F(C++-speci\214c \215ags, you must set or o)144 513.6 Q
-.15(ve)-.15 G(rride the v).15 E(alue of $CXXFLA)-.25 E(GS.)-.4 E
(CXXVERSION)108 542.4 Q .518(The v)144 554.4 R .518
(ersion number of the C++ compiler)-.15 F 5.518(.T)-.55 G .517
(his may or may not be set, depending on the speci\214c)-5.518 F
(C++ compiler being used.)144 566.4 Q(DESCRIPTION)108 595.2 Q 3.361(Al)
144 607.2 S .861(ong description of the project being packaged.)-3.361 F
.861(This is included in the rele)5.861 F -.25(va)-.25 G .862
(nt section of the).25 F(\214le that controls the packaging b)144 619.2
Q(uild.)-.2 E(DESCRIPTION_lang)108 648 Q 2.893(Al)144 660 S .392
(anguage-speci\214c long description for the speci\214ed)-2.893 F/F2 10
/Times-Italic@0 SF(lang)2.892 E F0 5.392(.T)C .392
(his is used to populate a)-5.392 F F1(%descrip-)2.892 E(tion -l)144 672
Q F0(section of an RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E(Dir)108
700.8 Q 2.5(Af)144 700.8 S(unction that con)-2.5 E -.15(ve)-.4 G
(rts a string into a Dir instance relati).15 E .3 -.15(ve t)-.25 H 2.5
(ot).15 G(he tar)-2.5 E(get being b)-.18 E(uilt.)-.2 E(July 2010)286.415
768 Q(78)204.415 E 0 Cg EP
%%Page: 79 79
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(Dirs)108 84
Q 2.5(Af)144 84 S(unction that con)-2.5 E -.15(ve)-.4 G
(rts a list of strings into a list of Dir instances relati).15 E .3 -.15
(ve t)-.25 H 2.5(ot).15 G(he tar)-2.5 E(get being b)-.18 E(uilt.)-.2 E
(DSUFFIXES)108 112.8 Q(The list of suf)144 124.8 Q<8c78>-.25 E
(es of \214les that will be scanned for imported D package \214les.)-.15
E(The def)5 E(ault list is:)-.1 E(['.d'])144 148.8 Q -.4(DV)108 177.6 S
(IPDF).4 E(The T)144 189.6 Q(eX D)-.7 E(VI \214le to PDF \214le con)-.4
E -.15(ve)-.4 G(rter).15 E(.)-.55 E -.4(DV)108 218.4 S(IPDFCOM).4 E
(The command line used to con)144 230.4 Q -.15(ve)-.4 G(rt T).15 E(eX D)
-.7 E(VI \214les into a PDF \214le.)-.4 E -.4(DV)108 259.2 S(IPDFCOMSTR)
.4 E 1.34(The string displayed when a T)144 271.2 R 1.34(eX D)-.7 F 1.34
(VI \214le is con)-.4 F -.15(ve)-.4 G 1.34(rted into a PDF \214le.).15 F
1.34(If this is not set, then)6.34 F($D)144 283.2 Q
(VIPDFCOM \(the command line\) is displayed.)-.4 E -.4(DV)108 312 S
(IPDFFLA).4 E(GS)-.4 E(General options passed to the T)144 324 Q(eX D)
-.7 E(VI \214le to PDF \214le con)-.4 E -.15(ve)-.4 G(rter).15 E(.)-.55
E -.4(DV)108 352.8 S(IPS).4 E(The T)144 352.8 Q(eX D)-.7 E
(VI \214le to PostScript con)-.4 E -.15(ve)-.4 G(rter).15 E(.)-.55 E -.4
(DV)108 381.6 S(IPSFLA).4 E(GS)-.4 E(General options passed to the T)144
393.6 Q(eX D)-.7 E(VI \214le to PostScript con)-.4 E -.15(ve)-.4 G(rter)
.15 E(.)-.55 E(ENV)108 422.4 Q 2.913(Ad)144 422.4 S .413
(ictionary of en)-2.913 F .413(vironment v)-.4 F .413
(ariables to use when in)-.25 F -.2(vo)-.4 G .412
(king commands. When $ENV is used in a).2 F .001(command all list v)144
434.4 R .001(alues will be joined using the path separator and an)-.25 F
2.502(yo)-.15 G .002(ther non-string v)-2.502 F .002(alues will)-.25 F
.417(simply be coerced to a string.)144 446.4 R .417(Note that, by def)
5.417 F(ault,)-.1 E/F1 10/Times-Bold@0 SF(scons)2.917 E F0(does)2.917 E
/F2 10/Times-Italic@0 SF(not)3.277 E F0(propag)3.597 E .417(ate the en)
-.05 F .416(vironment in)-.4 F .978(force when you e)144 458.4 R -.15
(xe)-.15 G(cute).15 E F1(scons)3.478 E F0 .978
(to the commands used to b)3.478 F .978(uild tar)-.2 F .978
(get \214les.)-.18 F .979(This is so that b)5.978 F(uilds)-.2 E 1.884
(will be guaranteed repeatable re)144 470.4 R -.05(ga)-.15 G 1.884
(rdless of the en).05 F 1.884(vironment v)-.4 F 1.883
(ariables set at the time)-.25 F F1(scons)4.383 E F0(is)4.383 E(in)144
482.4 Q -.2(vo)-.4 G -.1(ke).2 G(d.).1 E 1.372(If you w)144 506.4 R
1.372(ant to propag)-.1 F 1.372(ate your en)-.05 F 1.372(vironment v)-.4
F 1.372(ariables to the commands e)-.25 F -.15(xe)-.15 G 1.372
(cuted to b).15 F 1.373(uild tar)-.2 F(get)-.18 E
(\214les, you must do so e)144 518.4 Q(xplicitly:)-.15 E(import os)144
542.4 Q(en)144 554.4 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(ENV = os.en).4 E(viron\))-.4 E .296
(Note that you can choose only to propag)144 571.2 R .296
(ate certain en)-.05 F .296(vironment v)-.4 F 2.795(ariables. A)-.25 F
.295(common e)2.795 F .295(xample is)-.15 F .448(the system)144 583.2 R
F1 -.74(PA)2.948 G(TH)-.21 E F0(en)2.948 E .448(vironment v)-.4 F .448
(ariable, so that)-.25 F F1(scons)2.949 E F0 .449
(uses the same utilities as the in)2.949 F -.2(vo)-.4 G .449(king shell)
.2 F(\(or other process\):)144 595.2 Q(import os)144 619.2 Q(en)144
631.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(ENV = {'P).4 E -1.11(AT)
-.92 G(H' : os.en)1.11 E(viron['P)-.4 E -1.11(AT)-.92 G(H']}\))1.11 E
(ESCAPE)108 660 Q 3.498(Af)144 672 S .997(unction that will be called t\
o escape shell special characters in command lines. The function)-3.498
F .293(should tak)144 684 R 2.793(eo)-.1 G .293(ne ar)-2.793 F .293(gum\
ent: the command line string to escape; and should return the escaped c\
om-)-.18 F(mand line.)144 696 Q(July 2010)286.415 768 Q(79)204.415 E 0
Cg EP
%%Page: 80 80
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(F77)108 84
Q .754(The F)144 84 R .754(ortran 77 compiler)-.15 F 5.754(.Y)-.55 G
.754(ou should normally set the $FOR)-6.854 F .754(TRAN v)-.6 F .753
(ariable, which speci\214es the)-.25 F(def)144 96 Q .643(ault F)-.1 F
.644(ortran compiler for all F)-.15 F .644(ortran v)-.15 F 3.144
(ersions. Y)-.15 F .644(ou only need to set $F77 if you need to use a)
-1.1 F(speci\214c compiler or compiler v)144 108 Q(ersion for F)-.15 E
(ortran 77 \214les.)-.15 E(F77COM)108 136.8 Q .34
(The command line used to compile a F)144 148.8 R .34
(ortran 77 source \214le to an object \214le.)-.15 F -1.1(Yo)5.34 G 2.84
(uo)1.1 G .34(nly need to set)-2.84 F .663
($F77COM if you need to use a speci\214c command line for F)144 160.8 R
.663(ortran 77 \214les.)-.15 F -1.1(Yo)5.663 G 3.164(us)1.1 G .664
(hould normally)-3.164 F .92(set the $FOR)144 172.8 R .92(TRANCOM v)-.6
F .919(ariable, which speci\214es the def)-.25 F .919
(ault command line for all F)-.1 F .919(ortran v)-.15 F(er)-.15 E(-)-.2
E(sions.)144 184.8 Q(F77COMSTR)108 213.6 Q .53
(The string displayed when a F)144 225.6 R .53
(ortran 77 source \214le is compiled to an object \214le.)-.15 F .53
(If this is not set,)5.53 F(then $F77COM or $FOR)144 237.6 Q
(TRANCOM \(the command line\) is displayed.)-.6 E(F77FILESUFFIXES)108
266.4 Q(The list of \214le e)144 278.4 Q
(xtensions for which the F77 dialect will be used. By def)-.15 E
(ault, this is ['.f77'])-.1 E(F77FLA)108 307.2 Q(GS)-.4 E .754
(General user)144 319.2 R .754
(-speci\214ed options that are passed to the F)-.2 F .753
(ortran 77 compiler)-.15 F 5.753(.N)-.55 G .753(ote that this v)-5.753 F
(ariable)-.25 E(does)144 331.2 Q/F1 10/Times-Italic@0 SF(not)4.281 E F0
(contain)4.601 E/F2 10/Times-Bold@0 SF<ad49>3.921 E F0 1.422(\(or simil\
ar\) include search path options that scons generates automatically)
3.921 F 1.508(from $F77P)144 343.2 R -1.11(AT)-.92 G 4.008(H. See)1.11 F
($_F77INCFLA)4.008 E 1.508(GS belo)-.4 F 2.808 -.65(w, f)-.25 H 1.508
(or the v).65 F 1.507(ariable that e)-.25 F 1.507
(xpands to those options.)-.15 F -1.1(Yo)144 355.2 S 3.147(uo)1.1 G .647
(nly need to set $F77FLA)-3.147 F .648
(GS if you need to de\214ne speci\214c user options for F)-.4 F .648
(ortran 77 \214les.)-.15 F -1.1(Yo)144 367.2 S 5.053(us)1.1 G 2.553
(hould normally set the $FOR)-5.053 F(TRANFLA)-.6 E 2.553(GS v)-.4 F
2.553(ariable, which speci\214es the user)-.25 F(-speci\214ed)-.2 E
(options passed to the def)144 379.2 Q(ault F)-.1 E
(ortran compiler for all F)-.15 E(ortran v)-.15 E(ersions.)-.15 E
(_F77INCFLA)108 408 Q(GS)-.4 E 1.243
(An automatically-generated construction v)144 420 R 1.243
(ariable containing the F)-.25 F 1.244(ortran 77 compiler command-)-.15
F 4.866(line options for specifying directories to be searched for incl\
ude \214les.)144 432 R 4.866(The v)9.866 F 4.866(alue of)-.25 F
($_F77INCFLA)144 444 Q .471
(GS is created by appending $INCPREFIX and $INCSUFFIX to the be)-.4 F
.471(ginning and)-.15 F(end of each directory in $F77P)144 456 Q -1.11
(AT)-.92 G(H.)1.11 E(F77P)108 484.8 Q -1.11(AT)-.92 G(H)1.11 E .303
(The list of directories that the F)144 496.8 R .302
(ortran 77 compiler will search for include directories. The implicit)
-.15 F(dependenc)144 508.8 Q 4.226(ys)-.15 G 1.727
(canner will search these directories for include \214les. Don')-4.226 F
4.227(te)-.18 G 1.727(xplicitly put include)-4.377 F 1.48(directory ar)
144 520.8 R 1.48(guments in $F77FLA)-.18 F 1.479
(GS because the result will be non-portable and the directories)-.4 F
1.759(will not be searched by the dependenc)144 532.8 R 4.259(ys)-.15 G
(canner)-4.259 E 4.259(.N)-.55 G 1.759(ote: directory names in $F77P)
-4.259 F -1.11(AT)-.92 G 4.26(Hw)1.11 G 1.76(ill be)-4.26 F(look)144
544.8 Q .036(ed-up relati)-.1 F .336 -.15(ve t)-.25 H 2.536(ot).15 G
.036(he SConscript directory when the)-2.536 F 2.536(ya)-.15 G .035
(re used in a command. T)-2.536 F 2.535(of)-.8 G(orce)-2.535 E F2(scons)
2.535 E F0(to)2.535 E .314(look-up a directory relati)144 556.8 R .614
-.15(ve t)-.25 H 2.814(ot).15 G .315
(he root of the source tree use #: Y)-2.814 F .315
(ou only need to set $F77P)-1.1 F -1.11(AT)-.92 G 2.815(Hi)1.11 G(f)
-2.815 E .184(you need to de\214ne a speci\214c include path for F)144
568.8 R .183(ortran 77 \214les.)-.15 F -1.1(Yo)5.183 G 2.683(us)1.1 G
.183(hould normally set the $FOR-)-2.683 F(TRANP)144 580.8 Q -1.11(AT)
-.92 G 2.682(Hv)1.11 G .183
(ariable, which speci\214es the include path for the def)-2.932 F .183
(ault F)-.1 F .183(ortran compiler for all F)-.15 F(or)-.15 E(-)-.2 E
(tran v)144 592.8 Q(ersions.)-.15 E(en)144 616.8 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(F77P).4 E -1.11(AT)-.92 G(H='#/include'\))1.11 E
(The directory look-up can also be forced using the)144 633.6 Q F2(Dir)
2.5 E F0(\(\) function:)A(include = Dir\('include'\))144 657.6 Q(en)144
669.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(F77P).4 E -1.11(AT)-.92 G
(H=include\))1.11 E 4.515(The directory list will be added to command l\
ines through the automatically-generated)144 686.4 R($_F77INCFLA)144
698.4 Q 2.146(GS construction v)-.4 F 2.146
(ariable, which is constructed by appending the v)-.25 F 2.147
(alues of the)-.25 F .121($INCPREFIX and $INCSUFFIX construction v)144
710.4 R .121(ariables to the be)-.25 F .121
(ginning and end of each directory)-.15 F 2.346(in $F77P)144 722.4 R
-1.11(AT)-.92 G 4.846(H. An)1.11 F 4.846(yc)-.15 G 2.346
(ommand lines you de\214ne that need the F77P)-4.846 F -1.11(AT)-.92 G
4.846(Hd)1.11 G 2.347(irectory list should)-4.846 F(July 2010)286.415
768 Q(80)204.415 E 0 Cg EP
%%Page: 81 81
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(include $_F77INCFLA)144 84 Q(GS:)-.4 E(en)144 108 Q 2.5(v=E)-.4 G -.4
(nv)-2.5 G(ironment\(F77COM="my_compiler $_F77INCFLA).4 E(GS -c -o $T)
-.4 E(ARGET $SOURCE"\))-.93 E(F77PPCOM)108 136.8 Q .468
(The command line used to compile a F)144 148.8 R .468
(ortran 77 source \214le to an object \214le after \214rst running the)
-.15 F .385(\214le through the C preprocessor)144 160.8 R 5.385(.A)-.55
G .685 -.15(ny o)-5.385 H .385(ptions speci\214ed in the $F77FLA).15 F
.386(GS and $CPPFLA)-.4 F .386(GS con-)-.4 F .658(struction v)144 172.8
R .658(ariables are included on this command line.)-.25 F -1.1(Yo)5.658
G 3.158(uo)1.1 G .658(nly need to set $F77PPCOM if you)-3.158 F .357
(need to use a speci\214c C-preprocessor command line for F)144 184.8 R
.357(ortran 77 \214les.)-.15 F -1.1(Yo)5.358 G 2.858(us)1.1 G .358
(hould normally set)-2.858 F .081(the $FOR)144 196.8 R .081(TRANPPCOM v)
-.6 F .081(ariable, which speci\214es the def)-.25 F .081
(ault C-preprocessor command line for all)-.1 F -.15(Fo)144 208.8 S
(rtran v).15 E(ersions.)-.15 E(F77PPCOMSTR)108 237.6 Q .544
(The string displayed when a F)144 249.6 R .544(ortran 77 source \214le\
 is compiled to an object \214le after \214rst running)-.15 F .808
(the \214le through the C preprocessor)144 261.6 R 5.808(.I)-.55 G 3.308
(ft)-5.808 G .808(his is not set, then $F77PPCOM or $FOR)-3.308 F
(TRANPPCOM)-.6 E(\(the command line\) is displayed.)144 273.6 Q
(F77PPFILESUFFIXES)108 302.4 Q 1.006(The list of \214le e)144 314.4 R
1.007(xtensions for which the compilation + preprocessor pass for F77 d\
ialect will be)-.15 F(used. By def)144 326.4 Q(ault, this is empty)-.1 E
(F90)108 355.2 Q .754(The F)144 355.2 R .754(ortran 90 compiler)-.15 F
5.754(.Y)-.55 G .754(ou should normally set the $FOR)-6.854 F .754
(TRAN v)-.6 F .753(ariable, which speci\214es the)-.25 F(def)144 367.2 Q
.643(ault F)-.1 F .644(ortran compiler for all F)-.15 F .644(ortran v)
-.15 F 3.144(ersions. Y)-.15 F .644
(ou only need to set $F90 if you need to use a)-1.1 F
(speci\214c compiler or compiler v)144 379.2 Q(ersion for F)-.15 E
(ortran 90 \214les.)-.15 E(F90COM)108 408 Q .34
(The command line used to compile a F)144 420 R .34
(ortran 90 source \214le to an object \214le.)-.15 F -1.1(Yo)5.34 G 2.84
(uo)1.1 G .34(nly need to set)-2.84 F .663
($F90COM if you need to use a speci\214c command line for F)144 432 R
.663(ortran 90 \214les.)-.15 F -1.1(Yo)5.663 G 3.164(us)1.1 G .664
(hould normally)-3.164 F .92(set the $FOR)144 444 R .92(TRANCOM v)-.6 F
.919(ariable, which speci\214es the def)-.25 F .919
(ault command line for all F)-.1 F .919(ortran v)-.15 F(er)-.15 E(-)-.2
E(sions.)144 456 Q(F90COMSTR)108 484.8 Q .53
(The string displayed when a F)144 496.8 R .53
(ortran 90 source \214le is compiled to an object \214le.)-.15 F .53
(If this is not set,)5.53 F(then $F90COM or $FOR)144 508.8 Q
(TRANCOM \(the command line\) is displayed.)-.6 E(F90FILESUFFIXES)108
537.6 Q(The list of \214le e)144 549.6 Q
(xtensions for which the F90 dialect will be used. By def)-.15 E
(ault, this is ['.f90'])-.1 E(F90FLA)108 578.4 Q(GS)-.4 E .754
(General user)144 590.4 R .754
(-speci\214ed options that are passed to the F)-.2 F .753
(ortran 90 compiler)-.15 F 5.753(.N)-.55 G .753(ote that this v)-5.753 F
(ariable)-.25 E(does)144 602.4 Q/F1 10/Times-Italic@0 SF(not)4.281 E F0
(contain)4.601 E/F2 10/Times-Bold@0 SF<ad49>3.921 E F0 1.422(\(or simil\
ar\) include search path options that scons generates automatically)
3.921 F 1.508(from $F90P)144 614.4 R -1.11(AT)-.92 G 4.008(H. See)1.11 F
($_F90INCFLA)4.008 E 1.508(GS belo)-.4 F 2.808 -.65(w, f)-.25 H 1.508
(or the v).65 F 1.507(ariable that e)-.25 F 1.507
(xpands to those options.)-.15 F -1.1(Yo)144 626.4 S 3.147(uo)1.1 G .647
(nly need to set $F90FLA)-3.147 F .648
(GS if you need to de\214ne speci\214c user options for F)-.4 F .648
(ortran 90 \214les.)-.15 F -1.1(Yo)144 638.4 S 5.053(us)1.1 G 2.553
(hould normally set the $FOR)-5.053 F(TRANFLA)-.6 E 2.553(GS v)-.4 F
2.553(ariable, which speci\214es the user)-.25 F(-speci\214ed)-.2 E
(options passed to the def)144 650.4 Q(ault F)-.1 E
(ortran compiler for all F)-.15 E(ortran v)-.15 E(ersions.)-.15 E
(_F90INCFLA)108 679.2 Q(GS)-.4 E 1.243
(An automatically-generated construction v)144 691.2 R 1.243
(ariable containing the F)-.25 F 1.244(ortran 90 compiler command-)-.15
F 4.866(line options for specifying directories to be searched for incl\
ude \214les.)144 703.2 R 4.866(The v)9.866 F 4.866(alue of)-.25 F
($_F90INCFLA)144 715.2 Q .471
(GS is created by appending $INCPREFIX and $INCSUFFIX to the be)-.4 F
.471(ginning and)-.15 F(end of each directory in $F90P)144 727.2 Q -1.11
(AT)-.92 G(H.)1.11 E(July 2010)286.415 768 Q(81)204.415 E 0 Cg EP
%%Page: 82 82
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(F90P)108 84
Q -1.11(AT)-.92 G(H)1.11 E .303(The list of directories that the F)144
96 R .302
(ortran 90 compiler will search for include directories. The implicit)
-.15 F(dependenc)144 108 Q 4.226(ys)-.15 G 1.727
(canner will search these directories for include \214les. Don')-4.226 F
4.227(te)-.18 G 1.727(xplicitly put include)-4.377 F 1.48(directory ar)
144 120 R 1.48(guments in $F90FLA)-.18 F 1.479
(GS because the result will be non-portable and the directories)-.4 F
1.759(will not be searched by the dependenc)144 132 R 4.259(ys)-.15 G
(canner)-4.259 E 4.259(.N)-.55 G 1.759(ote: directory names in $F90P)
-4.259 F -1.11(AT)-.92 G 4.26(Hw)1.11 G 1.76(ill be)-4.26 F(look)144 144
Q .036(ed-up relati)-.1 F .336 -.15(ve t)-.25 H 2.536(ot).15 G .036
(he SConscript directory when the)-2.536 F 2.536(ya)-.15 G .035
(re used in a command. T)-2.536 F 2.535(of)-.8 G(orce)-2.535 E/F1 10
/Times-Bold@0 SF(scons)2.535 E F0(to)2.535 E .314
(look-up a directory relati)144 156 R .614 -.15(ve t)-.25 H 2.814(ot).15
G .315(he root of the source tree use #: Y)-2.814 F .315
(ou only need to set $F90P)-1.1 F -1.11(AT)-.92 G 2.815(Hi)1.11 G(f)
-2.815 E .184(you need to de\214ne a speci\214c include path for F)144
168 R .183(ortran 90 \214les.)-.15 F -1.1(Yo)5.183 G 2.683(us)1.1 G .183
(hould normally set the $FOR-)-2.683 F(TRANP)144 180 Q -1.11(AT)-.92 G
2.682(Hv)1.11 G .183
(ariable, which speci\214es the include path for the def)-2.932 F .183
(ault F)-.1 F .183(ortran compiler for all F)-.15 F(or)-.15 E(-)-.2 E
(tran v)144 192 Q(ersions.)-.15 E(en)144 216 Q 2.5(v=E)-.4 G -.4(nv)-2.5
G(ironment\(F90P).4 E -1.11(AT)-.92 G(H='#/include'\))1.11 E
(The directory look-up can also be forced using the)144 232.8 Q F1(Dir)
2.5 E F0(\(\) function:)A(include = Dir\('include'\))144 256.8 Q(en)144
268.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(F90P).4 E -1.11(AT)-.92 G
(H=include\))1.11 E 4.515(The directory list will be added to command l\
ines through the automatically-generated)144 285.6 R($_F90INCFLA)144
297.6 Q 2.146(GS construction v)-.4 F 2.146
(ariable, which is constructed by appending the v)-.25 F 2.147
(alues of the)-.25 F .121($INCPREFIX and $INCSUFFIX construction v)144
309.6 R .121(ariables to the be)-.25 F .121
(ginning and end of each directory)-.15 F 2.346(in $F90P)144 321.6 R
-1.11(AT)-.92 G 4.846(H. An)1.11 F 4.846(yc)-.15 G 2.346
(ommand lines you de\214ne that need the F90P)-4.846 F -1.11(AT)-.92 G
4.846(Hd)1.11 G 2.347(irectory list should)-4.846 F(include $_F90INCFLA)
144 333.6 Q(GS:)-.4 E(en)144 357.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(F90COM="my_compiler $_F90INCFLA).4 E(GS -c -o $T)-.4 E
(ARGET $SOURCE"\))-.93 E(F90PPCOM)108 386.4 Q .468
(The command line used to compile a F)144 398.4 R .468
(ortran 90 source \214le to an object \214le after \214rst running the)
-.15 F .385(\214le through the C preprocessor)144 410.4 R 5.385(.A)-.55
G .685 -.15(ny o)-5.385 H .385(ptions speci\214ed in the $F90FLA).15 F
.386(GS and $CPPFLA)-.4 F .386(GS con-)-.4 F .658(struction v)144 422.4
R .658(ariables are included on this command line.)-.25 F -1.1(Yo)5.658
G 3.158(uo)1.1 G .658(nly need to set $F90PPCOM if you)-3.158 F .357
(need to use a speci\214c C-preprocessor command line for F)144 434.4 R
.357(ortran 90 \214les.)-.15 F -1.1(Yo)5.358 G 2.858(us)1.1 G .358
(hould normally set)-2.858 F .081(the $FOR)144 446.4 R .081(TRANPPCOM v)
-.6 F .081(ariable, which speci\214es the def)-.25 F .081
(ault C-preprocessor command line for all)-.1 F -.15(Fo)144 458.4 S
(rtran v).15 E(ersions.)-.15 E(F90PPCOMSTR)108 487.2 Q .63
(The string displayed when a F)144 499.2 R .63(ortran 90 source \214le \
is compiled after \214rst running the \214le through)-.15 F 1.149
(the C preprocessor)144 511.2 R 6.149(.I)-.55 G 3.649(ft)-6.149 G 1.148
(his is not set, then $F90PPCOM or $FOR)-3.649 F 1.148
(TRANPPCOM \(the command)-.6 F(line\) is displayed.)144 523.2 Q
(F90PPFILESUFFIXES)108 552 Q 1.006(The list of \214le e)144 564 R 1.007
(xtensions for which the compilation + preprocessor pass for F90 dialec\
t will be)-.15 F(used. By def)144 576 Q(ault, this is empty)-.1 E(F95)
108 604.8 Q .754(The F)144 604.8 R .754(ortran 95 compiler)-.15 F 5.754
(.Y)-.55 G .754(ou should normally set the $FOR)-6.854 F .754(TRAN v)-.6
F .753(ariable, which speci\214es the)-.25 F(def)144 616.8 Q .643
(ault F)-.1 F .644(ortran compiler for all F)-.15 F .644(ortran v)-.15 F
3.144(ersions. Y)-.15 F .644
(ou only need to set $F95 if you need to use a)-1.1 F
(speci\214c compiler or compiler v)144 628.8 Q(ersion for F)-.15 E
(ortran 95 \214les.)-.15 E(F95COM)108 657.6 Q .34
(The command line used to compile a F)144 669.6 R .34
(ortran 95 source \214le to an object \214le.)-.15 F -1.1(Yo)5.34 G 2.84
(uo)1.1 G .34(nly need to set)-2.84 F .663
($F95COM if you need to use a speci\214c command line for F)144 681.6 R
.663(ortran 95 \214les.)-.15 F -1.1(Yo)5.663 G 3.164(us)1.1 G .664
(hould normally)-3.164 F .92(set the $FOR)144 693.6 R .92(TRANCOM v)-.6
F .919(ariable, which speci\214es the def)-.25 F .919
(ault command line for all F)-.1 F .919(ortran v)-.15 F(er)-.15 E(-)-.2
E(sions.)144 705.6 Q(July 2010)286.415 768 Q(82)204.415 E 0 Cg EP
%%Page: 83 83
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(F95COMSTR)
108 84 Q .53(The string displayed when a F)144 96 R .53
(ortran 95 source \214le is compiled to an object \214le.)-.15 F .53
(If this is not set,)5.53 F(then $F95COM or $FOR)144 108 Q
(TRANCOM \(the command line\) is displayed.)-.6 E(F95FILESUFFIXES)108
136.8 Q(The list of \214le e)144 148.8 Q
(xtensions for which the F95 dialect will be used. By def)-.15 E
(ault, this is ['.f95'])-.1 E(F95FLA)108 177.6 Q(GS)-.4 E .754
(General user)144 189.6 R .754
(-speci\214ed options that are passed to the F)-.2 F .753
(ortran 95 compiler)-.15 F 5.753(.N)-.55 G .753(ote that this v)-5.753 F
(ariable)-.25 E(does)144 201.6 Q/F1 10/Times-Italic@0 SF(not)4.281 E F0
(contain)4.601 E/F2 10/Times-Bold@0 SF<ad49>3.921 E F0 1.422(\(or simil\
ar\) include search path options that scons generates automatically)
3.921 F 1.508(from $F95P)144 213.6 R -1.11(AT)-.92 G 4.008(H. See)1.11 F
($_F95INCFLA)4.008 E 1.508(GS belo)-.4 F 2.808 -.65(w, f)-.25 H 1.508
(or the v).65 F 1.507(ariable that e)-.25 F 1.507
(xpands to those options.)-.15 F -1.1(Yo)144 225.6 S 3.147(uo)1.1 G .647
(nly need to set $F95FLA)-3.147 F .648
(GS if you need to de\214ne speci\214c user options for F)-.4 F .648
(ortran 95 \214les.)-.15 F -1.1(Yo)144 237.6 S 5.053(us)1.1 G 2.553
(hould normally set the $FOR)-5.053 F(TRANFLA)-.6 E 2.553(GS v)-.4 F
2.553(ariable, which speci\214es the user)-.25 F(-speci\214ed)-.2 E
(options passed to the def)144 249.6 Q(ault F)-.1 E
(ortran compiler for all F)-.15 E(ortran v)-.15 E(ersions.)-.15 E
(_F95INCFLA)108 278.4 Q(GS)-.4 E 1.243
(An automatically-generated construction v)144 290.4 R 1.243
(ariable containing the F)-.25 F 1.244(ortran 95 compiler command-)-.15
F 4.866(line options for specifying directories to be searched for incl\
ude \214les.)144 302.4 R 4.866(The v)9.866 F 4.866(alue of)-.25 F
($_F95INCFLA)144 314.4 Q .471
(GS is created by appending $INCPREFIX and $INCSUFFIX to the be)-.4 F
.471(ginning and)-.15 F(end of each directory in $F95P)144 326.4 Q -1.11
(AT)-.92 G(H.)1.11 E(F95P)108 355.2 Q -1.11(AT)-.92 G(H)1.11 E .303
(The list of directories that the F)144 367.2 R .302
(ortran 95 compiler will search for include directories. The implicit)
-.15 F(dependenc)144 379.2 Q 4.226(ys)-.15 G 1.727
(canner will search these directories for include \214les. Don')-4.226 F
4.227(te)-.18 G 1.727(xplicitly put include)-4.377 F 1.48(directory ar)
144 391.2 R 1.48(guments in $F95FLA)-.18 F 1.479
(GS because the result will be non-portable and the directories)-.4 F
1.759(will not be searched by the dependenc)144 403.2 R 4.259(ys)-.15 G
(canner)-4.259 E 4.259(.N)-.55 G 1.759(ote: directory names in $F95P)
-4.259 F -1.11(AT)-.92 G 4.26(Hw)1.11 G 1.76(ill be)-4.26 F(look)144
415.2 Q .036(ed-up relati)-.1 F .336 -.15(ve t)-.25 H 2.536(ot).15 G
.036(he SConscript directory when the)-2.536 F 2.536(ya)-.15 G .035
(re used in a command. T)-2.536 F 2.535(of)-.8 G(orce)-2.535 E F2(scons)
2.535 E F0(to)2.535 E .314(look-up a directory relati)144 427.2 R .614
-.15(ve t)-.25 H 2.814(ot).15 G .315
(he root of the source tree use #: Y)-2.814 F .315
(ou only need to set $F95P)-1.1 F -1.11(AT)-.92 G 2.815(Hi)1.11 G(f)
-2.815 E .184(you need to de\214ne a speci\214c include path for F)144
439.2 R .183(ortran 95 \214les.)-.15 F -1.1(Yo)5.183 G 2.683(us)1.1 G
.183(hould normally set the $FOR-)-2.683 F(TRANP)144 451.2 Q -1.11(AT)
-.92 G 2.682(Hv)1.11 G .183
(ariable, which speci\214es the include path for the def)-2.932 F .183
(ault F)-.1 F .183(ortran compiler for all F)-.15 F(or)-.15 E(-)-.2 E
(tran v)144 463.2 Q(ersions.)-.15 E(en)144 487.2 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(F95P).4 E -1.11(AT)-.92 G(H='#/include'\))1.11 E
(The directory look-up can also be forced using the)144 504 Q F2(Dir)2.5
E F0(\(\) function:)A(include = Dir\('include'\))144 528 Q(en)144 540 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(F95P).4 E -1.11(AT)-.92 G
(H=include\))1.11 E 4.515(The directory list will be added to command l\
ines through the automatically-generated)144 556.8 R($_F95INCFLA)144
568.8 Q 2.146(GS construction v)-.4 F 2.146
(ariable, which is constructed by appending the v)-.25 F 2.147
(alues of the)-.25 F .121($INCPREFIX and $INCSUFFIX construction v)144
580.8 R .121(ariables to the be)-.25 F .121
(ginning and end of each directory)-.15 F 2.346(in $F95P)144 592.8 R
-1.11(AT)-.92 G 4.846(H. An)1.11 F 4.846(yc)-.15 G 2.346
(ommand lines you de\214ne that need the F95P)-4.846 F -1.11(AT)-.92 G
4.846(Hd)1.11 G 2.347(irectory list should)-4.846 F(include $_F95INCFLA)
144 604.8 Q(GS:)-.4 E(en)144 628.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(F95COM="my_compiler $_F95INCFLA).4 E(GS -c -o $T)-.4 E
(ARGET $SOURCE"\))-.93 E(F95PPCOM)108 657.6 Q .468
(The command line used to compile a F)144 669.6 R .468
(ortran 95 source \214le to an object \214le after \214rst running the)
-.15 F .385(\214le through the C preprocessor)144 681.6 R 5.385(.A)-.55
G .685 -.15(ny o)-5.385 H .385(ptions speci\214ed in the $F95FLA).15 F
.386(GS and $CPPFLA)-.4 F .386(GS con-)-.4 F .658(struction v)144 693.6
R .658(ariables are included on this command line.)-.25 F -1.1(Yo)5.658
G 3.158(uo)1.1 G .658(nly need to set $F95PPCOM if you)-3.158 F .357
(need to use a speci\214c C-preprocessor command line for F)144 705.6 R
.357(ortran 95 \214les.)-.15 F -1.1(Yo)5.358 G 2.858(us)1.1 G .358
(hould normally set)-2.858 F .081(the $FOR)144 717.6 R .081(TRANPPCOM v)
-.6 F .081(ariable, which speci\214es the def)-.25 F .081
(ault C-preprocessor command line for all)-.1 F -.15(Fo)144 729.6 S
(rtran v).15 E(ersions.)-.15 E(July 2010)286.415 768 Q(83)204.415 E 0 Cg
EP
%%Page: 84 84
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(F95PPCOMSTR)108 84 Q .544(The string displayed when a F)144 96 R .544(\
ortran 95 source \214le is compiled to an object \214le after \214rst r\
unning)-.15 F .808(the \214le through the C preprocessor)144 108 R 5.808
(.I)-.55 G 3.308(ft)-5.808 G .808
(his is not set, then $F95PPCOM or $FOR)-3.308 F(TRANPPCOM)-.6 E
(\(the command line\) is displayed.)144 120 Q(F95PPFILESUFFIXES)108
148.8 Q 1.006(The list of \214le e)144 160.8 R 1.007(xtensions for whic\
h the compilation + preprocessor pass for F95 dialect will be)-.15 F
(used. By def)144 172.8 Q(ault, this is empty)-.1 E(File)108 201.6 Q 2.5
(Af)144 201.6 S(unction that con)-2.5 E -.15(ve)-.4 G
(rts a string into a File instance relati).15 E .3 -.15(ve t)-.25 H 2.5
(ot).15 G(he tar)-2.5 E(get being b)-.18 E(uilt.)-.2 E(FOR)108 230.4 Q
(TRAN)-.6 E(The def)144 242.4 Q(ault F)-.1 E(ortran compiler for all v)
-.15 E(ersions of F)-.15 E(ortran.)-.15 E(FOR)108 271.2 Q(TRANCOM)-.6 E
.444(The command line used to compile a F)144 283.2 R .444
(ortran source \214le to an object \214le.)-.15 F .444(By def)5.444 F
.444(ault, an)-.1 F 2.944(yo)-.15 G(ptions)-2.944 E 3.478
(speci\214ed in the $FOR)144 295.2 R(TRANFLA)-.6 E 3.478(GS, $CPPFLA)-.4
F 3.479(GS, $_CPPDEFFLA)-.4 F 3.479(GS, $_FOR)-.4 F(TRANMOD-)-.6 E(FLA)
144 307.2 Q(G, and $_FOR)-.4 E(TRANINCFLA)-.6 E(GS construction v)-.4 E
(ariables are included on this command line.)-.25 E(FOR)108 336 Q
(TRANCOMSTR)-.6 E .15(The string displayed when a F)144 348 R .15
(ortran source \214le is compiled to an object \214le.)-.15 F .15
(If this is not set, then)5.15 F($FOR)144 360 Q
(TRANCOM \(the command line\) is displayed.)-.6 E(FOR)108 388.8 Q
(TRANFILESUFFIXES)-.6 E .813(The list of \214le e)144 400.8 R .813
(xtensions for which the FOR)-.15 F .814
(TRAN dialect will be used. By def)-.6 F .814(ault, this is ['.f)-.1 F
(',).55 E('.for', '.ftn'])144 412.8 Q(FOR)108 441.6 Q(TRANFLA)-.6 E(GS)
-.4 E .159(General user)144 453.6 R .159
(-speci\214ed options that are passed to the F)-.2 F .158
(ortran compiler)-.15 F 5.158(.N)-.55 G .158(ote that this v)-5.158 F
.158(ariable does)-.25 F/F1 10/Times-Italic@0 SF(not)144.36 465.6 Q F0
(contain)4.043 E/F2 10/Times-Bold@0 SF<ad49>3.363 E F0 .864(\(or simila\
r\) include or module search path options that scons generates automati\
-)3.363 F 3.487(cally from $FOR)144 477.6 R(TRANP)-.6 E -1.11(AT)-.92 G
5.987(H. See)1.11 F($_FOR)5.987 E(TRANINCFLA)-.6 E 3.486(GS and $_FOR)
-.4 F(TRANMODFLA)-.6 E(G,)-.4 E(belo)144 489.6 Q 1.3 -.65(w, f)-.25 H
(or the v).65 E(ariables that e)-.25 E(xpand those options.)-.15 E(_FOR)
108 518.4 Q(TRANINCFLA)-.6 E(GS)-.4 E 1.086
(An automatically-generated construction v)144 530.4 R 1.086
(ariable containing the F)-.25 F 1.087(ortran compiler command-line)-.15
F .81(options for specifying directories to be searched for include \
\214les and module \214les.)144 542.4 R .81(The v)5.81 F .81(alue of)
-.25 F($_FOR)144 554.4 Q(TRANINCFLA)-.6 E .114
(GS is created by prepending/appending $INCPREFIX and $INCSUFFIX to)-.4
F(the be)144 566.4 Q(ginning and end of each directory in $FOR)-.15 E
(TRANP)-.6 E -1.11(AT)-.92 G(H.)1.11 E(FOR)108 595.2 Q(TRANMODDIR)-.6 E
1.28(Directory location where the F)144 607.2 R 1.28
(ortran compiler should place an)-.15 F 3.78(ym)-.15 G 1.28
(odule \214les it generates.)-3.78 F(This)6.28 E -.25(va)144 619.2 S
.751(riable is empty).25 F 3.251(,b)-.65 G 3.251(yd)-3.251 G(ef)-3.251 E
.751(ault. Some F)-.1 F .752
(ortran compilers will internally append this directory in the)-.15 F
(search path for module \214les, as well.)144 631.2 Q(FOR)108 660 Q
(TRANMODDIRPREFIX)-.6 E .145
(The pre\214x used to specify a module directory on the F)144 672 R .144
(ortran compiler command line.)-.15 F .144(This will be)5.144 F 1.524
(appended to the be)144 684 R 1.525
(ginning of the directory in the $FOR)-.15 F 1.525
(TRANMODDIR construction v)-.6 F(ariables)-.25 E(when the $_FOR)144 696
Q(TRANMODFLA)-.6 E 2.5(Gv)-.4 G(ariables is automatically generated.)
-2.75 E(July 2010)286.415 768 Q(84)204.415 E 0 Cg EP
%%Page: 85 85
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(FOR)108 84
Q(TRANMODDIRSUFFIX)-.6 E .195(The suf)144 96 R .195
(\214x used to specify a module directory on the F)-.25 F .194
(ortran compiler command line.)-.15 F .194(This will be)5.194 F 1.524
(appended to the be)144 108 R 1.525
(ginning of the directory in the $FOR)-.15 F 1.525
(TRANMODDIR construction v)-.6 F(ariables)-.25 E(when the $_FOR)144 120
Q(TRANMODFLA)-.6 E 2.5(Gv)-.4 G(ariables is automatically generated.)
-2.75 E(_FOR)108 148.8 Q(TRANMODFLA)-.6 E(G)-.4 E 1.087
(An automatically-generated construction v)144 160.8 R 1.086
(ariable containing the F)-.25 F 1.086(ortran compiler command-line)-.15
F .81(option for specifying the directory location where the F)144 172.8
R .81(ortran compiler should place an)-.15 F 3.31(ym)-.15 G(odule)-3.31
E .885(\214les that happen to get generated during compilation.)144
184.8 R .885(The v)5.885 F .885(alue of $_FOR)-.25 F(TRANMODFLA)-.6 E
3.385(Gi)-.4 G(s)-3.385 E .28(created by prepending/appending $FOR)144
196.8 R .28(TRANMODDIRPREFIX and $FOR)-.6 F(TRANMODDIRSUF-)-.6 E
(FIX to the be)144 208.8 Q(ginning and end of the directory in $FOR)-.15
E(TRANMODDIR.)-.6 E(FOR)108 237.6 Q(TRANMODPREFIX)-.6 E .07
(The module \214le pre\214x used by the F)144 249.6 R .07
(ortran compiler)-.15 F 5.07(.S)-.55 G .07(Cons assumes that the F)-5.07
F .07(ortran compiler fol-)-.15 F(lo)144 261.6 Q .8
(ws the quasi-standard naming con)-.25 F -.15(ve)-.4 G .801
(ntion for module \214les of).15 F/F1 10/Times-Bold@0 SF
(module_name.mod)3.301 E F0 5.801(.A)C 3.301(sar)-5.801 G(esult,)-3.301
E .998(this v)144 273.6 R .998(ariable is left empty)-.25 F 3.498(,b)
-.65 G 3.497(yd)-3.498 G(ef)-3.497 E 3.497(ault. F)-.1 F .997
(or situations in which the compiler does not necessarily)-.15 F(follo)
144 285.6 Q 3.002(wt)-.25 G .502(he normal con)-3.002 F -.15(ve)-.4 G
.502(ntion, the user may use this v).15 F 3.003(ariable. Its)-.25 F -.25
(va)3.003 G .503(lue will be appended to e).25 F -.15(ve)-.25 G(ry).15 E
(module \214le name as scons attempts to resolv)144 297.6 Q 2.5(ed)-.15
G(ependencies.)-2.5 E(FOR)108 326.4 Q(TRANMODSUFFIX)-.6 E .124
(The module \214le suf)144 338.4 R .124(\214x used by the F)-.25 F .123
(ortran compiler)-.15 F 5.123(.S)-.55 G .123(Cons assumes that the F)
-5.123 F .123(ortran compiler fol-)-.15 F(lo)144 350.4 Q .8
(ws the quasi-standard naming con)-.25 F -.15(ve)-.4 G .801
(ntion for module \214les of).15 F F1(module_name.mod)3.301 E F0 5.801
(.A)C 3.301(sar)-5.801 G(esult,)-3.301 E .176(this v)144 362.4 R .176
(ariable is set to ".mod", by def)-.25 F 2.676(ault. F)-.1 F .175
(or situations in which the compiler does not necessarily)-.15 F(follo)
144 374.4 Q 3.002(wt)-.25 G .502(he normal con)-3.002 F -.15(ve)-.4 G
.502(ntion, the user may use this v).15 F 3.003(ariable. Its)-.25 F -.25
(va)3.003 G .503(lue will be appended to e).25 F -.15(ve)-.25 G(ry).15 E
(module \214le name as scons attempts to resolv)144 386.4 Q 2.5(ed)-.15
G(ependencies.)-2.5 E(FOR)108 415.2 Q(TRANP)-.6 E -1.11(AT)-.92 G(H)1.11
E .319(The list of directories that the F)144 427.2 R .319
(ortran compiler will search for include \214les and \(for some compil-)
-.15 F .02(ers\) module \214les. The F)144 439.2 R .021
(ortran implicit dependenc)-.15 F 2.521(ys)-.15 G .021
(canner will search these directories for include)-2.521 F .566
(\214les \(b)144 451.2 R .566(ut not module \214les since the)-.2 F
3.065(ya)-.15 G .565(re autogenerated and, as such, may not actually e)
-3.065 F .565(xist at the)-.15 F .429(time the scan tak)144 463.2 R .429
(es place\). Don')-.1 F 2.929(te)-.18 G .429
(xplicitly put include directory ar)-3.079 F .43(guments in FOR)-.18 F
(TRANFLA)-.6 E(GS)-.4 E .323(because the result will be non-portable an\
d the directories will not be searched by the dependenc)144 475.2 R(y)
-.15 E(scanner)144 487.2 Q 3.518(.N)-.55 G 1.018
(ote: directory names in FOR)-3.518 F(TRANP)-.6 E -1.11(AT)-.92 G 3.518
(Hw)1.11 G 1.018(ill be look)-3.518 F 1.019(ed-up relati)-.1 F 1.319
-.15(ve t)-.25 H 3.519(ot).15 G 1.019(he SConscript)-3.519 F .666
(directory when the)144 499.2 R 3.166(ya)-.15 G .666
(re used in a command. T)-3.166 F 3.166(of)-.8 G(orce)-3.166 E F1(scons)
3.166 E F0 .666(to look-up a directory relati)3.166 F .965 -.15(ve t)
-.25 H 3.165(ot).15 G(he)-3.165 E(root of the source tree use #:)144
511.2 Q(en)144 535.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(FOR).4 E
(TRANP)-.6 E -1.11(AT)-.92 G(H='#/include'\))1.11 E
(The directory look-up can also be forced using the)144 552 Q F1(Dir)2.5
E F0(\(\) function:)A(include = Dir\('include'\))144 576 Q(en)144 588 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(FOR).4 E(TRANP)-.6 E -1.11(AT)-.92
G(H=include\))1.11 E 1.198(The directory list will be added to command \
lines through the automatically-generated $_FOR-)144 604.8 R(TRANINCFLA)
144 616.8 Q 1.996(GS construction v)-.4 F 1.995
(ariable, which is constructed by appending the v)-.25 F 1.995
(alues of the)-.25 F .12($INCPREFIX and $INCSUFFIX construction v)144
628.8 R .121(ariables to the be)-.25 F .121
(ginning and end of each directory)-.15 F 1.217(in $FOR)144 640.8 R
(TRANP)-.6 E -1.11(AT)-.92 G 3.717(H. An)1.11 F 3.717(yc)-.15 G 1.216
(ommand lines you de\214ne that need the FOR)-3.717 F(TRANP)-.6 E -1.11
(AT)-.92 G 3.716(Hd)1.11 G(irectory)-3.716 E(list should include $_FOR)
144 652.8 Q(TRANINCFLA)-.6 E(GS:)-.4 E(en)144 676.8 Q 2.5(v=E)-.4 G -.4
(nv)-2.5 G(ironment\(FOR).4 E(TRANCOM="my_compiler $_FOR)-.6 E
(TRANINCFLA)-.6 E(GS -c -o $T)-.4 E(ARGET $SOURCE"\))-.93 E(FOR)108
705.6 Q(TRANPPCOM)-.6 E .313(The command line used to compile a F)144
717.6 R .314(ortran source \214le to an object \214le after \214rst run\
ning the \214le)-.15 F 3.363(through the C preprocessor)144 729.6 R
8.363(.B)-.55 G 5.863(yd)-8.363 G(ef)-5.863 E 3.363(ault, an)-.1 F 5.863
(yo)-.15 G 3.362(ptions speci\214ed in the $FOR)-5.863 F(TRANFLA)-.6 E
(GS,)-.4 E(July 2010)286.415 768 Q(85)204.415 E 0 Cg EP
%%Page: 86 86
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R($CPPFLA)144
84 Q .422(GS, $_CPPDEFFLA)-.4 F .422(GS, $_FOR)-.4 F(TRANMODFLA)-.6 E
.422(G, and $_FOR)-.4 F(TRANINCFLA)-.6 E .422(GS con-)-.4 F(struction v)
144 96 Q(ariables are included on this command line.)-.25 E(FOR)108
124.8 Q(TRANPPCOMSTR)-.6 E .414(The string displayed when a F)144 136.8
R .413(ortran source \214le is compiled to an object \214le after \214r\
st running the)-.15 F .255(\214le through the C preprocessor)144 148.8 R
5.255(.I)-.55 G 2.755(ft)-5.255 G .255(his is not set, then $FOR)-2.755
F .256(TRANPPCOM \(the command line\) is)-.6 F(displayed.)144 160.8 Q
(FOR)108 189.6 Q(TRANPPFILESUFFIXES)-.6 E 1.115(The list of \214le e)144
201.6 R 1.114
(xtensions for which the compilation + preprocessor pass for FOR)-.15 F
1.114(TRAN dialect)-.6 F(will be used. By def)144 213.6 Q
(ault, this is ['.fpp', '.FPP'])-.1 E(FOR)108 242.4 Q(TRANSUFFIXES)-.6 E
.162(The list of suf)144 254.4 R<8c78>-.25 E .162
(es of \214les that will be scanned for F)-.15 F .162
(ortran implicit dependencies \(INCLUDE lines)-.15 F
(and USE statements\).)144 266.4 Q(The def)5 E(ault list is:)-.1 E
([".f", ".F", ".for", ".FOR", ".ftn", ".FTN", ".fpp", ".FPP",)144 290.4
Q(".f77", ".F77", ".f90", ".F90", ".f95", ".F95"])144 302.4 Q(FRAMEW)108
331.2 Q(ORKP)-.1 E -1.11(AT)-.92 G(H)1.11 E .773
(On Mac OS X with gcc, a list containing the paths to search for frame)
144 343.2 R -.1(wo)-.25 G 3.273(rks. Used).1 F .773(by the com-)3.273 F
.28(piler to \214nd frame)144 355.2 R -.1(wo)-.25 G .28
(rk-style includes lik).1 F 2.78(e#)-.1 G .28(include <Fmwk/Header)-2.78
F 2.78(.h>. Used)-.55 F .28(by the link)2.78 F .28(er to \214nd)-.1 F
(user)144 367.2 Q(-speci\214ed frame)-.2 E -.1(wo)-.25 G
(rks when linking \(see $FRAMEW).1 E 2.5(ORKS\). F)-.1 F(or e)-.15 E
(xample:)-.15 E(en)146.5 391.2 Q -.65(v.)-.4 G(AppendUnique\(FRAMEW).65
E(ORKP)-.1 E -1.11(AT)-.92 G(H='#myframe)1.11 E -.1(wo)-.25 G(rkdir'\))
.1 E(will add)144 408 Q(... -Fmyframe)149 432 Q -.1(wo)-.25 G(rkdir).1 E
(to the compiler and link)144 448.8 Q(er command lines.)-.1 E(_FRAMEW)
108 477.6 Q(ORKP)-.1 E -1.11(AT)-.92 G(H)1.11 E 1.392
(On Mac OS X with gcc, an automatically-generated construction v)144
489.6 R 1.391(ariable containing the link)-.25 F(er)-.1 E
(command-line options corresponding to $FRAMEW)144 501.6 Q(ORKP)-.1 E
-1.11(AT)-.92 G(H.)1.11 E(FRAMEW)108 530.4 Q(ORKP)-.1 E -1.11(AT)-.92 G
(HPREFIX)1.11 E 2.842
(On Mac OS X with gcc, the pre\214x to be used for the FRAMEW)144 542.4
R(ORKP)-.1 E -1.11(AT)-.92 G 5.342(He)1.11 G 5.342(ntries. \(see)-5.342
F($FRAMEW)144 554.4 Q(ORKP)-.1 E -1.11(AT)-.92 G 2.5(H\). The)1.11 F
(def)2.5 E(ault v)-.1 E(alue is)-.25 E/F1 10/Times-Bold@0 SF<ad46>2.5 E
F0(.)A(FRAMEW)108 583.2 Q(ORKPREFIX)-.1 E .511
(On Mac OS X with gcc, the pre\214x to be used for linking in frame)144
595.2 R -.1(wo)-.25 G .51(rks \(see $FRAMEW).1 F(ORKS\).)-.1 E(The def)
144 607.2 Q(ault v)-.1 E(alue is)-.25 E F1(\255framew)2.5 E(ork)-.1 E F0
(.)A(_FRAMEW)108 636 Q(ORKS)-.1 E 1.392
(On Mac OS X with gcc, an automatically-generated construction v)144 648
R 1.392(ariable containing the link)-.25 F(er)-.1 E
(command-line options for linking with FRAMEW)144 660 Q(ORKS.)-.1 E
(FRAMEW)108 688.8 Q(ORKS)-.1 E 1.454
(On Mac OS X with gcc, a list of the frame)144 700.8 R -.1(wo)-.25 G
1.454(rk names to be link).1 F 1.454(ed into a program or shared)-.1 F
(library or b)144 712.8 Q 2.5(undle. The)-.2 F(def)2.5 E(ault v)-.1 E
(alue is the empty list.)-.25 E -.15(Fo)5 G 2.5(re).15 G(xample:)-2.65 E
(July 2010)286.415 768 Q(86)204.415 E 0 Cg EP
%%Page: 87 87
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)146.5 84
Q -.65(v.)-.4 G(AppendUnique\(FRAMEW).65 E
(ORKS=Split\('System Cocoa SystemCon\214guration'\)\))-.1 E(FRAMEW)108
100.8 Q(ORKSFLA)-.1 E(GS)-.4 E 1.272(On Mac OS X with gcc, general user)
144 112.8 R 1.272(-supplied frame)-.2 F -.1(wo)-.25 G 1.273
(rks options to be added at the end of a).1 F .944(command line b)144
124.8 R .943(uilding a loadable module.)-.2 F .943(\(This has been lar)
5.943 F .943(gely superseded by the $FRAME-)-.18 F -.1(WO)144 136.8 S
(RKP).1 E -1.11(AT)-.92 G .947(H, $FRAMEW)1.11 F(ORKP)-.1 E -1.11(AT)
-.92 G .947(HPREFIX, $FRAMEW)1.11 F .948(ORKPREFIX and $FRAMEW)-.1 F
(ORKS)-.1 E -.25(va)144 148.8 S(riables described abo).25 E -.15(ve)-.15
G(.\)).15 E(GS)108 177.6 Q(The Ghostscript program used to con)144 177.6
Q -.15(ve)-.4 G(rt PostScript to PDF \214les.).15 E(GSCOM)108 206.4 Q
(The Ghostscript command line used to con)144 218.4 Q -.15(ve)-.4 G
(rt PostScript to PDF \214les.).15 E(GSCOMSTR)108 247.2 Q .55
(The string displayed when Ghostscript is used to con)144 259.2 R -.15
(ve)-.4 G .549(rt a PostScript \214le to a PDF \214le.).15 F .549
(If this is)5.549 F
(not set, then $GSCOM \(the command line\) is displayed.)144 271.2 Q
(GSFLA)108 300 Q(GS)-.4 E
(General options passed to the Ghostscript program when con)144 312 Q
-.15(ve)-.4 G(rting PostScript to PDF \214les.).15 E(HOST_ARCH)108 340.8
Q .526(Sets the host architecture for V)144 352.8 R .526
(isual Studio compiler)-.6 F 3.026(.I)-.55 G 3.026(fn)-3.026 G .526
(ot set, def)-3.026 F .527(ault to the detected host archi-)-.1 F .078
(tecture: note that this may depend on the p)144 364.8 R .078
(ython you are using.)-.1 F .078(This v)5.078 F .077
(ariable must be passed as an)-.25 F(ar)144 376.8 Q(gument to the En)
-.18 E(vironment\(\) constructor; setting it later has no ef)-.4 E
(fect.)-.25 E -1.11(Va)144 400.8 S(lid v)1.11 E
(alues are the same as for $T)-.25 E(ARGET_ARCH.)-.93 E
(This is currently only used on W)144 424.8 Q(indo)-.4 E(ws, b)-.25 E
(ut in the future it will be used on other OSes as well.)-.2 E(HOST_OS)
108 453.6 Q(The name of the host operating system used to create the En)
164 465.6 Q(vironment.)-.4 E
(If a platform is speci\214ed when creating the En)164 477.6 Q
(vironment, then)-.4 E(that Platform')164 489.6 Q 2.5(sl)-.55 G
(ogic will handle setting this v)-2.5 E(alue.)-.25 E(This v)164 501.6 Q
(alue is immutable, and should not be changed by the user after)-.25 E
(the En)164 513.6 Q(vironment is initialized.)-.4 E
(Currently only set for W)164 525.6 Q(in32.)-.4 E(IDLSUFFIXES)108 554.4
Q .368(The list of suf)144 566.4 R<8c78>-.25 E .368(es of \214les that \
will be scanned for IDL implicit dependencies \(#include or import)-.15
F 2.5(lines\). The)144 578.4 R(def)2.5 E(ault list is:)-.1 E
([".idl", ".IDL"])144 602.4 Q(IMPLICIT_COMMAND_DEPENDENCIES)108 631.2 Q
.109(Controls whether or not SCons will add implicit dependencies for t\
he commands e)144 643.2 R -.15(xe)-.15 G .109(cuted to b).15 F(uild)-.2
E(tar)144 655.2 Q(gets.)-.18 E .395(By def)144 679.2 R .395
(ault, SCons will add to each tar)-.1 F .395(get an implicit dependenc)
-.18 F 2.896(yo)-.15 G 2.896(nt)-2.896 G .396(he command represented by)
-2.896 F .428(the \214rst ar)144 691.2 R .428(gument on an)-.18 F 2.928
(yc)-.15 G .428(ommand line it e)-2.928 F -.15(xe)-.15 G 2.927
(cutes. The).15 F .427(speci\214c \214le for the dependenc)2.927 F 2.927
(yi)-.15 G 2.927(sf)-2.927 G(ound)-2.927 E(by searching the)144 703.2 Q
/F1 10/Times-Italic@0 SF -1.07 -.9(PA T)2.5 H(H).9 E F0 -.25(va)3.45 G
(riable in the).25 E F1(ENV)3.01 E F0(en)3.77 E(vironment used to e)-.4
E -.15(xe)-.15 G(cute the command.).15 E 1.443(If the construction v)144
727.2 R 1.443(ariable $IMPLICIT_COMMAND_DEPENDENCIES is set to a f)-.25
F 1.443(alse v)-.1 F(alue)-.25 E(July 2010)286.415 768 Q(87)204.415 E 0
Cg EP
%%Page: 88 88
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(\()144 84 Q
/F1 10/Times-Bold@0 SF(None)A F0(,)A F1 -.25(Fa)2.869 G(lse).25 E F0(,)A
F1(0)2.869 E F0 2.869(,e)C .368(tc.\), then the implicit dependenc)
-2.869 F 2.868(yw)-.15 G .368(ill not be added to the tar)-2.868 F .368
(gets b)-.18 F .368(uilt with that)-.2 F(construction en)144 96 Q
(vironment.)-.4 E(en)144 120 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(IMPLICIT_COMMAND_DEPENDENCIES = 0\)).4 E(INCPREFIX)108 148.8
Q 1.281(The pre\214x used to specify an include directory on the C comp\
iler command line.)144 160.8 R 1.281(This will be)6.281 F .951
(appended to the be)144 172.8 R .951
(ginning of each directory in the $CPPP)-.15 F -1.11(AT)-.92 G 3.451(Ha)
1.11 G .95(nd $FOR)-3.451 F(TRANP)-.6 E -1.11(AT)-.92 G 3.45(Hc)1.11 G
(onstruc-)-3.45 E .726(tion v)144 184.8 R .726
(ariables when the $_CPPINCFLA)-.25 F .727(GS and $_FOR)-.4 F
(TRANINCFLA)-.6 E .727(GS v)-.4 F .727(ariables are automati-)-.25 F
(cally generated.)144 196.8 Q(INCSUFFIX)108 225.6 Q 1.331(The suf)144
237.6 R 1.331(\214x used to specify an include directory on the C compi\
ler command line.)-.25 F 1.33(This will be)6.33 F .266
(appended to the end of each directory in the $CPPP)144 249.6 R -1.11
(AT)-.92 G 2.766(Ha)1.11 G .266(nd $FOR)-2.766 F(TRANP)-.6 E -1.11(AT)
-.92 G 2.767(Hc)1.11 G .267(onstruction v)-2.767 F(ari-)-.25 E .391
(ables when the $_CPPINCFLA)144 261.6 R .391(GS and $_FOR)-.4 F
(TRANINCFLA)-.6 E .391(GS v)-.4 F .391(ariables are automatically gen-)
-.25 F(erated.)144 273.6 Q(INST)108 302.4 Q(ALL)-.93 E 2.625(Af)144
314.4 S .125(unction to be called to install a \214le into a destinatio\
n \214le name.)-2.625 F .125(The def)5.125 F .125
(ault function copies the)-.1 F 1.752
(\214le into the destination \(and sets the destination \214le')144
326.4 R 4.252(sm)-.55 G 1.752(ode and permission bits to match the)
-4.252 F(source \214le')144 338.4 Q 2.5(s\). The)-.55 F(function tak)2.5
E(es the follo)-.1 E(wing ar)-.25 E(guments:)-.18 E
(def install\(dest, source, en)144 362.4 Q(v\):)-.4 E/F2 10
/Times-Italic@0 SF(dest)144.35 379.2 Q F0 .349
(is the path name of the destination \214le.)3.529 F F2(sour)5.689 E(ce)
-.37 E F0 .349(is the path name of the source \214le.)3.029 F F2(en)
5.539 E(v)-.4 E F0 .349(is the)3.169 F(construction en)144 391.2 Q
(vironment \(a dictionary of construction v)-.4 E
(alues\) in force for this \214le installation.)-.25 E(INST)108 420 Q
(ALLSTR)-.93 E(The string displayed when a \214le is installed into a d\
estination \214le name.)144 432 Q(The def)5 E(ault is:)-.1 E
(Install \214le: "$SOURCE" as "$T)144 444 Q(ARGET")-.93 E
(INTEL_C_COMPILER_VERSION)108 472.8 Q(Set by the "intelc" T)144 484.8 Q
(ool to the major v)-.8 E
(ersion number of the Intel C compiler selected for use.)-.15 E -.6(JA)
108 513.6 S(R).6 E(The Ja)144 513.6 Q .5 -.25(va a)-.2 H(rchi).25 E .3
-.15(ve t)-.25 H(ool.).15 E -.6(JA)108 542.4 S(RCHDIR).6 E
(The directory to which the Ja)144 554.4 Q .5 -.25(va a)-.2 H(rchi).25 E
.3 -.15(ve t)-.25 H(ool should change \(using the).15 E F1<ad43>2.5 E F0
(option\).)2.5 E -.6(JA)108 583.2 S(RCOM).6 E
(The command line used to call the Ja)144 595.2 Q .5 -.25(va a)-.2 H
(rchi).25 E .3 -.15(ve t)-.25 H(ool.).15 E -.6(JA)108 624 S(RCOMSTR).6 E
1.094(The string displayed when the Ja)144 636 R 1.594 -.25(va a)-.2 H
(rchi).25 E 1.394 -.15(ve t)-.25 H 1.094
(ool is called If this is not set, then $J).15 F 1.094(ARCOM \(the)-.6 F
(command line\) is displayed.)144 648 Q(en)144 672 Q 2.5(v=E)-.4 G -.4
(nv)-2.5 G(ironment\(J).4 E(ARCOMSTR = "J)-.6 E(ARchi)-.6 E
(ving $SOURCES into $T)-.25 E(ARGET"\))-.93 E -.6(JA)108 700.8 S(RFLA).6
E(GS)-.4 E .359(General options passed to the Ja)144 712.8 R .859 -.25
(va a)-.2 H(rchi).25 E .659 -.15(ve t)-.25 H 2.859(ool. By).15 F(def)
2.859 E .36(ault this is set to)-.1 F F1(cf)2.86 E F0 .36
(to create the necessary)2.86 F F1(jar)144 724.8 Q F0(\214le.)2.5 E
(July 2010)286.415 768 Q(88)204.415 E 0 Cg EP
%%Page: 89 89
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R -.6(JA)108
84 S(RSUFFIX).6 E(The suf)144 96 Q(\214x for Ja)-.25 E .5 -.25(va a)-.2
H(rchi).25 E -.15(ve)-.25 G(s:).15 E/F1 10/Times-Bold@0 SF(.jar)2.5 E F0
(by def)2.5 E(ault.)-.1 E -.6(JA)108 124.8 S -1.35(VA)-.75 G(BOO)1.35 E
(TCLASSP)-.4 E -1.11(AT)-.92 G(H)1.11 E .188
(Speci\214es the list of directories that will be added to the &ja)144
136.8 R -.25(va)-.2 G .188(c; command line via the).25 F F1
(\255bootclass-)2.688 E(path)144 148.8 Q F0 2.671(option. The)2.671 F
(indi)2.671 E .171
(vidual directory names will be separated by the operating system')-.25
F 2.672(sp)-.55 G .172(ath sep-)-2.672 F(arate character \()144 160.8 Q
F1(:)A F0(on UNIX/Linux/POSIX,)2.5 E F1(;)2.5 E F0(on W)2.5 E(indo)-.4 E
(ws\).)-.25 E -.6(JA)108 189.6 S -.2 -1.35(VA C)-.75 H(The Ja)144 189.6
Q .5 -.25(va c)-.2 H(ompiler).25 E(.)-.55 E -.6(JA)108 218.4 S -.2 -1.35
(VA C)-.75 H(COM)1.35 E .704
(The command line used to compile a directory tree containing Ja)144
230.4 R 1.203 -.25(va s)-.2 H .703(ource \214les to corresponding).25 F
(Ja)144 242.4 Q .512 -.25(va c)-.2 H .012(lass \214les.).25 F(An)5.012 E
2.512(yo)-.15 G .012(ptions speci\214ed in the $J)-2.512 F -.2 -1.35
(AVA C)-.6 H(FLA)1.35 E .012(GS construction v)-.4 F .013
(ariable are included on)-.25 F(this command line.)144 254.4 Q -.6(JA)
108 283.2 S -.2 -1.35(VA C)-.75 H(COMSTR)1.35 E 1.133
(The string displayed when compiling a directory tree of Ja)144 295.2 R
1.633 -.25(va s)-.2 H 1.133(ource \214les to corresponding Ja).25 F -.25
(va)-.2 G(class \214les.)144 307.2 Q(If this is not set, then $J)5 E -.2
-1.35(AVA C)-.6 H(COM \(the command line\) is displayed.)1.35 E(en)144
331.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(J).4 E -.2 -1.35(AVA C)-.6
H(COMSTR = "Compiling class \214les $T)1.35 E(ARGETS from $SOURCES"\))
-.93 E -.6(JA)108 360 S -.2 -1.35(VA C)-.75 H(FLA)1.35 E(GS)-.4 E
(General options that are passed to the Ja)144 372 Q .5 -.25(va c)-.2 H
(ompiler).25 E(.)-.55 E -.6(JA)108 400.8 S -.2 -1.35(VA C)-.75 H
(LASSDIR)1.35 E .612(The directory in which Ja)144 412.8 R 1.112 -.25
(va c)-.2 H .612(lass \214les may be found.).25 F .613
(This is stripped from the be)5.612 F .613(ginning of an)-.15 F(y)-.15 E
(Ja)144 424.8 Q .5 -.25(va .)-.2 H(class \214le names supplied to the)
.25 E F1 -.15(Ja)2.5 G -.1(va)-.1 G(H).1 E F0 -.2(bu)2.5 G(ilder).2 E(.)
-.55 E -.6(JA)108 453.6 S -.2 -1.35(VA C)-.75 H(LASSP)1.35 E -1.11(AT)
-.92 G(H)1.11 E .35
(Speci\214es the list of directories that will be searched for Ja)144
465.6 R -.25(va)-.2 G F1(.class)3.099 E F0 2.849(\214le. The)2.849 F
.349(directories in this list)2.849 F .45(will be added to the &ja)144
477.6 R -.25(va)-.2 G .45(c; and &ja).25 F -.25(va)-.2 G .45
(h; command lines via the).25 F F1(\255classpath)2.95 E F0 2.95
(option. The)2.95 F(indi)2.95 E(vid-)-.25 E 1.904
(ual directory names will be separated by the operating system')144
489.6 R 4.403(sp)-.55 G 1.903(ath separate character \()-4.403 F F1(:)A
F0(on)4.403 E(UNIX/Linux/POSIX,)144 501.6 Q F1(;)2.5 E F0(on W)2.5 E
(indo)-.4 E(ws\).)-.25 E .3
(Note that this currently just adds the speci\214ed directory via the)
144 525.6 R F1(\255classpath)2.8 E F0 2.8(option. &SCons;)2.8 F(does)2.8
E(not currently search the $J)144 537.6 Q -.2 -1.35(AVA C)-.6 H(LASSP)
1.35 E -1.11(AT)-.92 G 2.5(Hd)1.11 G(irectories for dependenc)-2.5 E(y)
-.15 E F1(.class)2.5 E F0(\214les.)2.5 E -.6(JA)108 566.4 S -.2 -1.35
(VA C)-.75 H(LASSSUFFIX)1.35 E(The suf)144 578.4 Q(\214x for Ja)-.25 E
.5 -.25(va c)-.2 H(lass \214les;).25 E F1(.class)2.5 E F0(by def)2.5 E
(ault.)-.1 E -.6(JA)108 607.2 S -1.35(VA)-.75 G(H)1.35 E(The Ja)144
607.2 Q .5 -.25(va g)-.2 H(enerator for C header and stub \214les.).25 E
-.6(JA)108 636 S -1.35(VA)-.75 G(HCOM)1.35 E .313
(The command line used to generate C header and stub \214les from Ja)144
648 R .812 -.25(va c)-.2 H 2.812(lasses. An).25 F 2.812(yo)-.15 G .312
(ptions speci-)-2.812 F(\214ed in the $J)144 660 Q -1.35(AVA)-.6 G(HFLA)
1.35 E(GS construction v)-.4 E
(ariable are included on this command line.)-.25 E -.6(JA)108 688.8 S
-1.35(VA)-.75 G(HCOMSTR)1.35 E .759(The string displayed when C header \
and stub \214les are generated from Ja)144 700.8 R 1.26 -.25(va c)-.2 H
3.26(lasses. If).25 F .76(this is not)3.26 F(set, then $J)144 712.8 Q
-1.35(AVA)-.6 G(HCOM \(the command line\) is displayed.)1.35 E
(July 2010)286.415 768 Q(89)204.415 E 0 Cg EP
%%Page: 90 90
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)144 84 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(J).4 E -1.35(AVA)-.6 G
(HCOMSTR = "Generating header/stub \214le\(s\) $T)1.35 E
(ARGETS from $SOURCES"\))-.93 E -.6(JA)108 112.8 S -1.35(VA)-.75 G(HFLA)
1.35 E(GS)-.4 E(General options passed to the C header and stub \214le \
generator for Ja)144 124.8 Q .5 -.25(va c)-.2 H(lasses.).25 E -.6(JA)108
153.6 S -1.35(VA)-.75 G(SOURCEP)1.35 E -1.11(AT)-.92 G(H)1.11 E .278
(Speci\214es the list of directories that will be searched for input)144
165.6 R/F1 10/Times-Bold@0 SF(.ja)2.778 E -.1(va)-.25 G F0 2.777
(\214le. The)2.877 F .277(directories in this list)2.777 F .483
(will be added to the &ja)144 177.6 R -.25(va)-.2 G .484
(c; command line via the).25 F F1(\255sour)2.984 E(cepath)-.18 E F0
2.984(option. The)2.984 F(indi)2.984 E .484(vidual directory)-.25 F
6.664(names will be separated by the operating system')144 189.6 R 9.164
(sp)-.55 G 6.664(ath separate character \()-9.164 F F1(:)A F0(on)9.164 E
(UNIX/Linux/POSIX,)144 201.6 Q F1(;)2.5 E F0(on W)2.5 E(indo)-.4 E
(ws\).)-.25 E 1.341
(Note that this currently just adds the speci\214ed directory via the)
144 225.6 R F1(\255sour)3.842 E(cepath)-.18 E F0 3.842(option. &SCons;)
3.842 F(does not currently search the $J)144 237.6 Q -1.35(AVA)-.6 G
(SOURCEP)1.35 E -1.11(AT)-.92 G 2.5(Hd)1.11 G(irectories for dependenc)
-2.5 E(y)-.15 E F1(.ja)2.5 E -.1(va)-.25 G F0(\214les.)2.6 E -.6(JA)108
266.4 S -1.35(VA)-.75 G(SUFFIX)1.35 E(The suf)144 278.4 Q(\214x for Ja)
-.25 E .5 -.25(va \214)-.2 H(les;).25 E F1(.ja)2.5 E -.1(va)-.25 G F0
(by def)2.6 E(ault.)-.1 E -.6(JA)108 307.2 S -1.35(VAV)-.75 G(ERSION)
1.35 E .024(Speci\214es the Ja)144 319.2 R .524 -.25(va v)-.2 H .024
(ersion being used by the).1 F F1 -.15(Ja)2.524 G -.1(va)-.1 G F0 .024
(\(\) b).1 F(uilder)-.2 E 5.023(.T)-.55 G .023(his is)-5.023 F/F2 10
/Times-Italic@0 SF(not)2.523 E F0 .023(currently used to select one)
2.523 F -.15(ve)144 331.2 S .148(rsion of the Ja).15 F .649 -.25(va c)
-.2 H .149(ompiler vs. another).25 F 5.149(.I)-.55 G .149
(nstead, you should set this to specify the v)-5.149 F .149
(ersion of Ja)-.15 F -.25(va)-.2 G(supported by your &ja)144 343.2 Q
-.25(va)-.2 G(c; compiler).25 E 5(.T)-.55 G(he def)-5 E(ault is)-.1 E F1
(1.4)2.5 E F0(.)A .918(This is sometimes necessary because Ja)144 367.2
R 1.418 -.25(va 1)-.2 H .918
(.5 changed the \214le names that are created for nested).25 F(anon)144
379.2 Q .311(ymous inner classes, which can cause a mismatch with the \
\214les that &SCons; e)-.15 F .312(xpects will be)-.15 F 1.201
(generated by the &ja)144 391.2 R -.25(va)-.2 G 1.201(c; compiler).25 F
6.201(.S)-.55 G 1.201(etting $J)-6.201 F -1.35(AVAV)-.6 G 1.201
(ERSION to)1.35 F F1(1.5)3.701 E F0(\(or)3.701 E F1(1.6)3.701 E F0 3.7
(,a)C 3.7(sa)-3.7 G 1.2(ppropriate\) can)-3.7 F(mak)144 403.2 Q 2.5(e&)
-.1 G(SCons; realize that a Ja)-2.5 E .5 -.25(va 1)-.2 H(.5 or 1.6 b).25
E(uild is actually up to date.)-.2 E(LA)108 432 Q(TEX)-1.11 E(The LaT)
144 444 Q(eX structured formatter and typesetter)-.7 E(.)-.55 E(LA)108
472.8 Q(TEXCOM)-1.11 E(The command line used to call the LaT)144 484.8 Q
(eX structured formatter and typesetter)-.7 E(.)-.55 E(LA)108 513.6 Q
(TEXCOMSTR)-1.11 E .265(The string displayed when calling the LaT)144
525.6 R .265(eX structured formatter and typesetter)-.7 F 5.266(.I)-.55
G 2.766(ft)-5.266 G .266(his is not set,)-2.766 F(then $LA)144 537.6 Q
(TEXCOM \(the command line\) is displayed.)-1.11 E(en)144 561.6 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(LA).4 E(TEXCOMSTR = "Building $T)
-1.11 E(ARGET from LaT)-.93 E(eX input $SOURCES"\))-.7 E(LA)108 590.4 Q
(TEXFLA)-1.11 E(GS)-.4 E(General options passed to the LaT)144 602.4 Q
(eX structured formatter and typesetter)-.7 E(.)-.55 E(LA)108 631.2 Q
(TEXRETRIES)-1.11 E .788(The maximum number of times that LaT)144 643.2
R .787(eX will be re-run if the)-.7 F F1(.log)3.287 E F0 .787
(generated by the $LA)3.287 F(TEX-)-1.11 E 1.801
(COM command indicates that there are unde\214ned references.)144 655.2
R 1.802(The def)6.801 F 1.802(ault is to try to resolv)-.1 F(e)-.15 E
(unde\214ned references by re-running LaT)144 667.2 Q
(eX up to three times.)-.7 E(LA)108 696 Q(TEXSUFFIXES)-1.11 E 1.643
(The list of suf)144 708 R<8c78>-.25 E 1.643
(es of \214les that will be scanned for LaT)-.15 F 1.642
(eX implicit dependencies \()-.7 F F1(\\include)A F0(or)4.142 E F1
(\\import)144 720 Q F0 2.5(\214les\). The)2.5 F(def)2.5 E(ault list is:)
-.1 E(July 2010)286.415 768 Q(90)204.415 E 0 Cg EP
%%Page: 91 91
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R([".te)144
84 Q(x", ".ltx", ".late)-.15 E(x"])-.15 E(LDMODULE)108 112.8 Q(The link)
144 124.8 Q(er for b)-.1 E(uilding loadable modules.)-.2 E(By def)5 E
(ault, this is the same as $SHLINK.)-.1 E(LDMODULECOM)108 153.6 Q .961
(The command line for b)144 165.6 R .961(uilding loadable modules.)-.2 F
.962(On Mac OS X, this uses the $LDMODULE,)5.961 F($LDMODULEFLA)144
177.6 Q 2.093(GS and $FRAMEW)-.4 F(ORKSFLA)-.1 E 2.092(GS v)-.4 F 4.592
(ariables. On)-.25 F 2.092(other systems, this is the)4.592 F
(same as $SHLINK.)144 189.6 Q(LDMODULECOMSTR)108 218.4 Q .307
(The string displayed when b)144 230.4 R .308(uilding loadable modules.)
-.2 F .308(If this is not set, then $LDMODULECOM)5.308 F
(\(the command line\) is displayed.)144 242.4 Q(LDMODULEFLA)108 271.2 Q
(GS)-.4 E(General user options passed to the link)144 283.2 Q(er for b)
-.1 E(uilding loadable modules.)-.2 E(LDMODULEPREFIX)108 312 Q .211
(The pre\214x used for loadable module \214le names.)144 324 R .211
(On Mac OS X, this is null; on other systems, this)5.211 F
(is the same as $SHLIBPREFIX.)144 336 Q(LDMODULESUFFIX)108 364.8 Q .255
(The suf)144 376.8 R .255(\214x used for loadable module \214le names.)
-.25 F .256(On Mac OS X, this is null; on other systems, this)5.255 F
(is the same as $SHLIBSUFFIX.)144 388.8 Q(LEX)108 417.6 Q(The le)144
417.6 Q(xical analyzer generator)-.15 E(.)-.55 E(LEXCOM)108 446.4 Q
(The command line used to call the le)144 458.4 Q
(xical analyzer generator to generate a source \214le.)-.15 E(LEXCOMSTR)
108 487.2 Q .693
(The string displayed when generating a source \214le using the le)144
499.2 R .692(xical analyzer generator)-.15 F 5.692(.I)-.55 G 3.192(ft)
-5.692 G .692(his is)-3.192 F
(not set, then $LEXCOM \(the command line\) is displayed.)144 511.2 Q
(en)144 535.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(LEXCOMSTR = "Le).4
E(x'ing $T)-.15 E(ARGET from $SOURCES"\))-.93 E(LEXFLA)108 564 Q(GS)-.4
E(General options passed to the le)144 576 Q(xical analyzer generator)
-.15 E(.)-.55 E(_LIBDIRFLA)108 604.8 Q(GS)-.4 E .743
(An automatically-generated construction v)144 616.8 R .743
(ariable containing the link)-.25 F .744(er command-line options for)-.1
F 1.487(specifying directories to be searched for library)144 628.8 R
6.487(.T)-.65 G 1.487(he v)-6.487 F 1.487(alue of $_LIBDIRFLA)-.25 F
1.487(GS is created by)-.4 F .423
(appending $LIBDIRPREFIX and $LIBDIRSUFFIX to the be)144 640.8 R .424
(ginning and end of each directory in)-.15 F($LIBP)144 652.8 Q -1.11(AT)
-.92 G(H.)1.11 E(LIBDIRPREFIX)108 681.6 Q .559
(The pre\214x used to specify a library directory on the link)144 693.6
R .559(er command line.)-.1 F .558(This will be appended)5.558 F 2.383
(to the be)144 705.6 R 2.384(ginning of each directory in the $LIBP)-.15
F -1.11(AT)-.92 G 4.884(Hc)1.11 G 2.384(onstruction v)-4.884 F 2.384
(ariable when the $_LIB-)-.25 F(DIRFLA)144 717.6 Q(GS v)-.4 E
(ariable is automatically generated.)-.25 E(July 2010)286.415 768 Q(91)
204.415 E 0 Cg EP
%%Page: 92 92
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(LIBDIRSUFFIX)108 84 Q .609(The suf)144 96 R .609
(\214x used to specify a library directory on the link)-.25 F .609
(er command line.)-.1 F .608(This will be appended)5.608 F .864
(to the end of each directory in the $LIBP)144 108 R -1.11(AT)-.92 G
3.365(Hc)1.11 G .865(onstruction v)-3.365 F .865
(ariable when the $_LIBDIRFLA)-.25 F(GS)-.4 E -.25(va)144 120 S
(riable is automatically generated.).25 E(_LIBFLA)108 148.8 Q(GS)-.4 E
.744(An automatically-generated construction v)144 160.8 R .743
(ariable containing the link)-.25 F .743(er command-line options for)-.1
F .076(specifying libraries to be link)144 172.8 R .077
(ed with the resulting tar)-.1 F 2.577(get. The)-.18 F -.25(va)2.577 G
.077(lue of $_LIBFLA).25 F .077(GS is created by)-.4 F .337
(appending $LIBLINKPREFIX and $LIBLINKSUFFIX to the be)144 184.8 R .336
(ginning and end of each \214lename)-.15 F(in $LIBS.)144 196.8 Q
(LIBLINKPREFIX)108 225.6 Q .495
(The pre\214x used to specify a library to link on the link)144 237.6 R
.496(er command line.)-.1 F .496(This will be appended to)5.496 F .526
(the be)144 249.6 R .526
(ginning of each library in the $LIBS construction v)-.15 F .525
(ariable when the $_LIBFLA)-.25 F .525(GS v)-.4 F(ariable)-.25 E
(is automatically generated.)144 261.6 Q(LIBLINKSUFFIX)108 290.4 Q .54
(The suf)144 302.4 R .54
(\214x used to specify a library to link on the link)-.25 F .54
(er command line.)-.1 F .54(This will be appended to)5.54 F .002
(the end of each library in the $LIBS construction v)144 314.4 R .001
(ariable when the $_LIBFLA)-.25 F .001(GS v)-.4 F .001(ariable is auto-)
-.25 F(matically generated.)144 326.4 Q(LIBP)108 355.2 Q -1.11(AT)-.92 G
(H)1.11 E 1.278
(The list of directories that will be searched for libraries.)144 367.2
R 1.278(The implicit dependenc)6.278 F 3.778(ys)-.15 G 1.278
(canner will)-3.778 F 2.423
(search these directories for include \214les. Don')144 379.2 R 4.922
(te)-.18 G 2.422(xplicitly put include directory ar)-5.072 F 2.422
(guments in)-.18 F($LINKFLA)144 391.2 Q 1.457(GS or $SHLINKFLA)-.4 F
1.457(GS because the result will be non-portable and the directories)-.4
F 2.077(will not be searched by the dependenc)144 403.2 R 4.577(ys)-.15
G(canner)-4.577 E 4.577(.N)-.55 G 2.077(ote: directory names in LIBP)
-4.577 F -1.11(AT)-.92 G 4.577(Hw)1.11 G 2.077(ill be)-4.577 F(look)144
415.2 Q .035(ed-up relati)-.1 F .335 -.15(ve t)-.25 H 2.535(ot).15 G
.035(he SConscript directory when the)-2.535 F 2.536(ya)-.15 G .036
(re used in a command. T)-2.536 F 2.536(of)-.8 G(orce)-2.536 E/F1 10
/Times-Bold@0 SF(scons)2.536 E F0(to)2.536 E(look-up a directory relati)
144 427.2 Q .3 -.15(ve t)-.25 H 2.5(ot).15 G
(he root of the source tree use #:)-2.5 E(en)144 451.2 Q 2.5(v=E)-.4 G
-.4(nv)-2.5 G(ironment\(LIBP).4 E -1.11(AT)-.92 G(H='#/libs'\))1.11 E
(The directory look-up can also be forced using the)144 468 Q F1(Dir)2.5
E F0(\(\) function:)A(libs = Dir\(')144 492 Q(libs'\))-.1 E(en)144 504 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(LIBP).4 E -1.11(AT)-.92 G
(H=libs\))1.11 E 1.477(The directory list will be added to command line\
s through the automatically-generated $_LIB-)144 520.8 R(DIRFLA)144
532.8 Q 1.852(GS construction v)-.4 F 1.852
(ariable, which is constructed by appending the v)-.25 F 1.853
(alues of the $LIB-)-.25 F .26
(DIRPREFIX and $LIBDIRSUFFIX construction v)144 544.8 R .26
(ariables to the be)-.25 F .26(ginning and end of each direc-)-.15 F .77
(tory in $LIBP)144 556.8 R -1.11(AT)-.92 G 3.27(H. An)1.11 F 3.27(yc)
-.15 G .771(ommand lines you de\214ne that need the LIBP)-3.27 F -1.11
(AT)-.92 G 3.271(Hd)1.11 G .771(irectory list should)-3.271 F
(include $_LIBDIRFLA)144 568.8 Q(GS:)-.4 E(en)144 592.8 Q 2.5(v=E)-.4 G
-.4(nv)-2.5 G(ironment\(LINKCOM="my_link).4 E(er $_LIBDIRFLA)-.1 E
(GS $_LIBFLA)-.4 E(GS -o $T)-.4 E(ARGET $SOURCE"\))-.93 E(LIBPREFIX)108
621.6 Q 1.461(The pre\214x used for \(static\) library \214le names.)144
633.6 R 3.961(Ad)6.461 G(ef)-3.961 E 1.461(ault v)-.1 F 1.46
(alue is set for each platform \(posix,)-.25 F .618
(win32, os2, etc.\), b)144 645.6 R .618(ut the v)-.2 F .619(alue is o)
-.25 F -.15(ve)-.15 G .619(rridden by indi).15 F .619(vidual tools \(ar)
-.25 F 3.119(,m)-.4 G .619(slib, sgiar)-3.119 F 3.119(,s)-.4 G(unar)
-3.119 E 3.119(,t)-.4 G .619(lib, etc.\))-3.119 F
(to re\215ect the names of the libraries the)144 657.6 Q 2.5(yc)-.15 G
(reate.)-2.5 E(LIBPREFIXES)108 686.4 Q 2.854(Al)144 698.4 S .354
(ist of all le)-2.854 F -.05(ga)-.15 G 2.854(lp).05 G(re\214x)-2.854 E
.354(es for library \214le names.)-.15 F .354
(When searching for library dependencies, SCons)5.354 F .753
(will look for \214les with these pre\214x)144 710.4 R .753
(es, the base library name, and suf)-.15 F<8c78>-.25 E .754
(es in the $LIBSUFFIXES)-.15 F(list.)144 722.4 Q(July 2010)286.415 768 Q
(92)204.415 E 0 Cg EP
%%Page: 93 93
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(LIBS)108 84
Q 3.625(Al)144 84 S 1.124
(ist of one or more libraries that will be link)-3.625 F 1.124
(ed with an)-.1 F 3.624(ye)-.15 G -.15(xe)-3.774 G 1.124
(cutable programs created by this).15 F(en)144 96 Q(vironment.)-.4 E
5.373(The library list will be added to command lines through the autom\
atically-generated)144 120 R($_LIBFLA)144 132 Q 1.112(GS construction v)
-.4 F 1.112(ariable, which is constructed by appending the v)-.25 F
1.111(alues of the $LIB-)-.25 F 1.42
(LINKPREFIX and $LIBLINKSUFFIX construction v)144 144 R 1.42
(ariables to the be)-.25 F 1.42(ginning and end of each)-.15 F .467
(\214lename in $LIBS.)144 156 R(An)5.467 E 2.967(yc)-.15 G .467(ommand \
lines you de\214ne that need the LIBS library list should include)-2.967
F($_LIBFLA)144 168 Q(GS:)-.4 E(en)144 192 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(LINKCOM="my_link).4 E(er $_LIBDIRFLA)-.1 E(GS $_LIBFLA)-.4 E
(GS -o $T)-.4 E(ARGET $SOURCE"\))-.93 E .154(If you add a File object t\
o the $LIBS list, the name of that \214le will be added to $_LIBFLA)144
208.8 R .155(GS, and)-.4 F
(thus the link line, as is, without $LIBLINKPREFIX or $LIBLINKSUFFIX.)
144 220.8 Q -.15(Fo)5 G 2.5(re).15 G(xample:)-2.65 E(en)144 244.8 Q -.65
(v.)-.4 G(Append\(LIBS=File\('/tmp/mylib).65 E(.so'\)\))-.4 E .936
(In all cases, scons will add dependencies from the e)144 261.6 R -.15
(xe)-.15 G .936(cutable program to all the libraries in this).15 F
(list.)144 273.6 Q(LIBSUFFIX)108 302.4 Q 1.51(The suf)144 314.4 R 1.51
(\214x used for \(static\) library \214le names.)-.25 F 4.011(Ad)6.511 G
(ef)-4.011 E 1.511(ault v)-.1 F 1.511
(alue is set for each platform \(posix,)-.25 F .619
(win32, os2, etc.\), b)144 326.4 R .619(ut the v)-.2 F .619(alue is o)
-.25 F -.15(ve)-.15 G .619(rridden by indi).15 F .619(vidual tools \(ar)
-.25 F 3.119(,m)-.4 G .618(slib, sgiar)-3.119 F 3.118(,s)-.4 G(unar)
-3.118 E 3.118(,t)-.4 G .618(lib, etc.\))-3.118 F
(to re\215ect the names of the libraries the)144 338.4 Q 2.5(yc)-.15 G
(reate.)-2.5 E(LIBSUFFIXES)108 367.2 Q 2.907(Al)144 379.2 S .407
(ist of all le)-2.907 F -.05(ga)-.15 G 2.907(ls).05 G(uf)-2.907 E<8c78>
-.25 E .407(es for library \214le names.)-.15 F .408
(When searching for library dependencies, SCons)5.407 F .577
(will look for \214les with pre\214x)144 391.2 R .577
(es, in the $LIBPREFIXES list, the base library name, and these suf-)
-.15 F<8c78>144 403.2 Q(es.)-.15 E(LICENSE)108 432 Q .482(The abbre)144
444 R .482(viated name of the license under which this project is relea\
sed \(gpl, lpgl, bsd etc.\).)-.25 F(See)5.483 E(http://www)144 456 Q
(.opensource.or)-.65 E
(g/licenses/alphabetical for a list of license names.)-.18 E(LINESEP)108
484.8 Q(ARA)-.92 E -.18(TO)-1.11 G(R).18 E .571
(The separator used by the)144 496.8 R/F1 10/Times-Bold@0 SF
(Subst\214le)3.071 E F0 .571(\(\) and)B F1 -.92(Te)3.071 G(xt\214le).92
E F0 .571(\(\) b)B 3.071(uilders. This)-.2 F -.25(va)3.071 G .57
(lue is used between sources).25 F(when constructing the tar)144 508.8 Q
2.5(get. It)-.18 F(def)2.5 E(aults to the current system line separator)
-.1 E(.)-.55 E(LINK)108 537.6 Q(The link)144 537.6 Q(er)-.1 E(.)-.55 E
(LINKCOM)108 566.4 Q
(The command line used to link object \214les into an e)144 578.4 Q -.15
(xe)-.15 G(cutable.).15 E(LINKCOMSTR)108 607.2 Q 2.225
(The string displayed when object \214les are link)144 619.2 R 2.226
(ed into an e)-.1 F -.15(xe)-.15 G 4.726(cutable. If).15 F 2.226
(this is not set, then)4.726 F
($LINKCOM \(the command line\) is displayed.)144 631.2 Q(en)144 655.2 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(LINKCOMSTR = "Linking $T).4 E
(ARGET"\))-.93 E(LINKFLA)108 684 Q(GS)-.4 E .117
(General user options passed to the link)144 696 R(er)-.1 E 5.117(.N)
-.55 G .117(ote that this v)-5.117 F .117(ariable should)-.25 F/F2 10
/Times-Italic@0 SF(not)2.977 E F0(contain)3.297 E F1<ad6c>2.617 E F0
.116(\(or similar\))2.616 F 1.984
(options for linking with the libraries listed in $LIBS, nor)144 708 R
F1<ad4c>4.485 E F0 1.985(\(or similar\) library search path)4.485 F
1.657(options that scons generates automatically from $LIBP)144 720 R
-1.11(AT)-.92 G 4.156(H. See)1.11 F($_LIBFLA)4.156 E 1.656(GS abo)-.4 F
-.15(ve)-.15 G 4.156(,f).15 G 1.656(or the)-4.156 F(July 2010)286.415
768 Q(93)204.415 E 0 Cg EP
%%Page: 94 94
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R -.25(va)144
84 S 1.265(riable that e).25 F 1.265
(xpands to library-link options, and $_LIBDIRFLA)-.15 F 1.265(GS abo)-.4
F -.15(ve)-.15 G 3.765(,f).15 G 1.265(or the v)-3.765 F 1.265
(ariable that)-.25 F -.15(ex)144 96 S
(pands to library search path options.).15 E(M4)108 124.8 Q
(The M4 macro preprocessor)144 124.8 Q(.)-.55 E(M4COM)108 153.6 Q(The c\
ommand line used to pass \214les through the M4 macro preprocessor)144
165.6 Q(.)-.55 E(M4COMSTR)108 194.4 Q .748(The string displayed when a \
\214le is passed through the M4 macro preprocessor)144 206.4 R 5.747(.I)
-.55 G 3.247(ft)-5.747 G .747(his is not set,)-3.247 F
(then $M4COM \(the command line\) is displayed.)144 218.4 Q(M4FLA)108
247.2 Q(GS)-.4 E(General options passed to the M4 macro preprocessor)144
259.2 Q(.)-.55 E(MAKEINDEX)108 288 Q .276(The mak)144 300 R(einde)-.1 E
2.777(xg)-.15 G .277(enerator for the T)-2.777 F .277
(eX formatter and typesetter and the LaT)-.7 F .277
(eX structured formatter)-.7 F(and typesetter)144 312 Q(.)-.55 E
(MAKEINDEXCOM)108 340.8 Q .562(The command line used to call the mak)144
352.8 R(einde)-.1 E 3.062(xg)-.15 G .562(enerator for the T)-3.062 F
.562(eX formatter and typesetter and)-.7 F(the LaT)144 364.8 Q
(eX structured formatter and typesetter)-.7 E(.)-.55 E(MAKEINDEXCOMSTR)
108 393.6 Q .99(The string displayed when calling the mak)144 405.6 R
(einde)-.1 E 3.49(xg)-.15 G .99(enerator for the T)-3.49 F .99
(eX formatter and typesetter)-.7 F 1.119(and the LaT)144 417.6 R 1.119
(eX structured formatter and typesetter)-.7 F 6.118(.I)-.55 G 3.618(ft)
-6.118 G 1.118(his is not set, then $MAKEINDEXCOM)-3.618 F
(\(the command line\) is displayed.)144 429.6 Q(MAKEINDEXFLA)108 458.4 Q
(GS)-.4 E .979(General options passed to the mak)144 470.4 R(einde)-.1 E
3.479(xg)-.15 G .979(enerator for the T)-3.479 F .98
(eX formatter and typesetter and the)-.7 F(LaT)144 482.4 Q
(eX structured formatter and typesetter)-.7 E(.)-.55 E(MAXLINELENGTH)108
511.2 Q .956(The maximum number of characters allo)144 523.2 R .955
(wed on an e)-.25 F .955(xternal command line.)-.15 F .955(On W)5.955 F
.955(in32 systems,)-.4 F(link lines longer than this man)144 535.2 Q 2.5
(yc)-.15 G(haracters are link)-2.5 E(ed via a temporary \214le name.)-.1
E(MIDL)108 564 Q(The Microsoft IDL compiler)144 564 Q(.)-.55 E(MIDLCOM)
108 592.8 Q
(The command line used to pass \214les to the Microsoft IDL compiler)144
604.8 Q(.)-.55 E(MIDLCOMSTR)108 633.6 Q .812
(The string displayed when the Microsoft IDL copmiler is called.)144
645.6 R .812(If this is not set, then $MIDL-)5.812 F
(COM \(the command line\) is displayed.)144 657.6 Q(MIDLFLA)108 686.4 Q
(GS)-.4 E(General options passed to the Microsoft IDL compiler)144 698.4
Q(.)-.55 E(July 2010)286.415 768 Q(94)204.415 E 0 Cg EP
%%Page: 95 95
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(MSSDK_DIR)
108 84 Q .677
(The directory containing the Microsoft SDK \(either Platform SDK or W)
144 96 R(indo)-.4 E .677(ws SDK\) to be used)-.25 F(for compilation.)144
108 Q(MSSDK_VERSION)108 136.8 Q .671(The v)144 148.8 R .671
(ersion string of the Microsoft SDK \(either Platform SDK or W)-.15 F
(indo)-.4 E .672(ws SDK\) to be used for)-.25 F 2.5
(compilation. Supported)144 160.8 R -.15(ve)2.5 G(rsions include).15 E
/F1 10/Times-Bold@0 SF(6.1)2.5 E F0(,)A F1(6.0A)2.5 E F0(,)A F1(6.0)2.5
E F0(,)A F1(2003R2)2.5 E F0(and)2.5 E F1(2003R1)2.5 E F0(.)A(MSVC_B)108
189.6 Q -1.11(AT)-.35 G(CH)1.11 E 1.281(When set to an)144 201.6 R 3.781
(yt)-.15 G 1.281(rue v)-3.781 F 1.281(alue, speci\214es that SCons shou\
ld batch compilation of object \214les when)-.25 F 1.842
(calling the Microsoft V)144 213.6 R 1.842(isual C/C++ compiler)-.6 F
6.842(.A)-.55 G 1.843(ll compilations of source \214les from the same)
-6.842 F .214(source directory that generate tar)144 225.6 R .213
(get \214les in a same output directory and were con\214gured in SCons)
-.18 F .136(using the same construction en)144 237.6 R .136
(vironment will be b)-.4 F .136(uilt in a single call to the compiler)
-.2 F 5.137(.O)-.55 G .137(nly source)-5.137 F .764(\214les that ha)144
249.6 R 1.064 -.15(ve c)-.2 H .764
(hanged since their object \214les were b).15 F .763
(uilt will be passed to each compiler in)-.2 F -.2(vo)-.4 G(ca-).2 E
.422(tion \(via the $CHANGED_SOURCES construction v)144 261.6 R 2.922
(ariable\). An)-.25 F 2.922(yc)-.15 G .422(ompilations where the object)
-2.922 F(\(tar)144 273.6 Q .237(get\) \214le base name \(minus the)-.18
F F1(.obj)2.737 E F0 2.737(\)d)C .236
(oes not match the source \214le base name will be compiled)-2.737 F
(separately)144 285.6 Q(.)-.65 E(MSVC_USE_SCRIPT)108 314.4 Q
(Use a batch script to set up Microsoft V)144 326.4 Q
(isual Studio compiler)-.6 E .403($MSVC_USE_SCRIPT o)144 350.4 R -.15
(ve)-.15 G .403(rrides $MSVC_VERSION and $T).15 F 2.903(ARGET_ARCH. If)
-.93 F .404(set to the name)2.903 F 1(of a V)144 362.4 R 1
(isual Studio .bat \214le \(e.g. vcv)-.6 F .999
(ars.bat\), SCons will run that bat \214le and e)-.25 F .999
(xtract the rele)-.15 F -.25(va)-.25 G(nt).25 E -.25(va)144 374.4 S
6.142(riables from the result \(typically %INCLUDE%, %LIB%, and %P).25 F
-1.11(AT)-.92 G 8.643(H%\). Setting)1.11 F .828
(MSVC_USE_SCRIPT to None bypasses the V)144 386.4 R .827
(isual Studio autodetection entirely; use this if you)-.6 F 1.29
(are running SCons in a V)144 398.4 R 1.291(isual Studio cmd windo)-.6 F
3.791(wa)-.25 G 1.291(nd importing the shell')-3.791 F 3.791(se)-.55 G
-.4(nv)-3.791 G 1.291(ironment v).4 F(ari-)-.25 E(ables.)144 410.4 Q
(MSVC_VERSION)108 439.2 Q(Sets the preferred)144 451.2 Q -.15(ve)5 G
(rsion of Microsoft V).15 E(isual C/C++ to use.)-.6 E .298
(If $MSVC_VERSION is not set, SCons will \(by def)144 475.2 R .298
(ault\) select the latest v)-.1 F .298(ersion of V)-.15 F .298
(isual C/C++)-.6 F .757(installed on your system.)144 487.2 R .757
(If the speci\214ed v)5.757 F .757(ersion isn')-.15 F 3.257(ti)-.18 G
.757(nstalled, tool initialization will f)-3.257 F 3.258(ail. This)-.1 F
-.25(va)144 499.2 S 1.07(riable must be passed as an ar).25 F 1.07
(gument to the En)-.18 F 1.07
(vironment\(\) constructor; setting it later has no)-.4 F(ef)144 511.2 Q
2.5(fect. Set)-.25 F(it to an une)2.5 E(xpected v)-.15 E
(alue \(e.g. "XXX"\) to see the v)-.25 E(alid v)-.25 E
(alues on your system.)-.25 E(MSVS)108 540 Q .32(When the Microsoft V)
144 540 R .32(isual Studio tools are initialized, the)-.6 F 2.82(ys)-.15
G .32(et up this dictionary with the follo)-2.82 F(w-)-.25 E(ing k)144
552 Q -.15(ey)-.1 G(s:).15 E F1(VERSION)144 576 Q F0 2.5(:t)C(he v)-2.5
E(ersion of MSVS being used \(can be set via $MSVS_VERSION\))-.15 E F1
(VERSIONS)144 600 Q F0 2.5(:t)C(he a)-2.5 E -.25(va)-.2 G(ilable v).25 E
(ersions of MSVS installed)-.15 E F1(VCINST)144 624 Q(ALLDIR)-.9 E F0
2.5(:i)C(nstalled directory of V)-2.5 E(isual C++)-.6 E F1(VSINST)144
648 Q(ALLDIR)-.9 E F0 2.5(:i)C(nstalled directory of V)-2.5 E
(isual Studio)-.6 E F1(FRAMEW)144 672 Q(ORKDIR)-.1 E F0 2.5(:i)C
(nstalled directory of the .NET frame)-2.5 E -.1(wo)-.25 G(rk).1 E F1
(FRAMEW)144 696 Q(ORKVERSIONS)-.1 E F0 3.936(:l)C 1.436
(ist of installed v)-3.936 F 1.435(ersions of the .NET frame)-.15 F -.1
(wo)-.25 G 1.435(rk, sorted latest to).1 F(oldest.)144 708 Q(July 2010)
286.415 768 Q(95)204.415 E 0 Cg EP
%%Page: 96 96
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(FRAMEW)144 84 Q(ORKVERSION)-.1 E F0 2.5(:l)C
(atest installed v)-2.5 E(ersion of the .NET frame)-.15 E -.1(wo)-.25 G
(rk).1 E F1(FRAMEW)144 108 Q(ORKSDKDIR)-.1 E F0 2.5(:i)C
(nstalled location of the .NET SDK.)-2.5 E F1(PLA)144 132 Q(TFORMSDKDIR)
-.95 E F0 2.5(:i)C(nstalled location of the Platform SDK.)-2.5 E F1(PLA)
144 156 Q(TFORMSDK_MODULES)-.95 E F0 2.656(:d)C .157
(ictionary of installed Platform SDK modules, where the dictio-)-2.656 F
.586(nary k)144 168 R -.15(ey)-.1 G 3.086(sa).15 G .586(re k)-3.086 F
-.15(ey)-.1 G -.1(wo).15 G .586(rds for the v).1 F .586
(arious modules, and the v)-.25 F .586
(alues are 2-tuples where the \214rst is the)-.25 F
(release date, and the second is the v)144 180 Q(ersion number)-.15 E(.)
-.55 E(If a v)144 204 Q(alue isn')-.25 E 2.5(ts)-.18 G(et, it w)-2.5 E
(asn')-.1 E 2.5(ta)-.18 G -.25(va)-2.7 G(ilable in the re).25 E(gistry)
-.15 E(.)-.65 E(MSVS_ARCH)108 232.8 Q
(Sets the architecture for which the generated project\(s\) should b)144
244.8 Q(uild.)-.2 E .622(The def)144 268.8 R .622(ault v)-.1 F .622
(alue is)-.25 F F1(x86)3.122 E F0(.)A F1(amd64)5.622 E F0 .622
(is also supported by &SCons; for some V)3.122 F .622(isual Studio v)-.6
F(ersions.)-.15 E -.35(Tr)144 280.8 S .275
(ying to set $MSVS_ARCH to an architecture that').35 F 2.775(sn)-.55 G
.275(ot supported for a gi)-2.775 F -.15(ve)-.25 G 2.774(nV).15 G .274
(isual Studio v)-3.374 F(er)-.15 E(-)-.2 E(sion will generate an error)
144 292.8 Q(.)-.55 E(MSVS_PR)108 321.6 Q(OJECT_B)-.4 E(ASE_P)-.35 E
-1.11(AT)-.92 G(H)1.11 E .547
(The string placed in a generated Microsoft V)144 333.6 R .547
(isual Studio solution \214le as the v)-.6 F .547(alue of the)-.25 F F1
(SccPr)3.047 E(o-)-.18 E(jectFileP)144 345.6 Q(athRelati)-.1 E(vizedFr)
-.1 E(omConnection0)-.18 E F0(and)8.235 E F1(SccPr)8.235 E(ojectFileP)
-.18 E(athRelati)-.1 E(vizedFr)-.1 E(omConnec-)-.18 E(tion1)144 357.6 Q
F0(attrib)2.5 E(utes of the)-.2 E F1(GlobalSection\(Sour)2.5 E
(ceCodeContr)-.18 E(ol\))-.18 E F0 2.5(section. There)2.5 F(is no def)
2.5 E(ault v)-.1 E(alue.)-.25 E(MSVS_PR)108 386.4 Q(OJECT_GUID)-.4 E
.757(The string placed in a generated Microsoft V)144 398.4 R .757
(isual Studio project \214le as the v)-.6 F .757(alue of the)-.25 F F1
(Pr)3.257 E(oject-)-.18 E(GUID)144 410.4 Q F0(attrib)3.57 E 3.57
(ute. The)-.2 F 1.069(string is also placed in the)3.57 F F1
(SolutionUniqueID)3.569 E F0(attrib)3.569 E 1.069(ute of the)-.2 F F1
(GlobalSec-)3.569 E(tion\(Sour)144 422.4 Q(ceCodeContr)-.18 E(ol\))-.18
E F0 .035(section of the Microsoft V)2.535 F .035
(isual Studio solution \214le.)-.6 F .035(There is no def)5.035 F(ault)
-.1 E -.25(va)144 434.4 S(lue.).25 E(MSVS_SCC_A)108 463.2 Q(UX_P)-.55 E
-1.11(AT)-.92 G(H)1.11 E 1.891
(The path name placed in a generated Microsoft V)144 475.2 R 1.89
(isual Studio project \214le as the v)-.6 F 1.89(alue of the)-.25 F F1
(SccA)144 487.2 Q(uxP)-.5 E(ath)-.1 E F0(attrib)2.939 E .439(ute if the)
-.2 F F1(MSVS_SCC_PR)2.939 E -.5(OV)-.3 G(IDER).5 E F0 .439
(construction v)2.939 F .439(ariable is also set.)-.25 F .44(There is)
5.439 F(no def)144 499.2 Q(ault v)-.1 E(alue.)-.25 E(MSVS_SCC_LOCAL_P)
108 528 Q -1.11(AT)-.92 G(H)1.11 E 1.891
(The path name placed in a generated Microsoft V)144 540 R 1.89
(isual Studio project \214le as the v)-.6 F 1.89(alue of the)-.25 F F1
(SccLocalP)144 552 Q(ath)-.1 E F0(attrib)4.016 E 1.516(ute if the)-.2 F
F1(MSVS_SCC_PR)4.016 E -.5(OV)-.3 G(IDER).5 E F0 1.516(construction v)
4.016 F 1.516(ariable is also set.)-.25 F(The)6.516 E .816
(path name is also placed in the)144 564 R F1(SccLocalP)3.315 E(ath0)-.1
E F0(and)3.315 E F1(SccLocalP)3.315 E(ath1)-.1 E F0(attrib)3.315 E .815
(utes of the)-.2 F F1(GlobalSec-)3.315 E(tion\(Sour)144 576 Q
(ceCodeContr)-.18 E(ol\))-.18 E F0 .035(section of the Microsoft V)2.535
F .035(isual Studio solution \214le.)-.6 F .035(There is no def)5.035 F
(ault)-.1 E -.25(va)144 588 S(lue.).25 E(MSVS_SCC_PR)108 616.8 Q
(OJECT_N)-.4 E(AME)-.35 E 1.232
(The project name placed in a generated Microsoft V)144 628.8 R 1.231
(isual Studio project \214le as the v)-.6 F 1.231(alue of the)-.25 F F1
(SccPr)144 640.8 Q(ojectName)-.18 E F0(attrib)2.5 E 2.5(ute. There)-.2 F
(is no def)2.5 E(ault v)-.1 E(alue.)-.25 E(MSVS_SCC_PR)108 669.6 Q -.5
(OV)-.4 G(IDER).5 E 3.256(The string placed in a generated Microsoft V)
144 681.6 R 3.257(isual Studio project \214le as the v)-.6 F 3.257
(alue of the)-.25 F F1(SccPr)144 693.6 Q -.1(ov)-.18 G(ider).1 E F0
(attrib)3.189 E 3.189(ute. The)-.2 F .689(string is also placed in the)
3.189 F F1(SccPr)3.188 E -.1(ov)-.18 G(ider1).1 E F0(attrib)3.188 E .688
(ute of the)-.2 F F1(GlobalSec-)3.188 E(tion\(Sour)144 705.6 Q
(ceCodeContr)-.18 E(ol\))-.18 E F0 .035(section of the Microsoft V)2.535
F .035(isual Studio solution \214le.)-.6 F .035(There is no def)5.035 F
(ault)-.1 E -.25(va)144 717.6 S(lue.).25 E(July 2010)286.415 768 Q(96)
204.415 E 0 Cg EP
%%Page: 97 97
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(MSVS_VERSION)108 84 Q(Sets the preferred v)144 96 Q
(ersion of Microsoft V)-.15 E(isual Studio to use.)-.6 E .384
(If $MSVS_VERSION is not set, &SCons; will \(by def)144 120 R .383
(ault\) select the latest v)-.1 F .383(ersion of V)-.15 F .383
(isual Stu-)-.6 F .718(dio installed on your system.)144 132 R .719
(So, if you ha)5.719 F 1.019 -.15(ve ve)-.2 H .719(rsion 6 and v).15 F
.719(ersion 7 \(MSVS .NET\) installed, it)-.15 F .76(will prefer v)144
144 R .76(ersion 7.)-.15 F -1.1(Yo)5.76 G 3.259(uc)1.1 G .759(an o)
-3.259 F -.15(ve)-.15 G .759(rride this by specifying the).15 F/F1 10
/Times-Bold@0 SF(MSVS_VERSION)3.259 E F0 -.25(va)3.259 G .759
(riable in the).25 F(En)144 156 Q .284
(vironment initialization, setting it to the appropriate v)-.4 F .284
(ersion \('6.0' or '7.0', for e)-.15 F 2.785(xample\). If)-.15 F(the)
2.785 E(speci\214ed v)144 168 Q(ersion isn')-.15 E 2.5(ti)-.18 G
(nstalled, tool initialization will f)-2.5 E(ail.)-.1 E .091(This is ob\
solete: use $MSVC_VERSION instead. If $MSVS_VERSION is set and $MSVC_VE\
R-)144 192 R .377
(SION is not, $MSVC_VERSION will be set automatically to $MSVS_VERSION.)
144 204 R .377(If both are set)5.377 F(to dif)144 216 Q(ferent v)-.25 E
(alues, scons will raise an error)-.25 E(.)-.55 E(MSVSB)108 244.8 Q
(UILDCOM)-.1 E .297(The b)144 256.8 R .297
(uild command line placed in a generated Microsoft V)-.2 F .296
(isual Studio project \214le.)-.6 F .296(The def)5.296 F .296(ault is)
-.1 F(to ha)144 268.8 Q .3 -.15(ve V)-.2 H(isual Studio in)-.45 E -.2
(vo)-.4 G .2 -.1(ke S).2 H(Cons with an).1 E 2.5(ys)-.15 G(peci\214ed b)
-2.5 E(uild tar)-.2 E(gets.)-.18 E(MSVSCLEANCOM)108 297.6 Q .247
(The clean command line placed in a generated Microsoft V)144 309.6 R
.248(isual Studio project \214le.)-.6 F .248(The def)5.248 F .248
(ault is)-.1 F(to ha)144 321.6 Q .3 -.15(ve V)-.2 H(isual Studio in)-.45
E -.2(vo)-.4 G .2 -.1(ke S).2 H(Cons with the -c option to remo).1 E .3
-.15(ve a)-.15 H .3 -.15(ny s).15 H(peci\214ed tar).15 E(gets.)-.18 E
(MSVSENCODING)108 350.4 Q 1.594
(The encoding string placed in a generated Microsoft V)144 362.4 R 1.593
(isual Studio project \214le.)-.6 F 1.593(The def)6.593 F 1.593(ault is)
-.1 F(encoding)144 374.4 Q F1 -.18(Wi)2.5 G(ndo).18 E(ws-1252)-.1 E F0
(.)A(MSVSPR)108 403.2 Q(OJECTCOM)-.4 E
(The action used to generate Microsoft V)144 415.2 Q
(isual Studio project \214les.)-.6 E(MSVSPR)108 444 Q(OJECTSUFFIX)-.4 E
.124(The suf)144 456 R .124(\214x used for Microsoft V)-.25 F .125
(isual Studio project \(DSP\) \214les.)-.6 F .125(The def)5.125 F .125
(ault v)-.1 F .125(alue is)-.25 F F1(.vcpr)2.625 E(oj)-.18 E F0(when)
2.625 E .973(using V)144 468 R .973(isual Studio v)-.6 F .973
(ersion 7.x \(.NET\) or later v)-.15 F .973(ersion, and)-.15 F F1(.dsp)
3.473 E F0 .972(when using earlier v)3.472 F .972(ersions of)-.15 F -.6
(Vi)144 480 S(sual Studio.).6 E(MSVSREB)108 508.8 Q(UILDCOM)-.1 E .417
(The reb)144 520.8 R .418
(uild command line placed in a generated Microsoft V)-.2 F .418
(isual Studio project \214le.)-.6 F .418(The def)5.418 F(ault)-.1 E
(is to ha)144 532.8 Q .3 -.15(ve V)-.2 H(isual Studio in)-.45 E -.2(vo)
-.4 G .2 -.1(ke S).2 H(Cons with an).1 E 2.5(ys)-.15 G(peci\214ed reb)
-2.5 E(uild tar)-.2 E(gets.)-.18 E(MSVSSCONS)108 561.6 Q .774
(The SCons used in generated Microsoft V)144 573.6 R .774
(isual Studio project \214les.)-.6 F .774(The def)5.774 F .774
(ault is the v)-.1 F .774(ersion of)-.15 F
(SCons being used to generate the project \214le.)144 585.6 Q
(MSVSSCONSCOM)108 614.4 Q(The def)144 626.4 Q
(ault SCons command used in generated Microsoft V)-.1 E
(isual Studio project \214les.)-.6 E(MSVSSCONSCRIPT)108 655.2 Q .561
(The sconscript \214le \(that is,)144 667.2 R F1(SConstruct)3.061 E F0
(or)3.061 E F1(SConscript)3.061 E F0 .561(\214le\) that will be in)3.061
F -.2(vo)-.4 G -.1(ke).2 G 3.062(db).1 G 3.062(yV)-3.062 G .562
(isual Studio)-3.662 F .949
(project \214les \(through the $MSVSSCONSCOM v)144 679.2 R 3.448
(ariable\). The)-.25 F(def)3.448 E .948
(ault is the same sconscript \214le)-.1 F(that contains the call to)144
691.2 Q F1(MSVSPr)2.5 E(oject)-.18 E F0(\(\) to b)A
(uild the project \214le.)-.2 E(July 2010)286.415 768 Q(97)204.415 E 0
Cg EP
%%Page: 98 98
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(MSVSSCONSFLA)108 84 Q(GS)-.4 E
(The SCons \215ags used in generated Microsoft V)144 96 Q
(isual Studio project \214les.)-.6 E(MSVSSOLUTIONCOM)108 124.8 Q
(The action used to generate Microsoft V)144 136.8 Q
(isual Studio solution \214les.)-.6 E(MSVSSOLUTIONSUFFIX)108 165.6 Q
.592(The suf)144 177.6 R .592(\214x used for Microsoft V)-.25 F .593
(isual Studio solution \(DSW\) \214les.)-.6 F .593(The def)5.593 F .593
(ault v)-.1 F .593(alue is)-.25 F/F1 10/Times-Bold@0 SF(.sln)3.093 E F0
(when)3.093 E(using V)144 189.6 Q(isual Studio v)-.6 E
(ersion 7.x \(.NET\), and)-.15 E F1(.dsw)2.5 E F0(when using earlier v)
2.5 E(ersions of V)-.15 E(isual Studio.)-.6 E(MWCW_VERSION)108 218.4 Q
(The v)144 230.4 Q(ersion number of the MetroW)-.15 E(erks CodeW)-.8 E
(arrior C compiler to be used.)-.8 E(MWCW_VERSIONS)108 259.2 Q 2.5(Al)
144 271.2 S(ist of installed v)-2.5 E(ersions of the MetroW)-.15 E
(erks CodeW)-.8 E(arrior C compiler on this system.)-.8 E -.35(NA)108
300 S(ME).35 E(Spec\214es the name of the project to package.)144 300 Q
(no_import_lib)108 328.8 Q 1.214
(When set to non-zero, suppresses creation of a corresponding W)144
340.8 R(indo)-.4 E 1.213(ws static import lib by the)-.25 F F1(Shar)144
352.8 Q(edLibrary)-.18 E F0 -.2(bu)3.697 G 1.197
(ilder when used with MinGW).2 F 3.697(,M)-.92 G 1.197(icrosoft V)-3.697
F 1.198(isual Studio or Metro)-.6 F 3.698(werks. This)-.25 F
(also suppresses creation of an e)144 364.8 Q(xport \(.e)-.15 E
(xp\) \214le when using Microsoft V)-.15 E(isual Studio.)-.6 E
(OBJPREFIX)108 393.6 Q
(The pre\214x used for \(static\) object \214le names.)144 405.6 Q
(OBJSUFFIX)108 434.4 Q(The suf)144 446.4 Q
(\214x used for \(static\) object \214le names.)-.25 E(P4)108 475.2 Q
(The Perforce e)144 475.2 Q -.15(xe)-.15 G(cutable.).15 E(P4COM)108 504
Q(The command line used to fetch source \214les from Perforce.)144 516 Q
(P4COMSTR)108 544.8 Q .847
(The string displayed when fetching a source \214le from Perforce.)144
556.8 R .847(If this is not set, then $P4COM)5.847 F
(\(the command line\) is displayed.)144 568.8 Q(P4FLA)108 597.6 Q(GS)-.4
E(General options that are passed to Perforce.)144 609.6 Q -1.06 -.92
(PA C)108 638.4 T(KA).92 E(GER)-.4 E(OO)-.4 E(T)-.4 E .308
(Speci\214es the directory where all \214les in resulting archi)144
650.4 R .609 -.15(ve w)-.25 H .309(ill be placed if applicable.).15 F
.309(The def)5.309 F(ault)-.1 E -.25(va)144 662.4 S(lue is "$N).25 E
(AME-$VERSION".)-.35 E -1.06 -.92(PA C)108 691.2 T(KA).92 E(GETYPE)-.4 E
(Selects the package type to b)144 703.2 Q 2.5(uild. Currently)-.2 F
(these are a)2.5 E -.25(va)-.2 G(ilable:).25 E 2.5(*m)146.5 727.2 S
(si - Microsoft Installer)-2.5 E(July 2010)286.415 768 Q(98)204.415 E 0
Cg EP
%%Page: 99 99
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5(*r)
146.5 84 S(pm - Redhat P)-2.5 E(ackage Manger)-.15 E 2.5(*i)146.5 96 S
(pkg - Itsy P)-2.5 E(ackage Management System)-.15 E 2.5(*t)146.5 108 S
(arbz2 - compressed tar)-2.5 E 2.5(*t)146.5 120 S(ar)-2.5 E
(gz - compressed tar)-.18 E 2.5(*z)146.5 132 S(ip - zip \214le)-2.5 E
2.5(*s)146.5 144 S(rc_tarbz2 - compressed tar source)-2.5 E 2.5(*s)146.5
156 S(rc_tar)-2.5 E(gz - compressed tar source)-.18 E 2.5(*s)146.5 168 S
(rc_zip - zip \214le source)-2.5 E(This may be o)144 192 Q -.15(ve)-.15
G(rridden with the "package_type" command line option.).15 E -1.06 -.92
(PA C)108 220.8 T(KA).92 E(GEVERSION)-.4 E .944(The v)144 232.8 R .944
(ersion of the package \(not the underlying project\).)-.15 F .943
(This is currently only used by the rpm)5.944 F(packager and should re\
\215ect changes in the packaging, not the underlying project code itsel\
f.)144 244.8 Q(PCH)108 273.6 Q .283(The Microsoft V)144 273.6 R .284(is\
ual C++ precompiled header that will be used when compiling object \214\
les. This)-.6 F -.25(va)144 285.6 S .112
(riable is ignored by tools other than Microsoft V).25 F .112
(isual C++.)-.6 F .112(When this v)5.112 F .112
(ariable is de\214ned SCons)-.25 F .379(will add options to the compile\
r command line to cause it to use the precompiled header)144 297.6 R
2.879(,a)-.4 G .379(nd will)-2.879 F
(also set up the dependencies for the PCH \214le.)144 309.6 Q(Example:)5
E(en)144 333.6 Q(v['PCH'] = 'StdAfx.pch')-.4 E(PCHCOM)108 362.4 Q
(The command line used by the)144 374.4 Q/F1 10/Times-Bold@0 SF(PCH)2.5
E F0(\(\) b)A(uilder to generated a precompiled header)-.2 E(.)-.55 E
(PCHCOMSTR)108 403.2 Q 1.166
(The string displayed when generating a precompiled header)144 415.2 R
6.166(.I)-.55 G 3.666(ft)-6.166 G 1.165(his is not set, then $PCHCOM)
-3.666 F(\(the command line\) is displayed.)144 427.2 Q(PCHPDBFLA)108
456 Q(GS)-.4 E 3.528(Ac)144 468 S 1.028(onstruction v)-3.528 F 1.028
(ariable that, when e)-.25 F 1.028(xpanded, adds the)-.15 F F1(/yD)3.528
E F0 1.028(\215ag to the command line only if the)3.528 F
($PDB construction v)144 480 Q(ariable is set.)-.25 E(PCHST)108 508.8 Q
(OP)-.18 E .339(This v)144 520.8 R .339(ariable speci\214es ho)-.25 F
2.838(wm)-.25 G .338(uch of a source \214le is precompiled. This v)
-2.838 F .338(ariable is ignored by tools)-.25 F .401
(other than Microsoft V)144 532.8 R .401(isual C++, or when the PCH v)
-.6 F .402(ariable is not being used. When this v)-.25 F(ariable)-.25 E
.073(is de\214ne it must be a string that is the name of the header tha\
t is included at the end of the precom-)144 544.8 R .996(piled portion \
of the source \214les, or the empty string if the "#pragma hrdstop" con\
struct is being)144 556.8 R(used:)144 568.8 Q(en)144 592.8 Q(v['PCHST)
-.4 E(OP'] = 'StdAfx.h')-.18 E(PDB)108 621.6 Q .694(The Microsoft V)144
621.6 R .694(isual C++ PDB \214le that will store deb)-.6 F .693
(ugging information for object \214les, shared)-.2 F .361
(libraries, and programs. This v)144 633.6 R .361
(ariable is ignored by tools other than Microsoft V)-.25 F .362
(isual C++.)-.6 F(When)5.362 E .642(this v)144 645.6 R .641
(ariable is de\214ned SCons will add options to the compiler and link)
-.25 F .641(er command line to cause)-.1 F 1.311(them to generate e)144
657.6 R 1.311(xternal deb)-.15 F 1.312
(ugging information, and will also set up the dependencies for the)-.2 F
(PDB \214le.)144 669.6 Q(Example:)5 E(en)144 693.6 Q
(v['PDB'] = 'hello.pdb')-.4 E .659(The V)144 710.4 R .659
(isual C++ compiler switch that SCons uses by def)-.6 F .658
(ault to generate PDB information is)-.1 F F1(/Z7)3.158 E F0(.)A 1.727
(This w)144 722.4 R 1.728(orks correctly with parallel \()-.1 F F1<ad6a>
A F0 4.228(\)b)C 1.728(uilds because it embeds the deb)-4.428 F 1.728
(ug information in the)-.2 F(July 2010)286.415 768 Q(99)204.415 E 0 Cg
EP
%%Page: 100 100
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 1.264(inte\
rmediate object \214les, as opposed to sharing a single PDB \214le betw\
een multiple object \214les.)144 84 R .786(This is also the only w)144
96 R .786(ay to get deb)-.1 F .786
(ug information embedded into a static library)-.2 F 5.786(.U)-.65 G
.786(sing the)-5.786 F/F1 10/Times-Bold@0 SF(/Zi)3.286 E F0 .785
(instead may yield impro)144 108 R -.15(ve)-.15 G 3.285(dl).15 G .785
(ink-time performance, although parallel b)-3.285 F .785
(uilds will no longer w)-.2 F(ork.)-.1 E -1.1(Yo)144 120 S 3.48(uc)1.1 G
.98(an generate PDB \214les with the)-3.48 F F1(/Zi)3.481 E F0 .981
(switch by o)3.481 F -.15(ve)-.15 G .981(rriding the def).15 F .981
(ault $CCPDBFLA)-.1 F .981(GS v)-.4 F(ari-)-.25 E
(able; see the entry for that v)144 132 Q(ariable for speci\214c e)-.25
E(xamples.)-.15 E(PDFCOM)108 160.8 Q 2.5(Ad)144 172.8 S(eprecated synon)
-2.5 E(ym for $D)-.15 E(VIPDFCOM.)-.4 E(PDFLA)108 201.6 Q(TEX)-1.11 E
(The &pd\215ate)144 213.6 Q(x; utility)-.15 E(.)-.65 E(PDFLA)108 242.4 Q
(TEXCOM)-1.11 E(The command line used to call the &pd\215ate)144 254.4 Q
(x; utility)-.15 E(.)-.65 E(PDFLA)108 283.2 Q(TEXCOMSTR)-1.11 E .228
(The string displayed when calling the &pd\215ate)144 295.2 R .228
(x; utility)-.15 F 5.228(.I)-.65 G 2.728(ft)-5.228 G .228
(his is not set, then $PDFLA)-2.728 F(TEXCOM)-1.11 E
(\(the command line\) is displayed.)144 307.2 Q(en)144 331.2 Q 2.5(v=E)
-.4 G -.4(nv)-2.5 G(ironment\(PDFLA).4 E(TEX;COMSTR = "Building $T)-1.11
E(ARGET from LaT)-.93 E(eX input $SOURCES"\))-.7 E(PDFLA)108 360 Q
(TEXFLA)-1.11 E(GS)-.4 E(General options passed to the &pd\215ate)144
372 Q(x; utility)-.15 E(.)-.65 E(PDFPREFIX)108 400.8 Q
(The pre\214x used for PDF \214le names.)144 412.8 Q(PDFSUFFIX)108 441.6
Q(The suf)144 453.6 Q(\214x used for PDF \214le names.)-.25 E(PDFTEX)108
482.4 Q(The &pdfte)144 494.4 Q(x; utility)-.15 E(.)-.65 E(PDFTEXCOM)108
523.2 Q(The command line used to call the &pdfte)144 535.2 Q(x; utility)
-.15 E(.)-.65 E(PDFTEXCOMSTR)108 564 Q .268
(The string displayed when calling the &pdfte)144 576 R .269(x; utility)
-.15 F 5.269(.I)-.65 G 2.769(ft)-5.269 G .269
(his is not set, then $PDFTEXCOM \(the)-2.769 F
(command line\) is displayed.)144 588 Q(en)144 612 Q 2.5(v=E)-.4 G -.4
(nv)-2.5 G(ironment\(PDFTEXCOMSTR = "Building $T).4 E(ARGET from T)-.93
E(eX input $SOURCES"\))-.7 E(PDFTEXFLA)108 640.8 Q(GS)-.4 E
(General options passed to the &pdfte)144 652.8 Q(x; utility)-.15 E(.)
-.65 E(PKGCHK)108 681.6 Q .765(On Solaris systems, the package-checking\
 program that will be used \(along with $PKGINFO\) to)144 693.6 R
(look for installed v)144 705.6 Q(ersions of the Sun PR)-.15 E 2.5(OC)
-.4 G(++ compiler)-2.5 E 5(.T)-.55 G(he def)-5 E(ault is)-.1 E F1
(/usr/sbin/pgkchk)2.5 E F0(.)A(July 2010)286.415 768 Q(100)199.415 E 0
Cg EP
%%Page: 101 101
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(PKGINFO)108
84 Q .134(On Solaris systems, the package information program that will\
 be used \(along with $PKGCHK\) to)144 96 R(look for installed v)144 108
Q(ersions of the Sun PR)-.15 E 2.5(OC)-.4 G(++ compiler)-2.5 E 5(.T)-.55
G(he def)-5 E(ault is)-.1 E/F1 10/Times-Bold@0 SF(pkginf)2.5 E(o)-.25 E
F0(.)A(PLA)108 136.8 Q(TFORM)-1.11 E 1.099
(The name of the platform used to create the En)144 148.8 R 3.599
(vironment. If)-.4 F 1.098(no platform is speci\214ed when the)3.599 F
(En)144 160.8 Q(vironment is created,)-.4 E F1(scons)2.5 E F0
(autodetects the platform.)2.5 E(en)144 184.8 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(tools = []\)).4 E(if en)144 196.8 Q(v['PLA)-.4 E
(TFORM'] == 'c)-1.11 E(ygwin':)-.15 E -.8(To)154 208.8 S
(ol\('mingw'\)\(en).8 E(v\))-.4 E(else:)144 220.8 Q -.8(To)154 232.8 S
(ol\('msvc'\)\(en).8 E(v\))-.4 E(PRINT_CMD_LINE_FUNC)108 261.6 Q 4.154
(AP)144 273.6 S 1.654
(ython function used to print the command lines as the)-4.154 F 4.155
(ya)-.15 G 1.655(re e)-4.155 F -.15(xe)-.15 G 1.655
(cuted \(assuming command).15 F 1.16(printing is not disabled by the)144
285.6 R F1<ad71>3.66 E F0(or)3.659 E F1<ad73>3.659 E F0 1.159
(options or their equi)3.659 F -.25(va)-.25 G 3.659(lents\). The).25 F
1.159(function should tak)3.659 F(e)-.1 E .373(four ar)144 297.6 R
(guments:)-.18 E/F2 10/Times-Italic@0 SF(s)2.873 E F0 2.873(,t).27 G
.373(he command being e)-2.873 F -.15(xe)-.15 G .373
(cuted \(a string\),).15 F F2(tar)2.873 E -.1(ge)-.37 G(t).1 E F0 2.873
(,t).68 G .374(he tar)-2.873 F .374(get being b)-.18 F .374
(uilt \(\214le node,)-.2 F .692(list, or string name\(s\)\),)144 309.6 R
F2(sour)3.192 E(ce)-.37 E F0 3.191(,t).18 G .691
(he source\(s\) used \(\214le node, list, or string name\(s\)\), and)
-3.191 F F2(en)3.191 E(v)-.4 E F0 3.191(,t).32 G(he)-3.191 E(en)144
321.6 Q(vironment being used.)-.4 E .832
(The function must do the printing itself.)144 345.6 R .832(The def)
5.832 F .832(ault implementation, used if this v)-.1 F .832
(ariable is not)-.25 F(set or is None, is:)144 357.6 Q
(def print_cmd_line\(s, tar)144 369.6 Q(get, source, en)-.18 E(v\):)-.4
E(sys.stdout.write\(s + "\\n"\))149 381.6 Q(Here')144 398.4 Q 2.5(sa)
-.55 G 2.5(ne)-2.5 G(xample of a more interesting function:)-2.65 E
(def print_cmd_line\(s, tar)144 422.4 Q(get, source, en)-.18 E(v\):)-.4
E(sys.stdout.write\("Building %s -> %s...\\n" %)151.5 434.4 Q
(\(' and '.join\([str\(x\) for x in source]\),)154 446.4 Q 2.5('a)156.5
458.4 S(nd '.join\([str\(x\) for x in tar)-2.5 E(get]\)\)\))-.18 E(en)
144 470.4 Q(v=En)-.4 E(vironment\(PRINT_CMD_LINE_FUNC=print_cmd_line\))
-.4 E(en)144 482.4 Q -.65(v.)-.4 G(Program\('foo', 'foo.c'\)).65 E .564
(This just prints "Building)144 499.2 R F2(tar)3.064 E -.1(ge)-.37 G
(tname).1 E F0(from)3.063 E F2(sour)3.063 E(cename)-.37 E F0 .563
(..." instead of the actual commands.)B(Such)5.563 E 2.5(af)144 511.2 S
(unction could also log the actual commands to a log \214le, for e)-2.5
E(xample.)-.15 E(PR)108 540 Q(OGPREFIX)-.4 E(The pre\214x used for e)144
552 Q -.15(xe)-.15 G(cutable \214le names.).15 E(PR)108 580.8 Q
(OGSUFFIX)-.4 E(The suf)144 592.8 Q(\214x used for e)-.25 E -.15(xe)-.15
G(cutable \214le names.).15 E(PSCOM)108 621.6 Q
(The command line used to con)144 633.6 Q -.15(ve)-.4 G(rt T).15 E(eX D)
-.7 E(VI \214les into a PostScript \214le.)-.4 E(PSCOMSTR)108 662.4 Q
.141(The string displayed when a T)144 674.4 R .141(eX D)-.7 F .141
(VI \214le is con)-.4 F -.15(ve)-.4 G .141
(rted into a PostScript \214le.).15 F .141(If this is not set, then)
5.141 F($PSCOM \(the command line\) is displayed.)144 686.4 Q(July 2010)
286.415 768 Q(101)199.415 E 0 Cg EP
%%Page: 102 102
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(PSPREFIX)
108 84 Q(The pre\214x used for PostScript \214le names.)144 96 Q
(PSSUFFIX)108 124.8 Q(The pre\214x used for PostScript \214le names.)144
136.8 Q(QT_A)108 165.6 Q(UT)-.55 E(OSCAN)-.18 E -.45(Tu)144 177.6 S
(rn of).45 E 2.5(fs)-.25 G
(canning for mocable \214les. Use the Moc Builder to e)-2.5 E
(xplicitly specify \214les to run moc on.)-.15 E(QT_BINP)108 206.4 Q
-1.11(AT)-.92 G(H)1.11 E(The path where the qt binaries are installed.)
144 218.4 Q(The def)5 E(ault v)-.1 E(alue is '$QTDIR/bin'.)-.25 E
(QT_CPPP)108 247.2 Q -1.11(AT)-.92 G(H)1.11 E .485
(The path where the qt header \214les are installed.)144 259.2 R .485
(The def)5.485 F .484(ault v)-.1 F .484(alue is '$QTDIR/include'.)-.25 F
.484(Note: If)5.484 F(you set this v)144 271.2 Q
(ariable to None, the tool w)-.25 E(on')-.1 E 2.5(tc)-.18 G
(hange the $CPPP)-2.5 E -1.11(AT)-.92 G 2.5(Hc)1.11 G(onstruction v)-2.5
E(ariable.)-.25 E(QT_DEB)108 300 Q(UG)-.1 E(Prints lots of deb)144 312 Q
(ugging information while scanning for moc \214les.)-.2 E(QT_LIB)108
340.8 Q(Def)144 352.8 Q .045(ault v)-.1 F .045(alue is 'qt'. Y)-.25 F
.045(ou may w)-1.1 F .045
(ant to set this to 'qt-mt'. Note: If you set this v)-.1 F .045
(ariable to None, the)-.25 F(tool w)144 364.8 Q(on')-.1 E 2.5(tc)-.18 G
(hange the $LIBS v)-2.5 E(ariable.)-.25 E(QT_LIBP)108 393.6 Q -1.11(AT)
-.92 G(H)1.11 E .506(The path where the qt libraries are installed.)144
405.6 R .506(The def)5.506 F .506(ault v)-.1 F .505
(alue is '$QTDIR/lib'.)-.25 F .505(Note: If you set)5.505 F(this v)144
417.6 Q(ariable to None, the tool w)-.25 E(on')-.1 E 2.5(tc)-.18 G
(hange the $LIBP)-2.5 E -1.11(AT)-.92 G 2.5(Hc)1.11 G(onstruction v)-2.5
E(ariable.)-.25 E(QT_MOC)108 446.4 Q(Def)144 458.4 Q(ault v)-.1 E
(alue is '$QT_BINP)-.25 E -1.11(AT)-.92 G(H/moc'.)1.11 E
(QT_MOCCXXPREFIX)108 487.2 Q(Def)144 499.2 Q(ault v)-.1 E(alue is ')-.25
E('. Pre\214x for moc output \214les, when source is a cxx \214le.)-.74
E(QT_MOCCXXSUFFIX)108 528 Q(Def)144 540 Q(ault v)-.1 E
(alue is '.moc'. Suf)-.25 E
(\214x for moc output \214les, when source is a cxx \214le.)-.25 E
(QT_MOCFR)108 568.8 Q(OMCXXCOM)-.4 E
(Command to generate a moc \214le from a cpp \214le.)144 580.8 Q
(QT_MOCFR)108 609.6 Q(OMCXXCOMSTR)-.4 E 3.002
(The string displayed when generating a moc \214le from a cpp \214le.)
144 621.6 R 3.003(If this is not set, then)8.003 F($QT_MOCFR)144 633.6 Q
(OMCXXCOM \(the command line\) is displayed.)-.4 E(QT_MOCFR)108 662.4 Q
(OMCXXFLA)-.4 E(GS)-.4 E(Def)144 674.4 Q(ault v)-.1 E(alue is '-i'. The\
se \215ags are passed to moc, when moccing a C++ \214le.)-.25 E
(QT_MOCFR)108 703.2 Q(OMHCOM)-.4 E
(Command to generate a moc \214le from a header)144 715.2 Q(.)-.55 E
(July 2010)286.415 768 Q(102)199.415 E 0 Cg EP
%%Page: 103 103
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(QT_MOCFR)
108 84 Q(OMHCOMSTR)-.4 E 3.003
(The string displayed when generating a moc \214le from a cpp \214le.)
144 96 R 3.002(If this is not set, then)8.002 F($QT_MOCFR)144 108 Q
(OMHCOM \(the command line\) is displayed.)-.4 E(QT_MOCFR)108 136.8 Q
(OMHFLA)-.4 E(GS)-.4 E(Def)144 148.8 Q(ault v)-.1 E(alue is ')-.25 E
('. These \215ags are passed to moc, when moccing a header \214le.)-.74
E(QT_MOCHPREFIX)108 177.6 Q(Def)144 189.6 Q(ault v)-.1 E(alue is 'moc_'\
. Pre\214x for moc output \214les, when source is a header)-.25 E(.)-.55
E(QT_MOCHSUFFIX)108 218.4 Q(Def)144 230.4 Q(ault v)-.1 E
(alue is '$CXXFILESUFFIX'. Suf)-.25 E
(\214x for moc output \214les, when source is a header)-.25 E(.)-.55 E
(QT_UIC)108 259.2 Q(Def)144 271.2 Q(ault v)-.1 E(alue is '$QT_BINP)-.25
E -1.11(AT)-.92 G(H/uic'.)1.11 E(QT_UICCOM)108 300 Q
(Command to generate header \214les from .ui \214les.)144 312 Q
(QT_UICCOMSTR)108 340.8 Q .343
(The string displayed when generating header \214les from .ui \214les.)
144 352.8 R .343(If this is not set, then $QT_UIC-)5.343 F
(COM \(the command line\) is displayed.)144 364.8 Q(QT_UICDECLFLA)108
393.6 Q(GS)-.4 E(Def)144 405.6 Q(ault v)-.1 E(alue is ')-.25 E('. These\
 \215ags are passed to uic, when creating a a h \214le from a .ui \214l\
e.)-.74 E(QT_UICDECLPREFIX)108 434.4 Q(Def)144 446.4 Q(ault v)-.1 E
(alue is ')-.25 E('. Pre\214x for uic generated header \214les.)-.74 E
(QT_UICDECLSUFFIX)108 475.2 Q(Def)144 487.2 Q(ault v)-.1 E
(alue is '.h'. Suf)-.25 E(\214x for uic generated header \214les.)-.25 E
(QT_UICIMPLFLA)108 516 Q(GS)-.4 E(Def)144 528 Q(ault v)-.1 E(alue is ')
-.25 E('. These \215ags are passed to uic, when creating a cxx \214le f\
rom a .ui \214le.)-.74 E(QT_UICIMPLPREFIX)108 556.8 Q(Def)144 568.8 Q
(ault v)-.1 E
(alue is 'uic_'. Pre\214x for uic generated implementation \214les.)-.25
E(QT_UICIMPLSUFFIX)108 597.6 Q(Def)144 609.6 Q(ault v)-.1 E
(alue is '$CXXFILESUFFIX'. Suf)-.25 E
(\214x for uic generated implementation \214les.)-.25 E(QT_UISUFFIX)108
638.4 Q(Def)144 650.4 Q(ault v)-.1 E(alue is '.ui'. Suf)-.25 E
(\214x of designer input \214les.)-.25 E(QTDIR)108 679.2 Q 1.193
(The qt tool tries to tak)144 679.2 R 3.693(et)-.1 G 1.193
(his from os.en)-3.693 F 3.693(viron. It)-.4 F 1.192
(also initializes all QT_* construction v)3.693 F(ariables)-.25 E 1.796
(listed belo)144 691.2 R 5.596 -.65(w. \()-.25 H 1.796
(Note that all paths are constructed with p).65 F(ython')-.1 E 4.296(so)
-.55 G 1.796(s.path.join\(\) method, b)-4.296 F 1.797(ut are)-.2 F 1.524
(listed here with the '/' separator for easier reading.\))144 703.2 R
1.524(In addition, the construction en)6.524 F(vironment)-.4 E -.25(va)
144 715.2 S .013(riables $CPPP).25 F -1.11(AT)-.92 G .013(H, $LIBP)1.11
F -1.11(AT)-.92 G 2.513(Ha)1.11 G .014
(nd $LIBS may be modi\214ed and the v)-2.513 F .014(ariables PR)-.25 F
(OGEMITTER,)-.4 E 2.083
(SHLIBEMITTER and LIBEMITTER are modi\214ed. Because the b)144 727.2 R
2.083(uild-performance is af)-.2 F(fected)-.25 E(July 2010)286.415 768 Q
(103)199.415 E 0 Cg EP
%%Page: 104 104
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(when using this tool, you ha)144 84 Q .3 -.15(ve t)-.2 H 2.5(oe).15 G
(xplicitly specify it at En)-2.65 E(vironment creation:)-.4 E(En)144 108
Q(vironment\(tools=[')-.4 E(def)-.5 E(ault',)-.1 E('qt']\))-.7 E
(The qt tool supports the follo)144 124.8 Q(wing operations:)-.25 E/F1
10/Times-Italic@0 SF -.2(Au)144 148.8 S .723(tomatic moc \214le g).2 F
(ener)-.1 E .723(ation fr)-.15 F .723(om header \214les.)-.45 F F0 -1.1
(Yo)5.723 G 3.223(ud)1.1 G 3.223(on)-3.223 G .723(ot ha)-3.223 F 1.024
-.15(ve t)-.2 H 3.224(os).15 G .724(pecify moc \214les e)-3.224 F
(xplicitly)-.15 E(,)-.65 E .888(the tool does it for you.)144 160.8 R
(Ho)5.887 E(we)-.25 E -.15(ve)-.25 G 1.687 -.4(r, t).15 H .887
(here are a fe).4 F 3.387(wp)-.25 G .887(reconditions to do so: Y)-3.387
F .887(our header \214le must)-1.1 F(ha)144 172.8 Q 1.416 -.15(ve t)-.2
H 1.117(he same \214lebase as your implementation \214le and must stay \
in the same directory).15 F 3.617(.I)-.65 G 3.617(tm)-3.617 G(ust)-3.617
E(ha)144 184.8 Q .877 -.15(ve o)-.2 H .577(ne of the suf).15 F<8c78>-.25
E .577(es .h, .hpp, .H, .hxx, .hh. Y)-.15 F .577(ou can turn of)-1.1 F
3.076(fa)-.25 G .576(utomatic moc \214le generation by)-3.076 F
(setting QT_A)144 196.8 Q(UT)-.55 E(OSCAN to 0.)-.18 E
(See also the corresponding b)5 E(uilder method)-.2 E/F2 10/Times-Bold@0
SF(Moc\(\))2.5 E F1 -.2(Au)144 220.8 S .648(tomatic moc \214le g).2 F
(ener)-.1 E .648(ation fr)-.15 F .648(om cxx \214les.)-.45 F F0 .648
(As stated in the qt documentation, include the moc)5.648 F 1.209
(\214le at the end of the cxx \214le. Note that you ha)144 232.8 R 1.509
-.15(ve t)-.2 H 3.709(oi).15 G 1.209
(nclude the \214le, which is generated by the)-3.709 F 5.4
(transformation ${QT_MOCCXXPREFIX}<basename>${QT_MOCCXXSUFFIX}, by def)
144 244.8 R(ault)-.1 E .001(<basename>.moc. A w)144 256.8 R .001
(arning is generated after b)-.1 F 0
(uilding the moc \214le, if you do not include the cor)-.2 F(-)-.2 E
.456(rect \214le. If you are using V)144 268.8 R(ariantDir)-1.11 E 2.956
(,y)-.4 G .456(ou may need to specify duplicate=1. Y)-2.956 F .456
(ou can turn of)-1.1 F 2.956(fa)-.25 G(uto-)-2.956 E 1.505
(matic moc \214le generation by setting QT_A)144 280.8 R(UT)-.55 E 1.504
(OSCAN to 0. See also the corresponding)-.18 F F2(Moc)4.004 E F0(\(\))A
-.2(bu)144 292.8 S(ilder method.).2 E F1 -.2(Au)144 316.8 S 1.825
(tomatic handling of .ui \214les.).2 F F0 1.826
(The implementation \214les generated from .ui \214les are handled)6.825
F 2.359(much the same as yacc or le)144 328.8 R 4.859<788c>-.15 G 2.359
(les. Each .ui \214le gi)-4.859 F -.15(ve)-.25 G 4.859(na).15 G 4.859
(sas)-4.859 G 2.359(ource of Program, Library or)-4.859 F .254(SharedLi\
brary will generate three \214les, the declaration \214le, the implemen\
tation \214le and a moc \214le.)144 340.8 R .253(Because there are also\
 generated headers, you may need to specify duplicate=1 in calls to V)
144 352.8 R(ariant-)-1.11 E(Dir)144 364.8 Q 5(.S)-.55 G
(ee also the corresponding)-5 E F2(Uic)2.5 E F0(\(\) b)A(uilder method.)
-.2 E(RANLIB)108 393.6 Q(The archi)144 405.6 Q .3 -.15(ve i)-.25 H(nde)
.15 E -.15(xe)-.15 G -.55(r.).15 G(RANLIBCOM)108 434.4 Q
(The command line used to inde)144 446.4 Q 2.5(xas)-.15 G
(tatic library archi)-2.5 E -.15(ve)-.25 G(.).15 E(RANLIBCOMSTR)108
475.2 Q 1.029(The string displayed when a static library archi)144 487.2
R 1.329 -.15(ve i)-.25 H 3.529(si).15 G(nde)-3.529 E -.15(xe)-.15 G
3.529(d. If).15 F 1.03(this is not set, then $RANLIB-)3.53 F
(COM \(the command line\) is displayed.)144 499.2 Q(en)144 523.2 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(RANLIBCOMSTR = "Inde).4 E(xing $T)
-.15 E(ARGET"\))-.93 E(RANLIBFLA)108 552 Q(GS)-.4 E
(General options passed to the archi)144 564 Q .3 -.15(ve i)-.25 H(nde)
.15 E -.15(xe)-.15 G -.55(r.).15 G(RC)108 592.8 Q
(The resource compiler used to b)144 592.8 Q(uild a Microsoft V)-.2 E
(isual C++ resource \214le.)-.6 E(RCCOM)108 621.6 Q
(The command line used to b)144 633.6 Q(uild a Microsoft V)-.2 E
(isual C++ resource \214le.)-.6 E(RCCOMSTR)108 662.4 Q 2.547
(The string displayed when in)144 674.4 R -.2(vo)-.4 G 2.546
(king the resource compiler to b).2 F 2.546(uild a Microsoft V)-.2 F
2.546(isual C++)-.6 F(resource \214le.)144 686.4 Q
(If this is not set, then $RCCOM \(the command line\) is displayed.)5 E
(July 2010)286.415 768 Q(104)199.415 E 0 Cg EP
%%Page: 105 105
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(RCFLA)108
84 Q(GS)-.4 E(The \215ags passed to the resource compiler by the RES b)
144 96 Q(uilder)-.2 E(.)-.55 E(RCINCFLA)108 124.8 Q(GS)-.4 E .671
(An automatically-generated construction v)144 136.8 R .671
(ariable containing the command-line options for speci-)-.25 F .124
(fying directories to be searched by the resource compiler)144 148.8 R
5.123(.T)-.55 G .123(he v)-5.123 F .123(alue of $RCINCFLA)-.25 F .123
(GS is created)-.4 F .7
(by appending $RCINCPREFIX and $RCINCSUFFIX to the be)144 160.8 R .7
(ginning and end of each directory)-.15 F(in $CPPP)144 172.8 Q -1.11(AT)
-.92 G(H.)1.11 E(RCINCPREFIX)108 201.6 Q 1.565(The pre\214x \(\215ag\) \
used to specify an include directory on the resource compiler command l\
ine.)144 213.6 R .645(This will be appended to the be)144 225.6 R .645
(ginning of each directory in the $CPPP)-.15 F -1.11(AT)-.92 G 3.145(Hc)
1.11 G .645(onstruction v)-3.145 F(ariable)-.25 E(when the $RCINCFLA)144
237.6 Q(GS v)-.4 E(ariable is e)-.25 E(xpanded.)-.15 E(RCINCSUFFIX)108
266.4 Q .402(The suf)144 278.4 R .402(\214x used to specify an include \
directory on the resource compiler command line.)-.25 F .402(This will)
5.402 F 2.421(be appended to the end of each directory in the $CPPP)144
290.4 R -1.11(AT)-.92 G 4.922(Hc)1.11 G 2.422(onstruction v)-4.922 F
2.422(ariable when the)-.25 F($RCINCFLA)144 302.4 Q(GS v)-.4 E
(ariable is e)-.25 E(xpanded.)-.15 E(RCS)108 331.2 Q .414(The RCS e)144
331.2 R -.15(xe)-.15 G 2.913(cutable. Note).15 F .413(that this v)2.913
F .413(ariable is not actually used for the command to fetch source)-.25
F(\214les from RCS; see the $RCS_CO construction v)144 343.2 Q
(ariable, belo)-.25 E -.65(w.)-.25 G(RCS_CO)108 372 Q(The RCS "check)144
384 Q(out" e)-.1 E -.15(xe)-.15 G
(cutable, used to fetch source \214les from RCS.).15 E(RCS_COCOM)108
412.8 Q(The command line used to fetch \(check)144 424.8 Q
(out\) source \214les from RCS.)-.1 E(RCS_COCOMSTR)108 453.6 Q .08
(The string displayed when fetching a source \214le from RCS.)144 465.6
R .081(If this is not set, then $RCS_COCOM)5.081 F
(\(the command line\) is displayed.)144 477.6 Q(RCS_COFLA)108 506.4 Q
(GS)-.4 E(Options that are passed to the $RCS_CO command.)144 518.4 Q
(RDirs)108 547.2 Q 2.5(Af)144 547.2 S(unction that con)-2.5 E -.15(ve)
-.4 G(rts a string into a list of Dir instances by searching the reposi\
tories.).15 E(REGSVR)108 576 Q 2.453(The program used on W)144 588 R
(indo)-.4 E 2.452(ws systems to re)-.25 F 2.452(gister a ne)-.15 F
(wly-b)-.25 E 2.452(uilt DLL library whene)-.2 F -.15(ve)-.25 G 4.952
(rt).15 G(he)-4.952 E/F1 10/Times-Bold@0 SF(Shar)144 600 Q(edLibrary)
-.18 E F0(\(\) b)A(uilder is passed a k)-.2 E -.15(ey)-.1 G -.1(wo).15 G
(rd ar).1 E(gument of)-.18 E F1 -.18(re)2.5 G(gister=1).18 E F0(.)A
(REGSVRCOM)108 628.8 Q .63(The command line used on W)144 640.8 R(indo)
-.4 E .63(ws systems to re)-.25 F .63(gister a ne)-.15 F(wly-b)-.25 E
.63(uilt DLL library whene)-.2 F -.15(ve)-.25 G 3.13(rt).15 G(he)-3.13 E
F1(Shar)144 652.8 Q(edLibrary)-.18 E F0(\(\) b)A(uilder is passed a k)
-.2 E -.15(ey)-.1 G -.1(wo).15 G(rd ar).1 E(gument of)-.18 E F1 -.18(re)
2.5 G(gister=1).18 E F0(.)A(REGSVRCOMSTR)108 681.6 Q .738
(The string displayed when re)144 693.6 R .738(gistering a ne)-.15 F
(wly-b)-.25 E .738(uilt DLL \214le.)-.2 F .738
(If this is not set, then $REGSVR-)5.738 F
(COM \(the command line\) is displayed.)144 705.6 Q(July 2010)286.415
768 Q(105)199.415 E 0 Cg EP
%%Page: 106 106
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(REGSVRFLA)
108 84 Q(GS)-.4 E 1.992(Flags passed to the DLL re)144 96 R 1.992
(gistration program on W)-.15 F(indo)-.4 E 1.993(ws systems when a ne)
-.25 F(wly-b)-.25 E 1.993(uilt DLL)-.2 F .9(library is re)144 108 R 3.4
(gistered. By)-.15 F(def)3.4 E .9(ault, this includes the)-.1 F/F1 10
/Times-Bold@0 SF(/s)3.4 E F0 .9(that pre)3.4 F -.15(ve)-.25 G .9
(nts dialog box).15 F .9(es from popping up)-.15 F
(and requiring user attention.)144 120 Q(RMIC)108 148.8 Q(The Ja)144
148.8 Q .5 -.25(va R)-.2 H(MI stub compiler).25 E(.)-.55 E(RMICCOM)108
177.6 Q 1.384(The command line used to compile stub and sk)144 189.6 R
1.384(eleton class \214les from Ja)-.1 F 1.884 -.25(va c)-.2 H 1.384
(lasses that contain).25 F 2.293(RMI implementations.)144 201.6 R(An)
7.293 E 4.793(yo)-.15 G 2.293(ptions speci\214ed in the $RMICFLA)-4.793
F 2.293(GS construction v)-.4 F 2.293(ariable are)-.25 F
(included on this command line.)144 213.6 Q(RMICCOMSTR)108 242.4 Q .907
(The string displayed when compiling stub and sk)144 254.4 R .907
(eleton class \214les from Ja)-.1 F 1.407 -.25(va c)-.2 H .908
(lasses that contain).25 F(RMI implementations.)144 266.4 Q
(If this is not set, then $RMICCOM \(the command line\) is displayed.)5
E(en)144 290.4 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(RMICCOMSTR = "Generating stub/sk).4 E
(eleton class \214les $T)-.1 E(ARGETS from $SOURCES"\))-.93 E(RMICFLA)
108 319.2 Q(GS)-.4 E(General options passed to the Ja)144 331.2 Q .5
-.25(va R)-.2 H(MI stub compiler).25 E(.)-.55 E(_RP)108 360 Q -1.11(AT)
-.92 G(H)1.11 E .48(An automatically-generated construction v)144 372 R
.48(ariable containing the rpath \215ags to be used when link-)-.25 F
1.138(ing a program with shared libraries.)144 384 R 1.138(The v)6.138 F
1.138(alue of $_RP)-.25 F -1.11(AT)-.92 G 3.638(Hi)1.11 G 3.638(sc)
-3.638 G 1.138(reated by appending $RP)-3.638 F -1.11(AT)-.92 G(H-)1.11
E(PREFIX and $RP)144 396 Q -1.11(AT)-.92 G(HSUFFIX to the be)1.11 E
(ginning and end of each directory in $RP)-.15 E -1.11(AT)-.92 G(H.)1.11
E(RP)108 424.8 Q -1.11(AT)-.92 G(H)1.11 E 3.33(Al)144 424.8 S .83
(ist of paths to search for shared libraries when running programs.)
-3.33 F .83(Currently only used in the)5.83 F 1.414
(GNU \(gnulink\), IRIX \(sgilink\) and Sun \(sunlink\) link)144 436.8 R
3.914(ers. Ignored)-.1 F 1.415(on platforms and toolchains)3.914 F 1.099
(that don')144 448.8 R 3.599(ts)-.18 G 1.099(upport it.)-3.599 F 1.098
(Note that the paths added to RP)6.099 F -1.11(AT)-.92 G 3.598(Ha)1.11 G
1.098(re not transformed by)-3.598 F F1(scons)3.598 E F0 1.098(in an)
3.598 F(y)-.15 E -.1(wa)144 460.8 S 2.5(y: if).1 F(you w)2.5 E
(ant an absolute path, you must mak)-.1 E 2.5(ei)-.1 G 2.5(ta)-2.5 G
(bsolute yourself.)-2.5 E(RP)108 489.6 Q -1.11(AT)-.92 G(HPREFIX)1.11 E
.555(The pre\214x used to specify a directory to be searched for shared\
 libraries when running programs.)144 501.6 R 1.44
(This will be appended to the be)144 513.6 R 1.439
(ginning of each directory in the $RP)-.15 F -1.11(AT)-.92 G 3.939(Hc)
1.11 G 1.439(onstruction v)-3.939 F(ariable)-.25 E(when the $_RP)144
525.6 Q -1.11(AT)-.92 G 2.5(Hv)1.11 G
(ariable is automatically generated.)-2.75 E(RP)108 554.4 Q -1.11(AT)
-.92 G(HSUFFIX)1.11 E .608(The suf)144 566.4 R .608(\214x used to speci\
fy a directory to be searched for shared libraries when running program\
s.)-.25 F .418
(This will be appended to the end of each directory in the $RP)144 578.4
R -1.11(AT)-.92 G 2.917(Hc)1.11 G .417(onstruction v)-2.917 F .417
(ariable when the)-.25 F($_RP)144 590.4 Q -1.11(AT)-.92 G 2.5(Hv)1.11 G
(ariable is automatically generated.)-2.75 E(RPCGEN)108 619.2 Q
(The RPC protocol compiler)144 631.2 Q(.)-.55 E(RPCGENCLIENTFLA)108 660
Q(GS)-.4 E .014(Options passed to the RPC protocol compiler when genera\
ting client side stubs.)144 672 R .014(These are in addi-)5.014 F
(tion to an)144 684 Q 2.5<798d>-.15 G(ags speci\214ed in the $RPCGENFLA)
-2.5 E(GS construction v)-.4 E(ariable.)-.25 E(July 2010)286.415 768 Q
(106)199.415 E 0 Cg EP
%%Page: 107 107
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(RPCGENFLA)
108 84 Q(GS)-.4 E(General options passed to the RPC protocol compiler)
144 96 Q(.)-.55 E(RPCGENHEADERFLA)108 124.8 Q(GS)-.4 E .2(Options passe\
d to the RPC protocol compiler when generating a header \214le.)144
136.8 R .2(These are in addition)5.2 F(to an)144 148.8 Q 2.5<798d>-.15 G
(ags speci\214ed in the $RPCGENFLA)-2.5 E(GS construction v)-.4 E
(ariable.)-.25 E(RPCGENSER)108 177.6 Q(VICEFLA)-.8 E(GS)-.4 E 1.514
(Options passed to the RPC protocol compiler when generating serv)144
189.6 R 1.514(er side stubs.)-.15 F 1.515(These are in)6.515 F
(addition to an)144 201.6 Q 2.5<798d>-.15 G
(ags speci\214ed in the $RPCGENFLA)-2.5 E(GS construction v)-.4 E
(ariable.)-.25 E(RPCGENXDRFLA)108 230.4 Q(GS)-.4 E .591(Options passed \
to the RPC protocol compiler when generating XDR routines.)144 242.4 R
.59(These are in addi-)5.59 F(tion to an)144 254.4 Q 2.5<798d>-.15 G
(ags speci\214ed in the $RPCGENFLA)-2.5 E(GS construction v)-.4 E
(ariable.)-.25 E(SCANNERS)108 283.2 Q 2.906(Al)144 295.2 S .406
(ist of the a)-2.906 F -.25(va)-.2 G .406(ilable implicit dependenc).25
F 2.907(ys)-.15 G 2.907(canners. Ne)-2.907 F 2.907<778c>-.25 G .407
(le scanners may be added by append-)-2.907 F .143
(ing to this list, although the more \215e)144 307.2 R .143
(xible approach is to associate scanners with a speci\214c Builder)-.15
F(.)-.55 E
(See the sections "Builder Objects" and "Scanner Objects," belo)144
319.2 Q 1.3 -.65(w, f)-.25 H(or more information.).65 E(SCCS)108 348 Q
(The SCCS e)144 348 Q -.15(xe)-.15 G(cutable.).15 E(SCCSCOM)108 376.8 Q
(The command line used to fetch source \214les from SCCS.)144 388.8 Q
(SCCSCOMSTR)108 417.6 Q 1.145(The string displayed when fetching a sour\
ce \214le from a CVS repository)144 429.6 R 6.145(.I)-.65 G 3.646(ft)
-6.145 G 1.146(his is not set, then)-3.646 F
($SCCSCOM \(the command line\) is displayed.)144 441.6 Q(SCCSFLA)108
470.4 Q(GS)-.4 E(General options that are passed to SCCS.)144 482.4 Q
(SCCSGETFLA)108 511.2 Q(GS)-.4 E .11
(Options that are passed speci\214cally to the SCCS "get" subcommand.)
144 523.2 R .109(This can be set, for e)5.109 F(xample,)-.15 E(to)144
535.2 Q/F1 10/Times-Bold@0 SF<ad65>2.5 E F0
(to check out editable \214les from SCCS.)2.5 E(SCONS_HOME)108 564 Q
1.156(The \(optional\) path to the SCons library directory)144 576 R
3.656(,i)-.65 G 1.156(nitialized from the e)-3.656 F 1.157(xternal en)
-.15 F 3.657(vironment. If)-.4 F .688
(set, this is used to construct a shorter and more ef)144 588 R .688
(\214cient search path in the $MSVSSCONS com-)-.25 F(mand line e)144 600
Q -.15(xe)-.15 G(cuted from Microsoft V).15 E
(isual Studio project \214les.)-.6 E(SHCC)108 628.8 Q
(The C compiler used for generating shared-library objects.)144 628.8 Q
(SHCCCOM)108 657.6 Q 1.29(The command line used to compile a C source \
\214le to a shared-library object \214le.)144 669.6 R(An)6.29 E 3.79(yo)
-.15 G(ptions)-3.79 E 3.483(speci\214ed in the $SHCFLA)144 681.6 R 3.482
(GS, $SHCCFLA)-.4 F 3.482(GS and $CPPFLA)-.4 F 3.482(GS construction v)
-.4 F 3.482(ariables are)-.25 F(included on this command line.)144 693.6
Q(July 2010)286.415 768 Q(107)199.415 E 0 Cg EP
%%Page: 108 108
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(SHCCCOMSTR)
108 84 Q .093(The string displayed when a C source \214le is compiled t\
o a shared object \214le.)144 96 R .094(If this is not set, then)5.094 F
($SHCCCOM \(the command line\) is displayed.)144 108 Q(en)144 132 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(SHCCCOMSTR = "Compiling shared object $T).4 E(ARGET"\))-.93 E
(SHCCFLA)108 160.8 Q(GS)-.4 E(Options that are passed to the C and C++ \
compilers to generate shared-library objects.)144 172.8 Q(SHCFLA)108
201.6 Q(GS)-.4 E(Options that are passed to the C compiler \(only; not \
C++\) to generate shared-library objects.)144 213.6 Q(SHCXX)108 242.4 Q
(The C++ compiler used for generating shared-library objects.)144 254.4
Q(SHCXXCOM)108 283.2 Q .585(The command line used to compile a C++ sour\
ce \214le to a shared-library object \214le.)144 295.2 R(An)5.585 E
3.085(yo)-.15 G(ptions)-3.085 E 1.627(speci\214ed in the $SHCXXFLA)144
307.2 R 1.627(GS and $CPPFLA)-.4 F 1.627(GS construction v)-.4 F 1.628
(ariables are included on this)-.25 F(command line.)144 319.2 Q
(SHCXXCOMSTR)108 348 Q .543(The string displayed when a C++ source \214\
le is compiled to a shared object \214le.)144 360 R .542
(If this is not set,)5.542 F
(then $SHCXXCOM \(the command line\) is displayed.)144 372 Q(en)144 396
Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(SHCXXCOMSTR = "Compiling shared object $T).4 E(ARGET"\))-.93
E(SHCXXFLA)108 424.8 Q(GS)-.4 E(Options that are passed to the C++ comp\
iler to generate shared-library objects.)144 436.8 Q(SHELL)108 465.6 Q
2.687(As)144 477.6 S .187
(tring naming the shell program that will be passed to the $SP)-2.687 F
-.9(AW)-.92 G 2.688(Nf).9 G 2.688(unction. See)-2.688 F .188(the $SP)
2.688 F -.9(AW)-.92 G(N).9 E(construction v)144 489.6 Q
(ariable for more information.)-.25 E(SHF77)108 518.4 Q .713(The F)144
518.4 R .712
(ortran 77 compiler used for generating shared-library objects.)-.15 F
-1.1(Yo)5.712 G 3.212(us)1.1 G .712(hould normally set the)-3.212 F
($SHFOR)144 530.4 Q 1.813(TRAN v)-.6 F 1.813
(ariable, which speci\214es the def)-.25 F 1.814(ault F)-.1 F 1.814
(ortran compiler for all F)-.15 F 1.814(ortran v)-.15 F(ersions.)-.15 E
-1.1(Yo)144 542.4 S 2.513(uo)1.1 G .013(nly need to set $SHF77 if you n\
eed to use a speci\214c compiler or compiler v)-2.513 F .012
(ersion for F)-.15 F(ortran)-.15 E(77 \214les.)144 554.4 Q(SHF77COM)108
583.2 Q 1.151(The command line used to compile a F)144 595.2 R 1.151
(ortran 77 source \214le to a shared-library object \214le.)-.15 F -1.1
(Yo)6.152 G(u)1.1 E .003(only need to set $SHF77COM if you need to use \
a speci\214c command line for F)144 607.2 R .003(ortran 77 \214les.)-.15
F -1.1(Yo)5.003 G(u)1.1 E .735(should normally set the $SHFOR)144 619.2
R .735(TRANCOM v)-.6 F .736(ariable, which speci\214es the def)-.25 F
.736(ault command line)-.1 F(for all F)144 631.2 Q(ortran v)-.15 E
(ersions.)-.15 E(SHF77COMSTR)108 660 Q .875
(The string displayed when a F)144 672 R .874
(ortran 77 source \214le is compiled to a shared-library object \214le.)
-.15 F(If)5.874 E(this is not set, then $SHF77COM or $SHFOR)144 684 Q
(TRANCOM \(the command line\) is displayed.)-.6 E(July 2010)286.415 768
Q(108)199.415 E 0 Cg EP
%%Page: 109 109
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(SHF77FLA)
108 84 Q(GS)-.4 E .76(Options that are passed to the F)144 96 R .761
(ortran 77 compiler to generated shared-library objects.)-.15 F -1.1(Yo)
5.761 G 3.261(uo)1.1 G(nly)-3.261 E 1.001(need to set $SHF77FLA)144 108
R 1.001(GS if you need to de\214ne speci\214c user options for F)-.4 F 1
(ortran 77 \214les.)-.15 F -1.1(Yo)6 G(u)1.1 E 3.485
(should normally set the $SHFOR)144 120 R(TRANFLA)-.6 E 3.486(GS v)-.4 F
3.486(ariable, which speci\214es the user)-.25 F(-speci\214ed)-.2 E
(options passed to the def)144 132 Q(ault F)-.1 E
(ortran compiler for all F)-.15 E(ortran v)-.15 E(ersions.)-.15 E
(SHF77PPCOM)108 160.8 Q .186(The command line used to compile a F)144
172.8 R .186(ortran 77 source \214le to a shared-library object \214le \
after \214rst)-.15 F 1.594
(running the \214le through the C preprocessor)144 184.8 R 6.595(.A)-.55
G 1.895 -.15(ny o)-6.595 H 1.595(ptions speci\214ed in the $SHF77FLA).15
F 1.595(GS and)-.4 F($CPPFLA)144 196.8 Q 1.688(GS construction v)-.4 F
1.688(ariables are included on this command line.)-.25 F -1.1(Yo)6.688 G
4.187(uo)1.1 G 1.687(nly need to set)-4.187 F .858($SHF77PPCOM if you n\
eed to use a speci\214c C-preprocessor command line for F)144 208.8 R
.859(ortran 77 \214les.)-.15 F -1.1(Yo)144 220.8 S 3.336(us)1.1 G .836
(hould normally set the $SHFOR)-3.336 F .835(TRANPPCOM v)-.6 F .835
(ariable, which speci\214es the def)-.25 F .835(ault C-pre-)-.1 F
(processor command line for all F)144 232.8 Q(ortran v)-.15 E(ersions.)
-.15 E(SHF77PPCOMSTR)108 261.6 Q .458(The string displayed when a F)144
273.6 R .458(ortran 77 source \214le is compiled to a shared-library ob\
ject \214le after)-.15 F 2.289
(\214rst running the \214le through the C preprocessor)144 285.6 R 7.289
(.I)-.55 G 4.789(ft)-7.289 G 2.288(his is not set, then $SHF77PPCOM or)
-4.789 F($SHFOR)144 297.6 Q
(TRANPPCOM \(the command line\) is displayed.)-.6 E(SHF90)108 326.4 Q
.712(The F)144 326.4 R .712
(ortran 90 compiler used for generating shared-library objects.)-.15 F
-1.1(Yo)5.712 G 3.213(us)1.1 G .713(hould normally set the)-3.213 F
($SHFOR)144 338.4 Q 1.814(TRAN v)-.6 F 1.814
(ariable, which speci\214es the def)-.25 F 1.814(ault F)-.1 F 1.813
(ortran compiler for all F)-.15 F 1.813(ortran v)-.15 F(ersions.)-.15 E
-1.1(Yo)144 350.4 S 2.512(uo)1.1 G .013(nly need to set $SHF90 if you n\
eed to use a speci\214c compiler or compiler v)-2.512 F .013
(ersion for F)-.15 F(ortran)-.15 E(90 \214les.)144 362.4 Q(SHF90COM)108
391.2 Q 1.152(The command line used to compile a F)144 403.2 R 1.151
(ortran 90 source \214le to a shared-library object \214le.)-.15 F -1.1
(Yo)6.151 G(u)1.1 E .003(only need to set $SHF90COM if you need to use \
a speci\214c command line for F)144 415.2 R .004(ortran 90 \214les.)-.15
F -1.1(Yo)5.004 G(u)1.1 E .736(should normally set the $SHFOR)144 427.2
R .736(TRANCOM v)-.6 F .735(ariable, which speci\214es the def)-.25 F
.735(ault command line)-.1 F(for all F)144 439.2 Q(ortran v)-.15 E
(ersions.)-.15 E(SHF90COMSTR)108 468 Q .874
(The string displayed when a F)144 480 R .874
(ortran 90 source \214le is compiled to a shared-library object \214le.)
-.15 F(If)5.875 E(this is not set, then $SHF90COM or $SHFOR)144 492 Q
(TRANCOM \(the command line\) is displayed.)-.6 E(SHF90FLA)108 520.8 Q
(GS)-.4 E .761(Options that are passed to the F)144 532.8 R .761
(ortran 90 compiler to generated shared-library objects.)-.15 F -1.1(Yo)
5.76 G 3.26(uo)1.1 G(nly)-3.26 E 1(need to set $SHF90FLA)144 544.8 R
1.001(GS if you need to de\214ne speci\214c user options for F)-.4 F
1.001(ortran 90 \214les.)-.15 F -1.1(Yo)6.001 G(u)1.1 E 3.486
(should normally set the $SHFOR)144 556.8 R(TRANFLA)-.6 E 3.486(GS v)-.4
F 3.485(ariable, which speci\214es the user)-.25 F(-speci\214ed)-.2 E
(options passed to the def)144 568.8 Q(ault F)-.1 E
(ortran compiler for all F)-.15 E(ortran v)-.15 E(ersions.)-.15 E
(SHF90PPCOM)108 597.6 Q .186(The command line used to compile a F)144
609.6 R .186(ortran 90 source \214le to a shared-library object \214le \
after \214rst)-.15 F 1.595
(running the \214le through the C preprocessor)144 621.6 R 6.595(.A)-.55
G 1.895 -.15(ny o)-6.595 H 1.594(ptions speci\214ed in the $SHF90FLA).15
F 1.594(GS and)-.4 F($CPPFLA)144 633.6 Q 1.687(GS construction v)-.4 F
1.688(ariables are included on this command line.)-.25 F -1.1(Yo)6.688 G
4.188(uo)1.1 G 1.688(nly need to set)-4.188 F .859($SHF90PPCOM if you n\
eed to use a speci\214c C-preprocessor command line for F)144 645.6 R
.858(ortran 90 \214les.)-.15 F -1.1(Yo)144 657.6 S 3.335(us)1.1 G .835
(hould normally set the $SHFOR)-3.335 F .835(TRANPPCOM v)-.6 F .836
(ariable, which speci\214es the def)-.25 F .836(ault C-pre-)-.1 F
(processor command line for all F)144 669.6 Q(ortran v)-.15 E(ersions.)
-.15 E(SHF90PPCOMSTR)108 698.4 Q .458(The string displayed when a F)144
710.4 R .458(ortran 90 source \214le is compiled to a shared-library ob\
ject \214le after)-.15 F 2.288
(\214rst running the \214le through the C preprocessor)144 722.4 R 7.289
(.I)-.55 G 4.789(ft)-7.289 G 2.289(his is not set, then $SHF90PPCOM or)
-4.789 F(July 2010)286.415 768 Q(109)199.415 E 0 Cg EP
%%Page: 110 110
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R($SHFOR)144
84 Q(TRANPPCOM \(the command line\) is displayed.)-.6 E(SHF95)108 112.8
Q .713(The F)144 112.8 R .712
(ortran 95 compiler used for generating shared-library objects.)-.15 F
-1.1(Yo)5.712 G 3.212(us)1.1 G .712(hould normally set the)-3.212 F
($SHFOR)144 124.8 Q 1.813(TRAN v)-.6 F 1.813
(ariable, which speci\214es the def)-.25 F 1.814(ault F)-.1 F 1.814
(ortran compiler for all F)-.15 F 1.814(ortran v)-.15 F(ersions.)-.15 E
-1.1(Yo)144 136.8 S 2.513(uo)1.1 G .013(nly need to set $SHF95 if you n\
eed to use a speci\214c compiler or compiler v)-2.513 F .012
(ersion for F)-.15 F(ortran)-.15 E(95 \214les.)144 148.8 Q(SHF95COM)108
177.6 Q 1.151(The command line used to compile a F)144 189.6 R 1.151
(ortran 95 source \214le to a shared-library object \214le.)-.15 F -1.1
(Yo)6.152 G(u)1.1 E .003(only need to set $SHF95COM if you need to use \
a speci\214c command line for F)144 201.6 R .003(ortran 95 \214les.)-.15
F -1.1(Yo)5.003 G(u)1.1 E .735(should normally set the $SHFOR)144 213.6
R .735(TRANCOM v)-.6 F .736(ariable, which speci\214es the def)-.25 F
.736(ault command line)-.1 F(for all F)144 225.6 Q(ortran v)-.15 E
(ersions.)-.15 E(SHF95COMSTR)108 254.4 Q .875
(The string displayed when a F)144 266.4 R .874
(ortran 95 source \214le is compiled to a shared-library object \214le.)
-.15 F(If)5.874 E(this is not set, then $SHF95COM or $SHFOR)144 278.4 Q
(TRANCOM \(the command line\) is displayed.)-.6 E(SHF95FLA)108 307.2 Q
(GS)-.4 E .76(Options that are passed to the F)144 319.2 R .761
(ortran 95 compiler to generated shared-library objects.)-.15 F -1.1(Yo)
5.761 G 3.261(uo)1.1 G(nly)-3.261 E 1.001(need to set $SHF95FLA)144
331.2 R 1.001(GS if you need to de\214ne speci\214c user options for F)
-.4 F 1(ortran 95 \214les.)-.15 F -1.1(Yo)6 G(u)1.1 E 3.485
(should normally set the $SHFOR)144 343.2 R(TRANFLA)-.6 E 3.486(GS v)-.4
F 3.486(ariable, which speci\214es the user)-.25 F(-speci\214ed)-.2 E
(options passed to the def)144 355.2 Q(ault F)-.1 E
(ortran compiler for all F)-.15 E(ortran v)-.15 E(ersions.)-.15 E
(SHF95PPCOM)108 384 Q .186(The command line used to compile a F)144 396
R .186(ortran 95 source \214le to a shared-library object \214le after \
\214rst)-.15 F 1.594(running the \214le through the C preprocessor)144
408 R 6.595(.A)-.55 G 1.895 -.15(ny o)-6.595 H 1.595
(ptions speci\214ed in the $SHF95FLA).15 F 1.595(GS and)-.4 F($CPPFLA)
144 420 Q 1.688(GS construction v)-.4 F 1.688
(ariables are included on this command line.)-.25 F -1.1(Yo)6.688 G
4.187(uo)1.1 G 1.687(nly need to set)-4.187 F .858($SHF95PPCOM if you n\
eed to use a speci\214c C-preprocessor command line for F)144 432 R .859
(ortran 95 \214les.)-.15 F -1.1(Yo)144 444 S 3.336(us)1.1 G .836
(hould normally set the $SHFOR)-3.336 F .835(TRANPPCOM v)-.6 F .835
(ariable, which speci\214es the def)-.25 F .835(ault C-pre-)-.1 F
(processor command line for all F)144 456 Q(ortran v)-.15 E(ersions.)
-.15 E(SHF95PPCOMSTR)108 484.8 Q .458(The string displayed when a F)144
496.8 R .458(ortran 95 source \214le is compiled to a shared-library ob\
ject \214le after)-.15 F 2.289
(\214rst running the \214le through the C preprocessor)144 508.8 R 7.289
(.I)-.55 G 4.789(ft)-7.289 G 2.288(his is not set, then $SHF95PPCOM or)
-4.789 F($SHFOR)144 520.8 Q
(TRANPPCOM \(the command line\) is displayed.)-.6 E(SHFOR)108 549.6 Q
(TRAN)-.6 E(The def)144 561.6 Q(ault F)-.1 E
(ortran compiler used for generating shared-library objects.)-.15 E
(SHFOR)108 590.4 Q(TRANCOM)-.6 E(The command line used to compile a F)
144 602.4 Q(ortran source \214le to a shared-library object \214le.)-.15
E(SHFOR)108 631.2 Q(TRANCOMSTR)-.6 E .021(The string displayed when a F)
144 643.2 R .022
(ortran source \214le is compiled to a shared-library object \214le.)
-.15 F .022(If this is)5.022 F(not set, then $SHFOR)144 655.2 Q
(TRANCOM \(the command line\) is displayed.)-.6 E(SHFOR)108 684 Q
(TRANFLA)-.6 E(GS)-.4 E(Options that are passed to the F)144 696 Q
(ortran compiler to generate shared-library objects.)-.15 E(July 2010)
286.415 768 Q(110)199.415 E 0 Cg EP
%%Page: 111 111
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(SHFOR)108
84 Q(TRANPPCOM)-.6 E .979(The command line used to compile a F)144 96 R
.979
(ortran source \214le to a shared-library object \214le after \214rst)
-.15 F .596(running the \214le through the C preprocessor)144 108 R
5.597(.A)-.55 G .897 -.15(ny o)-5.597 H .597
(ptions speci\214ed in the $SHFOR).15 F(TRANFLA)-.6 E(GS)-.4 E
(and $CPPFLA)144 120 Q(GS construction v)-.4 E
(ariables are included on this command line.)-.25 E(SHFOR)108 148.8 Q
(TRANPPCOMSTR)-.6 E .111(The string displayed when a F)144 160.8 R .11(\
ortran source \214le is compiled to a shared-library object \214le afte\
r \214rst)-.15 F 1.047(running the \214le through the C preprocessor)144
172.8 R 6.047(.I)-.55 G 3.547(ft)-6.047 G 1.047
(his is not set, then $SHFOR)-3.547 F 1.048(TRANPPCOM \(the)-.6 F
(command line\) is displayed.)144 184.8 Q(SHLIBPREFIX)108 213.6 Q
(The pre\214x used for shared library \214le names.)144 225.6 Q
(SHLIBSUFFIX)108 254.4 Q(The suf)144 266.4 Q
(\214x used for shared library \214le names.)-.25 E(SHLINK)108 295.2 Q
(The link)144 307.2 Q(er for programs that use shared libraries.)-.1 E
(SHLINKCOM)108 336 Q
(The command line used to link programs using shared libraries.)144 348
Q(SHLINKCOMSTR)108 376.8 Q 1.892
(The string displayed when programs using shared libraries are link)144
388.8 R 4.391(ed. If)-.1 F 1.891(this is not set, then)4.391 F
($SHLINKCOM \(the command line\) is displayed.)144 400.8 Q(en)144 424.8
Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(SHLINKCOMSTR = "Linking shared $T).4 E(ARGET"\))-.93 E
(SHLINKFLA)108 453.6 Q(GS)-.4 E .557
(General user options passed to the link)144 465.6 R .557
(er for programs using shared libraries.)-.1 F .558(Note that this v)
5.558 F(ari-)-.25 E .875(able should)144 477.6 R/F1 10/Times-Italic@0 SF
(not)3.735 E F0(contain)4.055 E/F2 10/Times-Bold@0 SF<ad6c>3.375 E F0
.874(\(or similar\) options for linking with the libraries listed in $L\
IBS, nor)3.375 F F2<ad4c>144 489.6 Q F0 1.055(\(or similar\) include se\
arch path options that scons generates automatically from $LIBP)3.555 F
-1.11(AT)-.92 G(H.)1.11 E 2.957(See $_LIBFLA)144 501.6 R 2.957(GS abo)
-.4 F -.15(ve)-.15 G 5.457(,f).15 G 2.957(or the v)-5.457 F 2.957
(ariable that e)-.25 F 2.956(xpands to library-link options, and $_LIB-)
-.15 F(DIRFLA)144 513.6 Q(GS abo)-.4 E -.15(ve)-.15 G 2.5(,f).15 G
(or the v)-2.5 E(ariable that e)-.25 E
(xpands to library search path options.)-.15 E(SHOBJPREFIX)108 542.4 Q
(The pre\214x used for shared object \214le names.)144 554.4 Q
(SHOBJSUFFIX)108 583.2 Q(The suf)144 595.2 Q
(\214x used for shared object \214le names.)-.25 E(SOURCE)108 624 Q
3.161(Ar)144 636 S(eserv)-3.161 E .661(ed v)-.15 F .661
(ariable name that may not be set or used in a construction en)-.25 F
3.162(vironment. \(See)-.4 F("V)3.162 E(ari-)-1.11 E
(able Substitution," belo)144 648 Q -.65(w.)-.25 G(\)).65 E(SOURCE_URL)
108 676.8 Q .025
(The URL \(web address\) of the location from which the project w)144
688.8 R .025(as retrie)-.1 F -.15(ve)-.25 G 2.525(d. This).15 F .025
(is used to \214ll in)2.525 F(the)144 700.8 Q F2(Sour)2.5 E(ce:)-.18 E
F0(\214eld in the controlling information for Ipkg and RPM packages.)2.5
E(July 2010)286.415 768 Q(111)199.415 E 0 Cg EP
%%Page: 112 112
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(SOURCES)108
84 Q 3.161(Ar)144 96 S(eserv)-3.161 E .661(ed v)-.15 F .661
(ariable name that may not be set or used in a construction en)-.25 F
3.162(vironment. \(See)-.4 F("V)3.162 E(ari-)-1.11 E
(able Substitution," belo)144 108 Q -.65(w.)-.25 G(\)).65 E(SP)108 136.8
Q -.9(AW)-.92 G(N).9 E 2.855(Ac)144 148.8 S .355
(ommand interpreter function that will be called to e)-2.855 F -.15(xe)
-.15 G .355(cute command line strings. The function).15 F(must e)144
160.8 Q(xpect the follo)-.15 E(wing ar)-.25 E(guments:)-.18 E(def spa)
144 184.8 Q(wn\(shell, escape, cmd, ar)-.15 E(gs, en)-.18 E(v\):)-.4 E
/F1 10/Times-Italic@0 SF(sh)144.34 201.6 Q F0 .808
(is a string naming the shell program to use.)3.587 F F1(escape)5.998 E
F0 .808(is a function that can be called to escape)3.488 F 1.327
(shell special characters in the command line.)144 213.6 R F1(cmd)6.527
E F0 1.327(is the path to the command to be e)4.597 F -.15(xe)-.15 G
(cuted.).15 E F1(ar)144.33 225.6 Q(gs)-.37 E F0 .547(is the ar)3.317 F
.547(guments to the command.)-.18 F F1(en)5.737 E(v)-.4 E F0 .548
(is a dictionary of the en)3.367 F .548(vironment v)-.4 F .548
(ariables in which)-.25 F(the command should be e)144 237.6 Q -.15(xe)
-.15 G(cuted.).15 E(SUBST_DICT)108 266.4 Q .301
(The dictionary used by the)144 278.4 R/F2 10/Times-Bold@0 SF
(Subst\214le)2.801 E F0 .301(\(\) or)B F2 -.92(Te)2.801 G(xt\214le).92 E
F0 .301(\(\) b)B .301(uilders for substitution v)-.2 F 2.8(alues. It)
-.25 F .3(can be an)2.8 F(y-)-.15 E 1.485
(thing acceptable to the dict\(\) constructor)144 290.4 R 3.985(,s)-.4 G
3.985(oi)-3.985 G 3.985(na)-3.985 G 1.485(ddition to a dictionary)-3.985
F 3.985(,l)-.65 G 1.485(ists of tuples are also)-3.985 F(acceptable.)144
302.4 Q(SUBSTFILEPREFIX)108 331.2 Q(The pre\214x used for)144 343.2 Q F2
(Subst\214le)2.5 E F0(\(\) \214le names, the null string by def)A(ault.)
-.1 E(SUBSTFILESUFFIX)108 372 Q(The suf)144 384 Q(\214x used for)-.25 E
F2(Subst\214le)2.5 E F0(\(\) \214le names, the null string by def)A
(ault.)-.1 E(SUMMAR)108 412.8 Q(Y)-.65 E 3.416(As)144 424.8 S .916
(hort summary of what the project is about.)-3.416 F .916
(This is used to \214ll in the)5.916 F F2(Summary:)3.415 E F0 .915
(\214eld in the)3.415 F .848
(controlling information for Ipkg and RPM packages, and as the)144 436.8
R F2(Description:)3.349 E F0 .849(\214eld in MSI pack-)3.349 F(ages.)144
448.8 Q(SWIG)108 477.6 Q(The scripting language wrapper and interf)144
477.6 Q(ace generator)-.1 E(.)-.55 E(SWIGCFILESUFFIX)108 506.4 Q 1.254
(The suf)144 518.4 R 1.254(\214x that will be used for intermediate C s\
ource \214les generated by the scripting language)-.25 F 1.56
(wrapper and interf)144 530.4 R 1.561(ace generator)-.1 F 6.561(.T)-.55
G 1.561(he def)-6.561 F 1.561(ault v)-.1 F 1.561(alue is)-.25 F F2
(_wrap)4.061 E F0 4.061($CFILESUFFIX. By)B(def)4.061 E 1.561(ault, this)
-.1 F -.25(va)144 542.4 S .172(lue is used whene).25 F -.15(ve)-.25 G
2.672(rt).15 G(he)-2.672 E F2(\255c++)2.672 E F0 .171(option is)2.671 F
F1(not)3.031 E F0 .171(speci\214ed as part of the $SWIGFLA)3.351 F .171
(GS construction)-.4 F -.25(va)144 554.4 S(riable.).25 E(SWIGCOM)108
583.2 Q(The command line used to call the scripting language wrapper an\
d interf)144 595.2 Q(ace generator)-.1 E(.)-.55 E(SWIGCOMSTR)108 624 Q
.005(The string displayed when calling the scripting language wrapper a\
nd interf)144 636 R .005(ace generator)-.1 F 5.005(.I)-.55 G 2.505(ft)
-5.005 G .005(his is)-2.505 F
(not set, then $SWIGCOM \(the command line\) is displayed.)144 648 Q
(SWIGCXXFILESUFFIX)108 676.8 Q .502(The suf)144 688.8 R .502(\214x that\
 will be used for intermediate C++ source \214les generated by the scri\
pting language)-.25 F 1.56(wrapper and interf)144 700.8 R 1.561
(ace generator)-.1 F 6.561(.T)-.55 G 1.561(he def)-6.561 F 1.561(ault v)
-.1 F 1.561(alue is)-.25 F F2(_wrap)4.061 E F0 4.061($CFILESUFFIX. By)B
(def)4.061 E 1.561(ault, this)-.1 F -.25(va)144 712.8 S 1.35
(lue is used whene).25 F -.15(ve)-.25 G 3.85(rt).15 G(he)-3.85 E F2
(\255c++)3.849 E F0 1.349(option is speci\214ed as part of the $SWIGFLA)
3.849 F 1.349(GS construction)-.4 F -.25(va)144 724.8 S(riable.).25 E
(July 2010)286.415 768 Q(112)199.415 E 0 Cg EP
%%Page: 113 113
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(SWIGDIRECT)
108 84 Q(ORSUFFIX)-.18 E .465(The suf)144 96 R .465(\214x that will be \
used for intermediate C++ header \214les generated by the scripting lan\
guage)-.25 F .708(wrapper and interf)144 108 R .707(ace generator)-.1 F
5.707(.T)-.55 G .707
(hese are only generated for C++ code when the SWIG ')-5.707 F(direc-)
-.5 E(tors' feature is turned on.)144 120 Q(The def)5 E(ault v)-.1 E
(alue is)-.25 E/F1 10/Times-Bold@0 SF(_wrap.h)2.5 E F0(.)A(SWIGFLA)108
148.8 Q(GS)-.4 E .882
(General options passed to the scripting language wrapper and interf)144
160.8 R .883(ace generator)-.1 F 5.883(.T)-.55 G .883(his is where)
-5.883 F .33(you should set)144 172.8 R F1(\255python)2.83 E F0(,)A F1
(\255perl5)2.83 E F0(,)A F1(\255tcl)2.83 E F0 2.83(,o)C 2.829(rw)-2.83 G
(hate)-2.829 E -.15(ve)-.25 G 2.829(ro).15 G .329(ther options you w)
-2.829 F .329(ant to specify to SWIG.)-.1 F(If)5.329 E .032(you set the)
144 184.8 R F1(\255c++)2.532 E F0 .032(option in this v)2.532 F
(ariable,)-.25 E F1(scons)2.532 E F0 .033(will, by def)2.533 F .033
(ault, generate a C++ intermediate source)-.1 F(\214le with the e)144
196.8 Q(xtension that is speci\214ed as the $CXXFILESUFFIX v)-.15 E
(ariable.)-.25 E(_SWIGINCFLA)108 225.6 Q(GS)-.4 E .486
(An automatically-generated construction v)144 237.6 R .485
(ariable containing the SWIG command-line options for)-.25 F .624
(specifying directories to be searched for included \214les.)144 249.6 R
.625(The v)5.625 F .625(alue of $_SWIGINCFLA)-.25 F .625(GS is cre-)-.4
F .285(ated by appending $SWIGINCPREFIX and $SWIGINCSUFFIX to the be)144
261.6 R .285(ginning and end of each)-.15 F(directory in $SWIGP)144
273.6 Q -1.11(AT)-.92 G(H.)1.11 E(SWIGINCPREFIX)108 302.4 Q 2.644(The p\
re\214x used to specify an include directory on the SWIG command line.)
144 314.4 R 2.644(This will be)7.644 F .975(appended to the be)144 326.4
R .975(ginning of each directory in the $SWIGP)-.15 F -1.11(AT)-.92 G
3.474(Hc)1.11 G .974(onstruction v)-3.474 F .974(ariable when the)-.25 F
($_SWIGINCFLA)144 338.4 Q(GS v)-.4 E
(ariable is automatically generated.)-.25 E(SWIGINCSUFFIX)108 367.2 Q
2.697(The suf)144 379.2 R 2.697
(\214x used to specify an include directory on the SWIG command line.)
-.25 F 2.698(This will be)7.698 F 2.929
(appended to the end of each directory in the $SWIGP)144 391.2 R -1.11
(AT)-.92 G 5.429(Hc)1.11 G 2.929(onstruction v)-5.429 F 2.929
(ariable when the)-.25 F($_SWIGINCFLA)144 403.2 Q(GS v)-.4 E
(ariable is automatically generated.)-.25 E(SWIGOUTDIR)108 432 Q 1.719(\
Speci\214es the output directory in which the scripting language wrappe\
r and interf)144 444 R 1.72(ace generator)-.1 F .014
(should place generated language-speci\214c \214les.)144 456 R .013
(This will be used by SCons to identify the \214les that)5.014 F .394
(will be generated by the &swig; call, and translated into the)144 468 R
F1 .395(swig -outdir)2.895 F F0 .395(option on the command)2.895 F
(line.)144 480 Q(SWIGP)108 508.8 Q -1.11(AT)-.92 G(H)1.11 E 1.118
(The list of directories that the scripting language wrapper and interf)
144 520.8 R 1.118(ace generate will search for)-.1 F 1.213
(included \214les.)144 532.8 R 1.213(The SWIG implicit dependenc)6.213 F
3.713(ys)-.15 G 1.214(canner will search these directories for include)
-3.713 F 2.5(\214les. The)144 544.8 R(def)2.5 E
(ault is to use the same path speci\214ed as $CPPP)-.1 E -1.11(AT)-.92 G
(H.)1.11 E(Don')144 568.8 Q 3.125(te)-.18 G .625
(xplicitly put include directory ar)-3.275 F .625(guments in SWIGFLA)
-.18 F .625(GS; the result will be non-portable)-.4 F 1.636
(and the directories will not be searched by the dependenc)144 580.8 R
4.136(ys)-.15 G(canner)-4.136 E 6.636(.N)-.55 G 1.636
(ote: directory names in)-6.636 F(SWIGP)144 592.8 Q -1.11(AT)-.92 G 3.25
(Hw)1.11 G .75(ill be look)-3.25 F .75(ed-up relati)-.1 F 1.05 -.15
(ve t)-.25 H 3.249(ot).15 G .749(he SConscript directory when the)-3.249
F 3.249(ya)-.15 G .749(re used in a com-)-3.249 F 2.5(mand. T)144 604.8
R 2.5(of)-.8 G(orce)-2.5 E F1(scons)2.5 E F0
(to look-up a directory relati)2.5 E .3 -.15(ve t)-.25 H 2.5(ot).15 G
(he root of the source tree use #:)-2.5 E(en)144 628.8 Q 2.5(v=E)-.4 G
-.4(nv)-2.5 G(ironment\(SWIGP).4 E -1.11(AT)-.92 G(H='#/include'\))1.11
E(The directory look-up can also be forced using the)144 645.6 Q F1(Dir)
2.5 E F0(\(\) function:)A(include = Dir\('include'\))144 669.6 Q(en)144
681.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(SWIGP).4 E -1.11(AT)-.92 G
(H=include\))1.11 E .69(The directory list will be added to command lin\
es through the automatically-generated $_SWIG-)144 698.4 R(INCFLA)144
710.4 Q 1.066(GS construction v)-.4 F 1.066
(ariable, which is constructed by appending the v)-.25 F 1.065
(alues of the $SWIG-)-.25 F 1.772
(INCPREFIX and $SWIGINCSUFFIX construction v)144 722.4 R 1.773
(ariables to the be)-.25 F 1.773(ginning and end of each)-.15 F
(July 2010)286.415 768 Q(113)199.415 E 0 Cg EP
%%Page: 114 114
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .084
(directory in $SWIGP)144 84 R -1.11(AT)-.92 G 2.584(H. An)1.11 F 2.584
(yc)-.15 G .084(ommand lines you de\214ne that need the SWIGP)-2.584 F
-1.11(AT)-.92 G 2.583(Hd)1.11 G .083(irectory list)-2.583 F
(should include $_SWIGINCFLA)144 96 Q(GS:)-.4 E(en)144 120 Q 2.5(v=E)-.4
G -.4(nv)-2.5 G(ironment\(SWIGCOM="my_swig -o $T).4 E
(ARGET $_SWIGINCFLA)-.93 E(GS $SOR)-.4 E(UCES"\))-.4 E(SWIGVERSION)108
148.8 Q(The v)144 160.8 Q(ersion number of the SWIG tool.)-.15 E -.93
(TA)108 189.6 S(R).93 E(The tar archi)144 189.6 Q -.15(ve)-.25 G -.55
(r.).15 G -.93(TA)108 218.4 S(RCOM).93 E
(The command line used to call the tar archi)144 230.4 Q -.15(ve)-.25 G
-.55(r.).15 G -.93(TA)108 259.2 S(RCOMSTR).93 E .25
(The string displayed when archi)144 271.2 R .25
(ving \214les using the tar archi)-.25 F -.15(ve)-.25 G 3.85 -.55(r. I)
.15 H 2.75(ft).55 G .25(his is not set, then $T)-2.75 F(ARCOM)-.93 E
(\(the command line\) is displayed.)144 283.2 Q(en)144 307.2 Q 2.5(v=E)
-.4 G -.4(nv)-2.5 G(ironment\(T).4 E(ARCOMSTR = "Archi)-.93 E(ving $T)
-.25 E(ARGET"\))-.93 E -.93(TA)108 336 S(RFLA).93 E(GS)-.4 E
(General options passed to the tar archi)144 348 Q -.15(ve)-.25 G -.55
(r.).15 G -.93(TA)108 376.8 S(RGET).93 E 3.162(Ar)144 388.8 S(eserv)
-3.162 E .662(ed v)-.15 F .661
(ariable name that may not be set or used in a construction en)-.25 F
3.161(vironment. \(See)-.4 F("V)3.161 E(ari-)-1.11 E
(able Substitution," belo)144 400.8 Q -.65(w.)-.25 G(\)).65 E -.93(TA)
108 429.6 S(RGET_ARCH).93 E .012(Sets the tar)144 441.6 R .012
(get architecture for V)-.18 F .013
(isual Studio compiler \(i.e. the arch of the binaries generated by the)
-.6 F .647(compiler\). If not set, def)144 453.6 R .647
(ault to $HOST_ARCH, or)-.1 F 3.147(,i)-.4 G 3.147(ft)-3.147 G .647
(hat is unset, to the architecture of the run-)-3.147 F .046
(ning machine')144 465.6 R 2.546(sO)-.55 G 2.547(S\()-2.546 G .047
(note that the p)-2.547 F .047(ython b)-.1 F .047
(uild or architecture has no ef)-.2 F 2.547(fect\). This)-.25 F -.25(va)
2.547 G .047(riable must be).25 F .409(passed as an ar)144 477.6 R .409
(gument to the En)-.18 F .409
(vironment\(\) constructor; setting it later has no ef)-.4 F 2.908
(fect. This)-.25 F .408(is cur)2.908 F(-)-.2 E(rently only used on W)144
489.6 Q(indo)-.4 E(ws, b)-.25 E
(ut in the future it will be used on other OSes as well.)-.2 E -1.11(Va)
144 513.6 S 1.076(lid v)1.11 F 1.076(alues for W)-.25 F(indo)-.4 E 1.077
(ws are)-.25 F/F1 10/Times-Bold@0 SF(x86)3.577 E F0(,)A F1(i386)3.577 E
F0 1.077(\(for 32 bits\);)3.577 F F1(amd64)3.577 E F0(,)A F1(emt64)3.577
E F0(,)A F1(x86_64)3.577 E F0 1.077(\(for 64 bits\); and)3.577 F F1
(ia64)144 525.6 Q F0 5.174(\(Itanium\). F)5.174 F 2.674(or e)-.15 F
2.674(xample, if you w)-.15 F 2.673
(ant to compile 64-bit binaries, you w)-.1 F 2.673(ould set)-.1 F F1 -.9
(TA)5.173 G(R-).9 E(GET_ARCH='x86_64')144 537.6 Q F0(in your SCons en)
2.5 E(vironment.)-.4 E -.93(TA)108 566.4 S(RGET_OS).93 E
(The name of the tar)164 578.4 Q
(get operating system for the compiled objects)-.18 E
(created by this En)164 590.4 Q(vironment.)-.4 E(This def)164 602.4 Q
(aults to the v)-.1 E(alue of HOST_OS, and the user can o)-.25 E -.15
(ve)-.15 G(rride it.).15 E(Currently only set for W)164 614.4 Q(in32.)
-.4 E -.93(TA)108 643.2 S(RGETS).93 E 3.161(Ar)144 655.2 S(eserv)-3.161
E .661(ed v)-.15 F .661
(ariable name that may not be set or used in a construction en)-.25 F
3.162(vironment. \(See)-.4 F("V)3.162 E(ari-)-1.11 E
(able Substitution," belo)144 667.2 Q -.65(w.)-.25 G(\)).65 E -.93(TA)
108 696 S(RSUFFIX).93 E(The suf)144 708 Q
(\214x used for tar \214le names.)-.25 E(July 2010)286.415 768 Q(114)
199.415 E 0 Cg EP
%%Page: 115 115
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(TEMPFILEPREFIX)108 84 Q 1.923
(The pre\214x for a temporary \214le used to e)144 96 R -.15(xe)-.15 G
1.922(cute lines longer than $MAXLINELENGTH.).15 F(The)6.922 E(def)144
108 Q .041(ault is '@'.)-.1 F .041
(This may be set for toolchains that use other v)5.041 F .041
(alues, such as '-@' for the diab com-)-.25 F
(piler or '-via' for ARM toolchain.)144 120 Q(TEX)108 148.8 Q(The T)144
148.8 Q(eX formatter and typesetter)-.7 E(.)-.55 E(TEXCOM)108 177.6 Q
(The command line used to call the T)144 189.6 Q
(eX formatter and typesetter)-.7 E(.)-.55 E(TEXCOMSTR)108 218.4 Q .44
(The string displayed when calling the T)144 230.4 R .439
(eX formatter and typesetter)-.7 F 5.439(.I)-.55 G 2.939(ft)-5.439 G
.439(his is not set, then $TEX-)-2.939 F
(COM \(the command line\) is displayed.)144 242.4 Q(en)144 266.4 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(TEXCOMSTR = "Building $T).4 E
(ARGET from T)-.93 E(eX input $SOURCES"\))-.7 E(TEXFLA)108 295.2 Q(GS)
-.4 E(General options passed to the T)144 307.2 Q
(eX formatter and typesetter)-.7 E(.)-.55 E(TEXINPUTS)108 336 Q .177
(List of directories that the LaT)144 348 R .177
(eX program will search for include directories.)-.7 F .178(The LaT)
5.177 F .178(eX implicit)-.7 F(dependenc)144 360 Q 2.5(ys)-.15 G(canner\
 will search these directories for \\include and \\import \214les.)-2.5
E(TEXTFILEPREFIX)108 388.8 Q(The pre\214x used for)144 400.8 Q/F1 10
/Times-Bold@0 SF -.92(Te)2.5 G(xt\214le).92 E F0
(\(\) \214le names, the null string by def)A(ault.)-.1 E(TEXTFILESUFFIX)
108 429.6 Q(The suf)144 441.6 Q(\214x used for)-.25 E F1 -.92(Te)2.5 G
(xt\214le).92 E F0(\(\) \214le names;)A F1(.txt)2.5 E F0(by def)2.5 E
(ault.)-.1 E -.18(TO)108 470.4 S(OLS).18 E 2.5(Al)144 482.4 S
(ist of the names of the T)-2.5 E
(ool speci\214cations that are part of this construction en)-.8 E
(vironment.)-.4 E(UNCHANGED_SOURCES)108 511.2 Q 3.162(Ar)144 523.2 S
(eserv)-3.162 E .662(ed v)-.15 F .661
(ariable name that may not be set or used in a construction en)-.25 F
3.161(vironment. \(See)-.4 F("V)3.161 E(ari-)-1.11 E
(able Substitution," belo)144 535.2 Q -.65(w.)-.25 G(\)).65 E
(UNCHANGED_T)108 564 Q(ARGETS)-.93 E 3.161(Ar)144 576 S(eserv)-3.161 E
.661(ed v)-.15 F .661
(ariable name that may not be set or used in a construction en)-.25 F
3.162(vironment. \(See)-.4 F("V)3.162 E(ari-)-1.11 E
(able Substitution," belo)144 588 Q -.65(w.)-.25 G(\)).65 E(VENDOR)108
616.8 Q .392(The person or or)144 628.8 R -.05(ga)-.18 G .392
(nization who supply the packaged softw).05 F 2.892(are. This)-.1 F .392
(is used to \214ll in the)2.892 F F1 -1(Ve)2.891 G(ndor:)1 E F0 .028
(\214eld in the controlling information for RPM packages, and the)144
640.8 R F1(Manufactur)2.528 E(er:)-.18 E F0 .028
(\214eld in the control-)2.528 F(ling information for MSI packages.)144
652.8 Q(VERSION)108 681.6 Q(The v)144 693.6 Q
(ersion of the project, speci\214ed as a string.)-.15 E(July 2010)
286.415 768 Q(115)199.415 E 0 Cg EP
%%Page: 116 116
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(WIN32_INSER)108 84 Q(T_DEF)-.6 E 2.5(Ad)144 96 S(eprecated synon)-2.5 E
(ym for $WINDO)-.15 E(WS_INSER)-.35 E(T_DEF)-.6 E(.)-.8 E
(WIN32DEFPREFIX)108 124.8 Q 2.5(Ad)144 136.8 S(eprecated synon)-2.5 E
(ym for $WINDO)-.15 E(WSDEFPREFIX.)-.35 E(WIN32DEFSUFFIX)108 165.6 Q 2.5
(Ad)144 177.6 S(eprecated synon)-2.5 E(ym for $WINDO)-.15 E
(WSDEFSUFFIX.)-.35 E(WIN32EXPPREFIX)108 206.4 Q 2.5(Ad)144 218.4 S
(eprecated synon)-2.5 E(ym for $WINDO)-.15 E(WSEXPSUFFIX.)-.35 E
(WIN32EXPSUFFIX)108 247.2 Q 2.5(Ad)144 259.2 S(eprecated synon)-2.5 E
(ym for $WINDO)-.15 E(WSEXPSUFFIX.)-.35 E(WINDO)108 288 Q(WS_INSER)-.35
E(T_DEF)-.6 E .34(When this is set to true, a library b)144 300 R .34
(uild of a W)-.2 F(indo)-.4 E .34(ws shared library \()-.25 F/F1 10
/Times-Bold@0 SF(.dll)A F0 .34(\214le\) will also b)B .34(uild a cor)-.2
F(-)-.2 E(responding)144 312 Q F1(.def)4.036 E F0 1.537
(\214le at the same time, if a)4.036 F F1(.def)4.037 E F0 1.537
(\214le is not already listed as a b)4.037 F 1.537(uild tar)-.2 F 4.037
(get. The)-.18 F(def)144 324 Q(ault is 0 \(do not b)-.1 E(uild a)-.2 E
F1(.def)2.5 E F0(\214le\).)2.5 E(WINDO)108 352.8 Q(WS_INSER)-.35 E
(T_MANIFEST)-.6 E .75(When this is set to true,)144 364.8 R F1(scons)
3.25 E F0 .749(will be a)3.25 F -.1(wa)-.15 G .749(re of the).1 F F1
(.manifest)3.249 E F0 .749(\214les generated by Microsoft V)3.249 F
(isua)-.6 E(C/C++ 8.)144 376.8 Q(WINDO)108 405.6 Q(WSDEFPREFIX)-.35 E
(The pre\214x used for W)144 417.6 Q(indo)-.4 E(ws)-.25 E F1(.def)2.5 E
F0(\214le names.)A(WINDO)108 446.4 Q(WSDEFSUFFIX)-.35 E(The suf)144
458.4 Q(\214x used for W)-.25 E(indo)-.4 E(ws)-.25 E F1(.def)2.5 E F0
(\214le names.)2.5 E(WINDO)108 487.2 Q(WSEXPPREFIX)-.35 E
(The pre\214x used for W)144 499.2 Q(indo)-.4 E(ws)-.25 E F1(.exp)2.5 E
F0(\214le names.)2.5 E(WINDO)108 528 Q(WSEXPSUFFIX)-.35 E(The suf)144
540 Q(\214x used for W)-.25 E(indo)-.4 E(ws)-.25 E F1(.exp)2.5 E F0
(\214le names.)2.5 E(WINDO)108 568.8 Q(WSPR)-.35 E(OGMANIFESTPREFIX)-.4
E(The pre\214x used for e)144 580.8 Q -.15(xe)-.15 G(cutable program).15
E F1(.manifest)2.5 E F0(\214les generated by Microsoft V)2.5 E
(isual C/C++.)-.6 E(WINDO)108 609.6 Q(WSPR)-.35 E(OGMANIFESTSUFFIX)-.4 E
(The suf)144 621.6 Q(\214x used for e)-.25 E -.15(xe)-.15 G
(cutable program).15 E F1(.manifest)2.5 E F0
(\214les generated by Microsoft V)2.5 E(isual C/C++.)-.6 E(WINDO)108
650.4 Q(WSSHLIBMANIFESTPREFIX)-.35 E
(The pre\214x used for shared library)144 662.4 Q F1(.manifest)2.5 E F0
(\214les generated by Microsoft V)2.5 E(isual C/C++.)-.6 E(WINDO)108
691.2 Q(WSSHLIBMANIFESTSUFFIX)-.35 E(The suf)144 703.2 Q
(\214x used for shared library)-.25 E F1(.manifest)2.5 E F0
(\214les generated by Microsoft V)2.5 E(isual C/C++.)-.6 E(July 2010)
286.415 768 Q(116)199.415 E 0 Cg EP
%%Page: 117 117
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(X_IPK_DEPENDS)108 84 Q(This is used to \214ll in the)144 96 Q/F1 10
/Times-Bold@0 SF(Depends:)2.5 E F0
(\214eld in the controlling information for Ipkg packages.)2.5 E
(X_IPK_DESCRIPTION)108 124.8 Q .342(This is used to \214ll in the)144
136.8 R F1(Description:)2.842 E F0 .342
(\214eld in the controlling information for Ipkg packages.)2.842 F(The)
5.342 E(def)144 148.8 Q(ault v)-.1 E(alue is)-.25 E F1($SUMMAR)2.5 E
(Y\\$SUMMAR)-.35 E(Y)-.35 E F0(X_IPK_MAINT)108 165.6 Q(AINER)-.93 E
(This is used to \214ll in the)144 177.6 Q F1(Maintainer:)2.5 E F0
(\214eld in the controlling information for Ipkg packages.)2.5 E
(X_IPK_PRIORITY)108 206.4 Q(This is used to \214ll in the)144 218.4 Q F1
(Priority:)2.5 E F0
(\214eld in the controlling information for Ipkg packages.)2.5 E
(X_IPK_SECTION)108 247.2 Q(This is used to \214ll in the)144 259.2 Q F1
(Section:)2.5 E F0
(\214eld in the controlling information for Ipkg packages.)2.5 E
(X_MSI_LANGU)108 288 Q -.4(AG)-.4 G(E).4 E
(This is used to \214ll in the)144 300 Q F1(Language:)2.5 E F0(attrib)
2.5 E(ute in the controlling information for MSI packages.)-.2 E
(X_MSI_LICENSE_TEXT)108 328.8 Q .852(The te)144 340.8 R .852
(xt of the softw)-.15 F .852(are license in R)-.1 F .852(TF format.)-.6
F .852(Carriage return characters will be replaced with)5.852 F 101.626
(the R)144 352.8 R 101.627(TF equi)-.6 F -.25(va)-.25 G 101.627
(lent \\ar).25 F(.)-.55 E(X_MSI_UPGRADE_CODE)108 381.6 Q -.18(TO)144
393.6 S(DO).18 E(X_RPM_A)108 422.4 Q(UT)-.55 E(OREQPR)-.18 E -.5(OV)-.4
G(This is used to \214ll in the)144 434.4 Q F1 -.5(Au)2.5 G(toReqPr).5 E
-.1(ov)-.18 G(:).1 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0
(\214le.)2.5 E(X_RPM_B)108 463.2 Q(UILD)-.1 E(internal, b)144 475.2 Q
(ut o)-.2 E -.15(ve)-.15 G(rridable).15 E(X_RPM_B)108 504 Q(UILDREQ)-.1
E(UIRES)-.1 E(This is used to \214ll in the)144 516 Q F1(BuildRequir)2.5
E(es:)-.18 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E
(X_RPM_B)108 544.8 Q(UILDR)-.1 E(OO)-.4 E(T)-.4 E(internal, b)144 556.8
Q(ut o)-.2 E -.15(ve)-.15 G(rridable).15 E(X_RPM_CLEAN)108 585.6 Q
(internal, b)144 597.6 Q(ut o)-.2 E -.15(ve)-.15 G(rridable).15 E
(X_RPM_CONFLICTS)108 626.4 Q(This is used to \214ll in the)144 638.4 Q
F1(Con\215icts:)2.5 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0
(\214le.)2.5 E(X_RPM_DEF)108 667.2 Q -1.11(AT)-.74 G(TR)1.11 E .603
(This v)144 679.2 R .603(alue is used as the def)-.25 F .602
(ault attrib)-.1 F .602(utes for the \214les in the RPM package.)-.2 F
.602(The def)5.602 F .602(ault v)-.1 F .602(alue is)-.25 F F1(\(-,r)144
691.2 Q(oot,r)-.18 E(oot\))-.18 E F0(.)A(July 2010)286.415 768 Q(117)
199.415 E 0 Cg EP
%%Page: 118 118
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(X_RPM_DISTRIB)108 84 Q(UTION)-.1 E(This is used to \214ll in the)144 96
Q/F1 10/Times-Bold@0 SF(Distrib)2.5 E(ution:)-.2 E F0
(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E(X_RPM_EPOCH)
108 124.8 Q(This is used to \214ll in the)144 136.8 Q F1(Epoch:)2.5 E F0
(\214eld in the controlling information for RPM packages.)2.5 E
(X_RPM_EXCLUDEARCH)108 165.6 Q(This is used to \214ll in the)144 177.6 Q
F1(ExcludeAr)2.5 E(ch:)-.18 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E
F0(\214le.)2.5 E(X_RPM_EXLUSIVEARCH)108 206.4 Q
(This is used to \214ll in the)144 218.4 Q F1(Exclusi)2.5 E -.1(ve)-.1 G
(Ar).1 E(ch:)-.18 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0
(\214le.)2.5 E(X_RPM_GR)108 247.2 Q(OUP)-.4 E
(This is used to \214ll in the)144 259.2 Q F1(Gr)2.5 E(oup:)-.18 E F0
(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E(X_RPM_GR)108
288 Q(OUP_lang)-.4 E .028(This is used to \214ll in the)144 300 R F1(Gr)
2.528 E(oup\(lang\):)-.18 E F0 .028(\214eld in the RPM)2.528 F F1(.spec)
2.529 E F0 2.529(\214le. Note)2.529 F(that)2.529 E/F2 10/Times-Italic@0
SF(lang)2.619 E F0 .029(is not literal and)2.749 F
(should be replaced by the appropriate language code.)144 312 Q
(X_RPM_ICON)108 340.8 Q(This is used to \214ll in the)144 352.8 Q F1
(Icon:)2.5 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E
(X_RPM_INST)108 381.6 Q(ALL)-.93 E(internal, b)144 393.6 Q(ut o)-.2 E
-.15(ve)-.15 G(rridable).15 E(X_RPM_P)108 422.4 Q -.4(AC)-.92 G(KA).4 E
(GER)-.4 E(This is used to \214ll in the)144 434.4 Q F1 -.1(Pa)2.5 G
(ckager:).1 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5
E(X_RPM_POSTINST)108 463.2 Q(ALL)-.93 E(This is used to \214ll in the)
144 475.2 Q F1(%post:)2.5 E F0(section in the RPM)2.5 E F1(.spec)2.5 E
F0(\214le.)2.5 E(X_RPM_POSTUNINST)108 504 Q(ALL)-.93 E
(This is used to \214ll in the)144 516 Q F1(%postun:)2.5 E F0
(section in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E(X_RPM_PREFIX)
108 544.8 Q(This is used to \214ll in the)144 556.8 Q F1(Pr)2.5 E
(e\214x:)-.18 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)
2.5 E(X_RPM_PREINST)108 585.6 Q(ALL)-.93 E
(This is used to \214ll in the)144 597.6 Q F1(%pr)2.5 E(e:)-.18 E F0
(section in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E(X_RPM_PREP)108
626.4 Q(internal, b)144 638.4 Q(ut o)-.2 E -.15(ve)-.15 G(rridable).15 E
(X_RPM_PREUNINST)108 667.2 Q(ALL)-.93 E(This is used to \214ll in the)
144 679.2 Q F1(%pr)2.5 E(eun:)-.18 E F0(section in the RPM)2.5 E F1
(.spec)2.5 E F0(\214le.)2.5 E(July 2010)286.415 768 Q(118)199.415 E 0 Cg
EP
%%Page: 119 119
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(X_RPM_PR)
108 84 Q -.5(OV)-.4 G(IDES).5 E(This is used to \214ll in the)144 96 Q
/F1 10/Times-Bold@0 SF(Pr)2.5 E -.1(ov)-.18 G(ides:).1 E F0
(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E(X_RPM_REQ)108
124.8 Q(UIRES)-.1 E(This is used to \214ll in the)144 136.8 Q F1(Requir)
2.5 E(es:)-.18 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)
2.5 E(X_RPM_SERIAL)108 165.6 Q(This is used to \214ll in the)144 177.6 Q
F1(Serial:)2.5 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)
2.5 E(X_RPM_URL)108 206.4 Q(This is used to \214ll in the)144 218.4 Q F1
(Url:)2.5 E F0(\214eld in the RPM)2.5 E F1(.spec)2.5 E F0(\214le.)2.5 E
-.5 -1.2(YA C)108 247.2 T(C)1.2 E(The parser generator)144 247.2 Q(.)
-.55 E -.5 -1.2(YA C)108 276 T(CCOM)1.2 E(The command line used to call\
 the parser generator to generate a source \214le.)144 288 Q -.5 -1.2
(YA C)108 316.8 T(CCOMSTR)1.2 E 1.091(The string displayed when generat\
ing a source \214le using the parser generator)144 328.8 R 6.09(.I)-.55
G 3.59(ft)-6.09 G 1.09(his is not set,)-3.59 F(then $Y)144 340.8 Q -.4
(AC)-1.2 G(CCOM \(the command line\) is displayed.).4 E(en)144 364.8 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(Y).4 E -.4(AC)-1.2 G(CCOMSTR = "Y)
.4 E(acc'ing $T)-1 E(ARGET from $SOURCES"\))-.93 E -.5 -1.2(YA C)108
393.6 T(CFLA)1.2 E(GS)-.4 E 1.29
(General options passed to the parser generator)144 405.6 R 6.291(.I)
-.55 G 3.791(f$)-6.291 G -.5 -1.2(YA C)-3.791 H(CFLA)1.2 E 1.291
(GS contains a)-.4 F F1<ad64>3.791 E F0 1.291(option, SCons)3.791 F .578
(assumes that the call will also create a .h \214le \(if the yacc sourc\
e \214le ends in a .y suf)144 417.6 R .577(\214x\) or a .hpp)-.25 F
(\214le \(if the yacc source \214le ends in a .yy suf)144 429.6 Q
<8c7829>-.25 E -.5 -1.2(YA C)108 458.4 T(CHFILESUFFIX)1.2 E .158
(The suf)144 470.4 R .158(\214x of the C header \214le generated by the\
 parser generator when the)-.25 F F1<ad64>2.659 E F0 .159
(option is used.)2.659 F(Note)5.159 E .063(that setting this v)144 482.4
R .063(ariable does not cause the parser generator to generate a header\
 \214le with the spec-)-.25 F 1.031(i\214ed suf)144 494.4 R 1.031
(\214x, it e)-.25 F 1.031(xists to allo)-.15 F 3.531(wy)-.25 G 1.032
(ou to specify what suf)-3.531 F 1.032
(\214x the parser generator will use of its o)-.25 F(wn)-.25 E 2.5
(accord. The)144 506.4 R(def)2.5 E(ault v)-.1 E(alue is)-.25 E F1(.h)2.5
E F0(.)A -.5 -1.2(YA C)108 535.2 T(CHXXFILESUFFIX)1.2 E .942(The suf)144
547.2 R .942(\214x of the C++ header \214le generated by the parser gen\
erator when the)-.25 F F1<ad64>3.441 E F0 .941(option is used.)3.441 F
.16(Note that setting this v)144 559.2 R .161(ariable does not cause th\
e parser generator to generate a header \214le with the)-.25 F .045
(speci\214ed suf)144 571.2 R .045(\214x, it e)-.25 F .045(xists to allo)
-.15 F 2.545(wy)-.25 G .045(ou to specify what suf)-2.545 F .044
(\214x the parser generator will use of its o)-.25 F(wn)-.25 E 3.745
(accord. The)144 583.2 R(def)3.745 E 1.245(ault v)-.1 F 1.245(alue is)
-.25 F F1(.hpp)3.745 E F0 3.745(,e)C 1.245
(xcept on Mac OS X, where the def)-3.895 F 1.246(ault is)-.1 F F1(${T)
3.746 E(ARGET)-.9 E(.suf-)-.9 E(\214x}.h)144 595.2 Q F0 5.575(.b)C .575
(ecause the def)-5.575 F .575
(ault &bison; parser generator just appends)-.1 F F1(.h)3.075 E F0 .574
(to the name of the generated)3.075 F(C++ \214le.)144 607.2 Q -.5 -1.2
(YA C)108 636 T(CVCGFILESUFFIX)1.2 E 1.795(The suf)144 648 R 1.795(\214\
x of the \214le containing the VCG grammar automaton de\214nition when \
the)-.25 F F1(\255\255graph=)4.296 E F0 1.194(option is used.)144 660 R
1.194(Note that setting this v)6.194 F 1.194
(ariable does not cause the parser generator to generate a)-.25 F .179
(VCG \214le with the speci\214ed suf)144 672 R .179(\214x, it e)-.25 F
.179(xists to allo)-.15 F 2.679(wy)-.25 G .18(ou to specify what suf)
-2.679 F .18(\214x the parser generator)-.25 F(will use of its o)144 684
Q(wn accord.)-.25 E(The def)5 E(ault v)-.1 E(alue is)-.25 E F1(.vcg)2.5
E F0(.)A(ZIP)108 712.8 Q
(The zip compression and \214le packaging utility)144 712.8 Q(.)-.65 E
(July 2010)286.415 768 Q(119)199.415 E 0 Cg EP
%%Page: 120 120
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(ZIPCOM)108
84 Q .604(The command line used to call the zip utility)144 96 R 3.103
(,o)-.65 G 3.103(rt)-3.103 G .603
(he internal Python function used to create a zip)-3.103 F(archi)144 108
Q -.15(ve)-.25 G(.).15 E(ZIPCOMPRESSION)108 136.8 Q(The)144 148.8 Q/F1
10/Times-Italic@0 SF(compr)2.93 E(ession)-.37 E F0 .23
(\215ag from the Python)2.97 F/F2 10/Times-Bold@0 SF(zip\214le)2.73 E F0
.23(module used by the internal Python function to con-)2.73 F .532
(trol whether the zip archi)144 160.8 R .832 -.15(ve i)-.25 H 3.032(sc)
.15 G .532(ompressed or not.)-3.032 F .531(The def)5.531 F .531(ault v)
-.1 F .531(alue is)-.25 F F2(zip\214le.ZIP_DEFLA)3.031 E(TED)-.95 E F0
(,)A .002(which creates a compressed zip archi)144 172.8 R -.15(ve)-.25
G 5.002(.T).15 G .002(his v)-5.002 F .002(alue has no ef)-.25 F .003
(fect when using Python 1.5.2 or if the)-.25 F F2(zip\214le)144 184.8 Q
F0(module is otherwise una)2.5 E -.25(va)-.2 G(ilable.).25 E(ZIPCOMSTR)
108 213.6 Q .935(The string displayed when archi)144 225.6 R .935
(ving \214les using the zip utility)-.25 F 5.935(.I)-.65 G 3.435(ft)
-5.935 G .935(his is not set, then $ZIPCOM)-3.435 F
(\(the command line or internal Python function\) is displayed.)144
237.6 Q(en)144 261.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(ZIPCOMSTR = "Zipping $T).4 E(ARGET"\))-.93 E(ZIPFLA)108 290.4
Q(GS)-.4 E(General options passed to the zip utility)144 302.4 Q(.)-.65
E(ZIPSUFFIX)108 331.2 Q(The suf)144 343.2 Q
(\214x used for zip \214le names.)-.25 E .897(Construction v)108 372 R
.897(ariables can be retrie)-.25 F -.15(ve)-.25 G 3.397(da).15 G .897
(nd set using the)-3.397 F F2(Dictionary)3.397 E F0 .897
(method of the construction en)3.397 F(viron-)-.4 E(ment:)108 384 Q
(dict = en)144 408 Q -.65(v.)-.4 G(Dictionary\(\)).65 E
(dict["CC"] = "cc")144 420 Q(or using the [] operator:)108 444 Q(en)144
468 Q(v["CC"] = "cc")-.4 E(Construction v)108 492 Q
(ariables can also be passed to the construction en)-.25 E
(vironment constructor:)-.4 E(en)144 516 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(CC="cc"\)).4 E(or when cop)108 540 Q(ying a construction en)
-.1 E(vironment using the)-.4 E F2(Clone)2.5 E F0(method:)2.5 E(en)144
564 Q(v2 = en)-.4 E -.65(v.)-.4 G(Clone\(CC="cl.e).65 E -.15(xe)-.15 G
("\)).15 E F2(Con\214gur)87 592.8 Q 2.5(eC)-.18 G(ontexts)-2.5 E(scons)
108 604.8 Q F0(supports)3.217 E F1(con\214gur)3.417 E 3.217(ec)-.37 G
(onte)-3.217 E(xts,)-.2 E F0 .717(an inte)3.217 F .717
(grated mechanism similar to the v)-.15 F .717(arious A)-.25 F .717
(C_CHECK macros in)-.4 F .752(GNU autoconf for testing for the e)108
616.8 R .752(xistence of C header \214les, libraries, etc.)-.15 F .753
(In contrast to autoconf,)5.753 F F2(scons)3.253 E F0 .024
(does not maintain an e)108 628.8 R .023(xplicit cache of the tested v)
-.15 F .023(alues, b)-.25 F .023(ut uses its normal dependenc)-.2 F
2.523(yt)-.15 G .023(racking to k)-2.523 F .023(eep the)-.1 F(check)108
640.8 Q 1.32(ed v)-.1 F 1.32(alues up to date. Ho)-.25 F(we)-.25 E -.15
(ve)-.25 G 2.121 -.4(r, u).15 H 1.321(sers may o).4 F -.15(ve)-.15 G
1.321(rride this beha).15 F 1.321(viour with the)-.2 F F2(--con\214g)
3.821 E F0 1.321(command line)3.821 F(option.)108 652.8 Q(The follo)108
676.8 Q(wing methods can be used to perform checks:)-.25 E
(Con\214gure\()108 705.6 Q F1(en).19 E(v)-.4 E F0 2.5(,[).32 G F1
(custom_tests)-2.3 E F0(,).27 E F1(conf_dir)2.7 E F0(,).73 E F1(lo)2.59
E(g_\214le)-.1 E F0(,).18 E F1(con\214g_h)2.7 E F0(,).28 E F1(clean)2.7
E F0(,).24 E F1(help]\))2.81 E F0(July 2010)286.415 768 Q(120)199.415 E
0 Cg EP
%%Page: 121 121
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)108 84 Q
-.65(v.)-.4 G(Con\214gure\([).65 E/F1 10/Times-Italic@0 SF(custom_tests)
.2 E F0(,).27 E F1(conf_dir)2.7 E F0(,).73 E F1(lo)2.59 E(g_\214le)-.1 E
F0(,).18 E F1(con\214g_h)2.7 E F0(,).28 E F1(clean)2.7 E F0(,).24 E F1
(help]\))2.81 E F0 .436(This creates a con\214gure conte)144 96 R .436
(xt, which can be used to perform checks.)-.15 F F1(en)5.626 E(v)-.4 E
F0 .436(speci\214es the en)3.256 F(viron-)-.4 E 1.371(ment for b)144 108
R 1.371(uilding the tests.)-.2 F 1.371(This en)6.371 F 1.372
(vironment may be modi\214ed when performing checks.)-.4 F F1(cus-)6.572
E(tom_tests)144 120 Q F0 .812(is a dictionary containing custom tests.)
3.583 F .812(See also the section about custom tests belo)5.812 F -.65
(w.)-.25 G 1.752(By def)144 132 R 1.753
(ault, no custom tests are added to the con\214gure conte)-.1 F(xt.)-.15
E F1(conf_dir)6.953 E F0 1.753(speci\214es a directory)4.983 F .211
(where the test cases are b)144 144 R 2.711(uilt. Note)-.2 F .21
(that this directory is not used for b)2.711 F .21(uilding normal tar)
-.2 F 2.71(gets. The)-.18 F(def)144 156 Q .067(ault v)-.1 F .068
(alue is the directory #/.sconf_temp.)-.25 F F1(lo)5.158 E(g_\214le)-.1
E F0 .068(speci\214es a \214le which collects the output from)2.748 F
.139(commands that are e)144 168 R -.15(xe)-.15 G .138
(cuted to check for the e).15 F .138
(xistence of header \214les, libraries, etc.)-.15 F .138(The def)5.138 F
.138(ault is)-.1 F .406(the \214le #/con\214g.log.)144 180 R .407
(If you are using the)5.407 F/F2 10/Times-Bold@0 SF -.92(Va)2.907 G
(riantDir).92 E F0 .407(\(\) method, you may w)B .407
(ant to specify a subdi-)-.1 F .823(rectory under your v)144 192 R .823
(ariant directory)-.25 F(.)-.65 E F1(con\214g_h)6.023 E F0 .822
(speci\214es a C header \214le where the results of tests)3.603 F .98
(will be written, e.g. #de\214ne HA)144 204 R .98
(VE_STDIO_H, #de\214ne HA)-1.35 F .98(VE_LIBM, etc.)-1.35 F .98(The def)
5.98 F .98(ault is to not)-.1 F 1.522(write a)144 216 R F2(con\214g)
4.022 E(.h)-.15 E F0 4.022(\214le. Y)4.022 F 1.522
(ou can specify the same)-1.1 F F2(con\214g)4.022 E(.h)-.15 E F0 1.522
(\214le in multiple calls to Con\214gure, in)4.022 F .238(which case)144
228 R F2(scons)2.738 E F0 .238
(will concatenate all results in the speci\214ed \214le.)2.738 F .238
(Note that SCons uses its normal)5.238 F(dependenc)144 240 Q 2.964(yc)
-.15 G .464(hecking to decide if it')-2.964 F 2.964(sn)-.55 G .464
(ecessary to reb)-2.964 F .463(uild the speci\214ed)-.2 F F1(con\214g_h)
3.163 E F0 2.963(\214le. This)3.243 F(means)2.963 E .377
(that the \214le is not necessarily re-b)144 252 R .377
(uilt each time scons is run, b)-.2 F .378(ut is only reb)-.2 F .378
(uilt if its contents will)-.2 F(ha)144 264 Q .3 -.15(ve c)-.2 H
(hanged and some tar).15 E(get that depends on the)-.18 E F1(con\214g_h)
2.7 E F0(\214le is being b)2.78 E(uilt.)-.2 E 1.419(The optional)144 288
R F2(clean)3.919 E F0(and)3.919 E F2(help)3.919 E F0(ar)3.919 E 1.419
(guments can be used to suppress e)-.18 F -.15(xe)-.15 G 1.418
(cution of the con\214guration).15 F 1.083(tests when the)144 300 R F2
(-c/--clean)3.583 E F0(or)3.583 E F2(-H/-h/--help)3.583 E F0 1.083
(options are used, respecti)3.583 F -.15(ve)-.25 G(ly).15 E 6.083(.T)
-.65 G 1.083(he def)-6.083 F 1.083(ault beha)-.1 F 1.084(vior is)-.2 F
(al)144 312 Q -.1(wa)-.1 G .258(ys to e).1 F -.15(xe)-.15 G .257
(cute con\214gure conte).15 F .257
(xt tests, since the results of the tests may af)-.15 F .257
(fect the list of tar)-.25 F(gets)-.18 E 1.276
(to be cleaned or the help te)144 324 R 3.776(xt. If)-.15 F 1.276
(the con\214gure tests do not af)3.776 F 1.277
(fect these, then you may add the)-.25 F F2(clean=F)144 336 Q(alse)-.25
E F0(or)2.5 E F2(help=F)2.5 E(alse)-.25 E F0(ar)2.5 E
(guments \(or both\) to a)-.18 E -.2(vo)-.2 G(id unnecessary test e).2 E
-.15(xe)-.15 G(cution.).15 E 2.5(Ac)108 360 S(reated)-2.5 E F2
(Con\214gur)2.5 E(e)-.18 E F0(instance has the follo)2.5 E
(wing associated methods:)-.25 E(SConf.Finish\()108 388.8 Q F1(conte).2
E(xt)-.2 E F0(\)).68 E F1(sconf)108 405.6 Q F0(.Finish\(\))1.96 E .738
(This method should be called after con\214guration is done.)144 417.6 R
.738(It returns the en)5.738 F .737(vironment as modi\214ed)-.4 F .456
(by the con\214guration checks performed.)144 429.6 R .457
(After this method is called, no further checks can be per)5.456 F(-)-.2
E .543(formed with this con\214guration conte)144 441.6 R 3.043(xt. Ho)
-.15 F(we)-.25 E -.15(ve)-.25 G 1.343 -.4(r, y).15 H .543
(ou can create a ne).4 F 3.043(wC)-.25 G .543(on\214gure conte)-3.043 F
.542(xt to per)-.15 F(-)-.2 E(form additional checks.)144 453.6 Q
(Only one conte)5 E(xt should be acti)-.15 E .3 -.15(ve a)-.25 H 2.5
(tat).15 G(ime.)-2.5 E .278(The follo)144 477.6 R .278
(wing Checks are prede\214ned.)-.25 F .279(\(This list will lik)5.279 F
.279(ely gro)-.1 F 2.779(wl)-.25 G(ar)-2.779 E .279
(ger as time goes by and de)-.18 F -.15(ve)-.25 G(l-).15 E
(opers contrib)144 489.6 Q(ute ne)-.2 E 2.5(wu)-.25 G(seful tests.\))
-2.5 E(SConf.CheckHeader\()108 518.4 Q F1(conte).2 E(xt)-.2 E F0(,).68 E
F1(header)2.81 E F0 2.5(,[).73 G F1(include_quotes)-2.49 E F0(,).27 E F1
(langua)2.59 E -.1(ge)-.1 G F0(]\)).28 E F1(sconf)108 535.2 Q F0
(.CheckHeader\()1.96 E F1(header).31 E F0 2.5(,[).73 G F1
(include_quotes)-2.49 E F0(,).27 E F1(langua)2.59 E -.1(ge)-.1 G F0(]\))
.28 E .422(Checks if)144 547.2 R F1(header)3.232 E F0 .422
(is usable in the speci\214ed language.)3.652 F F1(header)5.732 E F0
.421(may be a list, in which case the last)3.652 F .629
(item in the list is the header \214le to be check)144 559.2 R .63
(ed, and the pre)-.1 F .63(vious list items are header \214les whose)
-.25 F F2(#include)144 571.2 Q F0 3.538
(lines should precede the header line being check)6.038 F 3.537(ed for)
-.1 F 8.537(.T)-.55 G 3.537(he optional ar)-8.537 F(gument)-.18 E F1
(include_quotes)144.01 583.2 Q F0 .283(must be a tw)3.052 F 2.783(oc)-.1
G .283
(haracter string, where the \214rst character denotes the opening quote)
-2.783 F 1.54(and the second character denotes the closing quote.)144
595.2 R 1.54(By def)6.54 F 1.54(ault, both characters)-.1 F 1.54
(are " \(double)6.54 F 2.693(quote\). The)144 607.2 R .193(optional ar)
2.693 F(gument)-.18 E F1(langua)2.783 E -.1(ge)-.1 G F0 .194
(should be either)2.974 F F2(C)2.694 E F0(or)2.694 E F2(C++)2.694 E F0
.194(and selects the compiler to be)2.694 F(used for the check.)144
619.2 Q(Returns 1 on success and 0 on f)5 E(ailure.)-.1 E
(SConf.CheckCHeader\()108 648 Q F1(conte).2 E(xt)-.2 E F0(,).68 E F1
(header)2.81 E F0 2.5(,[).73 G F1(include_quotes)-2.49 E F0(]\)).27 E F1
(sconf)108 664.8 Q F0(.CheckCHeader\()1.96 E F1(header).31 E F0 2.5(,[)
.73 G F1(include_quotes)-2.49 E F0(]\)).27 E 1.345
(This is a wrapper around)144 676.8 R F2(SConf)3.845 E(.CheckHeader)-.15
E F0 1.345(which checks if)3.845 F F1(header)4.155 E F0 1.344
(is usable in the C lan-)4.575 F(guage.)144 688.8 Q F1(header)5.487 E F0
.178(may be a list, in which case the last item in the list is the head\
er \214le to be check)3.407 F(ed,)-.1 E 1.069(and the pre)144 700.8 R
1.069(vious list items are header \214les whose)-.25 F F2(#include)3.569
E F0 1.068(lines should precede the header line)3.569 F .86(being check)
144 712.8 R .86(ed for)-.1 F 5.86(.T)-.55 G .86(he optional ar)-5.86 F
(gument)-.18 E F1(include_quotes)3.37 E F0 .86(must be a tw)3.63 F 3.36
(oc)-.1 G .86(haracter string, where)-3.36 F 1.03(the \214rst character\
 denotes the opening quote and the second character denotes the closing\
 quote)144 724.8 R(July 2010)286.415 768 Q(121)199.415 E 0 Cg EP
%%Page: 122 122
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(\(both def)
144 84 Q(ault to "\).)-.1 E(Returns 1 on success and 0 on f)5 E(ailure.)
-.1 E(SConf.CheckCXXHeader\()108 112.8 Q/F1 10/Times-Italic@0 SF(conte)
.2 E(xt)-.2 E F0(,).68 E F1(header)2.81 E F0 2.5(,[).73 G F1
(include_quotes)-2.49 E F0(]\)).27 E F1(sconf)108 129.6 Q F0
(.CheckCXXHeader\()1.96 E F1(header).31 E F0 2.5(,[).73 G F1
(include_quotes)-2.49 E F0(]\)).27 E .592(This is a wrapper around)144
141.6 R/F2 10/Times-Bold@0 SF(SConf)3.092 E(.CheckHeader)-.15 E F0 .593
(which checks if)3.093 F F1(header)3.403 E F0 .593
(is usable in the C++ lan-)3.823 F(guage.)144 153.6 Q F1(header)5.488 E
F0 .178(may be a list, in which case the last item in the list is the h\
eader \214le to be check)3.408 F(ed,)-.1 E 1.068(and the pre)144 165.6 R
1.068(vious list items are header \214les whose)-.25 F F2(#include)3.569
E F0 1.069(lines should precede the header line)3.569 F .86(being check)
144 177.6 R .86(ed for)-.1 F 5.86(.T)-.55 G .86(he optional ar)-5.86 F
(gument)-.18 E F1(include_quotes)3.37 E F0 .86(must be a tw)3.63 F 3.36
(oc)-.1 G .86(haracter string, where)-3.36 F 1.03(the \214rst character\
 denotes the opening quote and the second character denotes the closing\
 quote)144 189.6 R(\(both def)144 201.6 Q(ault to "\).)-.1 E
(Returns 1 on success and 0 on f)5 E(ailure.)-.1 E(SConf.CheckFunc\()108
230.4 Q F1(conte).2 E(xt,)-.2 E F0(,)A F1(function_name)4.47 E F0 2.5
(,[).18 G F1(header)-2.19 E F0(,).73 E F1(langua)2.59 E -.1(ge)-.1 G F0
(]\)).28 E F1(sconf)108 247.2 Q F0(.CheckFunc\()1.96 E F1(function_name)
1.97 E F0 2.5(,[).18 G F1(header)-2.19 E F0(,).73 E F1(langua)2.59 E -.1
(ge)-.1 G F0(]\)).28 E .191
(Checks if the speci\214ed C or C++ function is a)144 259.2 R -.25(va)
-.2 G(ilable.).25 E F1(function_name)7.161 E F0 .191
(is the name of the function)2.871 F .231(to check for)144 271.2 R 5.231
(.T)-.55 G .231(he optional)-5.231 F F1(header)3.041 E F0(ar)3.461 E
.232
(gument is a string that will be placed at the top of the test \214le)
-.18 F(that will be compiled to check if the function e)144 283.2 Q
(xists; the def)-.15 E(ault is:)-.1 E(#ifdef __cplusplus)144 295.2 Q
-.15(ex)144 307.2 S(tern "C").15 E(#endif)144 319.2 Q
(char function_name\(\);)144 331.2 Q .232(The optional)108 343.2 R F1
(langua)2.821 E -.1(ge)-.1 G F0(ar)3.011 E .231(gument should be)-.18 F
F2(C)2.731 E F0(or)2.731 E F2(C++)2.731 E F0 .231
(and selects the compiler to be used for the check; the)2.731 F(def)108
355.2 Q(ault is "C".)-.1 E(SConf.CheckLib\()108 384 Q F1(conte).2 E(xt)
-.2 E F0 2.5(,[).68 G F1(libr)-2.41 E(ary)-.15 E F0(,).32 E F1(symbol)
2.84 E F0(,).51 E F1(header)2.81 E F0(,).73 E F1(langua)2.59 E -.1(ge)
-.1 G F0(,).28 E F1(autoadd=1)2.83 E F0(]\))A F1(sconf)108 400.8 Q F0
(.CheckLib\([)1.96 E F1(libr).09 E(ary)-.15 E F0(,).32 E F1(symbol)2.84
E F0(,).51 E F1(header)2.81 E F0(,).73 E F1(langua)2.59 E -.1(ge)-.1 G
F0(,).28 E F1(autoadd=1)2.83 E F0(]\))A .229(Checks if)144 412.8 R F1
(libr)2.819 E(ary)-.15 E F0(pro)3.049 E(vides)-.15 E F1(symbol)2.729 E
F0 5.229(.I).51 G 2.729(ft)-5.229 G .229(he v)-2.729 F .229(alue of)-.25
F F1(autoadd)3.059 E F0 .23(is 1 and the library pro)3.499 F .23
(vides the speci-)-.15 F(\214ed)144 424.8 Q F1(symbol)2.956 E F0 2.956
(,a).51 G .455(ppends the library to the LIBS construction en)-2.956 F
.455(vironment v)-.4 F(ariable.)-.25 E F1(libr)5.545 E(ary)-.15 E F0
.455(may also)3.275 F .285(be None \(the def)144 436.8 R .285
(ault\), in which case)-.1 F F1(symbol)3.125 E F0 .285(is check)3.295 F
.285(ed with the current LIBS v)-.1 F .285(ariable, or a list of)-.25 F
.622
(library names, in which case each library in the list will be check)144
448.8 R .622(ed for)-.1 F F1(symbol)3.122 E F0 5.622(.I).51 G(f)-5.622 E
F1(symbol)3.462 E F0 .622(is not)3.632 F .922(set or is)144 460.8 R F2
(None)3.422 E F0 3.422(,t)C(hen)-3.422 E F2(SConf)3.422 E(.CheckLib)-.15
E F0 .922(\(\) just checks if you can link ag)B .922
(ainst the speci\214ed)-.05 F F1(libr)3.422 E(ary)-.15 E F0(.).32 E .689
(The optional)144 472.8 R F1(langua)3.279 E -.1(ge)-.1 G F0(ar)3.469 E
.689(gument should be)-.18 F F2(C)3.189 E F0(or)3.189 E F2(C++)3.189 E
F0 .689(and selects the compiler to be used for the)3.189 F .801
(check; the def)144 484.8 R .801(ault is "C".)-.1 F .802(The def)5.802 F
.802(ault v)-.1 F .802(alue for)-.25 F F1(autoadd)3.632 E F0 .802(is 1.)
4.072 F .802(This method returns 1 on success)5.802 F(and 0 on error)144
496.8 Q(.)-.55 E(SConf.CheckLibW)108 525.6 Q(ithHeader\()-.4 E F1(conte)
.2 E(xt)-.2 E F0(,).68 E F1(libr)2.59 E(ary)-.15 E F0(,).32 E F1(header)
2.81 E F0(,).73 E F1(langua)2.59 E -.1(ge)-.1 G F0 2.5(,[).28 G F1(call)
-2.3 E F0(,).51 E F1(autoadd)2.83 E F0(]\)).77 E F1(sconf)108 542.4 Q F0
(.CheckLibW)1.96 E(ithHeader\()-.4 E F1(libr).09 E(ary)-.15 E F0(,).32 E
F1(header)2.81 E F0(,).73 E F1(langua)2.59 E -.1(ge)-.1 G F0 2.5(,[).28
G F1(call)-2.3 E F0(,).51 E F1(autoadd)2.83 E F0(]\)).77 E 2.037
(In contrast to the SConf.CheckLib call, this call pro)144 566.4 R 2.037
(vides a more sophisticated w)-.15 F 2.037(ay to check)-.1 F(ag)144
578.4 Q .62(ainst libraries.)-.05 F(Ag)5.62 E(ain,)-.05 E F1(libr)3.21 E
(ary)-.15 E F0 .621
(speci\214es the library or a list of libraries to check.)3.44 F F1
(header)5.931 E F0(speci-)3.851 E .14(\214es a header to check for)144
590.4 R(.)-.55 E F1(header)5.45 E F0 .14
(may be a list, in which case the last item in the list is the header)
3.37 F .14(\214le to be check)144 602.4 R .14(ed, and the pre)-.1 F .14
(vious list items are header \214les whose)-.25 F F2(#include)2.64 E F0
.14(lines should precede)2.64 F .577(the header line being check)144
614.4 R .576(ed for)-.1 F(.)-.55 E F1(langua)5.666 E -.1(ge)-.1 G F0
.576(may be one of 'C',)3.356 F('c',)-.7 E('CXX',)-.7 E('cxx',)-.7 E
.576('C++' and 'c++'.)-.7 F F1(call)144.2 626.4 Q F0 .741(can be an)
3.751 F 3.241(yv)-.15 G .741(alid e)-3.491 F .741
(xpression \(with a trailing ';'\).)-.15 F(If)5.741 E F1(call)3.441 E F0
.741(is not set, the def)3.751 F .742(ault simply checks)-.1 F .371
(that you can link ag)144 638.4 R .371(ainst the speci\214ed)-.05 F F1
(libr)2.871 E(ary)-.15 E F0(.).32 E F1(autoadd)5.701 E F0 .37
(speci\214es whether to add the library to the)3.641 F(en)144 650.4 Q(v\
ironment \(only if the check succeeds\). This method returns 1 on succe\
ss and 0 on error)-.4 E(.)-.55 E(SConf.CheckT)108 679.2 Q(ype\()-.8 E F1
(conte).2 E(xt)-.2 E F0(,).68 E F1(type_name)2.63 E F0 2.5(,[).18 G F1
(includes)-2.49 E F0(,).27 E F1(langua)2.59 E -.1(ge)-.1 G F0(]\)).28 E
F1(sconf)108 696 Q F0(.CheckT)1.96 E(ype\()-.8 E F1(type_name).13 E F0
2.5(,[).18 G F1(includes)-2.49 E F0(,).27 E F1(langua)2.59 E -.1(ge)-.1
G F0(]\)).28 E .82(Checks for the e)144 708 R .821
(xistence of a type de\214ned by)-.15 F F2(typedef)3.321 E F0(.)A F1
(type_name)5.951 E F0 .821(speci\214es the typedef name to)3.501 F .388
(check for)144 720 R(.)-.55 E F1(includes)5.397 E F0 .387
(is a string containing one or more)3.157 F F2(#include)2.887 E F0 .387
(lines that will be inserted into the)2.887 F(July 2010)286.415 768 Q
(122)199.415 E 0 Cg EP
%%Page: 123 123
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 1.262
(program that will be run to test for the e)144 84 R 1.263
(xistence of the type.)-.15 F 1.263(The optional)6.263 F/F1 10
/Times-Italic@0 SF(langua)3.853 E -.1(ge)-.1 G F0(ar)4.043 E(gument)-.18
E .567(should be)144 96 R/F2 10/Times-Bold@0 SF(C)3.067 E F0(or)3.067 E
F2(C++)3.067 E F0 .567
(and selects the compiler to be used for the check; the def)3.067 F .566
(ault is "C".)-.1 F(Exam-)5.566 E(ple:)144 108 Q(sconf.CheckT)144 120 Q
(ype\('foo_type', '#include "my_types.h"', 'C++'\))-.8 E
(Con\214gure.CheckCC\()108 148.8 Q F1(self).34 E F0(\))1.96 E 1.001
(Checks whether the C compiler \(as de\214ned by the CC construction v)
144 160.8 R 1.001(ariable\) w)-.25 F 1.001(orks by trying to)-.1 F
(compile a small source \214le.)144 172.8 Q .017(By def)144 196.8 R .016
(ault, SCons only detects if there is a program with the correct name, \
not if it is a functioning)-.1 F(compiler)144 208.8 Q(.)-.55 E .483
(This uses the e)144 232.8 R .483
(xact same command than the one used by the object b)-.15 F .483
(uilder for C source \214le, so it)-.2 F
(can be used to detect if a particular compiler \215ag w)144 244.8 Q
(orks or not.)-.1 E(Con\214gure.CheckCXX\()108 273.6 Q F1(self).34 E F0
(\))1.96 E .446(Checks whether the C++ compiler \(as de\214ned by the C\
XX construction v)144 285.6 R .445(ariable\) w)-.25 F .445
(orks by trying)-.1 F .064(to compile a small source \214le. By def)144
297.6 R .064
(ault, SCons only detects if there is a program with the correct)-.1 F
(name, not if it is a functioning compiler)144 309.6 Q(.)-.55 E .606
(This uses the e)144 333.6 R .606
(xact same command than the one used by the object b)-.15 F .606
(uilder for CXX source \214les,)-.2 F
(so it can be used to detect if a particular compiler \215ag w)144 345.6
Q(orks or not.)-.1 E(Con\214gure.CheckSHCC\()108 374.4 Q F1(self).34 E
F0(\))1.96 E .149(Checks whether the C compiler \(as de\214ned by the S\
HCC construction v)144 386.4 R .149(ariable\) w)-.25 F .149
(orks by trying to)-.1 F .673(compile a small source \214le. By def)144
398.4 R .672
(ault, SCons only detects if there is a program with the correct)-.1 F
(name, not if it is a functioning compiler)144 410.4 Q(.)-.55 E .483
(This uses the e)144 434.4 R .483
(xact same command than the one used by the object b)-.15 F .483
(uilder for C source \214le, so it)-.2 F .76
(can be used to detect if a particular compiler \215ag w)144 446.4 R .76
(orks or not. This does not check whether the)-.1 F
(object code can be used to b)144 458.4 Q(uild a shared library)-.2 E
2.5(,o)-.65 G(nly that the compilation \(not link\) succeeds.)-2.5 E
(Con\214gure.CheckSHCXX\()108 487.2 Q F1(self).34 E F0(\))1.96 E .208(C\
hecks whether the C++ compiler \(as de\214ned by the SHCXX construction\
 v)144 499.2 R .208(ariable\) w)-.25 F .208(orks by try-)-.1 F .896
(ing to compile a small source \214le. By def)144 511.2 R .896
(ault, SCons only detects if there is a program with the)-.1 F
(correct name, not if it is a functioning compiler)144 523.2 Q(.)-.55 E
.605(This uses the e)144 547.2 R .606
(xact same command than the one used by the object b)-.15 F .606
(uilder for CXX source \214les,)-.2 F .471
(so it can be used to detect if a particular compiler \215ag w)144 559.2
R .471(orks or not. This does not check whether)-.1 F
(the object code can be used to b)144 571.2 Q(uild a shared library)-.2
E 2.5(,o)-.65 G(nly that the compilation \(not link\) succeeds.)-2.5 E
(Example of a typical Con\214gure usage:)108 595.2 Q(en)144 619.2 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(conf = Con\214gure\( en)144
631.2 Q 2.5(v\))-.4 G(if not conf.CheckCHeader\( 'math.h' \):)144 643.2
Q(print 'W)154 655.2 Q 2.5(er)-.8 G(eally need math.h!')-2.5 E
(Exit\(1\))154 667.2 Q(if conf.CheckLibW)144 679.2 Q
(ithHeader\( 'qt', 'qapp.h', 'c++',)-.4 E
('QApplication qapp\(0,0\);' \):)164 691.2 Q 2.5(#d)154 703.2 S 2.5(os)
-2.5 G(tuf)-2.5 E 2.5(ff)-.25 G(or qt - usage, e.g.)-2.5 E(conf.en)154
715.2 Q -.65(v.)-.4 G(Append\( CPPFLA).65 E(GS = '-D)-.4 E(WITH_QT' \))
-.3 E(en)144 727.2 Q 2.5(v=c)-.4 G(onf.Finish\(\))-2.5 E(July 2010)
286.415 768 Q(123)199.415 E 0 Cg EP
%%Page: 124 124
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(SConf.CheckT)108 84 Q(ypeSize\()-.8 E/F1 10/Times-Italic@0 SF(conte).2
E(xt)-.2 E F0(,).68 E F1(type_name)2.63 E F0 2.5(,[).18 G F1(header)
-2.19 E F0(,).73 E F1(langua)2.59 E -.1(ge)-.1 G F0(,).28 E F1 -.2(ex)
2.5 G(pect).2 E F0(]\)).68 E F1(sconf)108 100.8 Q F0(.CheckT)1.96 E
(ypeSize\()-.8 E F1(type_name).13 E F0 2.5(,[).18 G F1(header)-2.19 E F0
(,).73 E F1(langua)2.59 E -.1(ge)-.1 G F0(,).28 E F1 -.2(ex)2.5 G(pect)
.2 E F0(]\)).68 E .5(Checks for the size of a type de\214ned by)144
112.8 R/F2 10/Times-Bold@0 SF(typedef)3 E F0(.)A F1(type_name)5.63 E F0
.5(speci\214es the typedef name to check)3.18 F(for)144 124.8 Q 5.259
(.T)-.55 G .259(he optional)-5.259 F F1(header)3.069 E F0(ar)3.489 E
.258(gument is a string that will be placed at the top of the test \214\
le that will)-.18 F .303(be compiled to check if the function e)144
136.8 R .303(xists; the def)-.15 F .303(ault is empty)-.1 F 5.304(.T)
-.65 G .304(he optional)-5.304 F F1(langua)2.894 E -.1(ge)-.1 G F0(ar)
3.084 E(gument)-.18 E 1.152(should be)144 148.8 R F2(C)3.652 E F0(or)
3.652 E F2(C++)3.652 E F0 1.152
(and selects the compiler to be used for the check; the def)3.652 F
1.151(ault is "C".)-.1 F(The)6.151 E(optional)144 160.8 Q F1 -.2(ex)
3.793 G(pect).2 E F0(ar)4.473 E 1.293(gument should be an inte)-.18 F
(ger)-.15 E 6.293(.I)-.55 G 3.793(ft)-6.293 G 1.293(his ar)-3.793 F
1.294(gument is used, the function will only)-.18 F .166
(check whether the type gi)144 172.8 R -.15(ve)-.25 G 2.666(ni).15 G
2.666(nt)-2.666 G .166(ype_name has the e)-2.666 F .166
(xpected size \(in bytes\).)-.15 F -.15(Fo)5.166 G 2.666(re).15 G
(xample,)-2.816 E F2(Check-)2.666 E -.34(Ty)144 184.8 S(peSize\(').34 E
(short', expect = 2\))-.37 E F0(will return success only if short is tw)
2.5 E 2.5(ob)-.1 G(ytes.)-2.5 E(SConf.CheckDeclaration\()108 225.6 Q F1
(conte).2 E(xt)-.2 E F0(,).68 E F1(symbol)2.84 E F0 2.5(,[).51 G F1
(includes)-2.49 E F0(,).27 E F1(langua)2.59 E -.1(ge)-.1 G F0(]\)).28 E
F1(sconf)108 242.4 Q F0(.CheckDeclaration\()1.96 E F1(symbol).34 E F0
2.5(,[).51 G F1(includes)-2.49 E F0(,).27 E F1(langua)2.59 E -.1(ge)-.1
G F0(]\)).28 E .753(Checks if the speci\214ed)144 254.4 R F1(symbol)
3.593 E F0 .753(is declared.)3.763 F F1(includes)5.763 E F0 .754
(is a string containing one or more)3.523 F F2(#include)3.254 E F0 1.057
(lines that will be inserted into the program that will be run to test \
for the e)144 266.4 R 1.056(xistence of the type.)-.15 F .688
(The optional)144 278.4 R F1(langua)3.278 E -.1(ge)-.1 G F0(ar)3.468 E
.689(gument should be)-.18 F F2(C)3.189 E F0(or)3.189 E F2(C++)3.189 E
F0 .689(and selects the compiler to be used for the)3.189 F
(check; the def)144 290.4 Q(ault is "C".)-.1 E(SConf.De\214ne\()108
319.2 Q F1(conte).2 E(xt)-.2 E F0(,).68 E F1(symbol)2.84 E F0 2.5(,[).51
G F1(value)-2.21 E F0(,).18 E F1(comment)2.7 E F0(]\)).68 E F1(sconf)108
336 Q F0(.De\214ne\()1.96 E F1(symbol).34 E F0 2.5(,[).51 G F1(value)
-2.21 E F0(,).18 E F1(comment)2.7 E F0(]\)).68 E .244
(This function does not check for an)144 348 R .244(ything, b)-.15 F
.244(ut de\214nes a preprocessor symbol that will be added to)-.2 F .953
(the con\214guration header \214le.)144 360 R .953(It is the equi)5.953
F -.25(va)-.25 G .954(lent of A).25 F .954
(C_DEFINE, and de\214nes the symbol)-.4 F F1(name)3.814 E F0
(with the optional)144 372 Q F2 -.1(va)2.5 G(lue).1 E F0
(and the optional comment)2.5 E F2(comment)2.5 E F0(.)A(Examples:)144
400.8 Q(en)144 424.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E
(conf = Con\214gure\( en)144 436.8 Q 2.5(v\))-.4 G 2.5(#P)144 460.8 S
(uts the follo)-2.5 E(wing line in the con\214g header \214le:)-.25 E 10
(##)144 472.8 S(de\214ne A_SYMBOL)-10 E(conf.De\214ne\('A_SYMBOL)144
484.8 Q('\))-.92 E 2.5(#P)144 508.8 S(uts the follo)-2.5 E
(wing line in the con\214g header \214le:)-.25 E 10(##)144 520.8 S
(de\214ne A_SYMBOL 1)-10 E(conf.De\214ne\('A_SYMBOL)144 532.8 Q(', 1\))
-.92 E(Be careful about quoting string v)144 561.6 Q(alues, though:)-.25
E(en)144 585.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E
(conf = Con\214gure\( en)144 597.6 Q 2.5(v\))-.4 G 2.5(#P)144 621.6 S
(uts the follo)-2.5 E(wing line in the con\214g header \214le:)-.25 E 10
(##)144 633.6 S(de\214ne A_SYMBOL Y)-10 E(A)-1.2 E
(conf.De\214ne\('A_SYMBOL)144 645.6 Q(', "Y)-.92 E(A"\))-1.2 E 2.5(#P)
144 669.6 S(uts the follo)-2.5 E
(wing line in the con\214g header \214le:)-.25 E 10(##)144 681.6 S
(de\214ne A_SYMBOL "Y)-10 E(A")-1.2 E(conf.De\214ne\('A_SYMBOL)144 693.6
Q(', '"Y)-.92 E(A"'\))-1.2 E(July 2010)286.415 768 Q(124)199.415 E 0 Cg
EP
%%Page: 125 125
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R -.15(Fo)144
84 S 2.5(rc).15 G(omment:)-2.5 E(en)144 108 Q 2.5(v=E)-.4 G -.4(nv)-2.5
G(ironment\(\)).4 E(conf = Con\214gure\( en)144 120 Q 2.5(v\))-.4 G 2.5
(#P)144 144 S(uts the follo)-2.5 E
(wing lines in the con\214g header \214le:)-.25 E 10(#/)144 156 S 2.5
(*S)-10 G(et to 1 if you ha)-2.5 E .3 -.15(ve a s)-.2 H(ymbol */).15 E
10(##)144 168 S(de\214ne A_SYMBOL 1)-10 E(conf.De\214ne\('A_SYMBOL)144
180 Q(', 1, 'Set to 1 if you ha)-.92 E .3 -.15(ve a s)-.2 H(ymbol'\)).15
E -1.1(Yo)108 204 S 2.506(uc)1.1 G .006(an de\214ne your o)-2.506 F .006
(wn custom checks.)-.25 F .006(in addition to the prede\214ned checks.)
5.006 F .005(These are passed in a dictio-)5.005 F 1.794
(nary to the Con\214gure function.)108 216 R 1.795
(This dictionary maps the names of the checks to user de\214ned Python)
6.794 F 1.099(callables \(either Python functions or class instances im\
plementing the)108 228 R/F1 10/Times-Italic@0 SF(__call__)4.098 E F0
3.598(method\). The)4.098 F 1.098(\214rst ar)3.598 F(gu-)-.18 E .477
(ment of the call is al)108 240 R -.1(wa)-.1 G .477(ys a).1 F F1(Chec)
2.818 E(kConte)-.2 E(xt)-.2 E F0 .478(instance follo)3.658 F .478
(wed by the ar)-.25 F .478(guments, which must be supplied by)-.18 F
(the user of the check.)108 252 Q(These CheckConte)5 E
(xt instances de\214ne the follo)-.15 E(wing methods:)-.25 E(CheckConte)
108 280.8 Q(xt.Message\()-.15 E F1(self).34 E F0(,)1.96 E F1(te)2.63 E
(xt)-.2 E F0(\)).68 E 1.044(Usually called before the check is started.)
144 304.8 R F1(te)6.174 E(xt)-.2 E F0 1.044
(will be displayed to the user)4.224 F 3.543(,e)-.4 G 1.043
(.g. 'Checking for)-3.543 F(library X...)144 316.8 Q(')-.7 E(CheckConte)
108 345.6 Q(xt.Result\()-.15 E F1(self).34 E(,)-.1 E F0(,)A F1 -.37(re)
2.5 G(s).37 E F0(\)).27 E .408(Usually called after the check is done.)
144 369.6 R F1 -.37(re)5.408 G(s).37 E F0 .408(can be either an inte)
3.178 F .408(ger or a string. In the former case,)-.15 F .415
('yes' \(res != 0\) or 'no' \(res == 0\) is displayed to the user)144
381.6 R 2.914(,i)-.4 G 2.914(nt)-2.914 G .414(he latter case the gi)
-2.914 F -.15(ve)-.25 G 2.914(ns).15 G .414(tring is dis-)-2.914 F
(played.)144 393.6 Q(CheckConte)108 422.4 Q(xt.T)-.15 E(ryCompile\()-.35
E F1(self).34 E F0(,)1.96 E F1(te)2.63 E(xt)-.2 E F0(,).68 E F1 -.2(ex)
2.5 G(tension).2 E F0(\)).24 E .842
(Checks if a \214le with the speci\214ed)144 434.4 R F1 -.2(ex)3.342 G
(tension).2 E F0 .842(\(e.g. '.c'\) containing)3.582 F F1(te)3.472 E(xt)
-.2 E F0 .842(can be compiled using the)4.022 F(en)144 446.4 Q
(vironment')-.4 E(s)-.55 E/F2 10/Times-Bold@0 SF(Object)2.5 E F0 -.2(bu)
2.5 G(ilder).2 E 2.5(.R)-.55 G(eturns 1 on success and 0 on f)-2.5 E
(ailure.)-.1 E(CheckConte)108 475.2 Q(xt.T)-.15 E(ryLink\()-.35 E F1
(self).34 E F0(,)1.96 E F1(te)2.63 E(xt)-.2 E F0(,).68 E F1 -.2(ex)2.5 G
(tension).2 E F0(\)).24 E .686(Checks, if a \214le with the speci\214ed)
144 487.2 R F1 -.2(ex)3.186 G(tension).2 E F0 .686
(\(e.g. '.c'\) containing)3.426 F F1(te)3.315 E(xt)-.2 E F0 .685
(can be compiled using the)3.865 F(en)144 499.2 Q(vironment')-.4 E(s)
-.55 E F2(Pr)2.5 E(ogram)-.18 E F0 -.2(bu)2.5 G(ilder).2 E 2.5(.R)-.55 G
(eturns 1 on success and 0 on f)-2.5 E(ailure.)-.1 E(CheckConte)108 528
Q(xt.T)-.15 E(ryRun\()-.35 E F1(self).34 E F0(,)1.96 E F1(te)2.63 E(xt)
-.2 E F0(,).68 E F1 -.2(ex)2.5 G(tension).2 E F0(\)).24 E .685
(Checks, if a \214le with the speci\214ed)144 540 R F1 -.2(ex)3.186 G
(tension).2 E F0 .686(\(e.g. '.c'\) containing)3.426 F F1(te)3.316 E(xt)
-.2 E F0 .686(can be compiled using the)3.866 F(en)144 552 Q(vironment')
-.4 E(s)-.55 E F2(Pr)2.88 E(ogram)-.18 E F0 -.2(bu)2.88 G(ilder).2 E
2.88(.O)-.55 G 2.88(ns)-2.88 G .38
(uccess, the program is run. If the program e)-2.88 F -.15(xe)-.15 G .38
(cutes success-).15 F .644
(fully \(that is, its return status is 0\), a tuple)144 564 R F1 .644
(\(1, outputStr\))3.224 F F0 .644(is returned, where)3.204 F F1
(outputStr)3.374 E F0 .644(is the stan-)3.874 F .579
(dard output of the program.)144 576 R .578(If the program f)5.578 F
.578(ails e)-.1 F -.15(xe)-.15 G .578
(cution \(its return status is non-zero\), then \(0,).15 F -.74('')144
588 S 2.5(\)i).74 G 2.5(sr)-2.5 G(eturned.)-2.5 E(CheckConte)108 616.8 Q
(xt.T)-.15 E(ryAction\()-.35 E F1(self).34 E F0(,)1.96 E F1(action)2.83
E F0 2.5(,[).24 G F1(te)-2.37 E(xt)-.2 E F0(,).68 E F1 -.2(ex)2.5 G
(tension).2 E F0(]\)).24 E .037(Checks if the speci\214ed)144 628.8 R F1
(action)2.867 E F0 .038(with an optional source \214le \(contents)2.777
F F1(te)2.668 E(xt)-.2 E F0 2.538(,e)3.218 G(xtension)-2.688 E F1 -.2
(ex)2.538 G(tension).2 E F0 2.538(=')2.778 G 2.538('\))-3.278 G .425
(can be e)144 640.8 R -.15(xe)-.15 G(cuted.).15 E F1(action)5.755 E F0
.425(may be an)3.165 F .424(ything which can be con)-.15 F -.15(ve)-.4 G
.424(rted to a).15 F F2(scons)2.924 E F0 2.924(Action. On)2.924 F
(success,)2.924 E F1 1.345(\(1, outputStr\))144.08 652.8 R F0 1.345
(is returned, where)3.905 F F1(outputStr)4.075 E F0 1.345
(is the content of the tar)4.575 F 1.345(get \214le.)-.18 F 1.346(On f)
6.346 F(ailure)-.1 E F1 1.346(\(0, ')3.926 F('\))-1.11 E F0(is)3.906 E
(returned.)144 664.8 Q(CheckConte)108 693.6 Q(xt.T)-.15 E(ryBuild\()-.35
E F1(self).34 E F0(,)1.96 E F1 -.2(bu)2.5 G(ilder).2 E F0 2.5(,[).73 G
F1(te)-2.37 E(xt)-.2 E F0(,).68 E F1 -.2(ex)2.5 G(tension).2 E F0(]\))
.24 E(Lo)144 705.6 Q 2.755(wl)-.25 G -2.15 -.25(ev e)-2.755 H 2.755(li)
.25 G .255(mplementation for testing speci\214c b)-2.755 F .255
(uilds; the methods abo)-.2 F .555 -.15(ve a)-.15 H .255
(re based on this method.).15 F(Gi)144 717.6 Q -.15(ve)-.25 G 3.369(nt)
.15 G .869(he Builder instance)-3.369 F F1 -.2(bu)3.369 G(ilder).2 E F0
.869(and the optional)4.099 F F1(te)3.499 E(xt)-.2 E F0 .87
(of a source \214le with optional)4.049 F F1 -.2(ex)3.37 G(tension).2 E
F0(,).24 E 1.154(this method returns 1 on success and 0 on f)144 729.6 R
1.153(ailure. In addition,)-.1 F F1(self)3.993 E(.lastT)-.15 E(ar)-.92 E
-.1(ge)-.37 G(t).1 E F0 1.153(is set to the b)4.333 F(uild)-.2 E
(July 2010)286.415 768 Q(125)199.415 E 0 Cg EP
%%Page: 126 126
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(tar)144 84
Q(get node, if the b)-.18 E(uild w)-.2 E(as successful.)-.1 E
(Example for implementing and using custom tests:)108 108 Q
(def CheckQt\(conte)144 132 Q(xt, qtdir\):)-.15 E(conte)154 144 Q
(xt.Message\( 'Checking for qt ...)-.15 E 2.5('\))-.7 G
(lastLIBS = conte)154 156 Q(xt.en)-.15 E(v['LIBS'])-.4 E(lastLIBP)154
168 Q -1.11(AT)-.92 G 2.5(H=c)1.11 G(onte)-2.5 E(xt.en)-.15 E(v['LIBP)
-.4 E -1.11(AT)-.92 G(H'])1.11 E(lastCPPP)154 180 Q -1.11(AT)-.92 G
(H= conte)1.11 E(xt.en)-.15 E(v['CPPP)-.4 E -1.11(AT)-.92 G(H'])1.11 E
(conte)154 192 Q(xt.en)-.15 E -.65(v.)-.4 G(Append\(LIBS = 'qt', LIBP)
.65 E -1.11(AT)-.92 G 2.5(H=q)1.11 G(tdir + '/lib', CPPP)-2.5 E -1.11
(AT)-.92 G 2.5(H=q)1.11 G(tdir + '/include' \))-2.5 E(ret = conte)154
204 Q(xt.T)-.15 E(ryLink\(""")-.35 E(#include <qapp.h>)144 216 Q
(int main\(int ar)144 228 Q(gc, char **ar)-.18 E(gv\) {)-.18 E
(QApplication qapp\(ar)149 240 Q(gc, ar)-.18 E(gv\);)-.18 E(return 0;)
149 252 Q(})144 264 Q("""\))144 276 Q(if not ret:)154 288 Q(conte)164
300 Q(xt.en)-.15 E -.65(v.)-.4 G(Replace\(LIBS = lastLIBS, LIBP).65 E
-1.11(AT)-.92 G(H=lastLIBP)1.11 E -1.11(AT)-.92 G(H, CPPP)1.11 E -1.11
(AT)-.92 G(H=lastCPPP)1.11 E -1.11(AT)-.92 G(H\))1.11 E(conte)154 312 Q
(xt.Result\( ret \))-.15 E(return ret)154 324 Q(en)144 348 Q 2.5(v=E)-.4
G -.4(nv)-2.5 G(ironment\(\)).4 E(conf = Con\214gure\( en)144 360 Q 1.3
-.65(v, c)-.4 H(ustom_tests = { 'CheckQt' : CheckQt } \)).65 E
(if not conf.CheckQt\('/usr/lib/qt'\):)144 372 Q(print 'W)154 384 Q 2.5
(er)-.8 G(eally need qt!')-2.5 E(Exit\(1\))154 396 Q(en)144 408 Q 2.5
(v=c)-.4 G(onf.Finish\(\))-2.5 E/F1 10/Times-Bold@0 SF
(Command-Line Construction V)87 436.8 Q(ariables)-.92 E F0 2.007
(Often when b)108 448.8 R 2.007(uilding softw)-.2 F 2.007(are, some v)
-.1 F 2.007(ariables must be speci\214ed at b)-.25 F 2.007(uild time.)
-.2 F -.15(Fo)7.007 G 4.508(re).15 G 2.008(xample, libraries)-4.658 F
1.235(needed for the b)108 460.8 R 1.235(uild may be in non-standard lo\
cations, or site-speci\214c compiler options may need to be)-.2 F .697
(passed to the compiler)108 472.8 R(.)-.55 E F1(scons)5.698 E F0(pro)
3.198 E .698(vides a)-.15 F F1 -.92(Va)3.198 G(riables).92 E F0 .698
(object to support o)3.198 F -.15(ve)-.15 G .698(rriding construction v)
.15 F .698(ariables on)-.25 F(the command line:)108 484.8 Q 2.5($s)144
496.8 S(cons V)-2.5 E(ARIABLE=foo)-1.35 E .536(The v)108 508.8 R .536
(ariable v)-.25 F .535(alues can also be speci\214ed in a te)-.25 F .535
(xt-based SConscript \214le.)-.15 F 2.135 -.8(To c)5.535 H .535
(reate a V).8 F .535(ariables object, call)-1.11 F(the V)108 520.8 Q
(ariables\(\) function:)-1.11 E -1.11(Va)108 549.6 S(riables\([)1.11 E
/F2 10/Times-Italic@0 SF(\214les)1.91 E F0(], [).27 E F2(ar).33 E(gs)
-.37 E F0(]\)).27 E 1.366(This creates a V)144 561.6 R 1.367
(ariables object that will read construction v)-1.11 F 1.367
(ariables from the \214le or list of \214le-)-.25 F .549
(names speci\214ed in)144 573.6 R F2(\214les)3.049 E F0 5.549(.I).27 G
3.049(fn)-5.549 G 3.049<6f8c>-3.049 G .549(les are speci\214ed, or the)
-3.049 F F2(\214les)4.959 E F0(ar)3.319 E .549(gument is)-.18 F F1(None)
3.049 E F0 3.049(,t)C .548(hen no \214les will)-3.049 F .003(be read.)
144 585.6 R .003(The optional ar)5.003 F(gument)-.18 E F2(ar)2.833 E(gs)
-.37 E F0 .003(is a dictionary of v)2.773 F .003(alues that will o)-.25
F -.15(ve)-.15 G .003(rride an).15 F .004(ything read from)-.15 F .827
(the speci\214ed \214les; it is primarily intended to be passed the)144
597.6 R F1(ARGUMENTS)3.326 E F0 .826(dictionary that holds)3.326 F -.25
(va)144 609.6 S(riables speci\214ed on the command line.).25 E(Example:)
5 E -.25(va)144 633.6 S(rs = V).25 E(ariables\('custom.p)-1.11 E(y'\))
-.1 E -.25(va)144 645.6 S(rs = V).25 E(ariables\('o)-1.11 E -.15(ve)-.15
G(rrides.p).15 E(y', ARGUMENTS\))-.1 E -.25(va)144 657.6 S(rs = V).25 E
(ariables\(None, {FOO:'e)-1.11 E(xpansion', B)-.15 E(AR:7}\))-.35 E
-1.11(Va)108 681.6 S(riables objects ha)1.11 E .3 -.15(ve t)-.2 H
(he follo).15 E(wing methods:)-.25 E(July 2010)286.415 768 Q(126)199.415
E 0 Cg EP
%%Page: 127 127
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(Add\()108
84 Q/F1 10/Times-Italic@0 SF -.1(ke)C(y)-.2 E F0 2.5(,[).32 G F1(help)
-2.19 E F0(,).19 E F1(default)2.85 E F0(,).68 E F1(validator)2.79 E F0
(,).73 E F1(con)2.7 E(verter)-.4 E F0(]\)).73 E .103
(This adds a customizable construction v)144 96 R .104(ariable to the V)
-.25 F .104(ariables object.)-1.11 F F1 -.1(ke)5.104 G(y)-.2 E F0 .104
(is the name of the v)2.924 F(ari-)-.25 E(able.)144 108 Q F1(help)6.945
E F0 1.635(is the help te)4.325 F 1.635(xt for the v)-.15 F(ariable.)
-.25 E F1(default)6.984 E F0 1.634(is the def)4.814 F 1.634(ault v)-.1 F
1.634(alue of the v)-.25 F 1.634(ariable; if the)-.25 F(def)144 120 Q
.323(ault v)-.1 F .323(alue is)-.25 F/F2 10/Times-Bold@0 SF(None)2.823 E
F0 .324(and there is no e)2.823 F .324(xplicit v)-.15 F .324
(alue speci\214ed, the construction v)-.25 F .324(ariable will)-.25 F F1
(not)3.184 E F0(be)3.504 E 1.176(added to the construction en)144 132 R
(vironment.)-.4 E F1(validator)6.466 E F0 1.176(is called to v)4.406 F
1.176(alidate the v)-.25 F 1.175(alue of the v)-.25 F(ariable,)-.25 E
.68(and should tak)144 144 R 3.18(et)-.1 G .68(hree ar)-3.18 F .68
(guments: k)-.18 F -.15(ey)-.1 G 3.18(,v)-.5 G .68(alue, and en)-3.43 F
3.18(vironment. The)-.4 F .68(recommended w)3.18 F .68(ay to handle)-.1
F .959(an in)144 156 R -.25(va)-.4 G .959(lid v).25 F .958
(alue is to raise an e)-.25 F .958(xception \(see e)-.15 F .958
(xample belo)-.15 F(w\).)-.25 E F1(con)6.158 E(verter)-.4 E F0 .958
(is called to con)4.188 F -.15(ve)-.4 G .958(rt the).15 F -.25(va)144
168 S .078(lue before putting it in the en).25 F .078
(vironment, and should tak)-.4 F 2.578(ee)-.1 G .078(ither a v)-2.578 F
.079(alue, or the v)-.25 F .079(alue and en)-.25 F(viron-)-.4 E 1.442
(ment, as parameters.)144 180 R(The)6.442 E F1(con)4.142 E(verter)-.4 E
F0 1.441(must return a v)4.672 F 1.441(alue, which will be con)-.25 F
-.15(ve)-.4 G 1.441(rted into a string).15 F(before being v)144 192 Q
(alidated by the)-.25 E F1(validator)2.79 E F0(\(if an)3.23 E
(y\) and then added to the en)-.15 E(vironment.)-.4 E(Examples:)144 216
Q -.25(va)144 240 S(rs.Add\('CC', 'The C compiler'\)).25 E(def v)144 264
Q(alidate_color\(k)-.25 E -.15(ey)-.1 G 2.5(,v)-.5 G(al, en)-2.75 E
(v\):)-.4 E(if not v)154 276 Q(al in [')-.25 E(red', 'blue', 'yello)-.5
E(w']:)-.25 E(raise "In)164 288 Q -.25(va)-.4 G(lid color v).25 E
(alue '%s'" % v)-.25 E(al)-.25 E -.25(va)144 300 S(rs.Add\('COLOR', v)
.25 E(alidator=v)-.25 E(alid_color\))-.25 E(AddV)108 328.8 Q(ariables\()
-1.11 E F1(list).09 E F0(\)).68 E 2.861(Aw)144 340.8 S .361
(rapper script that adds multiple customizable construction v)-2.861 F
.362(ariables to a V)-.25 F .362(ariables object.)-1.11 F F1(list)5.452
E F0(is a list of tuple or list objects that contain the ar)144 352.8 Q
(guments for an indi)-.18 E(vidual call to the)-.25 E F2(Add)2.5 E F0
(method.)2.5 E(opt.AddV)144 376.8 Q(ariables\()-1.11 E(\(')161.5 388.8 Q
(deb)-.5 E(ug', ')-.2 E(', 0\),)-.74 E(\('CC', 'The C compiler'\),)161.5
400.8 Q(\('V)161.5 412.8 Q(ALID)-1.35 E -1.11(AT)-.4 G
(E', 'An option for testing v)1.11 E(alidation',)-.25 E('notset', v)164
424.8 Q(alidator)-.25 E 2.5(,N)-.4 G(one\),)-2.5 E(\))154 436.8 Q
(Update\()108 465.6 Q F1(en).19 E(v)-.4 E F0 2.5(,[).32 G F1(ar)-2.17 E
(gs)-.37 E F0(]\)).27 E 1.749(This updates a construction en)144 477.6 R
(vironment)-.4 E F1(en)4.439 E(v)-.4 E F0 1.749
(with the customized construction v)4.569 F 4.249(ariables. An)-.25 F(y)
-.15 E 1.95(speci\214ed v)144 489.6 R 1.95(ariables that are)-.25 F F1
(not)4.81 E F0 1.95(con\214gured for the V)5.13 F 1.95
(ariables object will be sa)-1.11 F -.15(ve)-.2 G 4.45(da).15 G 1.95
(nd may be)-4.45 F(retrie)144 501.6 Q -.15(ve)-.25 G 2.5(dw).15 G
(ith the)-2.5 E F2(Unkno)2.5 E(wnV)-.1 E(ariables)-.92 E F0
(\(\) method, belo)A -.65(w.)-.25 G .311
(Normally this method is not called directly)144 525.6 R 2.811(,b)-.65 G
.31(ut is called indirectly by passing the V)-3.011 F .31
(ariables object)-1.11 F(to the En)144 537.6 Q(vironment\(\) function:)
-.4 E(en)144 561.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(v).4 E
(ariables=v)-.25 E(ars\))-.25 E .721(The te)144 590.4 R .721
(xt \214le\(s\) that were speci\214ed when the V)-.15 F .721
(ariables object w)-1.11 F .722(as created are e)-.1 F -.15(xe)-.15 G
.722(cuted as Python).15 F 1.365(scripts, and the v)144 602.4 R 1.365
(alues of \(global\) Python v)-.25 F 1.364
(ariables set in the \214le are added to the construction)-.25 F(en)144
614.4 Q(vironment.)-.4 E(Example:)144 638.4 Q(CC = 'my_cc')144 662.4 Q
(Unkno)108 691.2 Q(wnV)-.25 E(ariables\()-1.11 E F1(\)).34 E F0 .93
(Returns a dictionary containing an)144 703.2 R 3.43(yv)-.15 G .931
(ariables that were speci\214ed either in the \214les or the dictio-)
-3.68 F 1.061(nary with which the V)144 715.2 R 1.061(ariables object w)
-1.11 F 1.061(as initialized, b)-.1 F 1.061(ut for which the V)-.2 F
1.06(ariables object w)-1.11 F 1.06(as not)-.1 F(con\214gured.)144 727.2
Q(July 2010)286.415 768 Q(127)199.415 E 0 Cg EP
%%Page: 128 128
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)144 84 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(v).4 E(ariables=v)-.25 E(ars\))
-.25 E(for k)144 96 Q -.15(ey)-.1 G 2.5(,v)-.5 G(alue in v)-2.75 E
(ars.Unkno)-.25 E(wnV)-.25 E(ariables\(\):)-1.11 E(print "unkno)154 108
Q(wn v)-.25 E 2.5(ariable: %s=%s")-.25 F 2.5(%\()2.5 G -.1(ke)-2.5 G 1.3
-.65(y, v)-.05 H(alue\)).4 E(Sa)108 136.8 Q -.15(ve)-.2 G(\().15 E/F1 10
/Times-Italic@0 SF(\214lename)1.91 E F0(,).18 E F1(en)2.69 E(v)-.4 E F0
(\)).32 E .17(This sa)144 148.8 R -.15(ve)-.2 G 2.67(st).15 G .17
(he currently set v)-2.67 F .17(ariables into a script \214le named)-.25
F F1(\214lename)4.58 E F0 .17(that can be used on the ne)2.85 F(xt)-.15
E(in)144 160.8 Q -.2(vo)-.4 G 1.201
(cation to automatically load the current settings.).2 F 1.201
(This method combined with the V)6.201 F(ariables)-1.11 E
(method can be used to support caching of v)144 172.8 Q
(ariables between runs.)-.25 E(en)144 196.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5
G(ironment\(\)).4 E -.25(va)144 208.8 S(rs = V).25 E(ariables\([')-1.11
E -.25(va)-.5 G(riables.cache', 'custom.p).25 E(y']\))-.1 E -.25(va)144
220.8 S(rs.Add\(...\)).25 E -.25(va)144 232.8 S(rs.Update\(en).25 E(v\))
-.4 E -.25(va)144 244.8 S(rs.Sa).25 E -.15(ve)-.2 G(\(').15 E -.25(va)
-.5 G(riables.cache', en).25 E(v\))-.4 E(GenerateHelpT)108 273.6 Q -.15
(ex)-.7 G(t\().15 E F1(en).19 E(v)-.4 E F0 2.5(,[).32 G F1(sort)-2.16 E
F0(]\)).68 E .863(This generates help te)144 285.6 R .864
(xt documenting the customizable construction v)-.15 F .864
(ariables suitable to passing)-.25 F .847(in to the Help\(\) function.)
144 297.6 R F1(en)6.037 E(v)-.4 E F0 .847(is the construction en)3.667 F
.846(vironment that will be used to get the actual)-.4 F -.25(va)144
309.6 S .108(lues of customizable v).25 F .108
(ariables. Calling with an optional)-.25 F F1(sort)2.948 E F0 .108
(function will cause the output to be)3.288 F .162
(sorted by the speci\214ed ar)144 321.6 R 2.662(gument. The)-.18 F
(speci\214c)2.662 E F1(sort)3.001 E F0 .161(function should tak)3.341 F
2.661(et)-.1 G .361 -.1(wo a)-2.661 H -.18(rg).1 G .161
(uments and return).18 F(-1, 0 or 1 \(lik)144 333.6 Q 2.5(et)-.1 G
(he standard Python)-2.5 E F1(cmp)2.7 E F0(function\).)2.69 E(Help\(v)
144 357.6 Q(ars.GenerateHelpT)-.25 E -.15(ex)-.7 G(t\(en).15 E(v\)\))-.4
E(Help\(v)144 369.6 Q(ars.GenerateHelpT)-.25 E -.15(ex)-.7 G(t\(en).15 E
1.3 -.65(v, s)-.4 H(ort=cmp\)\)).65 E -.15(Fo)108 398.4 S(rmatV).15 E
(ariableHelpT)-1.11 E -.15(ex)-.7 G(t\().15 E F1(en).19 E(v)-.4 E F0(,)
.32 E F1(opt)2.73 E F0(,).68 E F1(help)2.81 E F0(,).19 E F1(default)2.85
E F0(,).68 E F1(actual)2.83 E F0(\)).51 E .399(This method returns a fo\
rmatted string containing the printable help te)144 410.4 R .4
(xt for one option.)-.15 F .4(It is nor)5.4 F(-)-.2 E 1.192
(mally not called directly)144 422.4 R 3.692(,b)-.65 G 1.192
(ut is called by the)-3.892 F F1(Gener)3.691 E(ateHelpT)-.15 E -.2(ex)
-.92 G(t).2 E F0 1.191(\(\) method to create the returned).68 F .73
(help te)144 434.4 R 3.23(xt. It)-.15 F .73(may be o)3.23 F -.15(ve)-.15
G .73(rridden with your o).15 F .73(wn function that tak)-.25 F .73
(es the ar)-.1 F .73(guments speci\214ed abo)-.18 F -.15(ve)-.15 G .879
(and returns a string of help te)144 446.4 R .879
(xt formatted to your liking.)-.15 F .878(Note that the)5.878 F F1
(Gener)3.378 E(ateHelpT)-.15 E -.2(ex)-.92 G(t).2 E F0 .878(\(\) will)
.68 F .114(not put an)144 458.4 R 2.614(yb)-.15 G .114(lank lines or e)
-2.614 F .114(xtra characters in between the entries, so you must add t\
hose characters)-.15 F(to the returned string if you w)144 470.4 Q
(ant the entries separated.)-.1 E(def my_format\(en)144 494.4 Q 1.3 -.65
(v, o)-.4 H(pt, help, def).65 E(ault, actual\):)-.1 E(fmt = "128s: def)
154 506.4 Q(ault=%s actual=%s \(%s\)0)-.1 E(return fmt % \(opt, def)154
518.4 Q(ault. actual, help\))-.1 E -.25(va)144 530.4 S(rs.F).25 E
(ormatV)-.15 E(ariableHelpT)-1.11 E -.15(ex)-.7 G 2.5(t=m).15 G
(y_format)-2.5 E 2.74 -.8(To m)108 554.4 T(ak).8 E 3.64(ei)-.1 G 3.64
(tm)-3.64 G 1.14(ore con)-3.64 F -.15(ve)-.4 G 1.14(nient to w).15 F
1.139(ork with customizable V)-.1 F(ariables,)-1.11 E/F2 10/Times-Bold@0
SF(scons)3.639 E F0(pro)3.639 E 1.139(vides a number of functions)-.15 F
(that mak)108 566.4 Q 2.5(ei)-.1 G 2.5(te)-2.5 G(asy to set up v)-2.5 E
(arious types of V)-.25 E(ariables:)-1.11 E(BoolV)108 595.2 Q(ariable\()
-1.11 E F1 -.1(ke)C(y)-.2 E F0(,).32 E F1(help)2.81 E F0(,).19 E F1
(default)2.85 E F0(\)).68 E .904(Return a tuple of ar)144 607.2 R .905
(guments to set up a Boolean option.)-.18 F .905
(The option will use the speci\214ed name)5.905 F F1 -.1(ke)144 619.2 S
(y)-.2 E F0 3.107(,h).32 G -2.25 -.2(av e)-3.107 H 3.107(ad)3.307 G(ef)
-3.107 E .607(ault v)-.1 F .606(alue of)-.25 F F1(default)3.106 E F0
3.106(,a).68 G .606(nd display the speci\214ed)-3.106 F F1(help)3.416 E
F0(te)3.296 E 3.106(xt. The)-.15 F .606(option will interpret)3.106 F
.82(the v)144 631.2 R(alues)-.25 E F2(y)3.32 E F0(,)A F2 -.1(ye)3.32 G
(s).1 E F0(,)A F2(t)3.32 E F0(,)A F2(true)3.32 E F0(,)A F2(1)3.32 E F0
(,)A F2(on)3.32 E F0(and)3.32 E F2(all)3.32 E F0 .82(as true, and the v)
3.32 F(alues)-.25 E F2(n)3.321 E F0(,)A F2(no)3.321 E F0(,)A F2(f)3.321
E F0(,)A F2(false)3.321 E F0(,)A F2(0)3.321 E F0(,)A F2(off)3.321 E F0
(and)3.321 E F2(none)3.321 E F0(as)3.321 E -.1(fa)144 643.2 S(lse.).1 E
(EnumV)108 672 Q(ariable\()-1.11 E F1 -.1(ke)C(y)-.2 E F0(,).32 E F1
(help)2.81 E F0(,).19 E F1(default)2.85 E F0(,).68 E F1(allowed_values)
2.83 E F0 2.5(,[).27 G F1(map)-2.12 E F0(,).19 E F1(ignor)2.51 E(ecase)
-.37 E F0(]\)).18 E .223(Return a tuple of ar)144 684 R .223
(guments to set up an option whose v)-.18 F .223
(alue may be one of a speci\214ed list of le)-.25 F -.05(ga)-.15 G(l).05
E 1.002(enumerated v)144 696 R 3.502(alues. The)-.25 F 1.003
(option will use the speci\214ed name)3.502 F F1 -.1(ke)3.503 G(y)-.2 E
F0 3.503(,h).32 G -2.25 -.2(av e)-3.503 H 3.503(ad)3.703 G(ef)-3.503 E
1.003(ault v)-.1 F 1.003(alue of)-.25 F F1(default)3.503 E F0(,).68 E
.428(and display the speci\214ed)144 708 R F1(help)3.238 E F0(te)3.118 E
2.928(xt. The)-.15 F .428(option will only support those v)2.928 F .428
(alues in the)-.25 F F1(allowed_val-)3.258 E(ues)144 720 Q F0 3.206
(list. The)3.476 F(optional)3.206 E F1(map)3.586 E F0(ar)3.396 E .707
(gument is a dictionary that can be used to con)-.18 F -.15(ve)-.4 G
.707(rt input v).15 F .707(alues into)-.25 F(July 2010)286.415 768 Q
(128)199.415 E 0 Cg EP
%%Page: 129 129
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R .35
(speci\214c le)144 84 R -.05(ga)-.15 G 2.85(lv).05 G .35(alues in the)
-3.1 F/F1 10/Times-Italic@0 SF(allowed_values)3.18 E F0 2.85(list. If)
3.12 F .35(the v)2.85 F .35(alue of)-.25 F F1(ignor)2.86 E(e_case)-.37 E
F0(is)3.03 E/F2 10/Times-Bold@0 SF(0)2.85 E F0 .35(\(the def)2.85 F .35
(ault\), then)-.1 F .793(the v)144 96 R .793(alues are case-sensiti)-.25
F -.15(ve)-.25 G 5.793(.I).15 G 3.294(ft)-5.793 G .794(he v)-3.294 F
.794(alue of)-.25 F F1(ignor)3.304 E(e_case)-.37 E F0(is)3.474 E F2(1)
3.294 E F0 3.294(,t)C .794(hen v)-3.294 F .794
(alues will be matched case-)-.25 F(insensiti)144 108 Q -.15(ve)-.25 G
5.558(.I).15 G 3.058(ft)-5.558 G .558(he v)-3.058 F .558(alue of)-.25 F
F1(ignor)3.068 E(e_case)-.37 E F0(is)3.238 E F2(1)3.058 E F0 3.058(,t)C
.558(hen v)-3.058 F .558(alues will be matched case-insensiti)-.25 F
-.15(ve)-.25 G 3.058(,a).15 G .558(nd all)-3.058 F(input v)144 120 Q
(alues will be con)-.25 E -.15(ve)-.4 G(rted to lo).15 E(wer case.)-.25
E(ListV)108 148.8 Q(ariable\()-1.11 E F1 -.1(ke)C(y)-.2 E F0(,).32 E F1
(help)2.81 E F0(,).19 E F1(default)2.85 E F0(,).68 E F1(names)2.86 E F0
2.5(,[).27 G F1(,)-1.96 E F0(map)A F1(]\)).38 E F0 .157
(Return a tuple of ar)144 160.8 R .157
(guments to set up an option whose v)-.18 F .158
(alue may be one or more of a speci\214ed list)-.25 F .996(of le)144
172.8 R -.05(ga)-.15 G 3.496(le).05 G .996(numerated v)-3.496 F 3.496
(alues. The)-.25 F .996(option will use the speci\214ed name)3.496 F F1
-.1(ke)3.495 G(y)-.2 E F0 3.495(,h).32 G -2.25 -.2(av e)-3.495 H 3.495
(ad)3.695 G(ef)-3.495 E .995(ault v)-.1 F .995(alue of)-.25 F F1
(default)144 184.8 Q F0 3.121(,a).68 G .622(nd display the speci\214ed)
-3.121 F F1(help)3.432 E F0(te)3.312 E 3.122(xt. The)-.15 F .622
(option will only support the v)3.122 F(alues)-.25 E F2(all)3.122 E F0
(,)A F2(none)3.122 E F0 3.122(,o)C(r)-3.122 E .723(the v)144 196.8 R
.723(alues in the)-.25 F F1(names)3.583 E F0 3.223(list. More)3.493 F
.723(than one v)3.223 F .723(alue may be speci\214ed, with all v)-.25 F
.723(alues separated by)-.25 F 3.313(commas. The)144 208.8 R(def)3.313 E
.814(ault may be a string of comma-separated def)-.1 F .814(ault v)-.1 F
.814(alues, or a list of the def)-.25 F(ault)-.1 E -.25(va)144 220.8 S
3.44(lues. The).25 F(optional)3.44 E F1(map)3.82 E F0(ar)3.63 E .94
(gument is a dictionary that can be used to con)-.18 F -.15(ve)-.4 G .94
(rt input v).15 F .94(alues into)-.25 F(speci\214c le)144 232.8 Q -.05
(ga)-.15 G 2.5(lv).05 G(alues in the)-2.75 E F1(names)2.86 E F0(list.)
2.77 E -.15(Pa)108 261.6 S(ckageV).15 E(ariable\()-1.11 E F1 -.1(ke)C(y)
-.2 E F0(,).32 E F1(help)2.81 E F0(,).19 E F1(default)2.85 E F0(\)).68 E
.297(Return a tuple of ar)144 273.6 R .297
(guments to set up an option whose v)-.18 F .297
(alue is a path name of a package that may)-.25 F .697
(be enabled, disabled or gi)144 285.6 R -.15(ve)-.25 G 3.196(na).15 G
3.196(ne)-3.196 G .696(xplicit path name.)-3.346 F .696
(The option will use the speci\214ed name)5.696 F F1 -.1(ke)3.196 G(y)
-.2 E F0(,).32 E(ha)144 297.6 Q 1.368 -.15(ve a d)-.2 H(ef).15 E 1.068
(ault v)-.1 F 1.068(alue of)-.25 F F1(default)3.569 E F0 3.569(,a).68 G
1.069(nd display the speci\214ed)-3.569 F F1(help)3.879 E F0(te)3.759 E
3.569(xt. The)-.15 F 1.069(option will support the)3.569 F -.25(va)144
309.6 S(lues).25 E F2 -.1(ye)3.709 G(s).1 E F0(,)A F2(true)3.709 E F0(,)
A F2(on)3.709 E F0(,)A F2(enable)3.709 E F0(or)3.709 E F2(sear)3.709 E
(ch)-.18 E F0 3.709(,i)C 3.709(nw)-3.709 G 1.209
(hich case the speci\214ed)-3.709 F F1(default)4.059 E F0 1.208
(will be used, or the)4.389 F 2.202(option may be set to an arbitrary s\
tring \(typically the path name to a package that is being)144 321.6 R
3.605(enabled\). The)144 333.6 R 1.105(option will also support the v)
3.605 F(alues)-.25 E F2(no)3.605 E F0(,)A F2(false)3.605 E F0(,)A F2
(off)3.605 E F0(or)3.605 E F2(disable)3.605 E F0 1.104
(to disable use of the)3.604 F(speci\214ed option.)144 345.6 Q -.15(Pa)
108 374.4 S(thV).15 E(ariable\()-1.11 E F1 -.1(ke)C(y)-.2 E F0(,).32 E
F1(help)2.81 E F0(,).19 E F1(default)2.85 E F0 2.5(,[).68 G F1
(validator)-2.21 E F0(]\)).73 E .685(Return a tuple of ar)144 386.4 R
.686(guments to set up an option whose v)-.18 F .686(alue is e)-.25 F
.686(xpected to be a path name.)-.15 F(The)5.686 E .872
(option will use the speci\214ed name)144 398.4 R F1 -.1(ke)3.371 G(y)
-.2 E F0 3.371(,h).32 G -2.25 -.2(av e)-3.371 H 3.371(ad)3.571 G(ef)
-3.371 E .871(ault v)-.1 F .871(alue of)-.25 F F1(default)3.371 E F0
3.371(,a).68 G .871(nd display the speci\214ed)-3.371 F F1(help)144.31
410.4 Q F0(te)3.199 E 3.009(xt. An)-.15 F(additional)3.009 E F1
(validator)3.299 E F0 .509(may be speci\214ed that will be called to v)
3.739 F .51(erify that the speci\214ed)-.15 F 1.098(path is acceptable.)
144 422.4 R 1.098(SCons supplies the follo)6.098 F 1.098
(wing ready-made v)-.25 F(alidators:)-.25 E F2 -.1(Pa)3.597 G(thV).1 E
(ariable.P)-.92 E(athEx-)-.1 E(ists)144 434.4 Q F0 1.545(\(the def)4.045
F 1.545(ault\), which v)-.1 F 1.546
(eri\214es that the speci\214ed path e)-.15 F(xists;)-.15 E F2 -.1(Pa)
4.046 G(thV).1 E(ariable.P)-.92 E(athIsFile)-.1 E F0 4.046(,w)C(hich)
-4.046 E -.15(ve)144 446.4 S .52
(ri\214es that the speci\214ed path is an e).15 F .52(xisting \214le;)
-.15 F F2 -.1(Pa)3.02 G(thV).1 E(ariable.P)-.92 E(athIsDir)-.1 E F0 3.02
(,w)C .52(hich v)-3.02 F .52(eri\214es that the)-.15 F 1.876
(speci\214ed path is an e)144 458.4 R 1.876(xisting directory;)-.15 F F2
-.1(Pa)4.376 G(thV).1 E(ariable.P)-.92 E(athIsDirCr)-.1 E(eate)-.18 E F0
4.376(,w)C 1.876(hich v)-4.376 F 1.876(eri\214es that the)-.15 F .774(s\
peci\214ed path is a directory and will create the speci\214ed director\
y if the path does not e)144 470.4 R .774(xist; and)-.15 F F2 -.1(Pa)144
482.4 S(thV).1 E(ariable.P)-.92 E(athAccept)-.1 E F0 2.705(,w)C .205
(hich simply accepts the speci\214c path name ar)-2.705 F .205
(gument without v)-.18 F(alida-)-.25 E .183
(tion, and which is suitable if you w)144 494.4 R .182
(ant your users to be able to specify a directory path that will be)-.1
F .875(created as part of the b)144 506.4 R .875(uild process, for e)-.2
F 3.375(xample. Y)-.15 F .876(ou may supply your o)-1.1 F(wn)-.25 E F1
(validator)3.666 E F0(function,)4.106 E .624(which must tak)144 518.4 R
3.124(et)-.1 G .624(hree ar)-3.124 F .624(guments \()-.18 F F1 -.1(ke)C
(y)-.2 E F0 3.124(,t).32 G .624(he name of the v)-3.124 F .623
(ariable to be set;)-.25 F F1(val)3.123 E F0 3.123(,t).51 G .623
(he speci\214ed v)-3.123 F(alue)-.25 E .506(being check)144 530.4 R .506
(ed; and)-.1 F F1(en)3.006 E(v)-.4 E F0 3.006(,t).32 G .506
(he construction en)-3.006 F .507(vironment\) and should raise an e)-.4
F .507(xception if the speci-)-.15 F(\214ed v)144 542.4 Q
(alue is not acceptable.)-.25 E .236(These functions mak)108 566.4 R
2.736(ei)-.1 G 2.736(tc)-2.736 G(on)-2.736 E -.15(ve)-.4 G .236
(nient to create a number of v).15 F .236(ariables with consistent beha)
-.25 F .236(vior in a single call)-.2 F(to the)108 578.4 Q F2(AddV)2.5 E
(ariables)-.92 E F0(method:)2.5 E -.25(va)144 602.4 S(rs.AddV).25 E
(ariables\()-1.11 E(BoolV)154 614.4 Q(ariable\('w)-1.11 E
(arnings', 'compilation with -W)-.1 E(all and similiar', 1\),)-.8 E
(EnumV)154 626.4 Q(ariable\(')-1.11 E(deb)-.5 E(ug', ')-.2 E(deb)-.5 E
(ug output and symbols', 'no')-.2 E(allo)181.5 638.4 Q(wed_v)-.25 E
(alues=\('yes', 'no', 'full'\),)-.25 E(map={}, ignorecase=0\),)181.5
650.4 Q 2.5(#c)5 G(ase sensiti)-2.5 E -.15(ve)-.25 G(ListV)154 662.4 Q
(ariable\(')-1.11 E(shared',)-.55 E -.1('l)181.5 674.4 S(ibraries to b)
.1 E(uild as shared libraries',)-.2 E('all',)181.5 686.4 Q
(names = list_of_libs\),)181.5 698.4 Q -.15(Pa)154 710.4 S(ckageV).15 E
(ariable\('x11',)-1.11 E
('use X11 installed here \(yes = search some places\)',)189 722.4 Q
(July 2010)286.415 768 Q(129)199.415 E 0 Cg EP
%%Page: 130 130
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R('yes'\),)
189 84 Q -.15(Pa)154 96 S(thV).15 E
(ariable\('qtdir', 'where the root of Qt is installed', qtdir\),)-1.11 E
-.15(Pa)154 108 S(thV).15 E
(ariable\('foopath', 'where the foo library is installed', foopath,)
-1.11 E -.15(Pa)181.5 120 S(thV).15 E(ariable.P)-1.11 E(athIsDir\),)-.15
E(\))144 144 Q/F1 10/Times-Bold@0 SF(File and Dir)87 172.8 Q
(ectory Nodes)-.18 E F0(The)108 184.8 Q/F2 10/Times-Italic@0 SF -.45(Fi)
2.579 G(le).45 E F0 .079(\(\) and).18 F F2(Dir)2.579 E F0 .079
(\(\) functions return).73 F F2 -.45(Fi)2.579 G(le).45 E F0(and)2.759 E
F2(Dir)3.159 E F0 .079(Nodes, respecti)3.309 F -.15(ve)-.25 G(ly).15 E
5.08(.p)-.65 G .08(ython objects, respecti)-5.18 F -.15(ve)-.25 G(ly).15
E 5.08(.T)-.65 G(hose)-5.08 E(objects ha)108 196.8 Q .3 -.15(ve s)-.2 H
-2.15 -.25(ev e).15 H(ral user).25 E(-visible attrib)-.2 E
(utes and methods that are often useful:)-.2 E(path)108 225.6 Q .363
(The b)144 225.6 R .363(uild path of the gi)-.2 F -.15(ve)-.25 G 2.863
<6e8c>.15 G .363(le or directory)-2.863 F 5.363(.T)-.65 G .363
(his path is relati)-5.363 F .663 -.15(ve t)-.25 H 2.863(ot).15 G .363
(he top-le)-2.863 F -.15(ve)-.25 G 2.863(ld).15 G .362(irectory \(where)
-2.863 F(the)144 237.6 Q F1(SConstruct)3.097 E F0 .597
(\214le is found\).)3.097 F .598(The b)5.598 F .598
(uild path is the same as the source path if)-.2 F F2(variant_dir)3.388
E F0 .598(is not)3.828 F(being used.)144 249.6 Q(abspath)108 278.4 Q
(The absolute b)144 278.4 Q(uild path of the gi)-.2 E -.15(ve)-.25 G 2.5
<6e8c>.15 G(le or directory)-2.5 E(.)-.65 E(srcnode\(\))108 307.2 Q(The)
144 319.2 Q F2(sr)2.847 E(cnode)-.37 E F0 .347
(\(\) method returns another).18 F F2 -.45(Fi)2.847 G(le).45 E F0(or)
3.027 E F2(Dir)3.427 E F0 .347(object representing the)3.577 F F2(sour)
3.186 E(ce)-.37 E F0 .346(path of the gi)3.026 F -.15(ve)-.25 G(n).15 E
F2 -.45(Fi)144 331.2 S(le).45 E F0(or)2.68 E F2(Dir)2.5 E F0 5(.T).73 G
(he)-5 E 2.5(#G)144 355.2 S(et the current b)-2.5 E(uild dir')-.2 E 2.5
(sp)-.55 G(ath, relati)-2.5 E .3 -.15(ve t)-.25 H 2.5(ot).15 G(op.)-2.5
E(Dir\('.)144 367.2 Q('\).path)-.7 E 2.5(#C)144 379.2 S(urrent dir')-2.5
E 2.5(sa)-.55 G(bsolute path)-2.5 E(Dir\('.)144 391.2 Q('\).abspath)-.7
E 2.5(#N)144 403.2 S -.15(ex)-2.5 G 2.5(tl).15 G(ine is al)-2.5 E -.1
(wa)-.1 G(ys '.).1 E(', because it is the top dir')-.7 E 2.5(sp)-.55 G
(ath relati)-2.5 E .3 -.15(ve t)-.25 H 2.5(oi).15 G(tself.)-2.5 E
(Dir\('#.)144 415.2 Q('\).path)-.7 E 5
(File\('foo.c'\).srcnode\(\).path #)144 427.2 R(source path of the gi)
2.5 E -.15(ve)-.25 G 2.5(ns).15 G(ource \214le.)-2.5 E 2.5(#B)144 451.2
S(uilders also return File objects:)-2.5 E(foo = en)144 463.2 Q -.65(v.)
-.4 G(Program\('foo.c'\)).65 E(print "foo will be b)144 475.2 Q
(uilt in %s"%foo.path)-.2 E(A)108 499.2 Q F2(Dir)3.638 E F0 .559
(Node or)3.789 F F2 -.45(Fi)3.059 G(le).45 E F0 .559
(Node can also be used to create \214le and subdirectory Nodes relati)
3.239 F .859 -.15(ve t)-.25 H 3.059(ot).15 G .559(he generating)-3.059 F
2.846(Node. A)108 511.2 R F2(Dir)3.426 E F0 .346(Node will place the ne)
3.576 F 2.845(wN)-.25 G .345(odes within the directory it represents.)
-2.845 F(A)5.345 E F2 -.45(Fi)2.845 G(le).45 E F0 .345
(node will place the)3.025 F(ne)108 523.2 Q 2.853(wN)-.25 G .354(odes w\
ithin its parent directory \(that is, "beside" the \214le in question\)\
.)-2.853 F(If)5.354 E F2(d)3.204 E F0 .354(is a)3.624 F F2(Dir)3.434 E
F0 .354(\(directory\) Node)3.584 F(and)108 535.2 Q F2(f)4.47 E F0(is a)
4.46 E F2 -.45(Fi)2.5 G(le).45 E F0
(\(\214le\) Node, then these methods are a)2.68 E -.25(va)-.2 G(ilable:)
.25 E F2(d)108 564 Q F0(.Dir\().77 E F2(name).36 E F0(\)).18 E
(Returns a directory Node for a subdirectory of)144 576 Q F2(d)2.85 E F0
(named)3.27 E F2(name)2.5 E F0(.).18 E F2(d)108 604.8 Q F0(.File\().77 E
F2(name).36 E F0(\)).18 E(Returns a \214le Node for a \214le within)144
616.8 Q F2(d)2.85 E F0(named)3.27 E F2(name)2.5 E F0(.).18 E F2(d)108
645.6 Q F0(.Entry\().77 E F2(name).36 E F0(\)).18 E(Returns an unresolv)
144 657.6 Q(ed Node within)-.15 E F2(d)2.85 E F0(named)3.27 E F2(name)
2.5 E F0(.).18 E F2(f)108 686.4 Q F0(.Dir\()1.96 E F2(name).36 E F0(\))
.18 E(Returns a directory named)144 698.4 Q F2(name)2.86 E F0
(within the parent directory of)2.68 E F2(f)2.5 E F0(.)1.96 E(July 2010)
286.415 768 Q(130)199.415 E 0 Cg EP
%%Page: 131 131
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Italic@0 SF(f)108 84 Q F0(.File\()1.96 E F1(name).36 E F0(\)).18
E(Returns a \214le named)144 96 Q F1(name)2.86 E F0
(within the parent directory of)2.68 E F1(f)2.5 E F0(.)1.96 E F1(f)108
124.8 Q F0(.Entry\()1.96 E F1(name).36 E F0(\)).18 E
(Returns an unresolv)144 136.8 Q(ed Node named)-.15 E F1(name)2.86 E F0
(within the parent directory of)2.68 E F1(f)2.5 E F0(.)1.96 E -.15(Fo)
108 160.8 S 2.5(re).15 G(xample:)-2.65 E 2.5(#G)144 184.8 S
(et a Node for a \214le within a directory)-2.5 E
(incl = Dir\('include'\))144 196.8 Q 2.5(f=i)144 208.8 S
(ncl.File\('header)-2.5 E(.h'\))-.55 E 2.5(#G)144 232.8 S
(et a Node for a subdirectory within a directory)-2.5 E
(dist = Dir\('project-3.2.1\))144 244.8 Q(src = dist.Dir\(')144 256.8 Q
(src'\))-.55 E 2.5(#G)144 280.8 S
(et a Node for a \214le in the same directory)-2.5 E(c\214le = File\(')
144 292.8 Q(sample.c'\))-.55 E(h\214le = c\214le.File\(')144 304.8 Q
(sample.h'\))-.55 E 2.5(#C)144 328.8 S(ombined e)-2.5 E(xample)-.15 E
(docs = Dir\(')144 340.8 Q(docs'\))-.5 E(html = docs.Dir\('html'\))144
352.8 Q(inde)144 364.8 Q 2.5(x=h)-.15 G(tml.File\('inde)-2.5 E
(x.html'\))-.15 E(css = inde)144 376.8 Q(x.File\('app.css'\))-.15 E/F2
10.95/Times-Bold@0 SF(EXTENDING SCONS)72 405.6 Q/F3 10/Times-Bold@0 SF
(Builder Objects)87 417.6 Q(scons)108 429.6 Q F0 .917(can be e)3.418 F
.917(xtended to b)-.15 F .917(uild dif)-.2 F .917(ferent types of tar)
-.25 F .917(gets by adding ne)-.18 F 3.417(wB)-.25 G .917
(uilder objects to a construction)-3.417 F(en)108 441.6 Q(vironment.)-.4
E F1 .362(In g)5.362 F(ener)-.1 E(al)-.15 E F0 2.862(,y).51 G .362
(ou should only need to add a ne)-2.862 F 2.862(wB)-.25 G .362
(uilder object when you w)-2.862 F .362(ant to b)-.1 F .363(uild a ne)
-.2 F(w)-.25 E .558(type of \214le or other e)108 453.6 R .557
(xternal tar)-.15 F 3.057(get. If)-.18 F .557(you just w)3.057 F .557
(ant to in)-.1 F -.2(vo)-.4 G .757 -.1(ke a d).2 H(if).1 E .557
(ferent compiler or other tool to b)-.25 F .557(uild a)-.2 F .096
(Program, Object, Library)108 465.6 R 2.596(,o)-.65 G 2.596(ra)-2.596 G
.396 -.15(ny o)-2.596 H .097(ther type of output \214le for which).15 F
F3(scons)2.597 E F0 .097(already has an e)2.597 F .097(xisting Builder)
-.15 F 2.597(,i)-.4 G(t)-2.597 E .232
(is generally much easier to use those e)108 477.6 R .232
(xisting Builders in a construction en)-.15 F .232
(vironment that sets the appropri-)-.4 F(ate construction v)108 489.6 Q
(ariables \(CC, LINK, etc.\).)-.25 E .773
(Builder objects are created using the)108 513.6 R F3(Builder)3.273 E F0
3.273(function. The)3.273 F F3(Builder)3.273 E F0 .773
(function accepts the follo)3.273 F .773(wing ar)-.25 F(gu-)-.18 E
(ments:)108 525.6 Q(action)108 554.4 Q 1.16
(The command line string used to b)144 554.4 R 1.16(uild the tar)-.2 F
1.159(get from the source.)-.18 F F3(action)6.159 E F0 1.159
(can also be: a list of)3.659 F .866
(strings representing the command to be e)144 566.4 R -.15(xe)-.15 G
.866(cuted and its ar).15 F .866(guments \(suitable for enclosing white)
-.18 F .231(space in an ar)144 578.4 R .231
(gument\), a dictionary mapping source \214le name suf)-.18 F<8c78>-.25
E .23(es to an)-.15 F 2.73(yc)-.15 G .23(ombination of com-)-2.73 F .435
(mand line strings \(if the b)144 590.4 R .436
(uilder should accept multiple source \214le e)-.2 F .436
(xtensions\), a Python function;)-.15 F(an Action object \(see the ne)
144 602.4 Q(xt section\); or a list of an)-.15 E 2.5(yo)-.15 G 2.5(ft)
-2.5 G(he abo)-2.5 E -.15(ve)-.15 G(.).15 E .783(An action function tak)
144 626.4 R .783(es three ar)-.1 F(guments:)-.18 E F1(sour)3.623 E(ce)
-.37 E F0 3.283(-al)3.463 G .783(ist of source nodes,)-3.283 F F1(tar)
3.413 E -.1(ge)-.37 G(t).1 E F0 3.282(-al)3.963 G .782(ist of tar)-3.282
F(get)-.18 E(nodes,)144 638.4 Q F1(en)2.69 E(v)-.4 E F0 2.5(-t)2.82 G
(he construction en)-2.5 E(vironment.)-.4 E(pre\214x)108 667.2 Q
(The pre\214x that will be prepended to the tar)144 667.2 Q
(get \214le name.)-.18 E(This may be speci\214ed as a:)5 E(*)158 696 Q
F1(string)2.5 E F0(,).22 E(July 2010)286.415 768 Q(131)199.415 E 0 Cg EP
%%Page: 132 132
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(*)158 84 Q
/F1 10/Times-Italic@0 SF .779(callable object)3.479 F F0 3.279(-af)3.959
G .779(unction or other callable that tak)-3.279 F .78(es tw)-.1 F 3.28
(oa)-.1 G -.18(rg)-3.28 G .78(uments \(a construction en).18 F(vi-)-.4 E
(ronment and a list of sources\) and returns a pre\214x,)188 96 Q(*)158
124.8 Q F1(dictionary)3.022 E F0 2.672(-s)2.992 G .172
(peci\214es a mapping from a speci\214c source suf)-2.672 F .172
(\214x \(of the \214rst source speci\214ed\) to)-.25 F 4.03(ac)188 136.8
S 1.53(orresponding tar)-4.03 F 1.53(get pre\214x.)-.18 F 1.53
(Both the source suf)6.53 F 1.53(\214x and tar)-.25 F 1.53
(get pre\214x speci\214cations)-.18 F .835(may use en)188 148.8 R .835
(vironment v)-.4 F .835(ariable substitution, and the tar)-.25 F .835
(get pre\214x \(the ')-.18 F -.25(va)-.5 G .835(lue' entries in).25 F
.049(the dictionary\) may also be a callable object.)188 160.8 R .049
(The def)5.049 F .049(ault tar)-.1 F .05(get pre\214x may be indicated)
-.18 F(by a dictionary entry with a k)188 172.8 Q .3 -.15(ey v)-.1 H
(alue of None.)-.1 E 2.5(b=B)144 189.6 S(uilder\("b)-2.5 E
(uild_it < $SOURCE > $T)-.2 E(ARGET")-.93 E(pre\214x = "\214le-"\))174
201.6 Q(def gen_pre\214x\(en)144 225.6 Q 1.3 -.65(v, s)-.4 H(ources\):)
.65 E(return "\214le-" + en)154 237.6 Q(v['PLA)-.4 E(TFORM'] + '-')-1.11
E 2.5(b=B)144 249.6 S(uilder\("b)-2.5 E(uild_it < $SOURCE > $T)-.2 E
(ARGET",)-.93 E(pre\214x = gen_pre\214x\))174 261.6 Q 2.5(b=B)144 285.6
S(uilder\("b)-2.5 E(uild_it < $SOURCE > $T)-.2 E(ARGET",)-.93 E(suf)174
297.6 Q(\214x = { None: "\214le-",)-.25 E
("$SRC_SFX_A": gen_pre\214x }\))201.5 309.6 Q(suf)108 338.4 Q<8c78>-.25
E .114(The suf)144 338.4 R .114(\214x that will be appended to the tar)
-.25 F .113(get \214le name.)-.18 F .113
(This may be speci\214ed in the same manner)5.113 F .9
(as the pre\214x abo)144 350.4 R -.15(ve)-.15 G 5.9(.I).15 G 3.4(ft)-5.9
G .9(he suf)-3.4 F .9(\214x is a string, then)-.25 F/F2 10/Times-Bold@0
SF(scons)3.4 E F0 .9(will append a '.)3.4 F 3.4('t)-.7 G 3.4(ot)-3.4 G
.9(he be)-3.4 F .9(ginning of the)-.15 F(suf)144 362.4 Q .43
(\214x if it')-.25 F 2.93(sn)-.55 G .43(ot already there.)-2.93 F .429
(The string returned by callable object \(or obtained from the dictio-)
5.43 F(nary\) is untouched and must append its o)144 374.4 Q(wn '.)-.25
E 5('t)-.7 G 2.5(ot)-5 G(he be)-2.5 E(ginning if one is desired.)-.15 E
2.5(b=B)144 398.4 S(uilder\("b)-2.5 E(uild_it < $SOURCE > $T)-.2 E
(ARGET")-.93 E(suf)174 410.4 Q(\214x = "-\214le"\))-.25 E(def gen_suf)
144 434.4 Q(\214x\(en)-.25 E 1.3 -.65(v, s)-.4 H(ources\):).65 E
(return "." + en)154 446.4 Q(v['PLA)-.4 E(TFORM'] + "-\214le")-1.11 E
2.5(b=B)144 458.4 S(uilder\("b)-2.5 E(uild_it < $SOURCE > $T)-.2 E
(ARGET",)-.93 E(suf)174 470.4 Q(\214x = gen_suf)-.25 E<8c7829>-.25 E 2.5
(b=B)144 494.4 S(uilder\("b)-2.5 E(uild_it < $SOURCE > $T)-.2 E(ARGET",)
-.93 E(suf)174 506.4 Q(\214x = { None: ".sfx1",)-.25 E
("$SRC_SFX_A": gen_suf)201.5 518.4 Q(\214x }\))-.25 E(ensure_suf)108
547.2 Q<8c78>-.25 E .225(When set to an)144 559.2 R 2.725(yt)-.15 G .225
(rue v)-2.725 F .225(alue, causes)-.25 F F2(scons)2.725 E F0 .225
(to add the tar)2.725 F .225(get suf)-.18 F .225
(\214x speci\214ed by the)-.25 F F1(suf)3.065 E<8c78>-.18 E F0 -.1(ke)
3.255 G(yw)-.05 E .225(ord to)-.1 F(an)144 571.2 Q 2.913(yt)-.15 G(ar)
-2.913 E .413(get strings that ha)-.18 F .713 -.15(ve a d)-.2 H(if).15 E
.413(ferent suf)-.25 F 2.913(\214x. \(The)-.25 F(def)2.912 E .412
(ault beha)-.1 F .412(vior is to lea)-.2 F .712 -.15(ve u)-.2 H .412
(ntouched an).15 F 2.912(yt)-.15 G(ar)-2.912 E(-)-.2 E
(get \214le name that looks lik)144 583.2 Q 2.5(ei)-.1 G 2.5(ta)-2.5 G
(lready has an)-2.5 E 2.5(ys)-.15 G(uf)-2.5 E(\214x.\))-.25 E
(b1 = Builder\("b)144 607.2 Q(uild_it < $SOURCE > $T)-.2 E(ARGET")-.93 E
(suf)176.5 619.2 Q(\214x = ".out"\))-.25 E(b2 = Builder\("b)144 631.2 Q
(uild_it < $SOURCE > $T)-.2 E(ARGET")-.93 E(suf)176.5 643.2 Q
(\214x = ".out",)-.25 E(ensure_suf)176.5 655.2 Q<8c7829>-.25 E(en)144
667.2 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(en)144 679.2 Q
(v['B)-.4 E(UILDERS']['B1'] = b1)-.1 E(en)144 691.2 Q(v['B)-.4 E
(UILDERS']['B2'] = b2)-.1 E 2.5(#B)144 715.2 S
(uilds "foo.txt" because ensure_suf)-2.5 E(\214x is not set.)-.25 E(en)
144 727.2 Q -.65(v.)-.4 G(B1\('foo.txt', 'foo.in'\)).65 E(July 2010)
286.415 768 Q(132)199.415 E 0 Cg EP
%%Page: 133 133
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5(#B)144
84 S(uilds "bar)-2.5 E(.txt.out" because ensure_suf)-.55 E
(\214x is set.)-.25 E(en)144 96 Q -.65(v.)-.4 G(B2\('bar).65 E
(.txt', 'bar)-.55 E(.in'\))-.55 E(src_suf)108 124.8 Q<8c78>-.25 E(The e)
144 136.8 Q(xpected source \214le name suf)-.15 E 2.5(\214x. This)-.25 F
(may be a string or a list of strings.)2.5 E(tar)108 165.6 Q
(get_scanner)-.18 E 4.534(AS)144 177.6 S 2.034
(canner object that will be in)-4.534 F -.2(vo)-.4 G -.1(ke).2 G 4.535
(dt).1 G 4.535<6f8c>-4.535 G 2.035
(nd implicit dependencies for this tar)-4.535 F 2.035(get \214le.)-.18 F
(This)7.035 E -.1(ke)144 189.6 S(yw)-.05 E .657(ord ar)-.1 F .656(gumen\
t should be used for Scanner objects that \214nd implicit dependencies \
based only)-.18 F 1.675(on the tar)144 201.6 R 1.675
(get \214le and the construction en)-.18 F(vironment,)-.4 E/F1 10
/Times-Italic@0 SF(not)4.535 E F0 1.675
(for implicit \(See the section "Scanner)4.855 F(Objects," belo)144
213.6 Q 1.3 -.65(w, f)-.25 H
(or information about creating Scanner objects.\)).65 E(source_scanner)
108 242.4 Q 2.574(AS)144 254.4 S .074(canner object that will be in)
-2.574 F -.2(vo)-.4 G -.1(ke).2 G 2.574(dt).1 G 2.574<6f8c>-2.574 G .073
(nd implicit dependences in an)-2.574 F 2.573(ys)-.15 G .073
(ource \214les used to b)-2.573 F(uild)-.2 E 1.209(this tar)144 266.4 R
1.209(get \214le.)-.18 F 1.209(This is where you w)6.209 F 1.21
(ould specify a scanner to \214nd things lik)-.1 F(e)-.1 E/F2 10
/Times-Bold@0 SF(#include)3.71 E F0 1.21(lines in)3.71 F .963
(source \214les.)144 278.4 R .962(The pre-b)5.963 F(uilt)-.2 E F2
(DirScanner)3.462 E F0 .962
(Scanner object may be used to indicate that this Builder)3.462 F .324
(should scan directory trees for on-disk changes to \214les that)144
290.4 R F2(scons)2.824 E F0 .325(does not kno)2.825 F 2.825(wa)-.25 G
.325(bout from other)-2.825 F .529(Builder or function calls.)144 302.4
R .528(\(See the section "Scanner Objects," belo)5.529 F 1.828 -.65
(w, f)-.25 H .528(or information about creat-).65 F(ing your o)144 314.4
Q(wn Scanner objects.\))-.25 E(tar)108 343.2 Q(get_f)-.18 E(actory)-.1 E
4.014(Af)144 355.2 S 1.514
(actory function that the Builder will use to turn an)-4.114 F 4.015(yt)
-.15 G(ar)-4.015 E 1.515(gets speci\214ed as strings into SCons)-.18 F
3.884(Nodes. By)144 367.2 R(def)3.883 E 1.383
(ault, SCons assumes that all tar)-.1 F 1.383(gets are \214les.)-.18 F
1.383(Other useful tar)6.383 F(get_f)-.18 E 1.383(actory v)-.1 F(alues)
-.25 E(include)144 379.2 Q F2(Dir)2.902 E F0 2.903(,f)C .403
(or when a Builder creates a directory tar)-2.903 F .403(get, and)-.18 F
F2(Entry)2.903 E F0 2.903(,f)C .403(or when a Builder can cre-)-2.903 F
(ate either a \214le or directory tar)144 391.2 Q(get.)-.18 E(Example:)
144 415.2 Q(Mak)144 439.2 Q
(eDirectoryBuilder = Builder\(action=my_mkdir)-.1 E 2.5(,t)-.4 G(ar)-2.5
E(get_f)-.18 E(actory=Dir\))-.1 E(en)144 451.2 Q 2.5(v=E)-.4 G -.4(nv)
-2.5 G(ironment\(\)).4 E(en)144 463.2 Q -.65(v.)-.4 G(Append\(B).65 E
(UILDERS = {'Mak)-.1 E(eDirectory':Mak)-.1 E(eDirectoryBuilder}\))-.1 E
(en)144 475.2 Q -.65(v.)-.4 G(Mak).65 E(eDirectory\('ne)-.1 E
(w_directory', []\))-.25 E .45(Note that the call to the Mak)144 504 R
.45(eDirectory Builder needs to specify an empty source list to mak)-.1
F 2.95(et)-.1 G(he)-2.95 E .465(string represent the b)144 516 R
(uilder')-.2 E 2.965(st)-.55 G(ar)-2.965 E .465(get; without that, it w)
-.18 F .465(ould assume the ar)-.1 F .466(gument is the source, and)-.18
F -.1(wo)144 528 S .068(uld try to deduce the tar).1 F .067(get name fr\
om it, which in the absence of an automatically-added pre\214x)-.18 F
(or suf)144 540 Q(\214x w)-.25 E(ould lead to a matching tar)-.1 E
(get and source name and a circular dependenc)-.18 E -.65(y.)-.15 G
(source_f)108 568.8 Q(actory)-.1 E 3.795(Af)144 580.8 S 1.295
(actory function that the Builder will use to turn an)-3.895 F 3.795(ys)
-.15 G 1.295(ources speci\214ed as strings into SCons)-3.795 F 3.643
(Nodes. By)144 592.8 R(def)3.643 E 1.142
(ault, SCons assumes that all source are \214les.)-.1 F 1.142
(Other useful source_f)6.142 F 1.142(actory v)-.1 F(alues)-.25 E
(include)144 604.8 Q F2(Dir)3.286 E F0 3.286(,f)C .786
(or when a Builder uses a directory as a source, and)-3.286 F F2(Entry)
3.286 E F0 3.286(,f)C .786(or when a Builder can)-3.286 F
(use \214les or directories \(or both\) as sources.)144 616.8 Q
(Example:)144 640.8 Q(CollectBuilder = Builder\(action=my_mkdir)144
664.8 Q 2.5(,s)-.4 G(ource_f)-2.5 E(actory=Entry\))-.1 E(en)144 676.8 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(en)144 688.8 Q -.65(v.)-.4
G(Append\(B).65 E(UILDERS = {'Collect':CollectBuilder}\))-.1 E(en)144
700.8 Q -.65(v.)-.4 G(Collect\('archi).65 E -.15(ve)-.25 G(', [').15 E
(directory_name', '\214le_name']\))-.5 E(July 2010)286.415 768 Q(133)
199.415 E 0 Cg EP
%%Page: 134 134
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(emitter)108
84 Q 3.602(Af)144 84 S 1.102
(unction or list of functions to manipulate the tar)-3.602 F 1.102
(get and source lists before dependencies are)-.18 F .376
(established and the tar)144 96 R .376(get\(s\) are actually b)-.18 F
(uilt.)-.2 E/F1 10/Times-Bold@0 SF(emitter)5.376 E F0 .376
(can also be a string containing a construc-)2.876 F .629(tion v)144 108
R .629(ariable to e)-.25 F .629(xpand to an emitter function or list of\
 functions, or a dictionary mapping source)-.15 F .247(\214le suf)144
120 R<8c78>-.25 E .247(es to emitter functions.)-.15 F .248
(\(Only the suf)5.248 F .248
(\214x of the \214rst source \214le is used to select the actual)-.25 F
(emitter function from an emitter dictionary)144 132 Q(.\))-.65 E .567
(An emitter function tak)144 156 R .567(es three ar)-.1 F(guments:)-.18
E/F2 10/Times-Italic@0 SF(sour)3.407 E(ce)-.37 E F0 3.067(-al)3.247 G
.567(ist of source nodes,)-3.067 F F2(tar)3.196 E -.1(ge)-.37 G(t).1 E
F0 3.066(-al)3.746 G .566(ist of tar)-3.066 F(get)-.18 E(nodes,)144 168
Q F2(en)2.84 E(v)-.4 E F0 2.65(-t)2.97 G .15(he construction en)-2.65 F
2.651(vironment. An)-.4 F .151
(emitter must return a tuple containing tw)2.651 F 2.651(ol)-.1 G .151
(ists, the)-2.651 F(list of tar)144 180 Q(gets to be b)-.18 E
(uilt by this b)-.2 E(uilder)-.2 E 2.5(,a)-.4 G
(nd the list of sources for this b)-2.5 E(uilder)-.2 E(.)-.55 E
(Example:)144 204 Q(def e\(tar)144 228 Q(get, source, en)-.18 E(v\):)-.4
E(return \(tar)154 240 Q(get + ['foo.foo'], source + ['foo.src']\))-.18
E 2.5(#S)144 264 S
(imple association of an emitter function with a Builder)-2.5 E(.)-.55 E
2.5(b=B)144 276 S(uilder\("my_b)-2.5 E(uild < $T)-.2 E
(ARGET > $SOURCE",)-.93 E(emitter = e\))174 288 Q(def e2\(tar)144 312 Q
(get, source, en)-.18 E(v\):)-.4 E(return \(tar)154 324 Q(get + ['bar)
-.18 E(.foo'], source + ['bar)-.55 E(.src']\))-.55 E 2.5(#S)144 348 S
(imple association of a list of emitter functions with a Builder)-2.5 E
(.)-.55 E 2.5(b=B)144 360 S(uilder\("my_b)-2.5 E(uild < $T)-.2 E
(ARGET > $SOURCE",)-.93 E(emitter = [e, e2]\))174 372 Q 2.5(#C)144 396 S
(alling an emitter function through a construction v)-2.5 E(ariable.)
-.25 E(en)144 408 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(MY_EMITTER = e\)).4 E 2.5(b=B)144 420 S(uilder\("my_b)-2.5 E
(uild < $T)-.2 E(ARGET > $SOURCE",)-.93 E(emitter = '$MY_EMITTER'\))174
432 Q 2.5(#C)144 456 S
(alling a list of emitter functions through a construction v)-2.5 E
(ariable.)-.25 E(en)144 468 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(EMITTER_LIST = [e, e2]\)).4 E 2.5(b=B)144 480 S
(uilder\("my_b)-2.5 E(uild < $T)-.2 E(ARGET > $SOURCE",)-.93 E
(emitter = '$EMITTER_LIST'\))174 492 Q 2.5(#A)144 516 S
(ssociating multiple emitters with dif)-2.5 E(ferent \214le)-.25 E 2.5
(#s)144 528 S(uf)-2.5 E<8c78>-.25 E(es using a dictionary)-.15 E(.)-.65
E(def e_suf1\(tar)144 540 Q(get, source, en)-.18 E(v\):)-.4 E
(return \(tar)154 552 Q(get + ['another_tar)-.18 E
(get_\214le'], source\))-.18 E(def e_suf2\(tar)144 564 Q
(get, source, en)-.18 E(v\):)-.4 E(return \(tar)154 576 Q
(get, source + ['another_source_\214le']\))-.18 E 2.5(b=B)144 588 S
(uilder\("my_b)-2.5 E(uild < $T)-.2 E(ARGET > $SOURCE",)-.93 E
(emitter = {'.suf1' : e_suf1,)174 600 Q('.suf2' : e_suf2}\))201.5 612 Q
(multi)108 640.8 Q .157(Speci\214es whether this b)144 640.8 R .157
(uilder is allo)-.2 F .157
(wed to be called multiple times for the same tar)-.25 F .156
(get \214le\(s\). The)-.18 F(def)144 652.8 Q .793
(ault is 0, which means the b)-.1 F .793
(uilder can not be called multiple times for the same tar)-.2 F .793
(get \214le\(s\).)-.18 F .622(Calling a b)144 664.8 R .621
(uilder multiple times for the same tar)-.2 F .621
(get simply adds additional source \214les to the tar)-.18 F(-)-.2 E
.707(get; it is not allo)144 676.8 R .707(wed to change the en)-.25 F
.707(vironment associated with the tar)-.4 F .708
(get, specify addition en)-.18 F(vi-)-.4 E(ronment o)144 688.8 Q -.15
(ve)-.15 G(rrides, or associate a dif).15 E(ferent b)-.25 E
(uilder with the tar)-.2 E(get.)-.18 E(en)108 717.6 Q(v)-.4 E 3.43(Ac)
144 717.6 S .93(onstruction en)-3.43 F .93
(vironment that can be used to fetch source code using this Builder)-.4
F 5.93(.\()-.55 G .93(Note that)-5.93 F .818(this en)144 729.6 R .818
(vironment is)-.4 F F2(not)3.678 E F0 .819(used for normal b)3.998 F
.819(uilds of normal tar)-.2 F .819(get \214les, which use the en)-.18 F
(vironment)-.4 E(July 2010)286.415 768 Q(134)199.415 E 0 Cg EP
%%Page: 135 135
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(that w)144
84 Q(as used to call the Builder for the tar)-.1 E(get \214le.\))-.18 E
(generator)108 112.8 Q 4.645(Af)144 124.8 S 2.144
(unction that returns a list of actions that will be e)-4.645 F -.15(xe)
-.15 G 2.144(cuted to b).15 F 2.144(uild the tar)-.2 F 2.144
(get\(s\) from the)-.18 F 2.952(source\(s\). The)144 136.8 R .453
(returned action\(s\) may be an Action object, or an)2.952 F .453
(ything that can be con)-.15 F -.15(ve)-.4 G .453(rted into).15 F
(an Action object \(see the ne)144 148.8 Q(xt section\).)-.15 E .043
(The generator function tak)144 172.8 R .043(es four ar)-.1 F(guments:)
-.18 E/F1 10/Times-Italic@0 SF(sour)2.883 E(ce)-.37 E F0 2.543(-al)2.723
G .043(ist of source nodes,)-2.543 F F1(tar)2.673 E -.1(ge)-.37 G(t).1 E
F0 2.542(-al)3.223 G .042(ist of tar)-2.542 F(get)-.18 E(nodes,)144
184.8 Q F1(en)3.124 E(v)-.4 E F0 2.934(-t)3.254 G .434
(he construction en)-2.934 F(vironment,)-.4 E F1(for_signatur)4.905 E(e)
-.37 E F0 2.935(-aB)3.115 G .435(oolean v)-2.935 F .435
(alue that speci\214es whether)-.25 F .346
(the generator is being called for generating a b)144 196.8 R .346
(uild signature \(as opposed to actually e)-.2 F -.15(xe)-.15 G .346
(cuting the).15 F 2.5(command\). Example:)144 208.8 R
(def g\(source, tar)144 232.8 Q(get, en)-.18 E 1.3 -.65(v, f)-.4 H
(or_signature\):).65 E(return [["gcc", "-c", "-o"] + tar)154 244.8 Q
(get + source])-.18 E 2.5(b=B)144 268.8 S(uilder\(generator=g\))-2.5 E
(The)144 297.6 Q F1 -.1(ge)2.5 G(ner).1 E(ator)-.15 E F0(and)3.23 E F1
(action)2.83 E F0(ar)2.74 E
(guments must not both be used for the same Builder)-.18 E(.)-.55 E
(src_b)108 326.4 Q(uilder)-.2 E .415(Speci\214es a b)144 338.4 R .415
(uilder to use when a source \214le name suf)-.2 F .415
(\214x does not match an)-.25 F 2.916(yo)-.15 G 2.916(ft)-2.916 G .416
(he suf)-2.916 F<8c78>-.25 E .416(es of the)-.15 F -.2(bu)144 350.4 S
(ilder).2 E 2.5(.U)-.55 G(sing this ar)-2.5 E
(gument produces a multi-stage b)-.18 E(uilder)-.2 E(.)-.55 E
(single_source)108 379.2 Q .131(Speci\214es that this b)144 391.2 R .131
(uilder e)-.2 F .131(xpects e)-.15 F .131
(xactly one source \214le per call. Gi)-.15 F .13
(ving more than one source \214le)-.25 F .934(without tar)144 403.2 R
.934(get \214les results in implicitely calling the b)-.18 F .935
(uilder multiple times \(once for each source)-.2 F(gi)144 415.2 Q -.15
(ve)-.25 G(n\). Gi).15 E(ving multiple source \214les together with tar)
-.25 E(get \214les results in a UserError e)-.18 E(xception.)-.15 E(The)
144 444 Q F1 -.1(ge)2.5 G(ner).1 E(ator)-.15 E F0(and)3.23 E F1(action)
2.83 E F0(ar)2.74 E(guments must not both be used for the same Builder)
-.18 E(.)-.55 E(source_e)108 472.8 Q(xt_match)-.15 E .53
(When the speci\214ed)144 484.8 R F1(action)3.36 E F0(ar)3.27 E .529
(gument is a dictionary)-.18 F 3.029(,t)-.65 G .529(he def)-3.029 F .529
(ault beha)-.1 F .529(vior when a b)-.2 F .529(uilder is passed)-.2 F
.502(multiple source \214les is to mak)144 496.8 R 3.002(es)-.1 G .502
(ure that the e)-3.002 F .502
(xtensions of all the source \214les match.)-.15 F .503(If it is le)
5.502 F -.05(ga)-.15 G(l).05 E .694(for this b)144 508.8 R .694
(uilder to be called with a list of source \214les with dif)-.2 F .694
(ferent e)-.25 F .694(xtensions, this check can be)-.15 F 4.251
(suppressed by setting)144 520.8 R/F2 10/Times-Bold@0 SF(sour)6.752 E
(ce_ext_match)-.18 E F0(to)6.752 E F2(None)6.752 E F0 4.252
(or some other non-true v)6.752 F 6.752(alue. When)-.25 F F2(sour)144
532.8 Q(ce_ext_match)-.18 E F0 .11(is disable,)2.61 F F2(scons)2.61 E F0
.11(will use the suf)2.61 F .109
(\214x of the \214rst speci\214ed source \214le to select the)-.25 F
(appropriate action from the)144 544.8 Q F1(action)2.83 E F0(dictionary)
2.74 E(.)-.65 E 1.022(In the follo)144 568.8 R 1.022(wing e)-.25 F 1.022
(xample, the setting of)-.15 F F2(sour)3.522 E(ce_ext_match)-.18 E F0
(pre)3.522 E -.15(ve)-.25 G(nts).15 E F2(scons)3.522 E F0 1.023(from e)
3.523 F 1.023(xiting with an)-.15 F(error due to the mismatched suf)144
580.8 Q<8c78>-.25 E(es of)-.15 E F2 -.25(fo)2.5 G(o.in).25 E F0(and)2.5
E F2 -.25(fo)2.5 G(o.extra).25 E F0(.)A 2.5(b=B)144 604.8 S
(uilder\(action={'.in' : 'b)-2.5 E(uild $SOURCES > $T)-.2 E(ARGET'},)
-.93 E(source_e)174 616.8 Q(xt_match = None\))-.15 E(en)144 640.8 Q 2.5
(v=E)-.4 G -.4(nv)-2.5 G(ironment\(B).4 E(UILDERS = {'MyBuild':b}\))-.1
E(en)144 652.8 Q -.65(v.)-.4 G(MyBuild\('foo.out', ['foo.in', 'foo.e).65
E(xtra']\))-.15 E(en)108 681.6 Q(v)-.4 E 3.43(Ac)144 681.6 S .93
(onstruction en)-3.43 F .93
(vironment that can be used to fetch source code using this Builder)-.4
F 5.93(.\()-.55 G .93(Note that)-5.93 F .818(this en)144 693.6 R .818
(vironment is)-.4 F F1(not)3.678 E F0 .819(used for normal b)3.998 F
.819(uilds of normal tar)-.2 F .819(get \214les, which use the en)-.18 F
(vironment)-.4 E(that w)144 705.6 Q
(as used to call the Builder for the tar)-.1 E(get \214le.\))-.18 E 2.5
(b=B)144 729.6 S(uilder\(action="b)-2.5 E(uild < $SOURCE > $T)-.2 E
(ARGET"\))-.93 E(July 2010)286.415 768 Q(135)199.415 E 0 Cg EP
%%Page: 136 136
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)144 84 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(B).4 E
(UILDERS = {'MyBuild' : b}\))-.1 E(en)144 96 Q -.65(v.)-.4 G
(MyBuild\('foo.out', 'foo.in', my_ar).65 E 2.5(g=')-.18 G(xyzzy'\))-2.5
E(chdir)108 124.8 Q 3.72(Ad)144 124.8 S 1.22
(irectory from which scons will e)-3.72 F -.15(xe)-.15 G 1.22
(cute the action\(s\) speci\214ed for this Builder).15 F 6.22(.I)-.55 G
3.72(ft)-6.22 G(he)-3.72 E/F1 10/Times-Bold@0 SF(chdir)3.72 E F0(ar)144
136.8 Q .308(gument is a string or a directory Node, scons will change \
to the speci\214ed directory)-.18 F 5.308(.I)-.65 G 2.808(ft)-5.308 G
(he)-2.808 E F1(chdir)2.808 E F0(is not a string or Node and is non-zer\
o, then scons will change to the tar)144 148.8 Q(get \214le')-.18 E 2.5
(sd)-.55 G(irectory)-2.5 E(.)-.65 E .556(Note that scons will)144 172.8
R/F2 10/Times-Italic@0 SF(not)3.416 E F0 .555
(automatically modify its e)3.736 F .555(xpansion of construction v)-.15
F .555(ariables lik)-.25 F(e)-.1 E F1($T)3.055 E(AR-)-.9 E(GET)144 184.8
Q F0(and)3.53 E F1($SOURCE)3.53 E F0 1.03(when using the chdir k)3.53 F
-.15(ey)-.1 G -.1(wo).15 G 1.03(rd ar).1 F 1.03(gument--that is, the e)
-.18 F 1.03(xpanded \214le names)-.15 F .108(will still be relati)144
196.8 R .408 -.15(ve t)-.25 H 2.608(ot).15 G .108(he top-le)-2.608 F
-.15(ve)-.25 G 2.608(lS).15 G .108(Construct directory)-2.608 F 2.608
(,a)-.65 G .108(nd consequently incorrect relati)-2.608 F .407 -.15
(ve t)-.25 H 2.607(ot).15 G(he)-2.607 E 1.691(chdir directory)144 208.8
R 6.691(.B)-.65 G 1.691(uilders created using chdir k)-6.691 F -.15(ey)
-.1 G -.1(wo).15 G 1.692(rd ar).1 F 1.692
(gument, will need to use construction)-.18 F -.25(va)144 220.8 S .213
(riable e).25 F .213(xpansions lik)-.15 F(e)-.1 E F1(${T)2.713 E(ARGET)
-.9 E(.\214le})-.9 E F0(and)2.713 E F1(${SOURCE.\214le})2.713 E F0 .212
(to use just the \214lename portion of)2.713 F(the tar)144 232.8 Q
(gets and source.)-.18 E 2.5(b=B)144 256.8 S(uilder\(action="b)-2.5 E
(uild < ${SOURCE.\214le} > ${T)-.2 E(ARGET)-.93 E(.\214le}",)-.74 E
(chdir=1\))174 268.8 Q(en)144 280.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(B).4 E(UILDERS = {'MyBuild' : b}\))-.1 E(en)144 292.8 Q -.65
(v.)-.4 G(MyBuild\(').65 E(sub/dir/foo.out', ')-.55 E(sub/dir/foo.in'\))
-.55 E F1 -1.2(WA)108 316.8 S(RNING:)1.2 E F0 .051(Python only k)2.551 F
.051(eeps one current directory location for all of the threads.)-.1 F
.052(This means that use of)5.051 F(the)108 328.8 Q F1(chdir)2.809 E F0
(ar)2.809 E .309(gument will)-.18 F F2(not)3.169 E F0 -.1(wo)3.489 G
.309(rk with the SCons).1 F F1(-j)2.809 E F0 .309(option, because indi)
2.809 F .308(vidual w)-.25 F(ork)-.1 E .308(er threads spa)-.1 F .308
(wned by)-.15 F(SCons interfere with each other when the)108 340.8 Q 2.5
(ys)-.15 G(tart changing directory)-2.5 E(.)-.65 E(An)108 364.8 Q 3.386
(ya)-.15 G .886(dditional k)-3.386 F -.15(ey)-.1 G -.1(wo).15 G .886
(rd ar).1 F .887(guments supplied when a Builder object is created \(th\
at is, when the Builder\(\))-.18 F .572
(function is called\) will be set in the e)108 376.8 R -.15(xe)-.15 G
.571(cuting construction en).15 F .571
(vironment when the Builder object is called.)-.4 F .483
(The canonical e)108 388.8 R .484(xample here w)-.15 F .484
(ould be to set a construction v)-.1 F .484
(ariable to the repository of a source code sys-)-.25 F(tem.)108 400.8 Q
(An)108 424.8 Q 3.418(ya)-.15 G .918(dditional k)-3.418 F -.15(ey)-.1 G
-.1(wo).15 G .918(rd ar).1 F .918(guments supplied when a Builder)-.18 F
F2(object)3.647 E F0 .917(is called will only be associated with)4.097 F
(the tar)108 436.8 Q
(get created by that particular Builder call \(and an)-.18 E 2.5(yo)-.15
G(ther \214les b)-2.5 E(uilt as a result of the call\).)-.2 E .317
(These e)108 460.8 R .317(xtra k)-.15 F -.15(ey)-.1 G -.1(wo).15 G .317
(rd ar).1 F .318(guments are passed to the follo)-.18 F .318
(wing functions: command generator functions, func-)-.25 F
(tion Actions, and emitter functions.)108 472.8 Q F1(Action Objects)87
501.6 Q F0(The)108 513.6 Q F1(Builder)3.538 E F0 1.037
(\(\) function will turn its)B F1(action)3.537 E F0 -.1(ke)3.537 G(yw)
-.05 E 1.037(ord ar)-.1 F 1.037
(gument into an appropriate internal Action object.)-.18 F -1.1(Yo)108
525.6 S 3.141(uc)1.1 G .641(an also e)-3.141 F .642
(xplicity create Action objects using the)-.15 F F1(Action)3.142 E F0
.642(\(\) global function, which can then be passed)B .033(to the)108
537.6 R F1(Builder)2.533 E F0 .032(\(\) function.)B .032
(This can be used to con\214gure an Action object more \215e)5.032 F
(xibly)-.15 E 2.532(,o)-.65 G 2.532(ri)-2.532 G 2.532(tm)-2.532 G .032
(ay simply be)-2.532 F 1.595(more ef)108 549.6 R 1.596(\214cient than l\
etting each separate Builder object create a separate Action when multi\
ple Builder)-.25 F(objects need to do the same thing.)108 561.6 Q(The)
108 585.6 Q F1(Action)2.705 E F0 .205(\(\) global function returns an a\
ppropriate object for the action represented by the type of the \214rst)
B(ar)108 597.6 Q(gument:)-.18 E(Action)108 626.4 Q(If the \214rst ar)144
626.4 Q
(gument is already an Action object, the object is simply returned.)-.18
E(String)108 655.2 Q .748(If the \214rst ar)144 655.2 R .749
(gument is a string, a command-line Action is returned.)-.18 F .749
(Note that the command-line)5.749 F .006(string may be preceded by an)
144 667.2 R F1(@)2.505 E F0 .005(\(at-sign\) to suppress printing of th\
e speci\214ed command line, or by)2.505 F(a)144 679.2 Q F1<ad>2.5 E F0
(\(h)2.5 E(yphen\) to ignore the e)-.05 E
(xit status from the speci\214ed command:)-.15 E(Action\('$CC -c -o $T)
144 703.2 Q(ARGET $SOURCES'\))-.93 E 2.5(#D)144 727.2 S(oesn')-2.5 E 2.5
(tp)-.18 G(rint the line being e)-2.5 E -.15(xe)-.15 G(cuted.).15 E
(July 2010)286.415 768 Q(136)199.415 E 0 Cg EP
%%Page: 137 137
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(Action\('@b)144 84 Q(uild $T)-.2 E(ARGET $SOURCES'\))-.93 E 2.5(#I)144
108 S(gnores return v)-2.5 E(alue)-.25 E(Action\('-b)144 120 Q(uild $T)
-.2 E(ARGET $SOURCES'\))-.93 E(List)108 148.8 Q .444(If the \214rst ar)
144 148.8 R .445
(gument is a list, then a list of Action objects is returned.)-.18 F
.445(An Action object is created)5.445 F .065
(as necessary for each element in the list.)144 160.8 R .065
(If an element)5.065 F/F1 10/Times-Italic@0 SF(within)2.904 E F0 .064
(the list is itself a list, the internal list)2.804 F .597
(is the command and ar)144 172.8 R .597(guments to be e)-.18 F -.15(xe)
-.15 G .598(cuted via the command line.).15 F .598(This allo)5.598 F
.598(ws white space to)-.25 F(be enclosed in an ar)144 184.8 Q
(gument by de\214ning a command in a list within a list:)-.18 E
(Action\([['cc', '-c', '-D)144 208.8 Q(WHITE SP)-.3 E -.4(AC)-.92 G
(E', '-o', '$T).4 E(ARGET', '$SOURCES']]\))-.93 E(Function)108 237.6 Q
.128(If the \214rst ar)144 249.6 R .128
(gument is a Python function, a function Action is returned.)-.18 F .127
(The Python function must)5.127 F(tak)144 261.6 Q 2.975(et)-.1 G .475
(hree k)-2.975 F -.15(ey)-.1 G -.1(wo).15 G .475(rd ar).1 F(guments,)
-.18 E/F2 10/Times-Bold@0 SF(tar)2.975 E(get)-.1 E F0 .475
(\(a Node object representing the tar)2.975 F .475(get \214le\),)-.18 F
F2(sour)2.975 E(ce)-.18 E F0 .475(\(a Node)2.975 F 1.206
(object representing the source \214le\) and)144 273.6 R F2(en)3.705 E
(v)-.4 E F0 1.205(\(the construction en)3.705 F 1.205
(vironment used for b)-.4 F 1.205(uilding the)-.2 F(tar)144 285.6 Q .803
(get \214le\).)-.18 F(The)5.803 E F2(tar)3.303 E(get)-.1 E F0(and)3.303
E F2(sour)3.303 E(ce)-.18 E F0(ar)3.303 E .804
(guments may be lists of Node objects if there is more than)-.18 F .257
(one tar)144 297.6 R .257(get \214le or source \214le.)-.18 F .257
(The actual tar)5.257 F .256
(get and source \214le name\(s\) may be retrie)-.18 F -.15(ve)-.25 G
2.756(df).15 G .256(rom their)-2.756 F(Node objects via the b)144 309.6
Q(uilt-in Python str\(\) function:)-.2 E(tar)144 333.6 Q
(get_\214le_name = str\(tar)-.18 E(get\))-.18 E
(source_\214le_names = map\(lambda x: str\(x\), source\))144 345.6 Q
.297(The function should return)144 362.4 R F2(0)2.797 E F0(or)2.797 E
F2(None)2.797 E F0 .298(to indicate a successful b)2.798 F .298
(uild of the tar)-.2 F .298(get \214le\(s\).)-.18 F .298(The func-)5.298
F(tion may raise an e)144 374.4 Q(xception or return a non-zero e)-.15 E
(xit status to indicate an unsuccessful b)-.15 E(uild.)-.2 E(def b)144
398.4 Q(uild_it\(tar)-.2 E(get = None, source = None, en)-.18 E 2.5(v=N)
-.4 G(one\):)-2.5 E 2.5(#b)154 410.4 S(uild the tar)-2.7 E
(get from the source)-.18 E(return 0)154 422.4 Q 2.5(a=A)144 446.4 S
(ction\(b)-2.5 E(uild_it\))-.2 E(If the action ar)108 470.4 Q
(gument is not one of the abo)-.18 E -.15(ve)-.15 G 2.5(,N).15 G
(one is returned.)-2.5 E .395(The second ar)108 487.2 R .395(gument is \
optional and is used to de\214ne the output which is printed when the A\
ction is actu-)-.18 F .698(ally performed.)108 499.2 R .698
(In the absence of this parameter)5.698 F 3.198(,o)-.4 G 3.198(ri)-3.198
G 3.198(fi)-3.198 G(t')-3.198 E 3.198(sa)-.55 G 3.198(ne)-3.198 G .699
(mpty string, a def)-3.198 F .699(ault output depending on)-.1 F .386
(the type of the action is used.)108 511.2 R -.15(Fo)5.385 G 2.885(re)
.15 G .385(xample, a command-line action will print the e)-3.035 F -.15
(xe)-.15 G .385(cuted command.).15 F(The)5.385 E(ar)108 523.2 Q
(gument must be either a Python function or a string.)-.18 E .243
(In the \214rst case, it')108 547.2 R 2.743(saf)-.55 G .244(unction tha\
t returns a string to be printed to describe the action being e)-2.743 F
-.15(xe)-.15 G 2.744(cuted. The).15 F .64
(function may also be speci\214ed by the)108 559.2 R F1(strfunction)3.14
E F0 3.139(=k).24 G -.15(ey)-3.239 G -.1(wo).15 G .639(rd ar).1 F 3.139
(gument. Lik)-.18 F 3.139(eaf)-.1 G .639(unction to b)-3.139 F .639
(uild a \214le, this)-.2 F .583(function must tak)108 571.2 R 3.083(et)
-.1 G .583(hree k)-3.083 F -.15(ey)-.1 G -.1(wo).15 G .583(rd ar).1 F
(guments:)-.18 E F2(tar)3.083 E(get)-.1 E F0 .583
(\(a Node object representing the tar)3.083 F .584(get \214le\),)-.18 F
F2(sour)3.084 E(ce)-.18 E F0(\(a)3.084 E 1.378
(Node object representing the source \214le\) and)108 583.2 R F2(en)
3.878 E(v)-.4 E F0 1.378(\(a construction en)3.878 F 3.878
(vironment\). The)-.4 F F2(tar)3.878 E(get)-.1 E F0(and)3.877 E F2(sour)
3.877 E(ce)-.18 E F0(ar)108 595.2 Q
(guments may be lists of Node objects if there is more than one tar)-.18
E(get \214le or source \214le.)-.18 E .359(In the second case, you pro)
108 619.2 R .359(vide the string itself.)-.15 F .36
(The string may also be speci\214ed by the)5.359 F F1(cmdstr)2.86 E F0
2.86(=k).73 G -.15(ey)-2.96 G -.1(wo).15 G(rd).1 E(ar)108 631.2 Q 3.061
(gument. The)-.18 F .561(string typically contains v)3.061 F .561
(ariables, notably $T)-.25 F .561
(ARGET\(S\) and $SOURCE\(S\), or consists of)-.93 F .239
(just a single v)108 643.2 R .239
(ariable, which is optionally de\214ned some)-.25 F .239(where else.)
-.25 F .24(SCons itself hea)5.239 F .24(vily uses the latter v)-.2 F
(ari-)-.25 E(ant.)108 655.2 Q(Examples:)108 679.2 Q(def b)144 703.2 Q
(uild_it\(tar)-.2 E(get, source, en)-.18 E(v\):)-.4 E 2.5(#b)154 715.2 S
(uild the tar)-2.7 E(get from the source)-.18 E(return 0)154 727.2 Q
(July 2010)286.415 768 Q(137)199.415 E 0 Cg EP
%%Page: 138 138
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(def string_it\(tar)144 84 Q(get, source, en)-.18 E(v\):)-.4 E
(return "b)154 96 Q(uilding '%s' from '%s'" % \(tar)-.2 E
(get[0], source[0]\))-.18 E 2.5(#U)144 120 S(se a positional ar)-2.5 E
(gument.)-.18 E 2.5(f=A)144 132 S(ction\(b)-2.5 E(uild_it, string_it\))
-.2 E 2.5(s=A)144 144 S(ction\(b)-2.5 E(uild_it, "b)-.2 E(uilding '$T)
-.2 E(ARGET' from '$SOURCE'"\))-.93 E 2.5(#A)144 168 S(lternati)-2.5 E
-.15(ve)-.25 G(ly).15 E 2.5(,u)-.65 G(se a k)-2.5 E -.15(ey)-.1 G -.1
(wo).15 G(rd ar).1 E(gument.)-.18 E 2.5(f=A)144 180 S(ction\(b)-2.5 E
(uild_it, strfunction=string_it\))-.2 E 2.5(s=A)144 192 S(ction\(b)-2.5
E(uild_it, cmdstr="b)-.2 E(uilding '$T)-.2 E(ARGET' from '$SOURCE'"\))
-.93 E 2.5(#Y)144 216 S(ou can pro)-3.6 E(vide a con\214gurable v)-.15 E
(ariable.)-.25 E 2.5(l=A)144 228 S(ction\(b)-2.5 E
(uild_it, '$STRINGIT'\))-.2 E .525(The third and succeeding ar)108 252 R
.524(guments, if present, may either be a construction v)-.18 F .524
(ariable or a list of construc-)-.25 F .472(tion v)108 264 R .472
(ariables whose v)-.25 F .472(alues will be included in the signature o\
f the Action when deciding whether a tar)-.25 F(get)-.18 E .792
(should be reb)108 276 R .792(uilt because the action changed.)-.2 F
.792(The v)5.792 F .792(ariables may also be speci\214ed by a)-.25 F/F1
10/Times-Italic@0 SF(varlist)3.291 E F0 3.291(=k).68 G -.15(ey)-3.391 G
-.1(wo).15 G(rd).1 E 1.48(parameter; if both are present, the)108 288 R
3.98(ya)-.15 G 1.48(re combined.)-3.98 F 1.48(This is necessary whene)
6.48 F -.15(ve)-.25 G 3.98(ry).15 G 1.48(ou w)-3.98 F 1.48(ant a tar)-.1
F 1.48(get to be)-.18 F(reb)108 300 Q .933
(uilt when a speci\214c construction v)-.2 F .933(ariable changes.)-.25
F .933(This is not often needed for a string action, as the)5.933 F -.15
(ex)108 312 S 1.267(panded v).15 F 1.267
(ariables will normally be part of the command line, b)-.25 F 1.268
(ut may be needed if a Python function)-.2 F(action uses the v)108 324 Q
(alue of a construction v)-.25 E
(ariable when generating the command line.)-.25 E(def b)144 348 Q
(uild_it\(tar)-.2 E(get, source, en)-.18 E(v\):)-.4 E 2.5(#b)154 360 S
(uild the tar)-2.7 E(get from the 'XXX' construction v)-.18 E(ariable)
-.25 E(open\(tar)154 372 Q(get[0], 'w'\).write\(en)-.18 E(v['XXX']\))-.4
E(return 0)154 384 Q 2.5(#U)144 408 S(se positional ar)-2.5 E(guments.)
-.18 E 2.5(a=A)144 420 S(ction\(b)-2.5 E
(uild_it, '$STRINGIT', ['XXX']\))-.2 E 2.5(#A)144 444 S(lternati)-2.5 E
-.15(ve)-.25 G(ly).15 E 2.5(,u)-.65 G(se a k)-2.5 E -.15(ey)-.1 G -.1
(wo).15 G(rd ar).1 E(gument.)-.18 E 2.5(a=A)144 456 S(ction\(b)-2.5 E
(uild_it, v)-.2 E(arlist=['XXX']\))-.25 E(The)108 480 Q/F2 10
/Times-Bold@0 SF(Action)4.608 E F0 2.107
(\(\) global function can be passed the follo)B 2.107(wing optional k)
-.25 F -.15(ey)-.1 G -.1(wo).15 G 2.107(rd ar).1 F 2.107
(guments to modify the)-.18 F(Action object')108 492 Q 2.5(sb)-.55 G
(eha)-2.5 E(vior:)-.2 E F2(chdir)144 520.8 Q F0(The)3.27 E F2(chdir)3.27
E F0 -.1(ke)3.27 G(yw)-.05 E .77(ord ar)-.1 F .77
(gument speci\214es that scons will e)-.18 F -.15(xe)-.15 G .77
(cute the action after changing to).15 F .308(the speci\214ed directory)
144 532.8 R 5.308(.I)-.65 G 2.808(ft)-5.308 G(he)-2.808 E F2(chdir)2.808
E F0(ar)2.808 E .307
(gument is a string or a directory Node, scons will change to)-.18 F
.634(the speci\214ed directory)144 544.8 R 5.634(.I)-.65 G 3.134(ft)
-5.634 G(he)-3.134 E F2(chdir)3.134 E F0(ar)3.134 E .634
(gument is not a string or Node and is non-zero, then scons)-.18 F
(will change to the tar)144 556.8 Q(get \214le')-.18 E 2.5(sd)-.55 G
(irectory)-2.5 E(.)-.65 E .556(Note that scons will)144 580.8 R F1(not)
3.416 E F0 .555(automatically modify its e)3.736 F .555
(xpansion of construction v)-.15 F .555(ariables lik)-.25 F(e)-.1 E F2
($T)3.055 E(AR-)-.9 E(GET)144 592.8 Q F0(and)3.53 E F2($SOURCE)3.53 E F0
1.03(when using the chdir k)3.53 F -.15(ey)-.1 G -.1(wo).15 G 1.03
(rd ar).1 F 1.03(gument--that is, the e)-.18 F 1.03
(xpanded \214le names)-.15 F .108(will still be relati)144 604.8 R .408
-.15(ve t)-.25 H 2.608(ot).15 G .108(he top-le)-2.608 F -.15(ve)-.25 G
2.608(lS).15 G .108(Construct directory)-2.608 F 2.608(,a)-.65 G .108
(nd consequently incorrect relati)-2.608 F .407 -.15(ve t)-.25 H 2.607
(ot).15 G(he)-2.607 E 1.691(chdir directory)144 616.8 R 6.691(.B)-.65 G
1.691(uilders created using chdir k)-6.691 F -.15(ey)-.1 G -.1(wo).15 G
1.692(rd ar).1 F 1.692(gument, will need to use construction)-.18 F -.25
(va)144 628.8 S .213(riable e).25 F .213(xpansions lik)-.15 F(e)-.1 E F2
(${T)2.713 E(ARGET)-.9 E(.\214le})-.9 E F0(and)2.713 E F2
(${SOURCE.\214le})2.713 E F0 .212(to use just the \214lename portion of)
2.713 F(the tar)144 640.8 Q(gets and source.)-.18 E 2.5(a=A)144 664.8 S
(ction\("b)-2.5 E(uild < ${SOURCE.\214le} > ${T)-.2 E(ARGET)-.93 E
(.\214le}",)-.74 E(chdir=1\))171.5 676.8 Q F2(exitstatfunc)144 705.6 Q
F0(The)4.043 E F2(Action)4.043 E F0 1.543(\(\) global function also tak)
B 1.544(es an)-.1 F F2(exitstatfunc)4.044 E F0 -.1(ke)4.044 G(yw)-.05 E
1.544(ord ar)-.1 F 1.544(gument which)-.18 F .169
(speci\214es a function that is passed the e)144 717.6 R .168
(xit status \(or return v)-.15 F .168
(alue\) from the speci\214ed action and can)-.25 F 1.238
(return an arbitrary or modi\214ed v)144 729.6 R 3.738(alue. This)-.25 F
1.238(can be used, for e)3.738 F 1.238
(xample, to specify that an Action)-.15 F(July 2010)286.415 768 Q(138)
199.415 E 0 Cg EP
%%Page: 139 139
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(object')144
84 Q 2.665(sr)-.55 G .165(eturn v)-2.665 F .165(alue should be ignored \
under special conditions and SCons should, therefore, con-)-.25 F
(sider that the action al)144 96 Q -.1(wa)-.1 G(ys suceeds:).1 E(def al)
144 120 Q -.1(wa)-.1 G(ys_succeed\(s\):).1 E 2.5(#A)154 132 S -.1(lwa)
-2.5 G(ys return 0, which indicates success.).1 E(return 0)154 144 Q 2.5
(a=A)144 156 S(ction\("b)-2.5 E(uild < ${SOURCE.\214le} > ${T)-.2 E
(ARGET)-.93 E(.\214le}",)-.74 E -.15(ex)171.5 168 S(itstatfunc=al).15 E
-.1(wa)-.1 G(ys_succeed\)).1 E/F1 10/Times-Bold@0 SF(batch_k)144 196.8 Q
(ey)-.1 E F0(The)3.581 E F1(batch_k)3.581 E(ey)-.1 E F0 -.1(ke)3.581 G
(yw)-.05 E 1.081(ord ar)-.1 F 1.082
(gument can be used to specify that the Action can create)-.18 F .397
(multiple tar)144 208.8 R .396(get \214les by processing multiple indep\
endent source \214les simultaneously)-.18 F 5.396(.\()-.65 G .396
(The canoni-)-5.396 F .014(cal e)144 220.8 R .014(xample is "batch comp\
ilation" of multiple object \214les by passing multiple source \214les \
to a sin-)-.15 F .078(gle in)144 232.8 R -.2(vo)-.4 G .078
(cation of a compiler such as Microsoft').2 F 2.578(sV)-.55 G .077
(isual C / C++ compiler)-3.178 F 2.577(.\) If)-.55 F(the)2.577 E F1
(batch_k)2.577 E(ey)-.1 E F0(ar)2.577 E(gu-)-.18 E .113(ment is an)144
244.8 R 2.613(yn)-.15 G(on-F)-2.613 E .113(alse, non-callable Python v)
-.15 F .114(alue, the con\214gured Action object will cause)-.25 F F1
(scons)2.614 E F0(to)2.614 E .528(collect all tar)144 256.8 R .527
(gets b)-.18 F .527(uilt with the Action object and con\214gured with t\
he same construction en)-.2 F(viron-)-.4 E 1.384(ment into single in)144
268.8 R -.2(vo)-.4 G 1.384(cations of the Action object').2 F 3.885(sc)
-.55 G 1.385(ommand line or function.)-3.885 F 1.385(Command lines)6.385
F 3.192(will typically w)144 280.8 R 3.192(ant to use the)-.1 F F1
(CHANGED_SOURCES)5.692 E F0 3.192(construction v)5.692 F 3.192
(ariable \(and possibly)-.25 F F1(CHANGED_T)144 292.8 Q(ARGETS)-.9 E F0
.52(as well\) to only pass to the command line those sources that ha)
3.02 F .82 -.15(ve a)-.2 H(ctu-).15 E(ally changed since their tar)144
304.8 Q(gets were b)-.18 E(uilt.)-.2 E(Example:)144 328.8 Q 2.5(a=A)144
352.8 S(ction\('b)-2.5 E(uild $CHANGED_SOURCES', batch_k)-.2 E -.15(ey)
-.1 G(=T).15 E(rue\))-.35 E(The)108 376.8 Q F1(batch_k)2.652 E(ey)-.1 E
F0(ar)2.651 E .151
(gument may also be a callable function that returns a k)-.18 F .451
-.15(ey t)-.1 H .151(hat will be used to identify dif-).15 F .508
(ferent "batches" of tar)108 388.8 R .509
(get \214les to be collected for batch b)-.18 F 3.009(uilding. A)-.2 F
F1(batch_k)3.009 E(ey)-.1 E F0 .509(function must tak)3.009 F 3.009(et)
-.1 G .509(he fol-)-3.009 F(lo)108 400.8 Q(wing ar)-.25 E(guments:)-.18
E(action)108 429.6 Q(The action object.)144 429.6 Q(en)108 458.4 Q(v)-.4
E(The construction en)144 458.4 Q(vironment con\214gured for the tar)-.4
E(get.)-.18 E(tar)108 487.2 Q(get)-.18 E(The list of tar)144 487.2 Q
(gets for a particular con\214gured action.)-.18 E(source)108 516 Q
(The list of source for a particular con\214gured action.)144 516 Q
1.672(The returned k)144 540 R 1.972 -.15(ey s)-.1 H 1.671
(hould typically be a tuple of v).15 F 1.671(alues deri)-.25 F -.15(ve)
-.25 G 4.171(df).15 G 1.671(rom the ar)-4.171 F 1.671(guments, using an)
-.18 F(y)-.15 E 3.678(appropriate logic to decide ho)144 552 R 6.178(wm)
-.25 G 3.678(ultiple in)-6.178 F -.2(vo)-.4 G 3.678
(cations should be batched.).2 F -.15(Fo)8.679 G 6.179(re).15 G 3.679
(xample, a)-6.329 F F1(batch_k)144 564 Q(ey)-.1 E F0 .12
(function may decide to return the v)2.62 F .119
(alue of a speci\214c construction v)-.25 F .119(ariable from the)-.25 F
F1(en)2.619 E(v)-.4 E F0(ar)144 576 Q .885(gument which will cause)-.18
F F1(scons)3.385 E F0 .885(to batch-b)3.385 F .885(uild tar)-.2 F .885
(gets with matching v)-.18 F .885(alues of that v)-.25 F .885
(ariable, or)-.25 F .02(perhaps return the)144 588 R F1(id)2.52 E F0
.019(\(\) of the entire construction en)B .019(vironment, in which case)
-.4 F F1(scons)2.519 E F0 .019(will batch-b)2.519 F(uild)-.2 E .551
(all tar)144 600 R .551(gets con\214gured with the same construction en)
-.18 F 3.052(vironment. Returning)-.4 F F1(None)3.052 E F0 .552
(indicates that the)3.052 F 1.135(particular tar)144 612 R 1.135
(get should)-.18 F/F2 10/Times-Italic@0 SF(not)3.994 E F0 1.134
(be part of an)4.314 F 3.634(yb)-.15 G 1.134(atched b)-3.634 F 1.134
(uild, b)-.2 F 1.134(ut instead will be b)-.2 F 1.134
(uilt by a separate)-.2 F(in)144 624 Q -.2(vo)-.4 G(cation of action').2
E 2.5(sc)-.55 G(ommand or function.)-2.5 E(Example:)5 E(def batch_k)144
648 Q -.15(ey)-.1 G(\(action, en).15 E 1.3 -.65(v, t)-.4 H(ar).65 E
(get, source\):)-.18 E(tdir = tar)154 660 Q(get[0].dir)-.18 E(if tdir)
154 672 Q(.name == ')-.55 E(special':)-.55 E 2.5(#D)164 684 S(on')-2.5 E
2.5(tb)-.18 G(atch-b)-2.5 E(uild an)-.2 E 2.5(yt)-.15 G(ar)-2.5 E(get)
-.18 E 2.5(#i)164 696 S 2.5(nt)-2.5 G(he special/ subdirectory)-2.5 E(.)
-.65 E(return None)164 708 Q(return \(id\(action\), id\(en)154 720 Q
(v\), tdir\))-.4 E(July 2010)286.415 768 Q(139)199.415 E 0 Cg EP
%%Page: 140 140
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R 2.5(a=A)144
84 S(ction\('b)-2.5 E(uild $CHANGED_SOURCES', batch_k)-.2 E -.15(ey)-.1
G(=batch_k).15 E -.15(ey)-.1 G(\)).15 E/F1 10/Times-Bold@0 SF
(Miscellaneous Action Functions)87 112.8 Q(scons)108 124.8 Q F0 .653
(supplies a number of functions that arrange for v)3.153 F .654
(arious common \214le and directory manipulations to)-.25 F .273
(be performed.)108 136.8 R .272
(These are similar in concept to "tasks" in the Ant b)5.273 F .272
(uild tool, although the implementation is)-.2 F .838(slightly dif)108
148.8 R 3.338(ferent. These)-.25 F .838(functions do not actually perfo\
rm the speci\214ed action at the time the function is)3.338 F .111
(called, b)108 160.8 R .111
(ut instead return an Action object that can be e)-.2 F -.15(xe)-.15 G
.11(cuted at the appropriate time.).15 F .11(\(In Object-Oriented)5.11 F
(terminology)108 172.8 Q 2.5(,t)-.65 G(hese are actually Action)-2.5 E
/F2 10/Times-Italic@0 SF -.75(Fa)2.5 G(ctory).75 E F0
(functions that return Action objects.\))2.82 E
(In practice, there are tw)108 196.8 Q 2.5(on)-.1 G(atural w)-2.5 E
(ays that these Action Functions are intended to be used.)-.1 E .613(Fi\
rst, if you need to perform the action at the time the SConscript \214l\
e is being read, you can use the)108 220.8 R F1(Exe-)3.114 E(cute)108
232.8 Q F0(global function to do so:)2.5 E(Ex)144 244.8 Q(ecute\(T)-.15
E(ouch\('\214le'\)\))-.8 E .195(Second, you can use these functions to \
supply Actions in a list for use by the)108 268.8 R F1(Command)2.694 E
F0 2.694(method. This)2.694 F(can)2.694 E(allo)108 280.8 Q 2.613(wy)-.25
G .113(ou to perform more complicated sequences of \214le manipulation \
without relying on platform-speci\214c)-2.613 F -.15(ex)108 292.8 S
(ternal commands: that).15 E(en)144 304.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(TMPB).4 E(UILD = '/tmp/b)-.1 E(uilddir'\))-.2 E(en)144 316.8
Q -.65(v.)-.4 G(Command\('foo.out', 'foo.in',).65 E([Mkdir\('$TMPB)174
328.8 Q(UILD'\),)-.1 E(Cop)176.5 340.8 Q(y\('$TMPB)-.1 E
(UILD', '${SOURCE.dir}'\),)-.1 E("cd $TMPB)176.5 352.8 Q(UILD && mak)-.1
E(e",)-.1 E(Delete\('$TMPB)176.5 364.8 Q(UILD'\)]\))-.1 E(Chmod\()108
393.6 Q F2(dest).35 E F0(,).68 E F2(mode)2.88 E F0(\)).18 E .279(Return\
s an Action object that changes the permissions on the speci\214ed)144
405.6 R F2(dest)3.129 E F0 .278(\214le or directory to the)3.459 F
(speci\214ed)144 417.6 Q F2(mode)2.5 E F0 5(.E).18 G(xamples:)-5 E(Ex)
144 441.6 Q(ecute\(Chmod\('\214le', 0755\)\))-.15 E(en)144 465.6 Q -.65
(v.)-.4 G(Command\('foo.out', 'foo.in',).65 E([Cop)174 477.6 Q(y\('$T)
-.1 E(ARGET', '$SOURCE'\),)-.93 E(Chmod\('$T)176.5 489.6 Q
(ARGET', 0755\)]\))-.93 E(Cop)108 518.4 Q(y\()-.1 E F2(dest).35 E F0(,)
.68 E F2(sr)2.84 E(c)-.37 E F0(\)).31 E .561
(Returns an Action object that will cop)144 530.4 R 3.062(yt)-.1 G(he)
-3.062 E F2(sr)3.402 E(c)-.37 E F0 .562
(source \214le or directory to the)3.372 F F2(dest)3.412 E F0 .562
(destination \214le)3.742 F(or directory)144 542.4 Q 5(.E)-.65 G
(xamples:)-5 E(Ex)144 566.4 Q(ecute\(Cop)-.15 E
(y\('foo.output', 'foo.input'\)\))-.1 E(en)144 590.4 Q -.65(v.)-.4 G
(Command\('bar).65 E(.out', 'bar)-.55 E(.in',)-.55 E(Cop)174 602.4 Q
(y\('$T)-.1 E(ARGET', '$SOURCE'\)\))-.93 E(Delete\()108 631.2 Q F2
(entry).19 E F0 2.5(,[).32 G F2(must_e)-2.12 E(xist)-.2 E F0(]\)).68 E
1.169(Returns an Action that deletes the speci\214ed)144 643.2 R F2
(entry)3.669 E F0 3.669(,w).32 G 1.169
(hich may be a \214le or a directory tree.)-3.669 F 1.168(If a)6.168 F
.177(directory is speci\214ed, the entire directory tree will be remo)
144 655.2 R -.15(ve)-.15 G 2.677(d. If).15 F(the)2.677 E F2(must_e)3.057
E(xist)-.2 E F0 .177(\215ag is set, then a)3.357 F .487
(Python error will be thro)144 667.2 R .486
(wn if the speci\214ed entry does not e)-.25 F .486(xist; the def)-.15 F
.486(ault is)-.1 F F1(must_exist=0)2.986 E F0 2.986(,t)C(hat)-2.986 E
(is, the Action will silently do nothing if the entry does not e)144
679.2 Q 2.5(xist. Examples:)-.15 F(Ex)144 703.2 Q
(ecute\(Delete\('/tmp/b)-.15 E(uildroot'\)\))-.2 E(en)144 727.2 Q -.65
(v.)-.4 G(Command\('foo.out', 'foo.in',).65 E(July 2010)286.415 768 Q
(140)199.415 E 0 Cg EP
%%Page: 141 141
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
([Delete\('${T)174 84 Q(ARGET)-.93 E(.dir}'\),)-.74 E(MyBuildAction]\))
176.5 96 Q(Ex)144 120 Q(ecute\(Delete\('\214le_that_must_e)-.15 E
(xist', must_e)-.15 E(xist=1\)\))-.15 E(Mkdir\()108 148.8 Q/F1 10
/Times-Italic@0 SF(dir).35 E F0(\)).73 E
(Returns an Action that creates the speci\214ed directory)144 160.8 Q F1
(dir .)2.85 E F0(Examples:)5 E(Ex)144 184.8 Q
(ecute\(Mkdir\('/tmp/outputdir'\)\))-.15 E(en)144 208.8 Q -.65(v.)-.4 G
(Command\('foo.out', 'foo.in',).65 E([Mkdir\('/tmp/b)174 220.8 Q
(uilddir'\),)-.2 E(Cop)176.5 232.8 Q(y\('/tmp/b)-.1 E
(uilddir/foo.in', '$SOURCE'\),)-.2 E("cd /tmp/b)176.5 244.8 Q
(uilddir && mak)-.2 E(e",)-.1 E(Cop)176.5 256.8 Q(y\('$T)-.1 E
(ARGET', '/tmp/b)-.93 E(uilddir/foo.out'\)]\))-.2 E(Mo)108 285.6 Q -.15
(ve)-.15 G(\().15 E F1(dest).35 E F0(,).68 E F1(sr)2.84 E(c)-.37 E F0
(\)).31 E .607(Returns an Action that mo)144 297.6 R -.15(ve)-.15 G
3.107(st).15 G .607(he speci\214ed)-3.107 F F1(sr)3.447 E(c)-.37 E F0
.607(\214le or directory to the speci\214ed)3.417 F F1(dest)3.457 E F0
.607(\214le or direc-)3.787 F(tory)144 309.6 Q 5(.E)-.65 G(xamples:)-5 E
(Ex)144 333.6 Q(ecute\(Mo)-.15 E -.15(ve)-.15 G
(\('\214le.destination', '\214le.source'\)\)).15 E(en)144 357.6 Q -.65
(v.)-.4 G(Command\('output_\214le', 'input_\214le',).65 E
([MyBuildAction,)174 369.6 Q(Mo)176.5 381.6 Q -.15(ve)-.15 G(\('$T).15 E
(ARGET', '\214le_created_by_MyBuildAction'\)]\))-.93 E -.8(To)108 410.4
S(uch\().8 E F1(\214le)1.91 E F0(\)).18 E(Returns an Action that update\
s the modi\214cation time on the speci\214ed)144 422.4 Q F1(\214le)2.5 E
F0 5(.E).18 G(xamples:)-5 E(Ex)144 446.4 Q(ecute\(T)-.15 E
(ouch\('\214le_to_be_touched'\)\))-.8 E(en)144 470.4 Q -.65(v.)-.4 G
(Command\('mark).65 E(er', 'input_\214le',)-.1 E([MyBuildAction,)174
482.4 Q -.8(To)176.5 494.4 S(uch\('$T).8 E(ARGET'\)]\))-.93 E/F2 10
/Times-Bold@0 SF -.92(Va)87 523.2 S(riable Substitution).92 E F0 .807
(Before e)108 535.2 R -.15(xe)-.15 G .807(cuting a command,).15 F F2
(scons)3.307 E F0 .807(performs construction v)3.307 F .807
(ariable interpolation on the strings that mak)-.25 F(e)-.1 E .908
(up the command line of b)108 547.2 R 3.409(uilders. V)-.2 F .909
(ariables are introduced by a)-1.11 F F2($)3.409 E F0 3.409
(pre\214x. Besides)3.409 F .909(construction v)3.409 F(ariables,)-.25 E
(scons pro)108 559.2 Q(vides the follo)-.15 E(wing v)-.25 E
(ariables for each command e)-.25 E -.15(xe)-.15 G(cution:).15 E
(CHANGED_SOURCES)108 588 Q 1.141
(The \214le names of all sources of the b)144 600 R 1.141
(uild command that ha)-.2 F 1.441 -.15(ve c)-.2 H 1.141
(hanged since the tar).15 F 1.141(get w)-.18 F 1.141(as last)-.1 F -.2
(bu)144 612 S(ilt.).2 E(CHANGED_T)108 640.8 Q(ARGETS)-.93 E .923
(The \214le names of all tar)144 652.8 R .923(gets that w)-.18 F .923
(ould be b)-.1 F .923(uilt from sources that ha)-.2 F 1.223 -.15(ve c)
-.2 H .923(hanged since the tar).15 F(get)-.18 E -.1(wa)144 664.8 S 2.5
(sl).1 G(ast b)-2.5 E(uilt.)-.2 E(SOURCE)108 693.6 Q .651
(The \214le name of the source of the b)144 705.6 R .65
(uild command, or the \214le name of the \214rst source if multiple)-.2
F(sources are being b)144 717.6 Q(uilt.)-.2 E(July 2010)286.415 768 Q
(141)199.415 E 0 Cg EP
%%Page: 142 142
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(SOURCES)108
84 Q(The \214le names of the sources of the b)144 96 Q(uild command.)-.2
E -.93(TA)108 124.8 S(RGET).93 E 1.088(The \214le name of the tar)144
136.8 R 1.088(get being b)-.18 F 1.088
(uilt, or the \214le name of the \214rst tar)-.2 F 1.089
(get if multiple tar)-.18 F 1.089(gets are)-.18 F(being b)144 148.8 Q
(uilt.)-.2 E -.93(TA)108 177.6 S(RGETS).93 E
(The \214le names of all tar)144 189.6 Q(gets being b)-.18 E(uilt.)-.2 E
(UNCHANGED_SOURCES)108 218.4 Q .171
(The \214le names of all sources of the b)144 230.4 R .171
(uild command that ha)-.2 F -.15(ve)-.2 G/F1 10/Times-Italic@0 SF(not)
3.181 E F0 .171(changed since the tar)3.351 F .171(get w)-.18 F .171
(as last)-.1 F -.2(bu)144 242.4 S(ilt.).2 E(UNCHANGED_T)108 271.2 Q
(ARGETS)-.93 E .46(The \214le names of all tar)144 283.2 R .46
(gets that w)-.18 F .46(ould be b)-.1 F .46(uilt from sources that ha)
-.2 F -.15(ve)-.2 G F1(not)3.47 E F0 .46(changed since the tar)3.64 F(-)
-.2 E(get w)144 295.2 Q(as last b)-.1 E(uilt.)-.2 E(\(Note that the abo)
144 319.2 Q .3 -.15(ve v)-.15 H(ariables are reserv)-.1 E
(ed and may not be set in a construction en)-.15 E(vironment.\))-.4 E
-.15(Fo)108 348 S 2.5(re).15 G(xample, gi)-2.65 E -.15(ve)-.25 G 2.5(nt)
.15 G(he construction v)-2.5 E(ariable CC='cc', tar)-.25 E
(gets=['foo'], and sources=['foo.c', 'bar)-.18 E(.c']:)-.55 E
(action='$CC -c -o $T)144 372 Q(ARGET $SOURCES')-.93 E -.1(wo)108 396 S
(uld produce the command line:).1 E(cc -c -o foo foo.c bar)144 420 Q(.c)
-.55 E -1.11(Va)108 444 S .696(riable names may be surrounded by curly \
braces \({}\) to separate the name from the trailing characters.)1.11 F
-.4(Wi)108 456 S .31(thin the curly braces, a v).4 F .31
(ariable name may ha)-.25 F .611 -.15(ve a P)-.2 H .311
(ython slice subscript appended to select one or more).15 F
(items from a list.)108 468 Q(In the pre)5 E(vious e)-.25 E
(xample, the string:)-.15 E(${SOURCES[1]})144 492 Q -.1(wo)108 516 S
(uld produce:).1 E(bar)144 540 Q(.c)-.55 E(Additionally)108 564 Q 4.227
(,av)-.65 G 1.726(ariable name may ha)-4.477 F 2.026 -.15(ve t)-.2 H
1.726(he follo).15 F 1.726
(wing special modi\214ers appended within the enclosing)-.25 F
(curly braces to modify the interpolated string:)108 576 Q(base)108
604.8 Q
(The base path of the \214le name, including the directory path b)144
604.8 Q(ut e)-.2 E(xcluding an)-.15 E 2.5(ys)-.15 G(uf)-2.5 E(\214x.)
-.25 E(dir)108 633.6 Q(The name of the directory in which the \214le e)
144 633.6 Q(xists.)-.15 E(\214le)108 662.4 Q(The \214le name, minus an)
144 662.4 Q 2.5(yd)-.15 G(irectory portion.)-2.5 E(\214lebase)108 691.2
Q(Just the basename of the \214le, minus an)144 691.2 Q 2.5(ys)-.15 G
(uf)-2.5 E(\214x and minus the directory)-.25 E(.)-.65 E(July 2010)
286.415 768 Q(142)199.415 E 0 Cg EP
%%Page: 143 143
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(suf)108 84
Q<8c78>-.25 E(Just the \214le suf)144 84 Q(\214x.)-.25 E(abspath)108
112.8 Q(The absolute path name of the \214le.)144 112.8 Q(posix)108
141.6 Q 1.235(The POSIX form of the path, with directories separated by)
144 141.6 R/F1 10/Times-Bold@0 SF(/)3.735 E F0(\(forw)3.735 E 1.235
(ard slashes\) not backslashes.)-.1 F .356
(This is sometimes necessary on W)144 153.6 R(indo)-.4 E .355
(ws systems when a path references a \214le on other \(POSIX\))-.25 F
(systems.)144 165.6 Q(srcpath)108 194.4 Q .627
(The directory and \214le name to the source \214le link)144 194.4 R
.628(ed to this \214le through)-.1 F F1 -.92(Va)3.128 G(riantDir).92 E
F0 3.128(\(\). If)B .628(this \214le)3.128 F(isn')144 206.4 Q 2.5(tl)
-.18 G(ink)-2.5 E
(ed, it just returns the directory and \214lename unchanged.)-.1 E
(srcdir)108 235.2 Q .834
(The directory containing the source \214le link)144 235.2 R .834
(ed to this \214le through)-.1 F F1 -.92(Va)3.334 G(riantDir).92 E F0
3.334(\(\). If)B .834(this \214le isn')3.334 F(t)-.18 E(link)144 247.2 Q
(ed, it just returns the directory part of the \214lename.)-.1 E
(rsrcpath)108 276 Q .759
(The directory and \214le name to the source \214le link)144 288 R .759
(ed to this \214le through)-.1 F F1 -.92(Va)3.259 G(riantDir).92 E F0
3.259(\(\). If)B .759(the \214le)3.259 F .475(does not e)144 300 R .475
(xist locally b)-.15 F .475(ut e)-.2 F .475(xists in a Repository)-.15 F
2.975(,t)-.65 G .475(he path in the Repository is returned.)-2.975 F
.475(If this \214le)5.475 F(isn')144 312 Q 2.5(tl)-.18 G(ink)-2.5 E
(ed, it just returns the directory and \214lename unchanged.)-.1 E
(rsrcdir)108 340.8 Q .107
(The Repository directory containing the source \214le link)144 340.8 R
.107(ed to this \214le through)-.1 F F1 -.92(Va)2.607 G(riantDir).92 E
F0 2.608(\(\). If)B(this)2.608 E(\214le isn')144 352.8 Q 2.5(tl)-.18 G
(ink)-2.5 E(ed, it just returns the directory part of the \214lename.)
-.1 E -.15(Fo)108 381.6 S 2.5(re).15 G(xample, the speci\214ed tar)-2.65
E(get will e)-.18 E(xpand as follo)-.15 E
(ws for the corresponding modi\214ers:)-.25 E($T)144 405.6 Q 32.5
(ARGET =>)-.93 F(sub/dir/\214le.x)2.5 E(${T)144 417.6 Q(ARGET)-.93 E 15
(.base} =>)-.74 F(sub/dir/\214le)2.5 E(${T)144 429.6 Q(ARGET)-.93 E 17.5
(.dir} =>)-.74 F(sub/dir)2.5 E(${T)144 441.6 Q(ARGET)-.93 E 15
(.\214le} =>)-.74 F(\214le.x)2.5 E(${T)144 453.6 Q(ARGET)-.93 E 5
(.\214lebase} =>)-.74 F(\214le)2.5 E(${T)144 465.6 Q(ARGET)-.93 E(.suf)
-.74 E 10(\214x} =>)-.25 F(.x)2.5 E(${T)144 477.6 Q(ARGET)-.93 E 7.5
(.abspath} =>)-.74 F(/top/dir/sub/dir/\214le.x)2.5 E(SConscript\(')144
501.6 Q(src/SConscript', v)-.55 E(ariant_dir=')-.25 E(sub/dir'\))-.55 E
32.5($SOURCE =>)144 513.6 R(sub/dir/\214le.x)2.5 E 7.5
(${SOURCE.srcpath} =>)144 525.6 R(src/\214le.x)2.5 E 10
(${SOURCE.srcdir} =>)144 537.6 R(src)2.5 E
(Repository\('/usr/repository'\))144 561.6 Q 32.5($SOURCE =>)144 573.6 R
(sub/dir/\214le.x)2.5 E 5(${SOURCE.rsrcpath} =>)144 585.6 R
(/usr/repository/src/\214le.x)2.5 E 7.5(${SOURCE.rsrcdir} =>)144 597.6 R
(/usr/repository/src)2.5 E .629(Note that curly braces braces may also \
be used to enclose arbitrary Python code to be e)108 621.6 R -.25(va)
-.25 G 3.128(luated. \(In).25 F -.1(fa)3.128 G(ct,).1 E .597(this is ho)
108 633.6 R 3.097(wt)-.25 G .597(he abo)-3.097 F .897 -.15(ve m)-.15 H
.598(odi\214ers are substituted, the).15 F 3.098(ya)-.15 G .598
(re simply attrib)-3.098 F .598(utes of the Python objects that repre-)
-.2 F 1.37(sent T)108 645.6 R(ARGET)-.93 E 3.87(,S)-.74 G 1.37
(OURCES, etc.\))-3.87 F 1.37
(See the section "Python Code Substitution," belo)6.37 F 2.67 -.65(w, f)
-.25 H 1.37(or more thorough).65 F -.15(ex)108 657.6 S(amples of ho).15
E 2.5(wt)-.25 G(his can be used.)-2.5 E(Lastly)108 681.6 Q 3.656(,av)
-.65 G 1.156(ariable name may be a callable Python function associated \
with a construction v)-3.906 F 1.157(ariable in the)-.25 F(en)108 693.6
Q 3.762(vironment. The)-.4 F 1.261(function should tak)3.762 F 3.761(ef)
-.1 G 1.261(our ar)-3.761 F(guments:)-.18 E/F2 10/Times-Italic@0 SF(tar)
3.891 E -.1(ge)-.37 G(t).1 E F0 3.761(-al)4.441 G 1.261(ist of tar)
-3.761 F 1.261(get nodes,)-.18 F F2(sour)4.101 E(ce)-.37 E F0 3.761(-al)
3.941 G 1.261(ist of)-3.761 F .932(source nodes,)108 705.6 R F2(en)3.622
E(v)-.4 E F0 3.432(-t)3.752 G .932(he construction en)-3.432 F
(vironment,)-.4 E F2(for_signatur)5.402 E(e)-.37 E F0 3.432(-aB)3.612 G
.932(oolean v)-3.432 F .933(alue that speci\214es whether)-.25 F .236
(the function is being called for generating a b)108 717.6 R .236
(uild signature.)-.2 F .235(SCons will insert whate)5.236 F -.15(ve)-.25
G 2.735(rt).15 G .235(he called function)-2.735 F(returns into the e)108
729.6 Q(xpanded string:)-.15 E(July 2010)286.415 768 Q(143)199.415 E 0
Cg EP
%%Page: 144 144
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(def foo\(tar)144 84 Q(get, source, en)-.18 E 1.3 -.65(v, f)-.4 H
(or_signature\):).65 E(return "bar")154 96 Q 2.5(#W)144 120 S(ill e)-2.9
E(xpand $B)-.15 E(AR to "bar baz")-.35 E(en)144 132 Q(v=En)-.4 E
(vironment\(FOO=foo, B)-.4 E(AR="$FOO baz"\))-.35 E -1.1(Yo)108 156 S
2.954(uc)1.1 G .454(an use this feature to pass ar)-2.954 F .454(gument\
s to a Python function by creating a callable class that stores one)-.18
F .176(or more ar)108 168 R .176
(guments in an object, and then uses them when the)-.18 F/F1 10
/Times-Bold@0 SF(__call__\(\))2.676 E F0 .176(method is called.)2.676 F
.175(Note that in this)5.175 F .712(case, the entire v)108 180 R .712
(ariable e)-.25 F .712
(xpansion must be enclosed by curly braces so that the ar)-.15 F .713
(guments will be associ-)-.18 F
(ated with the instantiation of the class:)108 192 Q(class foo:)144 216
Q(def __init__\(self, ar)154 228 Q(g\):)-.18 E(self.ar)164 240 Q 2.5
(g=a)-.18 G -.18(rg)-2.5 G(def __call__\(self, tar)154 264 Q
(get, source, en)-.18 E 1.3 -.65(v, f)-.4 H(or_signature\):).65 E
(return self.ar)164 276 Q 2.5(g+"b)-.18 G(ar")-2.5 E 2.5(#W)144 300 S
(ill e)-2.9 E(xpand $B)-.15 E(AR to "my ar)-.35 E(gument bar baz")-.18 E
(en)144 312 Q(v=En)-.4 E(vironment\(FOO=foo, B)-.4 E(AR="${FOO\('my ar)
-.35 E(gument'\)} baz"\))-.18 E .532(The special pseudo-v)108 340.8 R
(ariables)-.25 E F1($\()3.031 E F0(and)3.031 E F1($\))3.031 E F0 .531
(may be used to surround parts of a command line that may change)3.031 F
/F2 10/Times-Italic@0 SF(without)108.34 352.8 Q F0 .165(causing a reb)
3.345 F .165
(uild--that is, which are not included in the signature of tar)-.2 F
.166(get \214les b)-.18 F .166(uilt with this com-)-.2 F 3.015
(mand. All)108 364.8 R(te)3.015 E .515(xt between)-.15 F F1($\()3.015 E
F0(and)3.015 E F1($\))3.015 E F0 .515(will be remo)3.015 F -.15(ve)-.15
G 3.015(df).15 G .514
(rom the command line before it is added to \214le signa-)-3.015 F
(tures, and the)108 376.8 Q F1($\()2.5 E F0(and)2.5 E F1($\))2.5 E F0
(will be remo)2.5 E -.15(ve)-.15 G 2.5(db).15 G(efore the command is e)
-2.5 E -.15(xe)-.15 G 2.5(cuted. F).15 F(or e)-.15 E
(xample, the command line:)-.15 E(echo Last b)144 400.8 Q
(uild occurred $\( $T)-.2 E(OD)-.18 E 2.1 -1.05(AY $)-.4 H(\). > $T)1.05
E(ARGET)-.93 E -.1(wo)108 429.6 S(uld e).1 E -.15(xe)-.15 G
(cute the command:).15 E(echo Last b)144 453.6 Q(uild occurred $T)-.2 E
(OD)-.18 E -1.05(AY)-.4 G 2.5(.>$)-.24 G -.93(TA)-2.5 G(RGET).93 E -.2
(bu)108 482.4 S 2.5(tt).2 G(he command signature added to an)-2.5 E 2.5
(yt)-.15 G(ar)-2.5 E(get \214les w)-.18 E(ould be:)-.1 E(echo Last b)144
506.4 Q(uild occurred)-.2 E 2.5(.>$)5 G -.93(TA)-2.5 G(RGET).93 E F1
(Python Code Substitution)87 535.2 Q F0(An)108 547.2 Q 3.147(yp)-.15 G
.647(ython code within)-3.247 F F1(${)3.147 E F0(-)A F1(})A F0 .647
(pairs gets e)3.147 F -.25(va)-.25 G .647(luated by p).25 F .647
(ython 'e)-.1 F -.25(va)-.25 G .647(l', with the p).25 F .648
(ython globals set to the cur)-.1 F(-)-.2 E(rent en)108 559.2 Q
(vironment')-.4 E 2.5(ss)-.55 G(et of construction v)-2.5 E 2.5
(ariables. So)-.25 F(in the follo)2.5 E(wing case:)-.25 E(en)144 571.2 Q
(v['COND'] = 0)-.4 E(en)144 583.2 Q -.65(v.)-.4 G
(Command\('foo.out', 'foo.in',).65 E -.74(''')151.5 595.2 S
(echo ${COND==1 and 'FOO' or 'B).74 E(AR'} > $T)-.35 E(ARGET')-.93 E
-.74('')-.74 G(\)).74 E(the command e)108 607.2 Q -.15(xe)-.15 G
(cuted will be either).15 E(echo FOO > foo.out)144 619.2 Q(or)108 631.2
Q(echo B)144 643.2 Q(AR > foo.out)-.35 E 1.485
(according to the current v)108 655.2 R 1.484(alue of en)-.25 F 1.484
(v['COND'] when the command is e)-.4 F -.15(xe)-.15 G 3.984(cuted. The)
.15 F -.25(eva)3.984 G 1.484(luation occurs).25 F .481(when the tar)108
667.2 R .481(get is being b)-.18 F .482
(uilt, not when the SConscript is being read.)-.2 F .482(So if en)5.482
F .482(v['COND'] is changed later)-.4 F
(in the SConscript, the \214nal v)108 679.2 Q(alue will be used.)-.25 E
(Here')108 703.2 Q 2.754(sam)-.55 G .254(ore interesting e)-2.754 F
2.754(xample. Note)-.15 F .254(that all of COND, FOO, and B)2.754 F .253
(AR are en)-.35 F .253(vironment v)-.4 F .253(ariables, and)-.25 F .167
(their v)108 715.2 R .167
(alues are substituted into the \214nal command.)-.25 F .168
(FOO is a list, so its elements are interpolated separated)5.168 F
(by spaces.)108 727.2 Q(July 2010)286.415 768 Q(144)199.415 E 0 Cg EP
%%Page: 145 145
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(en)144 84 Q
(v=En)-.4 E(vironment\(\))-.4 E(en)144 96 Q(v['COND'] = 0)-.4 E(en)144
108 Q(v['FOO'] = ['foo1', 'foo2'])-.4 E(en)144 120 Q(v['B)-.4 E
(AR'] = 'barbar')-.35 E(en)144 132 Q -.65(v.)-.4 G
(Command\('foo.out', 'foo.in',).65 E('echo ${COND==1 and FOO or B)154
144 Q(AR} > $T)-.35 E(ARGET'\))-.93 E 2.5(#W)144 168 S(ill e)-2.9 E -.15
(xe)-.15 G(cute this:).15 E 5(#e)144 180 S(cho foo1 foo2 > foo.out)-5 E
(SCons uses the follo)108 204 Q(wing rules when con)-.25 E -.15(ve)-.4 G
(rting construction v).15 E(ariables into command lines:)-.25 E(String)
108 232.8 Q(When the v)144 232.8 Q(alue is a string it is interpreted a\
s a space delimited list of command line ar)-.25 E(guments.)-.18 E(List)
108 261.6 Q .429(When the v)144 261.6 R .429
(alue is a list it is interpreted as a list of command line ar)-.25 F
.429(guments. Each element of the)-.18 F(list is con)144 273.6 Q -.15
(ve)-.4 G(rted to a string.).15 E(Other)108 302.4 Q(An)144 302.4 Q .929
(ything that is not a list or string is con)-.15 F -.15(ve)-.4 G .93
(rted to a string and interpreted as a single command).15 F(line ar)144
314.4 Q(gument.)-.18 E(Ne)108 343.2 Q(wline)-.25 E(Ne)144 355.2 Q .827
(wline characters \(\\n\) delimit lines. The ne)-.25 F .827
(wline parsing is done after all other parsing, so it is)-.25 F .627
(not possible for ar)144 367.2 R .628
(guments \(e.g. \214le names\) to contain embedded ne)-.18 F .628
(wline characters. This limita-)-.25 F(tion will lik)144 379.2 Q
(ely go a)-.1 E -.1(wa)-.15 G 2.5(yi).1 G 2.5(naf)-2.5 G(uture v)-2.5 E
(ersion of SCons.)-.15 E/F1 10/Times-Bold@0 SF(Scanner Objects)87 408 Q
F0 -1.1(Yo)108 420 S 2.783(uc)1.1 G .283(an use the)-2.783 F F1(Scanner)
2.783 E F0 .282(function to de\214ne objects to scan ne)2.783 F 2.782
<778c>-.25 G .282(le types for implicit dependencies.)-2.782 F(Scan-)
5.282 E(ner accepts the follo)108 432 Q(wing ar)-.25 E(guments:)-.18 E
(function)108 460.8 Q .187(This can be either: 1\) a Python function th\
at will process the Node \(\214le\) and return a list of strings)144
472.8 R .75(\(\214le names\) representing the implicit dependencies fou\
nd in the contents; or: 2\) a dictionary that)144 484.8 R 1.651(maps k)
144 496.8 R -.15(ey)-.1 G 4.151(s\().15 G 1.651
(typically the \214le suf)-4.151 F 1.651(\214x, b)-.25 F 1.651
(ut see belo)-.2 F 4.151(wf)-.25 G 1.652
(or more discussion\) to other Scanners that)-4.151 F(should be called.)
144 508.8 Q(If the ar)144 532.8 Q
(gument is actually a Python function, the function must tak)-.18 E 2.5
(et)-.1 G(hree or four ar)-2.5 E(guments:)-.18 E
(def scanner_function\(node, en)154 556.8 Q 1.3 -.65(v, p)-.4 H(ath\):)
.65 E(def scanner_function\(node, en)154 580.8 Q 1.3 -.65(v, p)-.4 H
(ath, ar).65 E(g=None\):)-.18 E(The)144 604.8 Q F1(node)3.564 E F0(ar)
3.564 E 1.063
(gument is the internal SCons node representing the \214le.)-.18 F(Use)
6.063 E F1(str\(node\))3.563 E F0 1.063(to fetch the)3.563 F 1.127
(name of the \214le, and)144 616.8 R F1(node.get_contents\(\))3.627 E F0
1.128(to fetch contents of the \214le.)3.627 F 1.128
(Note that the \214le is)6.128 F/F2 10/Times-Italic@0 SF(not)3.988 E F0
.095(guaranteed to e)144 628.8 R .095(xist before the scanner is called\
, so the scanner function should check that if there')-.15 F(s)-.55 E
(an)144 640.8 Q 2.5(yc)-.15 G(hance that the scanned \214le might not e)
-2.5 E(xist \(for e)-.15 E(xample, if it')-.15 E 2.5(sb)-.55 G
(uilt from other \214les\).)-2.7 E(The)144 664.8 Q F1(en)3.781 E(v)-.4 E
F0(ar)3.781 E 1.281(gument is the construction en)-.18 F 1.281
(vironment for the scan.)-.4 F 1.282(Fetch v)6.281 F 1.282
(alues from it using the)-.25 F F1(en)144 676.8 Q -.7(v.)-.4 G
(Dictionary\(\)).7 E F0(method.)2.5 E(The)144 700.8 Q F1(path)2.538 E F0
(ar)2.538 E .038(gument is a tuple \(or list\) of directories that can \
be searched for \214les.)-.18 F .037(This will usually)5.037 F
(be the tuple returned by the)144 712.8 Q F1(path_function)2.5 E F0(ar)
2.5 E(gument \(see belo)-.18 E(w\).)-.25 E(July 2010)286.415 768 Q(145)
199.415 E 0 Cg EP
%%Page: 146 146
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(The)144 84
Q/F1 10/Times-Bold@0 SF(ar)2.5 E(g)-.1 E F0(ar)2.5 E(gument is the ar)
-.18 E(gument supplied when the scanner w)-.18 E(as created, if an)-.1 E
-.65(y.)-.15 G(name)108 112.8 Q(The name of the Scanner)144 112.8 Q 5
(.T)-.55 G(his is mainly used to identify the Scanner internally)-5 E(.)
-.65 E(ar)108 141.6 Q(gument)-.18 E .904(An optional ar)144 153.6 R .904
(gument that, if speci\214ed, will be passed to the scanner function \(\
described abo)-.18 F -.15(ve)-.15 G(\)).15 E
(and the path function \(speci\214ed belo)144 165.6 Q(w\).)-.25 E(sk)108
194.4 Q -.15(ey)-.1 G(s).15 E .39(An optional list that can be used to \
determine which scanner should be used for a gi)144 194.4 R -.15(ve)-.25
G 2.89(nN).15 G 2.89(ode. In)-2.89 F .738
(the usual case of scanning for \214le names, this ar)144 206.4 R .738
(gument will be a list of suf)-.18 F<8c78>-.25 E .738(es for the dif)
-.15 F(ferent)-.25 E .04(\214le types that this Scanner kno)144 218.4 R
.04(ws ho)-.25 F 2.54(wt)-.25 G 2.54(os)-2.54 G 2.54(can. If)-2.54 F .04
(the ar)2.54 F .04(gument is a string, then it will be e)-.18 F(xpanded)
-.15 E(into a list by the current en)144 230.4 Q(vironment.)-.4 E
(path_function)108 259.2 Q 3.403(AP)144 271.2 S .903
(ython function that tak)-3.403 F .903(es four or \214v)-.1 F 3.403(ea)
-.15 G -.18(rg)-3.403 G .903(uments: a construction en).18 F .904
(vironment, a Node for the)-.4 F .302
(directory containing the SConscript \214le in which the \214rst tar)144
283.2 R .302(get w)-.18 F .302(as de\214ned, a list of tar)-.1 F .301
(get nodes,)-.18 F 4.109(al)144 295.2 S 1.609
(ist of source nodes, and an optional ar)-4.109 F 1.61
(gument supplied when the scanner w)-.18 F 1.61(as created.)-.1 F(The)
6.61 E F1(path_function)144 307.2 Q F0 1.039(returns a tuple of directo\
ries that can be searched for \214les to be returned by this)3.539 F
2.206(Scanner object.)144 319.2 R 2.206(\(Note that the)7.206 F F1
(FindP)4.706 E(athDirs)-.1 E F0 2.206
(\(\) function can be used to return a ready-made)B F1(path_function)144
331.2 Q F0 .65(for a gi)3.15 F -.15(ve)-.25 G 3.15(nc).15 G .65
(onstruction v)-3.15 F .65(ariable name, instead of ha)-.25 F .65
(ving to write your o)-.2 F .65(wn func-)-.25 F(tion from scratch.\))144
343.2 Q(node_class)108 372 Q 1.221
(The class of Node that should be returned by this Scanner object.)144
384 R(An)6.221 E 3.722(ys)-.15 G 1.222(trings or other objects)-3.722 F
1.039(returned by the scanner function that are not of this class will \
be run through the)144 396 R F1(node_factory)3.538 E F0(function.)144
408 Q(node_f)108 436.8 Q(actory)-.1 E 3.458(AP)144 448.8 S .958
(ython function that will tak)-3.458 F 3.458(eas)-.1 G .959
(tring or other object and turn it into the appropriate class of)-3.458
F(Node to be returned by this Scanner object.)144 460.8 Q(scan_check)108
489.6 Q .905(An optional Python function that tak)144 501.6 R .904
(es tw)-.1 F 3.404(oa)-.1 G -.18(rg)-3.404 G .904
(uments, a Node \(\214le\) and a construction en).18 F(viron-)-.4 E .413
(ment, and returns whether the Node should, in f)144 513.6 R .413
(act, be scanned for dependencies.)-.1 F .414(This check can)5.414 F
.683(be used to eliminate unnecessary calls to the scanner function whe\
n, for e)144 525.6 R .682(xample, the underlying)-.15 F
(\214le represented by a Node does not yet e)144 537.6 Q(xist.)-.15 E
(recursi)108 566.4 Q -.15(ve)-.25 G .652(An optional \215ag that speci\
\214es whether this scanner should be re-in)144 578.4 R -.2(vo)-.4 G -.1
(ke).2 G 3.152(do).1 G 3.152(nt)-3.152 G .653(he dependenc)-3.152 F
3.153<798c>-.15 G(les)-3.153 E .462(returned by the scanner)144 590.4 R
5.462(.W)-.55 G .462
(hen this \215ag is not set, the Node subsystem will only in)-5.462 F
-.2(vo)-.4 G .661 -.1(ke t).2 H .461(he scan-).1 F .051
(ner on the \214le being scanned, and not \(for e)144 602.4 R .052
(xample\) also on the \214les speci\214ed by the #include lines)-.15 F
.122(in the \214le being scanned.)144 614.4 R/F2 10/Times-Italic@0 SF
-.37(re)5.122 G(cur).37 E(sive)-.1 E F0 .122
(may be a callable function, in which case it will be called with)2.802
F 2.673(al)144 626.4 S .173(ist of Nodes found and should return a list\
 of Nodes that should be scanned recursi)-2.673 F -.15(ve)-.25 G .174
(ly; this can).15 F(be used to select a speci\214c subset of Nodes for \
additional scanning.)144 638.4 Q .635(Note that)144 662.4 R F1(scons)
3.135 E F0 .635(has a global)3.135 F F1(Sour)3.135 E(ceFileScanner)-.18
E F0 .635(object that is used by the)3.135 F F1(Object)3.135 E F0(\(\),)
A F1(Shar)3.135 E(edOb-)-.18 E(ject)144 674.4 Q F0 .221(\(\), and)B F1
(StaticObject)2.721 E F0 .221(\(\) b)B .221
(uilders to decide which scanner should be used for dif)-.2 F .222
(ferent \214le e)-.25 F(xten-)-.15 E 3.986(sions. Y)144 686.4 R 1.486
(ou can using the)-1.1 F F1(Sour)3.986 E(ceFileScanner)-.18 E
(.add_scanner)-1 E F0 1.485(\(\) method to add your o)B 1.485
(wn Scanner)-.25 F .436(object to the)144 698.4 R F1(scons)2.937 E F0
.437(infrastructure that b)2.937 F .437(uilds tar)-.2 F .437
(get programs or libraries from a list of source \214les)-.18 F(of dif)
144 710.4 Q(ferent types:)-.25 E(July 2010)286.415 768 Q(146)199.415 E 0
Cg EP
%%Page: 147 147
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(def xyz_scan\(node, en)144 84 Q 1.3 -.65(v, p)-.4 H(ath\):).65 E
(contents = node.get_te)154 96 Q(xt_contents\(\))-.15 E 2.5(#S)154 108 S
(can the contents and return the included \214les.)-2.5 E
(XYZScanner = Scanner\(xyz_scan\))144 132 Q(SourceFileScanner)144 156 Q
(.add_scanner\('.xyx', XYZScanner\))-.55 E(en)144 180 Q -.65(v.)-.4 G
(Program\('my_prog', ['\214le1.c', '\214le2.f).65 E(', '\214le3.xyz']\))
.55 E/F1 10.95/Times-Bold@0 SF(SYSTEM-SPECIFIC BEHA)72 208.8 Q(VIOR)
-1.588 E F0 .357(SCons and its con\214guration \214les are v)108 220.8 R
.356(ery portable, due lar)-.15 F .356
(gely to its implementation in Python.)-.18 F .356(There are,)5.356 F
(ho)108 232.8 Q(we)-.25 E -.15(ve)-.25 G .8 -.4(r, a f).15 H .5 -.25
(ew p).4 H(ortability issues w).25 E(aiting to trap the unw)-.1 E(ary)
-.1 E(.)-.65 E/F2 10/Times-Bold@0 SF(.C \214le suf\214x)87 249.6 Q F0
.282(SCons handles the upper)108 261.6 R(-case)-.2 E F2(.C)2.782 E F0
.283(\214le suf)2.782 F .283(\214x dif)-.25 F(ferently)-.25 E 2.783(,d)
-.65 G .283(epending on the capabilities of the underlying sys-)-2.783 F
3.793(tem. On)108 273.6 R 3.793(ac)3.793 G(ase-sensiti)-3.793 E 1.593
-.15(ve s)-.25 H 1.293
(ystem such as Linux or UNIX, SCons treats a \214le with a).15 F F2(.C)
3.793 E F0(suf)3.793 E 1.293(\214x as a C++)-.25 F 1.447(source \214le.)
108 285.6 R 1.448(On a case-insensiti)6.447 F 1.748 -.15(ve s)-.25 H
1.448(ystem such as W).15 F(indo)-.4 E 1.448
(ws, SCons treats a \214le with a)-.25 F F2(.C)3.948 E F0(suf)3.948 E
1.448(\214x as a C)-.25 F(source \214le.)108 297.6 Q F2
(.F \214le suf\214x)87 314.4 Q F0 .357(SCons handles the upper)108 326.4
R(-case)-.2 E F2(.F)2.857 E F0 .357(\214le suf)2.857 F .357(\214x dif)
-.25 F(ferently)-.25 E 2.857(,d)-.65 G .356
(epending on the capabilities of the underlying sys-)-2.857 F 3.281
(tem. On)108 338.4 R 3.281(ac)3.281 G(ase-sensiti)-3.281 E 1.081 -.15
(ve s)-.25 H .781
(ystem such as Linux or UNIX, SCons treats a \214le with a).15 F F2(.F)
3.282 E F0(suf)3.282 E .782(\214x as a F)-.25 F(ortran)-.15 E .384(sour\
ce \214le that is to be \214rst run through the standard C preprocessor)
108 350.4 R 5.383(.O)-.55 G 2.883(nac)-5.383 G(ase-insensiti)-2.883 E
.683 -.15(ve s)-.25 H .383(ystem such as).15 F -.4(Wi)108 362.4 S(ndo).4
E .56(ws, SCons treats a \214le with a)-.25 F F2(.F)3.06 E F0(suf)3.06 E
.56(\214x as a F)-.25 F .56(ortran source \214le that should)-.15 F/F3
10/Times-Italic@0 SF(not)3.42 E F0 .56(be run through the C)3.74 F
(preprocessor)108 374.4 Q(.)-.55 E F2 -.18(Wi)87 391.2 S(ndo).18 E
(ws: Cygwin T)-.1 E(ools and Cygwin Python vs. W)-.92 E(indo)-.18 E
(ws Pythons)-.1 E F0 .394
(Cygwin supplies a set of tools and utilities that let users w)108 403.2
R .394(ork on a W)-.1 F(indo)-.4 E .394(ws system using a more POSIX-)
-.25 F(lik)108 415.2 Q 3.593(ee)-.1 G -.4(nv)-3.593 G 3.593
(ironment. The).4 F 1.093(Cygwin tools, including Cygwin Python, do thi\
s, in part, by sharing an ability to)3.593 F 1.266(interpret UNIX-lik)
108 427.2 R 3.766(ep)-.1 G 1.266(ath names.)-3.766 F -.15(Fo)6.266 G
3.766(re).15 G 1.266
(xample, the Cygwin tools will internally translate a Cygwin path)-3.916
F(name lik)108 439.2 Q 2.5(e/)-.1 G -.15(cy)-2.5 G(gdri).15 E -.15(ve)
-.25 G(/c/mydir to an equi).15 E -.25(va)-.25 G(lent W).25 E(indo)-.4 E
(ws pathname of C:/mydir \(equi)-.25 E -.25(va)-.25 G
(lent to C:\\mydir\).).25 E -1.11(Ve)108 463.2 S .151
(rsions of Python that are b)1.11 F .151(uilt for nati)-.2 F .451 -.15
(ve W)-.25 H(indo)-.25 E .151(ws e)-.25 F -.15(xe)-.15 G .151
(cution, such as the p).15 F(ython.or)-.1 E 2.652(ga)-.18 G .152
(nd Acti)-2.652 F -.15(ve)-.25 G .152(State v).15 F(er)-.15 E(-)-.2 E
.832(sions, do not ha)108 475.2 R 1.132 -.15(ve t)-.2 H .832
(he Cygwin path name semantics.).15 F .832(This means that using a nati)
5.832 F 1.131 -.15(ve W)-.25 H(indo)-.25 E .831(ws v)-.25 F .831
(ersion of)-.15 F 1.328(Python to b)108 487.2 R 1.329(uild compiled pro\
grams using Cygwin tools \(such as gcc, bison, and \215e)-.2 F 1.329
(x\) may yield unpre-)-.15 F .58(dictable results.)108 499.2 R .58
("Mixing and matching" in this w)5.58 F .579(ay can be made to w)-.1 F
.579(ork, b)-.1 F .579(ut it requires careful attention)-.2 F
(to the use of path names in your SConscript \214les.)108 511.2 Q .446
(In practice, users can sidestep the issue by adopting the follo)108
535.2 R .447(wing rules: When using gcc, use the Cygwin-)-.25 F 1.174
(supplied Python interpreter to run SCons; when using Microsoft V)108
547.2 R 1.173(isual C/C++ \(or some other W)-.6 F(indo)-.4 E(ws)-.25 E
(compiler\) use the p)108 559.2 Q(ython.or)-.1 E 2.5(go)-.18 G 2.5(rA)
-2.5 G(cti)-2.5 E -.15(ve)-.25 G(State v).15 E
(ersion of Python to run SCons.)-.15 E F2 -.18(Wi)87 576 S(ndo).18 E
(ws: scons.bat \214le)-.1 E F0(On W)108 588 Q(indo)-.4 E
(ws systems, SCons is e)-.25 E -.15(xe)-.15 G(cuted via a wrapper).15 E
F2(scons.bat)2.5 E F0 2.5(\214le. This)2.5 F(has \(at least\) tw)2.5 E
2.5(or)-.1 G(ami\214cations:)-2.5 E .16(First, W)108 612 R(indo)-.4 E
.16(ws command-line users that w)-.25 F .16(ant to use v)-.1 F .16
(ariable assignment on the command line may ha)-.25 F .46 -.15(ve t)-.2
H(o).15 E(put double quotes around the assignments:)108 624 Q
(scons "FOO=B)144 648 Q(AR" "B)-.35 E(AZ=BLEH")-.35 E .254(Second, the \
Cygwin shell does not recognize this \214le as being the same as an)108
672 R F2(scons)2.753 E F0 .253(command issued at the)2.753 F 1.305
(command-line prompt.)108 684 R -1.1(Yo)6.305 G 3.805(uc)1.1 G 1.305
(an w)-3.805 F 1.305(ork around this either by e)-.1 F -.15(xe)-.15 G
(cuting).15 E F2(scons.bat)3.805 E F0 1.305(from the Cygwin com-)3.805 F
(mand line, or by creating a wrapper shell script named)108 696 Q F2
(scons .)2.5 E F0(July 2010)286.415 768 Q(147)199.415 E 0 Cg EP
%%Page: 148 148
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(MinGW)87 84 Q F0 1.342
(The MinGW bin directory must be in your P)108 96 R -1.11(AT)-.92 G
3.842(He)1.11 G -.4(nv)-3.842 G 1.342(ironment v).4 F 1.342
(ariable or the P)-.25 F -1.11(AT)-.92 G 3.842(Hv)1.11 G 1.341
(ariable under the)-4.092 F .707(ENV construction v)108 108 R .708(aria\
ble for SCons to detect and use the MinGW tools. When running under the\
 nati)-.25 F -.15(ve)-.25 G -.4(Wi)108 120 S(ndo).4 E .95
(ws Python interpreter)-.25 F 3.45(,S)-.4 G .95
(Cons will prefer the MinGW tools o)-3.45 F -.15(ve)-.15 G 3.45(rt).15 G
.95(he Cygwin tools, if the)-3.45 F 3.45(ya)-.15 G .95(re both)-3.45 F
.766(installed, re)108 132 R -.05(ga)-.15 G .766
(rdless of the order of the bin directories in the P).05 F -1.11(AT)-.92
G 3.266(Hv)1.11 G .766(ariable. If you ha)-3.516 F 1.066 -.15(ve b)-.2 H
.767(oth MSVC and).15 F .141(MinGW installed and you w)108 144 R .141
(ant to use MinGW instead of MSVC, then you must e)-.1 F .14
(xplictly tell SCons to use)-.15 F(MinGW by passing)108 156 Q
(tools=['mingw'])144 180 Q(to the En)108 204 Q
(vironment\(\) function, because SCons will prefer the MSVC tools o)-.4
E -.15(ve)-.15 G 2.5(rt).15 G(he MinGW tools.)-2.5 E/F2 10.95
/Times-Bold@0 SF(EXAMPLES)72 232.8 Q F0 1.6 -.8(To h)108 244.8 T
(elp you get started using SCons, this section contains a brief o).8 E
-.15(ve)-.15 G(rvie).15 E 2.5(wo)-.25 G 2.5(fs)-2.5 G(ome common tasks.)
-2.5 E F1(Basic Compilation Fr)87 273.6 Q(om a Single Sour)-.18 E
(ce File)-.18 E F0(en)144 285.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(\)).4 E(en)144 297.6 Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'foo', source = 'foo.c'\))-.18 E 2.917(Note: Build)108 321.6 R
.418(the \214le by specifying the tar)2.917 F .418(get as an ar)-.18 F
.418(gument \("scons foo" or "scons foo.e)-.18 F -.15(xe)-.15 G 2.918
("\). or).15 F .418(by speci-)2.918 F(fying a dot \("scons ."\).)108
333.6 Q F1(Basic Compilation Fr)87 362.4 Q(om Multiple Sour)-.18 E
(ce Files)-.18 E F0(en)144 374.4 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(\)).4 E(en)144 386.4 Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'foo', source = Split\('f1.c f2.c f3.c'\)\))-.18 E F1
(Setting a Compilation Flag)87 415.2 Q F0(en)144 427.2 Q 2.5(v=E)-.4 G
-.4(nv)-2.5 G(ironment\(CCFLA).4 E(GS = '-g'\))-.4 E(en)144 439.2 Q -.65
(v.)-.4 G(Program\(tar).65 E(get = 'foo', source = 'foo.c'\))-.18 E F1
(Sear)87 468 Q(ch The Local Dir)-.18 E(ectory F)-.18 E(or .h Files)-.25
E F0 3.245(Note: Y)108 480 R .745(ou do)-1.1 F/F3 10/Times-Italic@0 SF
(not)3.605 E F0 .744(need to set CCFLA)3.925 F .744
(GS to specify -I options by hand.)-.4 F .744
(SCons will construct the right -I)5.744 F(options from CPPP)108 492 Q
-1.11(AT)-.92 G(H.)1.11 E(en)144 516 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(CPPP).4 E -1.11(AT)-.92 G 2.5(H=[)1.11 G('.)-2.5 E(']\))-.7 E
(en)144 528 Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'foo', source = 'foo.c'\))-.18 E F1(Sear)87 556.8 Q
(ch Multiple Dir)-.18 E(ectories F)-.18 E(or .h Files)-.25 E F0(en)144
568.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(CPPP).4 E -1.11(AT)-.92 G
2.5(H=[)1.11 G('include1', 'include2']\))-2.5 E(en)144 580.8 Q -.65(v.)
-.4 G(Program\(tar).65 E(get = 'foo', source = 'foo.c'\))-.18 E F1
(Building a Static Library)87 609.6 Q F0(en)144 621.6 Q 2.5(v=E)-.4 G
-.4(nv)-2.5 G(ironment\(\)).4 E(en)144 633.6 Q -.65(v.)-.4 G
(StaticLibrary\(tar).65 E(get = 'foo', source = Split\(')-.18 E
(l1.c l2.c'\)\))-.1 E(en)144 645.6 Q -.65(v.)-.4 G(StaticLibrary\(tar)
.65 E(get = 'bar', source = [')-.18 E(l3.c', ')-.1 E(l4.c']\))-.1 E F1
(Building a Shar)87 674.4 Q(ed Library)-.18 E F0(en)144 686.4 Q 2.5(v=E)
-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(en)144 698.4 Q -.65(v.)-.4 G
(SharedLibrary\(tar).65 E(get = 'foo', source = [')-.18 E(l5.c', ')-.1 E
(l6.c']\))-.1 E(en)144 710.4 Q -.65(v.)-.4 G(SharedLibrary\(tar).65 E
(get = 'bar', source = Split\(')-.18 E(l7.c l8.c'\)\))-.1 E(July 2010)
286.415 768 Q(148)199.415 E 0 Cg EP
%%Page: 149 149
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R/F1 10
/Times-Bold@0 SF(Linking a Local Library Into a Pr)87 84 Q(ogram)-.18 E
F0(en)144 96 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(LIBS = 'mylib', LIBP).4 E -1.11(AT)-.92 G 2.5(H=[)1.11 G('.)
-2.5 E(']\))-.7 E(en)144 108 Q -.65(v.)-.4 G(Library\(tar).65 E
(get = 'mylib', source = Split\(')-.18 E(l1.c l2.c'\)\))-.1 E(en)144 120
Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'prog', source = ['p1.c', 'p2.c']\))-.18 E F1(De\214ning Y)87
148.8 Q(our Own Builder Object)-1.11 E F0 .125(Notice that when you in)
108 160.8 R -.2(vo)-.4 G .325 -.1(ke t).2 H .125(he Builder).1 F 2.625
(,y)-.4 G .125(ou can lea)-2.625 F .425 -.15(ve o)-.2 H .626 -.25(ff t)
.15 H .126(he tar).25 F .126(get \214le suf)-.18 F .126
(\214x, and SCons will add it auto-)-.25 F(matically)108 172.8 Q(.)-.65
E(bld = Builder\(action = 'pdfte)144 196.8 Q 2.5(x<$)-.15 G
(SOURCES > $T)-2.5 E(ARGET')-.93 E(suf)179 208.8 Q(\214x = '.pdf)-.25 E
(',).55 E(src_suf)179 220.8 Q(\214x = '.te)-.25 E(x'\))-.15 E(en)144
232.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(B).4 E
(UILDERS = {'PDFBuilder' : bld}\))-.1 E(en)144 244.8 Q -.65(v.)-.4 G
(PDFBuilder\(tar).65 E(get = 'foo.pdf)-.18 E(', source = 'foo.te).55 E
(x'\))-.15 E 2.5(#T)144 268.8 S(he follo)-2.5 E(wing creates "bar)-.25 E
(.pdf" from "bar)-.55 E(.te)-.55 E(x")-.15 E(en)144 280.8 Q -.65(v.)-.4
G(PDFBuilder\(tar).65 E(get = 'bar', source = 'bar'\))-.18 E 1.119
(Note also that the abo)108 304.8 R 1.419 -.15(ve i)-.15 H 1.119
(nitialization o).15 F -.15(ve)-.15 G 1.119(rwrites the def).15 F 1.118
(ault Builder objects, so the En)-.1 F 1.118(vironment created)-.4 F
(abo)108 316.8 Q .3 -.15(ve c)-.15 H(an not be used call Builders lik)
.15 E 2.5(ee)-.1 G -.4(nv)-2.5 G(.Program\(\), en)-.25 E -.65(v.)-.4 G
(Object\(\), en).65 E -.65(v.)-.4 G(StaticLibrary\(\), etc.).65 E F1
(Adding Y)87 345.6 Q(our Own Builder Object to an En)-1.11 E(vir)-.4 E
(onment)-.18 E F0(bld = Builder\(action = 'pdfte)144 357.6 Q 2.5(x<$)
-.15 G(SOURCES > $T)-2.5 E(ARGET')-.93 E(suf)179 369.6 Q(\214x = '.pdf)
-.25 E(',).55 E(src_suf)179 381.6 Q(\214x = '.te)-.25 E(x'\))-.15 E(en)
144 393.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(en)144 405.6 Q
-.65(v.)-.4 G(Append\(B).65 E(UILDERS = {'PDFBuilder' : bld}\))-.1 E(en)
144 417.6 Q -.65(v.)-.4 G(PDFBuilder\(tar).65 E(get = 'foo.pdf)-.18 E
(', source = 'foo.te).55 E(x'\))-.15 E(en)144 429.6 Q -.65(v.)-.4 G
(Program\(tar).65 E(get = 'bar', source = 'bar)-.18 E(.c'\))-.55 E -1.1
(Yo)108 453.6 S 2.5(ua)1.1 G
(lso can use other Pythonic techniques to add to the B)-2.5 E
(UILDERS construction v)-.1 E(ariable, such as:)-.25 E(en)144 477.6 Q
2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(en)144 489.6 Q(v['B)-.4 E
(UILDERS]['PDFBuilder'] = bld)-.1 E F1(De\214ning Y)87 518.4 Q
(our Own Scanner Object)-1.11 E F0 1.05(The follo)108 530.4 R 1.05
(wing e)-.25 F 1.05(xample sho)-.15 F 1.05(ws an e)-.25 F 1.051
(xtremely simple scanner \(the)-.15 F F1(k\214le_scan)3.551 E F0 1.051
(\(\) function\) that doesn')B 3.551(tu)-.18 G 1.051(se a)-3.551 F .715
(search path at all and simply returns the \214le names present on an)
108 542.4 R(y)-.15 E F1(include)3.215 E F0 .714
(lines in the scanned \214le.)3.215 F(This)5.714 E -.1(wo)108 554.4 S
(uld implicitly assume that all included \214les li).1 E .3 -.15(ve i)
-.25 H 2.5(nt).15 G(he top-le)-2.5 E -.15(ve)-.25 G 2.5(ld).15 G
(irectory:)-2.5 E(import re)144 578.4 Q
(include_re = re.compile\(r'^include\\s+\(\\S+\)$', re.M\))144 602.4 Q
(def k\214le_scan\(node, en)144 626.4 Q 1.3 -.65(v, p)-.4 H(ath, ar).65
E(g\):)-.18 E(contents = node.get_te)154 638.4 Q(xt_contents\(\))-.15 E
(includes = include_re.\214ndall\(contents\))154 650.4 Q
(return includes)154 662.4 Q(kscan = Scanner\(name = 'k\214le',)144
686.4 Q(function = k\214le_scan,)184 698.4 Q(ar)184 710.4 Q
(gument = None,)-.18 E(sk)184 722.4 Q -.15(ey)-.1 G 2.5(s=[).15 G
('.k']\))-2.5 E(July 2010)286.415 768 Q(149)199.415 E 0 Cg EP
%%Page: 150 150
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(scanners = En)144 84 Q(vironment\(\).Dictionary\('SCANNERS'\))-.4 E(en)
144 96 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(SCANNERS = scanners + [kscan]\)).4 E(en)144 120 Q -.65(v.)-.4
G(Command\('foo', 'foo.k', 'kprocess < $SOURCES > $T).65 E(ARGET'\))-.93
E(bar_in = File\('bar)144 144 Q(.in'\))-.55 E(en)144 156 Q -.65(v.)-.4 G
(Command\('bar', bar_in, 'kprocess $SOURCES > $T).65 E(ARGET'\))-.93 E
(bar_in.tar)144 168 Q(get_scanner = kscan)-.18 E .259
(Here is a similar b)108 192 R .259(ut more complete e)-.2 F .26
(xample that searches a path of directories \(speci\214ed as the)-.15 F
/F1 10/Times-Bold@0 SF(MYP)2.76 E -.95(AT)-.74 G(H).95 E F0
(construction v)108 204 Q(ariable\) for \214les that actually e)-.25 E
(xist:)-.15 E(include_re = re.compile\(r'^include\\s+\(\\S+\)$', re.M\))
144 228 Q(def my_scan\(node, en)144 252 Q 1.3 -.65(v, p)-.4 H(ath, ar)
.65 E(g\):)-.18 E(contents = node.get_te)151.5 264 Q(xt_contents\(\))
-.15 E(includes = include_re.\214ndall\(contents\))151.5 276 Q
(if includes == []:)151.5 288 Q(return [])164 300 Q(results = [])154 312
Q(for inc in includes:)154 324 Q(for dir in path:)164 336 Q
(\214le = dir + os.sep + inc)174 348 Q(if os.path.e)174 360 Q
(xists\(\214le\):)-.15 E(results.append\(\214le\))184 372 Q(break)184
384 Q(return results)154 396 Q(scanner = Scanner\(name = 'myscanner',)
144 420 Q(function = my_scan,)186.5 432 Q(ar)186.5 444 Q(gument = None,)
-.18 E(sk)186.5 456 Q -.15(ey)-.1 G 2.5(s=[).15 G('.x'],)-2.5 E
(path_function = FindP)186.5 468 Q(athDirs\('MYP)-.15 E -1.11(AT)-.92 G
(H'\),)1.11 E(\))186.5 480 Q(scanners = En)144 492 Q
(vironment\(\).Dictionary\('SCANNERS'\))-.4 E(en)144 504 Q 2.5(v=E)-.4 G
-.4(nv)-2.5 G(ironment\(SCANNERS = scanners + [scanner]\)).4 E(The)108
528 Q F1(FindP)3.398 E(athDirs)-.1 E F0 .897
(\(\) function used in the pre)B .897(vious e)-.25 F .897
(xample returns a function \(actually a callable Python)-.15 F .121
(object\) that will return a list of directories speci\214ed in the)108
540 R F1($MYP)2.621 E -.95(AT)-.74 G(H).95 E F0 .121(construction v)
2.621 F 2.621(ariable. If)-.25 F .122(you need to)2.622 F .19
(customize ho)108 552 R 2.69(wt)-.25 G .19(he search path is deri)-2.69
F -.15(ve)-.25 G .189(d, you w).15 F .189(ould pro)-.1 F .189
(vide your o)-.15 F(wn)-.25 E F1(path_function)2.689 E F0(ar)2.689 E
.189(gument when cre-)-.18 F(ating the Scanner object, as follo)108 564
Q(ws:)-.25 E 2.5(#M)144 588 S(YP)-2.5 E -1.11(AT)-.92 G 2.5(Hi)1.11 G
2.5(sal)-2.5 G(ist of directories to search for \214les in)-2.5 E
(def pf\(en)144 600 Q 1.3 -.65(v, d)-.4 H(ir).65 E 2.5(,t)-.4 G(ar)-2.5
E(get, source, ar)-.18 E(g\):)-.18 E(top_dir = Dir\('#'\).abspath)154
612 Q(results = [])154 624 Q(if en)154 636 Q -.65(v.)-.4 G(has_k).65 E
-.15(ey)-.1 G(\('MYP).15 E -1.11(AT)-.92 G(H'\):)1.11 E(for p in en)164
648 Q(v['MYP)-.4 E -1.11(AT)-.92 G(H']:)1.11 E
(results.append\(top_dir + os.sep + p\))174 660 Q(return results)154 672
Q(scanner = Scanner\(name = 'myscanner',)144 696 Q(function = my_scan,)
186.5 708 Q(ar)186.5 720 Q(gument = None,)-.18 E(July 2010)286.415 768 Q
(150)199.415 E 0 Cg EP
%%Page: 151 151
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R(sk)186.5 84
Q -.15(ey)-.1 G 2.5(s=[).15 G('.x'],)-2.5 E(path_function = pf,)186.5 96
Q(\))186.5 108 Q/F1 10/Times-Bold@0 SF(Cr)87 136.8 Q(eating a Hierar)
-.18 E(chical Build)-.18 E F0
(Notice that the \214le names speci\214ed in a subdirectory')108 148.8 Q
2.5(sS)-.55 G(Conscript \214le are relati)-2.5 E .3 -.15(ve t)-.25 H 2.5
(ot).15 G(hat subdirectory)-2.5 E(.)-.65 E(SConstruct:)144 172.8 Q(en)
154 196.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E(en)154 208.8 Q
-.65(v.)-.4 G(Program\(tar).65 E(get = 'foo', source = 'foo.c'\))-.18 E
(SConscript\(')154 232.8 Q(sub/SConscript'\))-.55 E(sub/SConscript:)144
256.8 Q(en)154 280.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E 2.5
(#B)154 292.8 S(uilds sub/foo from sub/foo.c)-2.5 E(en)154 304.8 Q -.65
(v.)-.4 G(Program\(tar).65 E(get = 'foo', source = 'foo.c'\))-.18 E
(SConscript\(')154 328.8 Q(dir/SConscript'\))-.5 E(sub/dir/SConscript:)
144 352.8 Q(en)154 376.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(\)).4 E
2.5(#B)154 388.8 S(uilds sub/dir/foo from sub/dir/foo.c)-2.5 E(en)154
400.8 Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'foo', source = 'foo.c'\))-.18 E F1(Sharing V)87 429.6 Q
(ariables Between SConscript Files)-.92 E F0 -1.1(Yo)108 441.6 S 2.5(um)
1.1 G(ust e)-2.5 E(xplicitly Export\(\) and Import\(\) v)-.15 E
(ariables that you w)-.25 E(ant to share between SConscript \214les.)-.1
E(SConstruct:)144 465.6 Q(en)154 489.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(\)).4 E(en)154 501.6 Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'foo', source = 'foo.c'\))-.18 E(Export\("en)154 525.6 Q(v"\))-.4
E(SConscript\(')154 537.6 Q(subdirectory/SConscript'\))-.55 E
(subdirectory/SConscript:)144 561.6 Q(Import\("en)154 585.6 Q(v"\))-.4 E
(en)154 597.6 Q -.65(v.)-.4 G(Program\(tar).65 E
(get = 'foo', source = 'foo.c'\))-.18 E F1(Building Multiple V)87 626.4
Q(ariants Fr)-.92 E(om the Same Sour)-.18 E(ce)-.18 E F0 .447(Use the v)
108 638.4 R .447(ariant_dir k)-.25 F -.15(ey)-.1 G -.1(wo).15 G .447
(rd ar).1 F .447
(gument to the SConscript function to establish one or more separate v)
-.18 F(ariant)-.25 E -.2(bu)108 650.4 S(ild directory trees for a gi).2
E -.15(ve)-.25 G 2.5(ns).15 G(ource directory:)-2.5 E(SConstruct:)144
674.4 Q(cppde\214nes = ['FOO'])154 698.4 Q(Export\("cppde\214nes"\))154
710.4 Q(SConscript\(')154 722.4 Q(src/SConscript', v)-.55 E
(ariant_dir='foo'\))-.25 E(July 2010)286.415 768 Q(151)199.415 E 0 Cg EP
%%Page: 152 152
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(cppde\214nes = ['B)154 84 Q(AR'])-.35 E(Export\("cppde\214nes"\))154 96
Q(SConscript\(')154 108 Q(src/SConscript', v)-.55 E(ariant_dir='bar'\))
-.25 E(src/SConscript:)144 132 Q(Import\("cppde\214nes"\))154 156 Q(en)
154 168 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(CPPDEFINES = cppde\214nes\)).4 E(en)154 180 Q -.65(v.)-.4 G
(Program\(tar).65 E(get = ')-.18 E(src', source = ')-.55 E(src.c'\))-.55
E .583
(Note the use of the Export\(\) method to set the "cppde\214nes" v)108
204 R .582(ariable to a dif)-.25 F .582(ferent v)-.25 F .582
(alue each time we call)-.25 F(the SConscript function.)108 216 Q/F1 10
/Times-Bold@0 SF(Hierar)87 244.8 Q(chical Build of T)-.18 E .2 -.1(wo L)
-.74 H(ibraries Link).1 E(ed W)-.1 E(ith a Pr)-.18 E(ogram)-.18 E F0
(SConstruct:)144 256.8 Q(en)154 280.8 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G
(ironment\(LIBP).4 E -1.11(AT)-.92 G 2.5(H=[)1.11 G('#libA)-2.5 E
(', '#libB']\))-1.11 E(Export\('en)154 292.8 Q(v'\))-.4 E(SConscript\(')
154 304.8 Q(libA/SConscript'\))-.1 E(SConscript\(')154 316.8 Q
(libB/SConscript'\))-.1 E(SConscript\('Main/SConscript'\))154 328.8 Q
(libA/SConscript:)144 352.8 Q(Import\('en)154 376.8 Q(v'\))-.4 E(en)154
388.8 Q -.65(v.)-.4 G(Library\('a', Split\('a1.c a2.c a3.c'\)\)).65 E
(libB/SConscript:)144 412.8 Q(Import\('en)154 436.8 Q(v'\))-.4 E(en)154
448.8 Q -.65(v.)-.4 G(Library\('b', Split\('b1.c b2.c b3.c'\)\)).65 E
(Main/SConscript:)144 472.8 Q(Import\('en)154 496.8 Q(v'\))-.4 E 2.5
(e=e)154 508.8 S -.4(nv)-2.5 G(.Cop)-.25 E(y\(LIBS = ['a', 'b']\))-.1 E
(e.Program\('foo', Split\('m1.c m2.c m3.c'\)\))154 520.8 Q .155
(The '#' in the LIBP)108 544.8 R -1.11(AT)-.92 G 2.656(Hd)1.11 G .156
(irectories specify that the)-2.656 F(y')-.15 E .156(re relati)-.5 F
.456 -.15(ve t)-.25 H 2.656(ot).15 G .156(he top-le)-2.656 F -.15(ve)
-.25 G 2.656(ld).15 G(irectory)-2.656 E 2.656(,s)-.65 G 2.656(ot)-2.656
G(he)-2.656 E 2.656(yd)-.15 G(on')-2.656 E 2.656(tt)-.18 G(urn)-2.656 E
(into "Main/libA" when the)108 556.8 Q(y')-.15 E
(re used in Main/SConscript.)-.5 E .251
(Specifying only 'a' and 'b' for the library names allo)108 580.8 R .251
(ws SCons to append the appropriate library pre\214x and)-.25 F(suf)108
592.8 Q(\214x for the current platform \(for e)-.25 E(xample, ')-.15 E
(liba.a' on POSIX systems, 'a.lib' on W)-.1 E(indo)-.4 E(ws\).)-.25 E F1
(Customizing construction v)87 621.6 Q(ariables fr)-.1 E
(om the command line.)-.18 E F0(The follo)108 633.6 Q(wing w)-.25 E
(ould allo)-.1 E 2.5(wt)-.25 G(he C compiler to be speci\214ed on the c\
ommand line or in the \214le custom.p)-2.5 E -.65(y.)-.1 G -.25(va)144
657.6 S(rs = V).25 E(ariables\('custom.p)-1.11 E(y'\))-.1 E -.25(va)144
669.6 S(rs.Add\('CC', 'The C compiler).25 E -.7(.')-.55 G(\)).7 E(en)144
681.6 Q 2.5(v=E)-.4 G -.4(nv)-2.5 G(ironment\(v).4 E(ariables=v)-.25 E
(ars\))-.25 E(Help\(v)144 693.6 Q(ars.GenerateHelpT)-.25 E -.15(ex)-.7 G
(t\(en).15 E(v\)\))-.4 E
(The user could specify the C compiler on the command line:)108 717.6 Q
(July 2010)286.415 768 Q(152)199.415 E 0 Cg EP
%%Page: 153 153
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(scons "CC=my_cc")144 84 Q(or in the custom.p)108 108 Q 2.5<798c>-.1 G
(le:)-2.5 E(CC = 'my_cc')144 132 Q(or get documentation on the options:)
108 156 Q 2.5($s)144 180 S(cons -h)-2.5 E(CC: The C compiler)144 204 Q
(.)-.55 E(def)154 216 Q(ault: None)-.1 E(actual: cc)154 228 Q/F1 10
/Times-Bold@0 SF(Using Micr)87 268.8 Q(osoft V)-.18 E(isual C++ pr)-.37
E(ecompiled headers)-.18 E F0 .884(Since windo)108 280.8 R .884
(ws.h includes e)-.25 F -.15(ve)-.25 G .884
(rything and the kitchen sink, it can tak).15 F 3.384(eq)-.1 G .884
(uite some time to compile it o)-3.384 F -.15(ve)-.15 G(r).15 E .615
(and o)108 292.8 R -.15(ve)-.15 G 3.115(ra).15 G -.05(ga)-3.115 G .615
(in for a b).05 F .614(unch of object \214les, so Microsoft pro)-.2 F
.614(vides a mechanism to compile a set of headers)-.15 F .137
(once and then include the pre)108 304.8 R .137
(viously compiled headers in an)-.25 F 2.637(yo)-.15 G .137
(bject \214le. This technology is called precom-)-2.637 F .052(piled he\
aders. The general recipe is to create a \214le named "StdAfx.cpp" that\
 includes a single header named)108 316.8 R 2.072
("StdAfx.h", and then include e)108 328.8 R -.15(ve)-.25 G 2.072
(ry header you w).15 F 2.072
(ant to precompile in "StdAfx.h", and \214nally include)-.1 F("StdAfx.h\
" as the \214rst header in all the source \214les you are compiling to \
object \214les. F)108 340.8 Q(or e)-.15 E(xample:)-.15 E(StdAfx.h:)108
364.8 Q(#include <windo)144 376.8 Q(ws.h>)-.25 E
(#include <my_big_header)144 388.8 Q(.h>)-.55 E(StdAfx.cpp:)108 412.8 Q
(#include <StdAfx.h>)144 424.8 Q -.15(Fo)108 448.8 S(o.cpp:).15 E
(#include <StdAfx.h>)144 460.8 Q(/* do some stuf)144 484.8 Q 2.5(f*)-.25
G(/)-2.5 E(Bar)108 508.8 Q(.cpp:)-.55 E(#include <StdAfx.h>)144 520.8 Q
(/* do some other stuf)144 544.8 Q 2.5(f*)-.25 G(/)-2.5 E(SConstruct:)
108 568.8 Q(en)144 580.8 Q(v=En)-.4 E(vironment\(\))-.4 E(en)144 592.8 Q
(v['PCHST)-.4 E(OP'] = 'StdAfx.h')-.18 E(en)144 604.8 Q(v['PCH'] = en)
-.4 E -.65(v.)-.4 G(PCH\('StdAfx.cpp'\)[0]).65 E(en)144 616.8 Q -.65(v.)
-.4 G(Program\('MyApp', ['F).65 E(oo.cpp', 'Bar)-.15 E(.cpp']\))-.55 E
-.15(Fo)108 640.8 S 2.51(rm).15 G .01
(ore information see the document for the PCH b)-2.51 F(uilder)-.2 E
2.51(,a)-.4 G .01(nd the PCH and PCHST)-2.51 F .01(OP construction v)
-.18 F(ari-)-.25 E .474(ables. T)108 652.8 R 2.974(ol)-.8 G .474(earn a\
bout the details of precompiled headers consult the MSDN documention fo\
r /Yc, /Y)-2.974 F .475(u, and)-1.11 F(/Yp.)108 664.8 Q F1(Using Micr)87
693.6 Q(osoft V)-.18 E(isual C++ exter)-.37 E(nal deb)-.15 E(ugging inf)
-.2 E(ormation)-.25 E F0 .06(Since including deb)108 705.6 R .059(uggin\
g information in programs and shared libraries can cause their size to \
increase sig-)-.2 F(ni\214cantly)108 717.6 Q 4.283(,M)-.65 G 1.783
(icrosoft pro)-4.283 F 1.784(vides a mechanism for including the deb)
-.15 F 1.784(ugging information in an e)-.2 F 1.784(xternal \214le)-.15
F(called a PDB \214le. SCons supports PDB \214les through the PDB const\
ruction v)108 729.6 Q(ariable.)-.25 E(July 2010)286.415 768 Q(153)
199.415 E 0 Cg EP
%%Page: 154 154
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 377.72(SCONS\(1\) SCONS\(1\))72 48 R
(SConstruct:)108 84 Q(en)144 96 Q(v=En)-.4 E(vironment\(\))-.4 E(en)144
108 Q(v['PDB'] = 'MyApp.pdb')-.4 E(en)144 120 Q -.65(v.)-.4 G
(Program\('MyApp', ['F).65 E(oo.cpp', 'Bar)-.15 E(.cpp']\))-.55 E -.15
(Fo)108 144 S 2.5(rm).15 G
(ore information see the document for the PDB construction v)-2.5 E
(ariable.)-.25 E/F1 10.95/Times-Bold@0 SF(ENVIR)72 172.8 Q(ONMENT)-.329
E F0(SCONS_LIB_DIR)108 184.8 Q .221(Speci\214es the directory that cont\
ains the SCons Python module directory \(e.g. /home/aroach/scons-)144
196.8 R(src-0.01/src/engine\).)144 208.8 Q(SCONSFLA)108 237.6 Q(GS)-.4 E
2.5(As)144 249.6 S(tring of options that will be used by scons in addit\
ion to those passed on the command line.)-2.5 E F1(SEE ALSO)72 278.4 Q
/F2 10/Times-Bold@0 SF(scons)108 290.4 Q F0(User Manual,)2.5 E F2(scons)
2.5 E F0(Design Document,)2.5 E F2(scons)2.5 E F0(source code.)2.5 E F1
-.548(AU)72 319.2 S(THORS).548 E F0(Ste)108 331.2 Q -.15(ve)-.25 G 2.5
(nK).15 G(night <knight@baldmt.com>)-2.5 E(Anthon)108 343.2 Q 2.5(yR)
-.15 G(oach <aroach@electrice)-2.5 E(yeball.com>)-.15 E(July 2010)
286.415 768 Q(154)199.415 E 0 Cg EP
%%Trailer
end
%%EOF
