SCons 4.4.0

MAN page

The SCons Development Team

   Version 4.4.0

   Copyright © 2001 - 2022 The SCons Foundation

   Released Sat, 30 Jul 2022 14:09:41 -0700
     __________________________________________________________________

Name

   scons -- a software construction tool

Synopsis

   scons [options...] [name=val...] [targets...]

DESCRIPTION

   scons orchestrates the construction of software (and other tangible
   products such as documentation files) by determining which component
   pieces must be built or rebuilt and invoking the necessary commands to
   build them. SCons offers many features to improve developer
   productivity such as parallel builds, caching of build artifacts,
   automatic dependency scanning, and a database of information about
   previous builds so details do not have to be recalculated each run.

   scons requires Python 3.6 or later to run; there should be no other
   dependencies or requirements. unless the experimental Ninja tool is
   used. Support for Python 3.5 is removed since SCons 4.3.0. The CPython
   project has retired 3.5: [1]https://www.python.org/dev/peps/pep-0478.

   You set up an SCons build system by writing a script that describes
   things to build (targets), and, if necessary, the rules to build those
   files (actions). SCons comes with a collection of Builder methods which
   apply premade actions for building many common software components such
   as executable programs, object files and libraries, so that for many
   software projects, only the targets and input files (sources) need be
   specified in a call to a builder. SCons thus can operate at a level of
   abstraction above that of pure filenames. For example if you specify a
   library target named "foo", SCons keeps track of the actual operating
   system dependent filename (such as libfoo.so on a GNU/Linux system),
   and how to refer to that library in later construction steps that want
   to use it, so you don't have to specify that precise information
   yourself. SCons can also scan automatically for dependency information,
   such as header files included by source code files (for example,
   #include preprocessor directives in C or C++ files), so these implicit
   dependencies do not have to be specified manually. SCons supports the
   ability to define new scanners to support additional input file types.

   Information about files involved in the build, including a
   cryptographic hash of the contents, is cached for later reuse. By
   default this hash (the content signature) is used to determine if a
   file has changed since the last build, but this can be controlled by
   selecting an appropriate [2]Decider function. Implicit dependency files
   are also part of out-of-date computation. The scanned implicit
   dependency information can optionally be cached and used to speed up
   future builds. A hash of each executed build action (the build
   signature is cached, so that changes to build instructions (changing
   flags, etc.) or to the build tools themselves (new version) can also
   trigger a rebuild.

   When invoked, scons looks for a file named SConstruct in the current
   directory and reads the build configuration from that file (other names
   are allowed, see [3]the section called "SConscript Files" for more
   information). The SConstruct file may specify subsidiary configuration
   files by calling the [4]SConscript function. By convention, these
   subsidiary files are named SConscript, although any name may be used.
   As a result of this naming convention, the term SConscript files is
   used to refer generically to the complete set of configuration files
   for a project (including the SConstruct file), regardless of the actual
   file names or number of such files.

   Before reading the SConscript files, scons looks for a directory named
   site_scons in various system directories and in the directory
   containing the SConstruct file or, if specified, the directory from the
   [5]--site-dir option instead, and prepends the ones it finds to the
   Python module search path (sys.path), thus allowing modules in such
   directories to be imported in the normal Python way in SConscript
   files. For each found site directory, (1) if it contains a file
   site_init.py that file is evaluated, and (2) if it contains a directory
   site_tools the path to that directory is prepended to the default
   toolpath. See the [6]--site-dir and [7]--no-site-dir options for
   details on default paths and controlling the site directories.

   SConscript files are written in the Python programming language,
   although it is normally not necessary to be a Python programmer to use
   scons effectively. SConscript files are invoked in a context that makes
   the facilities described in this manual page available in their local
   namespace without any special steps. Standard Python scripting
   capabilities such as flow control, data manipulation, and imported
   Python libraries are available to use to handle complicated build
   situations. Other Python files can be made a part of the build system,
   but they do not automatically have the SCons context and need to import
   it if they need access (described later).

   scons reads and executes all of the included SConscript files before it
   begins building any targets. To make this clear, scons prints the
   following messages about what it is doing:
$ scons foo.out
scons: Reading SConscript files ...
scons: done reading SConscript files.
scons: Building targets  ...
cp foo.in foo.out
scons: done building targets.
$

   The status messages (lines beginning with the scons: tag) may be
   suppressed using the [8]-Q option.

   To assure reproducible builds, SCons uses a restricted execution
   environment for running external commands used to build targets, rather
   then propagating the full environment in effect at the time scons was
   called. This helps avoid problems like picking up accidental settings,
   temporary debug values that are no longer needed, or one developer
   having different settings than another (or than the CI/CD pipeline).
   Environment variables that are needed for proper operation of such
   commands need to be set explicitly, which can be done either by
   assigning the desired values, or by picking values individually out of
   environment variables using the Python os.environ dictionary. The
   execution environment for a given construction environment is contained
   in its [9]$ENV construction variable. A few environment variables are
   picked up automatically - see [10]the section called "ENVIRONMENT").

   In particular, if the compiler or other commands that you want to use
   to build your target files are not in standard system locations, scons
   will not find them unless you explicitly include the locations into the
   PATH element of the execution environment. One example approach is to
   extract the entire PATH environment variable and set that into the
   execution environment:
import os
env = Environment(ENV={'PATH': os.environ['PATH']})

   Similarly, if the commands use specific external environment variables
   that scons does not recognize, they can be propagated into the
   execution environment:
import os

env = Environment(
    ENV={
        'PATH': os.environ['PATH'],
        'ANDROID_HOME': os.environ['ANDROID_HOME'],
        'ANDROID_NDK_HOME': os.environ['ANDROID_NDK_HOME'],
    }
)

   Or you may explicitly propagate the invoking user's complete external
   environment:
import os
env = Environment(ENV=os.environ.copy())

   This comes at the expense of making your build dependent on the user's
   environment being set correctly, but it may be more convenient for many
   configurations. It should not cause problems if done in a build setup
   which tightly controls how the environment is set up before invoking
   scons, as in many continuous integration setups.

   scons is normally executed in a top-level directory containing an
   SConstruct file. When scons is invoked, the command line (including the
   contents of the [11]SCONSFLAGS environment variable, if set) is
   processed. Command-line options (see [12]the section called "OPTIONS")
   are consumed. Any variable argument assignments are collected, and
   remaining arguments are taken as targets to build.

   Values of variables to be passed to the SConscript files may be
   specified on the command line:
scons debug=1

   These variables are available through the [13]ARGUMENTS dictionary, and
   can be used in the SConscript files to modify the build in any way:
if ARGUMENTS.get('debug', 0):
    env = Environment(CCFLAGS='-g')
else:
    env = Environment()

   The command-line variable arguments are also available in the
   [14]ARGLIST list, indexed by their order on the command line. This
   allows you to process them in order rather than by name, if necessary.
   Each ARGLIST entry is a tuple containing (argname, argvalue).

   See [15]the section called "Command-Line Construction Variables" for
   more information.

   scons can maintain a cache of target (derived) files that can be shared
   between multiple builds. When derived-file caching is enabled in an
   SConscript file, any target files built by scons will be copied to the
   cache. If an up-to-date target file is found in the cache, it will be
   retrieved from the cache instead of being rebuilt locally. Caching
   behavior may be disabled and controlled in other ways by the
   [16]--cache-force, [17]--cache-disable, [18]--cache-readonly, and
   [19]--cache-show command-line options. The [20]--random option is
   useful to prevent multiple builds from trying to update the cache
   simultaneously.

   By default, scons searches for known programming tools on various
   systems and initializes itself based on what is found. On Windows
   systems which identify as win32, scons searches in order for the
   Microsoft Visual C++ tools, the MinGW tool chain, the Intel compiler
   tools, and the PharLap ETS compiler. On Windows system which identify
   as cygwin (that is, if scons is invoked from a cygwin shell), the order
   changes to prefer the GCC toolchain over the MSVC tools. On OS/2
   systems, scons searches in order for the OS/2 compiler, the GCC tool
   chain, and the Microsoft Visual C++ tools, On SGI IRIX, IBM AIX,
   Hewlett Packard HP-UX, and Oracle Solaris systems, scons searches for
   the native compiler tools (MIPSpro, Visual Age, aCC, and Forte tools
   respectively) and the GCC tool chain. On all other platforms, including
   POSIX (Linux and UNIX) platforms, scons searches in order for the GCC
   tool chain, and the Intel compiler tools. These default values may be
   overridden by appropriate setting of construction variables.

Target Selection

   SCons acts on the selected targets, whether the requested operation is
   build, no-exec or clean. Targets are selected as follows:
    1. Targets specified on the command line. These may be files,
       directories, or phony targets defined using the [21]Alias function.
       Directory targets are scanned by scons for any targets that may be
       found with a destination in or under that directory. The targets
       listed on the command line are made available in the
       [22]COMMAND_LINE_TARGETS list.
    2. If no targets are specified on the command line, scons will select
       those targets specified in the SConscript files via calls to the
       [23]Default function. These are known as the default targets, and
       are made available in the [24]DEFAULT_TARGETS list.
    3. If no targets are selected by the previous steps, scons selects the
       current directory for scanning, unless command-line options which
       affect the target scan are detected ([25]-C, [26]-D, [27]-u,
       [28]-U). Since targets thus selected were not the result of user
       instructions, this target list is not made available for direct
       inspection; use the [29]--debug=explain option if they need to be
       examined.
    4. scons always adds to the selected targets any intermediate targets
       which are necessary to build the specified ones. For example, if
       constructing a shared library or dll from C source files, scons
       will also build the object files which will make up the library.

   To ignore the default targets specified through calls to Default and
   instead build all target files in or below the current directory
   specify the current directory (.) as a command-line target:
scons .

   To build all target files, including any files outside of the current
   directory, supply a command-line target of the root directory (on POSIX
   systems):
scons /

   or the path name(s) of the volume(s) in which all the targets should be
   built (on Windows systems):
scons C:\ D:\

   A subset of a hierarchical tree may be built by remaining at the
   top-level directory (where the SConstruct file lives) and specifying
   the subdirectory as the target to build:
scons src/subdir

   or by changing directory and invoking scons with the [30]-u option,
   which traverses up the directory hierarchy until it finds the
   SConstruct file, and then builds targets relatively to the current
   subdirectory (see also the related [31]-D and [32]-U options):
cd src/subdir
scons -u .

   In all cases, more files may be built than are requested, as scons
   needs to make sure any dependent files are built.

   Specifying "cleanup" targets in SConscript files is usually not
   necessary. The [33]-c flag removes all selected targets:
scons -c .

   to remove all target files in or under the current directory, or:
scons -c build export

   to remove target files under build and export.

   Additional files or directories to remove can be specified using the
   [34]Clean function in the SConscript files. Conversely, targets that
   would normally be removed by the -c invocation can be retained by
   calling the [35]NoClean function with those targets.

   scons supports building multiple targets in parallel via a [36]-j
   option that takes, as its argument, the number of simultaneous tasks
   that may be spawned:
scons -j 4

   builds four targets in parallel, for example.

OPTIONS

   In general, scons supports the same command-line options as GNU Make
   and many of those supported by cons.

   -b
          Ignored for compatibility with non-GNU versions of Make

   -c, --clean, --remove
          Set clean mode. Clean up by removing the selected targets, well
          as any files or directories associated with a selected target
          through calls to the [37]Clean function. Will not remove any
          targets which are marked for preservation through calls to the
          [38]NoClean function.

          While clean mode removes targets rather than building them, work
          which is done directly in Python code in SConscript files will
          still be carried out. If it is important to avoid some such work
          from taking place in clean mode, it should be protected. An
          SConscript file can determine which mode is active by querying
          [39]GetOption, as in the call if GetOption("clean"):

   --cache-debug=file
          Write debug information about derived-file caching to the
          specified file. If file is a hyphen (-), the debug information
          is printed to the standard output. The printed messages describe
          what signature-file names are being looked for in, retrieved
          from, or written to the derived-file cache specified by
          [40]CacheDir.

   --cache-disable, --no-cache
          Disable derived-file caching. scons will neither retrieve files
          from the cache nor copy files to the cache. This option can be
          used to temporarily disable the cache without modifying the
          build scripts.

   --cache-force, --cache-populate
          When using [41]CacheDir, populate a derived-file cache by
          copying any already-existing, up-to-date derived files to the
          cache, in addition to files built by this invocation. This is
          useful to populate a new cache with all the current derived
          files, or to add to the cache any derived files recently built
          with caching disabled via the --cache-disable option.

   --cache-readonly
          Use the derived-file cache, if enabled, to retrieve files, but
          do not not update the cache with any files actually built during
          this invocation.

   --cache-show
          When using a derived-file cache show the command that would have
          been executed to build the file (or the corresponding *COMSTR
          contents if set) even if the file is retrieved from cache.
          Without this option, scons shows a cache retrieval message if
          the file is fetched from cache. This allows producing consistent
          output for build logs, regardless of whether a target file was
          rebuilt or retrieved from the cache.

   --config=mode
          Control how the [42]Configure call should use or generate the
          results of configuration tests. mode should be one of the
          following choices:

        auto
                SCons will use its normal dependency mechanisms to decide
                if a test must be rebuilt or not. This saves time by not
                running the same configuration tests every time you invoke
                scons, but will overlook changes in system header files or
                external commands (such as compilers) if you don't specify
                those dependecies explicitly. This is the default
                behavior.

        force
                If this mode is specified, all configuration tests will be
                re-run regardless of whether the cached results are out of
                date. This can be used to explicitly force the
                configuration tests to be updated in response to an
                otherwise unconfigured change in a system header file or
                compiler.

        cache
                If this mode is specified, no configuration tests will be
                rerun and all results will be taken from cache. scons will
                report an error if --config=cache is specified and a
                necessary test does not have any results in the cache.

   -C directory, --directory=directory
          Run as if scons was started in directory instead of the current
          working directory. That is, change directory before searching
          for the SConstruct, Sconstruct, sconstruct, SConstruct.py,
          Sconstruct.py or sconstruct.py file or doing anything else. When
          multiple -C options are given, each subsequent non-absolute -C
          directory is interpreted relative to the preceding one. This
          option is similar to using [43]-f directory/SConstruct, but -f
          does not search for any of the predefined SConstruct names in
          the specified directory. See also options [44]-u, [45]-U and
          [46]-D to change the SConstruct search behavior when this option
          is used.

   -D
          Works exactly the same way as the [47]-u option except for the
          way default targets are handled. When this option is used and no
          targets are specified on the command line, all default targets
          are built, whether or not they are below the current directory.

   --debug=type[,type...]
          Debug the build process. type specifies the kind of debugging
          info to emit. Multiple types may be specified, separated by
          commas. The following types are recognized:

        action-timestamps
                Prints additional time profiling information. For each
                command, shows the absolute start and end times. This may
                be useful in debugging parallel builds. Implies the
                --debug=time option.

                Available since scons 3.1.

        count
                Print how many objects are created of the various classes
                used internally by SCons before and after reading the
                SConscript files and before and after building targets.
                This is not supported when SCons is executed with the
                Python -O (optimized) option or when the SCons modules
                have been compiled with optimization (that is, when
                executing from *.pyo files).

        duplicate
                Print a line for each unlink/relink (or copy) of a variant
                file from its source file. Includes debugging info for
                unlinking stale variant files, as well as unlinking old
                targets before building them.

        explain
                Print an explanation of why scons is deciding to
                (re-)build the targets it selects for building.

        findlibs
                Instruct the scanner that searches for libraries to print
                a message about each potential library name it is
                searching for, and about the actual libraries it finds.

        includes
                Print the include tree after each top-level target is
                built. This is generally used to find out what files are
                included by the sources of a given derived file:

$ scons --debug=includes foo.o

        memoizer
                Prints a summary of hits and misses using the Memoizer, an
                internal subsystem that counts how often SCons uses cached
                values in memory instead of recomputing them each time
                they're needed.

        memory
                Prints how much memory SCons uses before and after reading
                the SConscript files and before and after building
                targets.

        objects
                Prints a list of the various objects of the various
                classes used internally by SCons.

        pdb
                Re-run scons under the control of the pdb Python debugger.

        prepare
                Print a line each time any target (internal or external)
                is prepared for building. scons prints this for each
                target it considers, even if that target is up to date
                (see also --debug=explain). This can help debug problems
                with targets that aren't being built; it shows whether
                scons is at least considering them or not.

        presub
                Print the raw command line used to build each target
                before the construction environment variables are
                substituted. Also shows which targets are being built by
                this command. Output looks something like this:

$ scons --debug=presub
Building myprog.o with action(s):
  $SHCC $SHCFLAGS $SHCCFLAGS $CPPFLAGS $_CPPINCFLAGS -c -o $TARGET $SOURCES
...

        stacktrace
                Prints an internal Python stack trace when encountering an
                otherwise unexplained error.

        time
                Prints various time profiling information:

               o The time spent executing each individual build command
               o The total build time (time SCons ran from beginning to
                 end)
               o The total time spent reading and executing SConscript
                 files
               o The total time SCons itself spent running (that is, not
                 counting reading and executing SConscript files)
               o The total time spent executing all build commands
               o The elapsed wall-clock time spent executing those build
                 commands
               o The time spent processing each file passed to the
                 SConscript function

                (When scons is executed without the -j option, the elapsed
                wall-clock time will typically be slightly longer than the
                total time spent executing all the build commands, due to
                the SCons processing that takes place in between executing
                each command. When scons is executed with the -j option,
                and your build configuration allows good parallelization,
                the elapsed wall-clock time should be significantly
                smaller than the total time spent executing all the build
                commands, since multiple build commands and intervening
                SCons processing should take place in parallel.)

   --diskcheck=type
          Enable specific checks for whether or not there is a file on
          disk where the SCons configuration expects a directory (or vice
          versa) when searching for source and include files. type can be
          an available diskcheck type or the special tokens all or none. A
          comma-separated string can be used to select multiple checks.
          The default setting is all.

          Current available checks are:

        match
                to check that files and directories on disk match SCons'
                expected configuration.

          Disabling some or all of these checks can provide a performance
          boost for large configurations, or when the configuration will
          check for files and/or directories across networked or shared
          file systems, at the slight increased risk of an incorrect build
          or of not handling errors gracefully.

   --duplicate=ORDER
          There are three ways to duplicate files in a build tree: hard
          links, soft (symbolic) links and copies. The default policy is
          to prefer hard links to soft links to copies. You can specify a
          different policy with this option. ORDER must be one of
          hard-soft-copy (the default), soft-hard-copy, hard-copy,
          soft-copy or copy. SCons will attempt to duplicate files using
          the mechanisms in the specified order.

   --enable-virtualenv
          Import virtualenv-related variables to SCons.

   --experimental=feature
          Enable experimental features and/or tools. feature can be an
          available feature name or the special tokens all or none. A
          comma-separated string can be used to select multiple features.
          The default setting is none.

          Current available features are: ninja.

Caution

          No Support offered for any features or tools enabled by this
          flag.

          Available since scons 4.2.

   -f file, --file=file, --makefile=file, --sconstruct=file
          Use file as the initial SConscript file. Multiple -f options may
          be specified, in which case scons will read all of the specified
          files.

   -h, --help
          Print a local help message for this project, if one is defined
          in the SConscript files (see the [48]Help function), plus a line
          that refers to the standard SCons help message. If no local help
          message is defined, prints the standard SCons help message (as
          for the -H option) plus help for any local options defined
          through [49]AddOption. Exits after displaying the appropriate
          message.

          Note that use of this option requires SCons to process the
          SConscript files, so syntax errors may cause the help message
          not to be displayed.

   --hash-chunksize=KILOBYTES
          Set the block size used when computing content signatures to
          KILOBYTES. This value determines the size of the chunks which
          are read in at once when computing signature hashes. Files below
          that size are fully stored in memory before performing the
          signature computation while bigger files are read in
          block-by-block. A huge block-size leads to high memory
          consumption while a very small block-size slows down the build
          considerably.

          The default value is to use a chunk size of 64 kilobytes, which
          should be appropriate for most uses.

          Available since scons 4.2.

   --hash-format=ALGORITHM
          Set the hashing algorithm used by SCons to ALGORITHM. This value
          determines the hashing algorithm used in generating content
          signatures or CacheDir keys.

          The supported list of values are: md5, sha1, and sha256.
          However, the Python interpreter used to run SCons must have the
          corresponding support available in the hashlib module to use the
          specified algorithm.

          Specifying this value changes the name of the SConsign database.
          For example, --hash-format=sha256 will create a SConsign
          database with name .sconsign_sha256.dblite.

          If this option is not specified, a the first supported hash
          format found is selected. Typically this is MD5, however, if you
          are on a FIPS-compliant system and using a version of Python
          less than 3.9, SHA1 or SHA256 will be chosen as the default.
          Python 3.9 and onwards clients will always default to MD5, even
          in FIPS mode, unless otherwise specified with the --hash-format
          option.

          For MD5 databases (either explicitly specified with
          --hash-format=md5 or defaulted), the SConsign database
          is.sconsign.dblite. The newer SHA1 and SHA256 selections
          meanwhile store their databases to
          .sconsign_algorithmname.dblite

          Available since scons 4.2.

   -H, --help-options
          Print the standard help message about SCons command-line options
          and exit.

   -i, --ignore-errors
          Ignore all errors from commands executed to rebuild files.

   -I directory, --include-dir=directory
          Specifies a directory to search for imported Python modules. If
          several -I options are used, the directories are searched in the
          order specified.

   --ignore-virtualenv
          Suppress importing virtualenv-related variables to SCons.

   --implicit-cache
          Cache implicit dependencies. This causes scons to use the
          implicit (scanned) dependencies from the last time it was run
          instead of scanning the files for implicit dependencies. This
          can significantly speed up SCons, but with the following
          limitations:

          scons will not detect changes to implicit dependency search
          paths (e.g. [50]$CPPPATH, [51]$LIBPATH) that would ordinarily
          cause different versions of same-named files to be used.

          scons will miss changes in the implicit dependencies in cases
          where a new implicit dependency is added earlier in the implicit
          dependency search path (e.g. [52]$CPPPATH, [53]$LIBPATH) than a
          current implicit dependency with the same name.

   --implicit-deps-changed
          Forces SCons to ignore the cached implicit dependencies. This
          causes the implicit dependencies to be rescanned and recached.
          This implies --implicit-cache.

   --implicit-deps-unchanged
          Force SCons to ignore changes in the implicit dependencies. This
          causes cached implicit dependencies to always be used. This
          implies --implicit-cache.

   --install-sandbox=sandbox_path
          When using the Install builders, prepend sandbox_path to the
          installation paths such that all installed files will be placed
          under that directory. This option is unavailable if one of
          [54]Install, [55]InstallAs or [56]InstallVersionedLib is not
          used in the SConscript files.

   --interactive
          Starts SCons in interactive mode. The SConscript files are read
          once and a scons>>> prompt is printed. Targets may now be
          rebuilt by typing commands at interactive prompt without having
          to re-read the SConscript files and re-initialize the dependency
          graph from scratch.

          SCons interactive mode supports the following commands:

        build [OPTIONS] [TARGETS] ...
                Builds the specified TARGETS (and their dependencies) with
                the specified SCons command-line OPTIONS. b and scons are
                synonyms for build.

                The following SCons command-line options affect the build
                command:

--cache-debug=FILE
--cache-disable, --no-cache
--cache-force, --cache-populate
--cache-readonly
--cache-show
--debug=TYPE
-i, --ignore-errors
-j N, --jobs=N
-k, --keep-going
-n, --no-exec, --just-print, --dry-run, --recon
-Q
-s, --silent, --quiet
--taskmastertrace=FILE
--tree=OPTIONS

                Any other SCons command-line options that are specified do
                not cause errors but have no effect on the build command
                (mainly because they affect how the SConscript files are
                read, which only happens once at the beginning of
                interactive mode).

        clean [OPTIONS] [TARGETS] ...
                Cleans the specified TARGETS (and their dependencies) with
                the specified OPTIONS. c is a synonym. This command is
                itself a synonym for build --clean

        exit
                Exits SCons interactive mode. You can also exit by
                terminating input (Ctrl+D UNIX or Linux systems, (Ctrl+Z
                on Windows systems).

        help [COMMAND]
                Provides a help message about the commands available in
                SCons interactive mode. If COMMAND is specified, h and ?
                are synonyms.

        shell [COMMANDLINE]
                Executes the specified COMMANDLINE in a subshell. If no
                COMMANDLINE is specified, executes the interactive command
                interpreter specified in the SHELL environment variable
                (on UNIX and Linux systems) or the COMSPEC environment
                variable (on Windows systems). sh and ! are synonyms.

        version
                Prints SCons version information.

          An empty line repeats the last typed command. Command-line
          editing can be used if the readline module is available.

$ scons --interactive
scons: Reading SConscript files ...
scons: done reading SConscript files.
scons>>> build -n prog
scons>>> exit

   -j N, --jobs=N
          Specifies the maximum number of comcurrent jobs (commands) to
          run. If there is more than one -j option, the last one is
          effective.

   -k, --keep-going
          Continue as much as possible after an error. The target that
          failed and those that depend on it will not be remade, but other
          targets specified on the command line will still be processed.

   -m
          Ignored for compatibility with non-GNU versions of Make.

   --max-drift=SECONDS
          Set the maximum expected drift in the modification time of files
          to SECONDS. This value determines how long a file must be
          unmodified before its cached content signature will be used
          instead of calculating a new content signature (hash) of the
          file's contents. The default value is 2 days, which means a file
          must have a modification time of at least two days ago in order
          to have its cached content signature used. A negative value
          means to never cache the content signature and to ignore the
          cached value if there already is one. A value of 0 means to
          always use the cached signature, no matter how old the file is.

   --md5-chunksize=KILOBYTES
          A deprecated synonym for [57]--hash-chunksize.

          Deprecated since scons 4.2.

   -n, --no-exec, --just-print, --dry-run, --recon
          Set no execute mode. Print the commands that would be executed
          to build any out-of-date target files, but do not execute the
          commands.

          The output is a best effort, as SCons cannot always precisely
          determine what would be built. For example, if a file is
          generated by a builder action that is later used in the build,
          that file is not available to scan for dependencies on an
          unbuilt tree, or may contain out of date information in a built
          tree.

          Work which is done directly in Python code in SConscript files,
          as opposed to work done by builder actions during the build
          phase, will still be carried out. If it is important to avoid
          some such work from taking place in no execute mode, it should
          be protected. An SConscript file can determine which mode is
          active by querying [58]GetOption, as in the call if
          GetOption("no_exec"):

   --no-site-dir
          Prevents the automatic addition of the standard site_scons dirs
          to sys.path. Also prevents loading the site_scons/site_init.py
          modules if they exist, and prevents adding their
          site_scons/site_tools dirs to the toolpath.

   --package-type=type
          The type or types of package to create when using the
          [59]Package builder. In the case of multiple types, type should
          be a comma-separated string; SCons will try to build for all of
          those packages. Note this option is only available if the
          [60]packaging tool has been enabled.

   --profile=file
          Run SCons under the Python profiler and save the results in the
          specified file. The results may be analyzed using the Python
          pstats module.

   -q, --question
          Do not run any commands, or print anything. Just return an exit
          status that is zero if the specified targets are already up to
          date, non-zero otherwise.

   -Q
          Quiets SCons status messages about reading SConscript files,
          building targets and entering directories. Commands that are
          executed to rebuild target files are still printed.

   --random
          Build dependencies in a random order. This is useful when
          building multiple trees simultaneously with caching enabled, to
          prevent multiple builds from simultaneously trying to build or
          retrieve the same target files.

   -s, --silent, --quiet
          Silent. Do not print commands that are executed to rebuild
          target files. Also suppresses SCons status messages.

   -S, --no-keep-going, --stop
          Ignored for compatibility with GNU Make

   --site-dir=path
          Use a specific path as the site directory rather than searching
          the list of default site directories. This directory will be
          prepended to sys.path, the module path/site_init.py will be
          loaded if it exists, and path/site_tools will be added to the
          default toolpath.

          The default set of site directories searched when --site-dir is
          not specified depends on the system platform, as follows. Users
          or system administrators can tune site-specific or
          project-specific SCons behavior by setting up a site directory
          in one or more of these locations. Directories are examined in
          the order given, from most generic ("system" directories) to
          most specific (in the current project), so the last-executed
          site_init.py file is the most specific one, giving it the chance
          to override everything else), and the directories are prepended
          to the paths, again so the last directory examined comes first
          in the resulting path.

        Windows:

%ALLUSERSPROFILE%/scons/site_scons
%LOCALAPPDATA%/scons/site_scons
%APPDATA%/scons/site_scons
%USERPROFILE%/.scons/site_scons
./site_scons

                Note earlier versions of the documentation listed a
                different path for the "system" site directory, this path
                is still checked but its use is discouraged:

%ALLUSERSPROFILE%/Application Data/scons/site_scons

        Mac OS X:

/Library/Application Support/SCons/site_scons
/opt/local/share/scons/site_scons (for MacPorts)
/sw/share/scons/site_scons (for Fink)
$HOME/Library/Application Support/SCons/site_scons
$HOME/.scons/site_scons
./site_scons

        Solaris:

/opt/sfw/scons/site_scons
/usr/share/scons/site_scons
$HOME/.scons/site_scons
./site_scons

        Linux, HPUX, and other Posix-like systems:

/usr/share/scons/site_scons
$HOME/.scons/site_scons
./site_scons

   --stack-size=KILOBYTES
          Set the size stack used to run threads to KILOBYTES. This value
          determines the stack size of the threads used to run jobs. These
          threads execute the actions of the builders for the nodes that
          are out-of-date. This option has no effect unless the number of
          concurrent build jobs is larger than one (as set by -j N or
          --jobs=N on the command line or SetOption in a script).

          Using a stack size that is too small may cause stack overflow
          errors. This usually shows up as segmentation faults that cause
          scons to abort before building anything. Using a stack size that
          is too large will cause scons to use more memory than required
          and may slow down the entire build process. The default value is
          to use a stack size of 256 kilobytes, which should be
          appropriate for most uses. You should not need to increase this
          value unless you encounter stack overflow errors.

   -t, --touch
          Ignored for compatibility with GNU Make. (Touching a file to
          make it appear up-to-date is unnecessary when using scons.)

   --taskmastertrace=file
          Prints trace information to the specified file about how the
          internal Taskmaster object evaluates and controls the order in
          which Nodes are built. A file name of - may be used to specify
          the standard output.

   --tree=type[,type...]
          Prints a tree of the dependencies after each top-level target is
          built. This prints out some or all of the tree, in various
          formats, depending on the type specified:

        all
                Print the entire dependency tree after each top-level
                target is built. This prints out the complete dependency
                tree, including implicit dependencies and ignored
                dependencies.

        derived
                Restricts the tree output to only derived (target) files,
                not source files.

        linedraw
                Draw the tree output using Unicode line-drawing characters
                instead of plain ASCII text. This option acts as a
                modifier to the selected type(s). If specified alone,
                without any type, it behaves as if all had been specified.

                Available since scons 4.0.

        status
                Prints status information for each displayed node.

        prune
                Prunes the tree to avoid repeating dependency information
                for nodes that have already been displayed. Any node that
                has already been displayed will have its name printed in
                [square brackets], as an indication that the dependencies
                for that node can be found by searching for the relevant
                output higher up in the tree.

          Multiple type choices may be specified, separated by commas:

# Prints only derived files, with status information:
scons --tree=derived,status

# Prints all dependencies of target, with status information
# and pruning dependencies of already-visited Nodes:
scons --tree=all,prune,status target

   -u, --up, --search-up
          Walks up the directory structure until an SConstruct,
          Sconstruct, sconstruct, SConstruct.py, Sconstruct.py or
          sconstruct.py file is found, and uses that as the top of the
          directory tree. If no targets are specified on the command line,
          only targets at or below the current directory will be built.

   -U
          Works exactly the same way as the -u option except for the way
          default targets are handled. When this option is used and no
          targets are specified on the command line, all default targets
          that are defined in the SConscript(s) in the current directory
          are built, regardless of what directory the resultant targets
          end up in.

   -v, --version
          Print the scons version, copyright information, list of authors,
          and any other relevant information. Then exit.

   -w, --print-directory
          Print a message containing the working directory before and
          after other processing.

   --no-print-directory
          Turn off -w, even if it was turned on implicitly.

   --warn=type, --warn=no-type
          Enable or disable (with the prefix "no-") warnings (--warning is
          a synonym). type specifies the type of warnings to be enabled or
          disabled:

        all
                All warnings.

        cache-version
                Warnings about the derived-file cache directory specified
                by [61]CacheDir not using the latest configuration
                information. These warnings are enabled by default.

        cache-write-error
                Warnings about errors trying to write a copy of a built
                file to a specified derived-file cache specified by
                [62]CacheDir. These warnings are disabled by default.

        corrupt-sconsign
                Warnings about unfamiliar signature data in .sconsign
                files. These warnings are enabled by default.

        dependency
                Warnings about dependencies. These warnings are disabled
                by default.

        deprecated
                Warnings about use of currently deprecated features. These
                warnings are enabled by default. Not all deprecation
                warnings can be disabled with the --warn=no-deprecated
                option as some deprecated features which are late in the
                deprecation cycle may have been designated as mandatory
                warnings, and these will still display. Warnings for
                certain deprecated features may also be enabled or
                disabled individually; see below.

        duplicate-environment
                Warnings about attempts to specify a build of a target
                with two different construction environments that use the
                same action. These warnings are enabled by default.

        fortran-cxx-mix
                Warnings about linking Fortran and C++ object files in a
                single executable, which can yield unpredictable behavior
                with some compilers.

        future-deprecated
                Warnings about features that will be deprecated in the
                future. Such warnings are disabled by default. Enabling
                future deprecation warnings is recommended for projects
                that redistribute SCons configurations for other users to
                build, so that the project can be warned as soon as
                possible about to-be-deprecated features that may require
                changes to the configuration.

        link
                Warnings about link steps.

        misleading-keywords
                Warnings about the use of two commonly misspelled keywords
                targets and sources to [63]Builder calls. The correct
                spelling is the singular form, even though target and
                source can themselves refer to lists of names or nodes.

        tool-qt-deprecated
                Warnings about the [64]qt tool being deprecated. These
                warnings are disabled by default for the first phase of
                deprecation. Enable to be reminded about use of this tool
                module. Available since SCons 4.3.

        missing-sconscript
                Warnings about missing SConscript files. These warnings
                are enabled by default.

        no-object-count
                Warnings about the --debug=object feature not working when
                scons is run with the Python -O option or from optimized
                Python (.pyo) modules.

        no-parallel-support
                Warnings about the version of Python not being able to
                support parallel builds when the -j option is used. These
                warnings are enabled by default.

        python-version
                Warnings about running SCons with a deprecated version of
                Python. These warnings are enabled by default.

        reserved-variable
                Warnings about attempts to set the reserved construction
                variable names $CHANGED_SOURCES, $CHANGED_TARGETS,
                $TARGET, $TARGETS, $SOURCE, $SOURCES, $UNCHANGED_SOURCES
                or $UNCHANGED_TARGETS. These warnings are disabled by
                default.

        stack-size
                Warnings about requests to set the stack size that could
                not be honored. These warnings are enabled by default.

        target_not_build
                Warnings about a build rule not building the expected
                targets. These warnings are disabled by default.

   -Y repository, --repository=repository, --srcdir=repository
          Search the specified repository for any input and target files
          not found in the local directory hierarchy. Multiple -Y options
          may be specified, in which case the repositories are searched in
          the order specified.

SCONSCRIPT FILE REFERENCE

SConscript Files

   The build configuration is described by one or more files, known as
   SConscript files. There must be at least one file for a valid build
   (scons will quit if it does not find one). scons by default looks for
   this file by the name SConstruct in the directory from which you run
   scons, though if necessary, also looks for alternative file names
   Sconstruct, sconstruct, SConstruct.py, Sconstruct.py and sconstruct.py
   in that order. A different file name (which can include a pathname
   part) may be specified via the -f option. Except for the SConstruct
   file, these files are not searched for automatically; you add
   additional configuration files to the build by calling the
   [65]SConscript function. This allows parts of the build to be
   conditionally included or excluded at run-time depending on how scons
   is invoked.

   Each SConscript file in a build configuration is invoked independently
   in a separate context. This provides necessary isolation so that
   different parts of the build don't accidentally step on each other. You
   have to be explicit about sharing information, by using the [66]Export
   function or the exports argument to the SConscript function, as well as
   the [67]Return function in a called SConscript file, and comsume shared
   information by using the [68]Import function.

   The following sections describe the various SCons facilities that can
   be used in SConscript files. Quick links:
   [69]Construction Environments
   [70]Tools
   [71]Builder Methods
   [72]Methods and Functions to do Things
   [73]SConscript Variables
   [74]Construction Variables
   [75]Configure Contexts
   [76]Command-Line Construction Variables
   [77]Node Objects

Construction Environments

   A Construction Environment is the basic means by which you communicate
   build information to SCons. A new construction environment is created
   using the [78]Environment function:
env = Environment()

   Construction environment attributes called Construction Variables may
   be set either by specifying them as keyword arguments when the object
   is created or by assigning them a value after the object is created.
   These two are nominally equivalent:
env = Environment(FOO='foo')
env['FOO'] = 'foo'

   Note that certain settings which affect tool detection are referenced
   only when the tools are initializided, so you either need either to
   supply them as part of the call to [79]Environment, or defer tool
   initialization. For example, initializing the Microsoft Visual C++
   version you wish to use:
# initializes msvc to v14.1
env = Environment(MSVC_VERSION="14.1")

env = Environment()
# msvc tool was initialized to default, does not reinitialize
env['MSVC_VERSION'] = "14.1"

env = Environment(tools=[])
env['MSVC_VERSION'] = "14.1"
# msvc tool initialization was deferred, so will pick up new value
env.Tool('default')

   As a convenience, construction variables may also be set or modified by
   the parse_flags keyword argument during object creation, which has the
   effect of the [80]env.MergeFlags method being applied to the argument
   value after all other processing is completed. This is useful either if
   the exact content of the flags is unknown (for example, read from a
   control file) or if the flags need to be distributed to a number of
   construction variables. [81]env.ParseFlags describes how these
   arguments are distributed to construction variables.
env = Environment(parse_flags='-Iinclude -DEBUG -lm')

   This example adds 'include' to the [82]$CPPPATH construction variable,
   'EBUG' to [83]$CPPDEFINES, and 'm' to [84]$LIBS.

   An existing construction environment can be duplicated by calling the
   [85]env.Clone method. Without arguments, it will be a copy with the
   same settings. Otherwise, env.Clone takes the same arguments as
   [86]Environment, and uses the arguments to create a modified copy.

   SCons provides a special construction environment called the Default
   Environment. The default environment is used only for global functions,
   that is, construction activities called without the context of a
   regular construction environment. See [87]DefaultEnvironment for more
   information.

   By default, a new construction environment is initialized with a set of
   builder methods and construction variables that are appropriate for the
   current platform. The optional platform keyword argument may be used to
   specify that the construction environment should be initialized for a
   different platform:
env = Environment(platform='cygwin')

   Specifying a platform initializes the appropriate construction
   variables in the environment to use and generate file names with
   prefixes and suffixes appropriate for that platform.

   Note that the win32 platform adds the SystemDrive and SystemRoot
   variables from the user's external environment to the construction
   environment's ENV dictionary. This is so that any executed commands
   that use sockets to connect with other systems will work on Windows
   systems.

   The platform argument may be a string value representing one of the
   pre-defined platforms (aix, cygwin, darwin, hpux, irix, os2, posix,
   sunos or win32), or it may be be a callable platform object returned by
   a call to [88]Platform selecting a pre-defined platform, or it may be a
   user-supplied callable, in which case the Environment method will call
   it to update the new construction environment:
def my_platform(env):
    env['VAR'] = 'xyzzy'

env = Environment(platform=my_platform)

   Note that supplying a non-default platform or custom fuction for
   initialization may bypass settings that should happen for the host
   system and should be used with care. It is most useful in the case
   where the platform is an alternative for the one that would be
   auto-detected, such as platform="cygwin" on a system which would
   otherwise identify as win32.

   The optional tools and toolpath keyword arguments affect the way tools
   available to the environment are initialized. See [89]the section
   called "Tools" for details.

   The optional variables keyword argument allows passing a Variables
   object which will be used in the initialization of the construction
   environment See [90]the section called "Command-Line Construction
   Variables" for details.

Tools

   SCons has a large number of predefined tool modules (more properly,
   tool specification modules) which are used to help initialize the
   construction environment. An SCons tool is only responsible for setup.
   For example, if an SConscript file declares the need to construct an
   object file from a C-language source file by calling the [91]Object
   builder, then a tool representing an available C compiler needs to have
   run first, to set up that builder and all the construction variables it
   needs in the associated construction environment; the tool itself is
   not called in the process of the build. Normally this happens invisibly
   as scons has per-platform lists of default tools, and it steps through
   those tools, calling the ones which are actually applicable, skipping
   those where necessary programs are not installed on the build system,
   or other preconditions are not met.

   A specific set of tools with which to initialize an environment when
   creating it may be specified using the optional keyword argument tools,
   which takes a list of tool names. This is useful to override the
   defaults, to specify non-default built-in tools, and to supply added
   tools:
env = Environment(tools=['msvc', 'lex'])

   Tools can also be directly called by using the [92]Tool method (see
   below).

   The tools argument overrides the default tool list, it does not add to
   it, so be sure to include all the tools you need. For example if you
   are building a c/c++ program you must specify a tool for at least a
   compiler and a linker, as in tools=['clang', 'link']. The tool name
   'default' can be used to retain the default list.

   If no tools argument is specified, or if tools includes 'default', then
   scons will auto-detect usable tools, using the execution environment
   value of PATH (that is, env['ENV']['PATH'] - the external evironment
   PATH from os.environ is not used) for looking up any backing programs,
   and the platform name in effect to determine the default tools for that
   platform. Changing the PATH variable after the construction environment
   is constructed will not cause the tools to be re-detected.

   Additional tools can be added, see the [93]Extending SCons section and
   specifically [94]Tool Modules.

   SCons supports the following tool specifications out of the box:

   386asm
          Sets construction variables for the 386ASM assembler for the
          Phar Lap ETS embedded operating system.

          Sets: [95]$AS, [96]$ASCOM, [97]$ASFLAGS, [98]$ASPPCOM,
          [99]$ASPPFLAGS.

          Uses: [100]$CC, [101]$CPPFLAGS, [102]$_CPPDEFFLAGS,
          [103]$_CPPINCFLAGS.

   aixc++
          Sets construction variables for the IMB xlc / Visual Age C++
          compiler.

          Sets: [104]$CXX, [105]$CXXVERSION, [106]$SHCXX,
          [107]$SHOBJSUFFIX.

   aixcc
          Sets construction variables for the IBM xlc / Visual Age C
          compiler.

          Sets: [108]$CC, [109]$CCVERSION, [110]$SHCC.

   aixf77
          Sets construction variables for the IBM Visual Age f77 Fortran
          compiler.

          Sets: [111]$F77, [112]$SHF77.

   aixlink
          Sets construction variables for the IBM Visual Age linker.

          Sets: [113]$LINKFLAGS, [114]$SHLIBSUFFIX, [115]$SHLINKFLAGS.

   applelink
          Sets construction variables for the Apple linker (similar to the
          GNU linker).

          Sets: [116]$APPLELINK_COMPATIBILITY_VERSION,
          [117]$APPLELINK_CURRENT_VERSION,
          [118]$APPLELINK_NO_COMPATIBILITY_VERSION,
          [119]$APPLELINK_NO_CURRENT_VERSION, [120]$FRAMEWORKPATHPREFIX,
          [121]$LDMODULECOM, [122]$LDMODULEFLAGS, [123]$LDMODULEPREFIX,
          [124]$LDMODULESUFFIX, [125]$LINKCOM, [126]$SHLINKCOM,
          [127]$SHLINKFLAGS, [128]$_APPLELINK_COMPATIBILITY_VERSION,
          [129]$_APPLELINK_CURRENT_VERSION, [130]$_FRAMEWORKPATH,
          [131]$_FRAMEWORKS.

          Uses: [132]$FRAMEWORKSFLAGS.

   ar
          Sets construction variables for the ar library archiver.

          Sets: [133]$AR, [134]$ARCOM, [135]$ARFLAGS, [136]$LIBPREFIX,
          [137]$LIBSUFFIX, [138]$RANLIB, [139]$RANLIBCOM,
          [140]$RANLIBFLAGS.

   as
          Sets construction variables for the as assembler.

          Sets: [141]$AS, [142]$ASCOM, [143]$ASFLAGS, [144]$ASPPCOM,
          [145]$ASPPFLAGS.

          Uses: [146]$CC, [147]$CPPFLAGS, [148]$_CPPDEFFLAGS,
          [149]$_CPPINCFLAGS.

   bcc32
          Sets construction variables for the bcc32 compiler.

          Sets: [150]$CC, [151]$CCCOM, [152]$CCFLAGS, [153]$CFILESUFFIX,
          [154]$CFLAGS, [155]$CPPDEFPREFIX, [156]$CPPDEFSUFFIX,
          [157]$INCPREFIX, [158]$INCSUFFIX, [159]$SHCC, [160]$SHCCCOM,
          [161]$SHCCFLAGS, [162]$SHCFLAGS, [163]$SHOBJSUFFIX.

          Uses: [164]$_CPPDEFFLAGS, [165]$_CPPINCFLAGS.

   cc
          Sets construction variables for generic POSIX C compilers.

          Sets: [166]$CC, [167]$CCCOM, [168]$CCDEPFLAGS, [169]$CCFLAGS,
          [170]$CFILESUFFIX, [171]$CFLAGS, [172]$CPPDEFPREFIX,
          [173]$CPPDEFSUFFIX, [174]$FRAMEWORKPATH, [175]$FRAMEWORKS,
          [176]$INCPREFIX, [177]$INCSUFFIX, [178]$SHCC, [179]$SHCCCOM,
          [180]$SHCCFLAGS, [181]$SHCFLAGS, [182]$SHOBJSUFFIX.

          Uses: [183]$CCCOMSTR, [184]$PLATFORM, [185]$SHCCCOMSTR.

   clang
          Set construction variables for the Clang C compiler.

          Sets: [186]$CC, [187]$CCDEPFLAGS, [188]$CCVERSION,
          [189]$SHCCFLAGS.

   clangxx
          Set construction variables for the Clang C++ compiler.

          Sets: [190]$CXX, [191]$CXXVERSION, [192]$SHCXXFLAGS,
          [193]$SHOBJSUFFIX, [194]$STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME.

   compilation_db
          Sets up [195]CompilationDatabase builder which generates a clang
          tooling compatible compilation database.

          Sets: [196]$COMPILATIONDB_COMSTR,
          [197]$COMPILATIONDB_PATH_FILTER,
          [198]$COMPILATIONDB_USE_ABSPATH.

   cvf
          Sets construction variables for the Compaq Visual Fortran
          compiler.

          Sets: [199]$FORTRAN, [200]$FORTRANCOM, [201]$FORTRANMODDIR,
          [202]$FORTRANMODDIRPREFIX, [203]$FORTRANMODDIRSUFFIX,
          [204]$FORTRANPPCOM, [205]$OBJSUFFIX, [206]$SHFORTRANCOM,
          [207]$SHFORTRANPPCOM.

          Uses: [208]$CPPFLAGS, [209]$FORTRANFLAGS, [210]$SHFORTRANFLAGS,
          [211]$_CPPDEFFLAGS, [212]$_FORTRANINCFLAGS,
          [213]$_FORTRANMODFLAG.

   cXX
          Sets construction variables for generic POSIX C++ compilers.

          Sets: [214]$CPPDEFPREFIX, [215]$CPPDEFSUFFIX, [216]$CXX,
          [217]$CXXCOM, [218]$CXXFILESUFFIX, [219]$CXXFLAGS,
          [220]$INCPREFIX, [221]$INCSUFFIX, [222]$OBJSUFFIX, [223]$SHCXX,
          [224]$SHCXXCOM, [225]$SHCXXFLAGS, [226]$SHOBJSUFFIX.

          Uses: [227]$CXXCOMSTR, [228]$SHCXXCOMSTR.

   cyglink
          Set construction variables for cygwin linker/loader.

          Sets: [229]$IMPLIBPREFIX, [230]$IMPLIBSUFFIX,
          [231]$LDMODULEVERSIONFLAGS, [232]$LINKFLAGS, [233]$RPATHPREFIX,
          [234]$RPATHSUFFIX, [235]$SHLIBPREFIX, [236]$SHLIBSUFFIX,
          [237]$SHLIBVERSIONFLAGS, [238]$SHLINKCOM, [239]$SHLINKFLAGS,
          [240]$_LDMODULEVERSIONFLAGS, [241]$_SHLIBVERSIONFLAGS.

   default
          Sets construction variables for a default list of Tool modules.
          Use default in the tools list to retain the original defaults,
          since the tools parameter is treated as a literal statement of
          the tools to be made available in that construction environment,
          not an addition.

          The list of tools selected by default is not static, but is
          dependent both on the platform and on the software installed on
          the platform. Some tools will not initialize if an underlying
          command is not found, and some tools are selected from a list of
          choices on a first-found basis. The finished tool list can be
          examined by inspecting the [242]$TOOLS construction variable in
          the construction environment.

          On all platforms, the tools from the following list are selected
          if their respective conditions are met: filesystem;, wix,
          [243]lex, [244]yacc, [245]rpcgen, [246]swig, [247]jar,
          [248]javac, [249]javah, [250]rmic, [251]dvipdf, [252]dvips,
          [253]gs, [254]tex, [255]latex, [256]pdflatex, [257]pdftex,
          [258]tar, [259]zip, [260]textfile.

          On Linux systems, the default tools list selects (first-found):
          a C compiler from [261]gcc, [262]intelc, [263]icc, [264]cc; a
          C++ compiler from [265]g++, [266]intelc, [267]icc, [268]cXX; an
          assembler from [269]gas, [270]nasm, [271]masm; a linker from
          [272]gnulink, [273]ilink; a Fortran compiler from [274]gfortran,
          [275]g77, [276]ifort, [277]ifl, [278]f95, [279]f90, [280]f77;
          and a static archiver [281]ar. It also selects all found from
          the list [282]m4 rpm.

          On Windows systems, the default tools list selects
          (first-found): a C compiler from [283]msvc, [284]mingw,
          [285]gcc, [286]intelc, [287]icl, [288]icc, [289]cc, [290]bcc32;
          a C++ compiler from [291]msvc, [292]intelc, [293]icc, [294]g++,
          [295]cXX, [296]bcc32; an assembler from [297]masm, [298]nasm,
          [299]gas, [300]386asm; a linker from [301]mslink, [302]gnulink,
          [303]ilink, [304]linkloc, [305]ilink32; a Fortran compiler from
          [306]gfortran, [307]g77, [308]ifl, [309]cvf, [310]f95, [311]f90,
          [312]fortran; and a static archiver from [313]mslib, [314]ar,
          [315]tlib; It also selects all found from the list [316]msvs,
          [317]midl.

          On MacOS systems, the default tools list selects (first-found):
          a C compiler from [318]gcc, [319]cc; a C++ compiler from
          [320]g++, [321]cXX; an assembler [322]as; a linker from
          [323]applelink, [324]gnulink; a Fortran compiler from
          [325]gfortran, [326]f95, [327]f90, [328]g77; and a static
          archiver [329]ar. It also selects all found from the list
          [330]m4, rpm.

          Default lists for other platforms can be found by examining the
          scons source code (see SCons/Tool/__init__.py).

   dmd
          Sets construction variables for D language compiler DMD.

          Sets: [331]$DC, [332]$DCOM, [333]$DDEBUG, [334]$DDEBUGPREFIX,
          [335]$DDEBUGSUFFIX, [336]$DFILESUFFIX, [337]$DFLAGPREFIX,
          [338]$DFLAGS, [339]$DFLAGSUFFIX, [340]$DINCPREFIX,
          [341]$DINCSUFFIX, [342]$DLIB, [343]$DLIBCOM,
          [344]$DLIBDIRPREFIX, [345]$DLIBDIRSUFFIX, [346]$DLIBFLAGPREFIX,
          [347]$DLIBFLAGSUFFIX, [348]$DLIBLINKPREFIX,
          [349]$DLIBLINKSUFFIX, [350]$DLINK, [351]$DLINKCOM,
          [352]$DLINKFLAGPREFIX, [353]$DLINKFLAGS, [354]$DLINKFLAGSUFFIX,
          [355]$DPATH, [356]$DRPATHPREFIX, [357]$DRPATHSUFFIX,
          [358]$DVERPREFIX, [359]$DVERSIONS, [360]$DVERSUFFIX, [361]$SHDC,
          [362]$SHDCOM, [363]$SHDLIBVERSIONFLAGS, [364]$SHDLINK,
          [365]$SHDLINKCOM, [366]$SHDLINKFLAGS.

   docbook
          This tool tries to make working with Docbook in SCons a little
          easier. It provides several toolchains for creating different
          output formats, like HTML or PDF. Contained in the package is a
          distribution of the Docbook XSL stylesheets as of version
          1.76.1. As long as you don't specify your own stylesheets for
          customization, these official versions are picked as
          default...which should reduce the inevitable setup hassles for
          you.

          Implicit dependencies to images and XIncludes are detected
          automatically if you meet the HTML requirements. The additional
          stylesheet utils/xmldepend.xsl by Paul DuBois is used for this
          purpose.

          Note, that there is no support for XML catalog resolving
          offered! This tool calls the XSLT processors and PDF renderers
          with the stylesheets you specified, that's it. The rest lies in
          your hands and you still have to know what you're doing when
          resolving names via a catalog.

          For activating the tool "docbook", you have to add its name to
          the Environment constructor, like this

env = Environment(tools=['docbook'])

          On its startup, the docbook tool tries to find a required
          xsltproc processor, and a PDF renderer, e.g. fop. So make sure
          that these are added to your system's environment PATH and can
          be called directly without specifying their full path.

          For the most basic processing of Docbook to HTML, you need to
          have installed

          + the Python lxml binding to libxml2, or
          + a standalone XSLT processor, currently detected are xsltproc,
            saxon, saxon-xslt and xalan.

          Rendering to PDF requires you to have one of the applications
          fop or xep installed.

          Creating a HTML or PDF document is very simple and
          straightforward. Say

env = Environment(tools=['docbook'])
env.DocbookHtml('manual.html', 'manual.xml')
env.DocbookPdf('manual.pdf', 'manual.xml')

          to get both outputs from your XML source manual.xml. As a
          shortcut, you can give the stem of the filenames alone, like
          this:

env = Environment(tools=['docbook'])
env.DocbookHtml('manual')
env.DocbookPdf('manual')

          and get the same result. Target and source lists are also
          supported:

env = Environment(tools=['docbook'])
env.DocbookHtml(['manual.html','reference.html'], ['manual.xml','reference.xml']
)

          or even

env = Environment(tools=['docbook'])
env.DocbookHtml(['manual','reference'])

Important

          Whenever you leave out the list of sources, you may not specify
          a file extension! The Tool uses the given names as file stems,
          and adds the suffixes for target and source files accordingly.

          The rules given above are valid for the Builders
          [367]DocbookHtml, [368]DocbookPdf, [369]DocbookEpub,
          [370]DocbookSlidesPdf and [371]DocbookXInclude. For the
          [372]DocbookMan transformation you can specify a target name,
          but the actual output names are automatically set from the
          refname entries in your XML source.

          The Builders [373]DocbookHtmlChunked, [374]DocbookHtmlhelp and
          [375]DocbookSlidesHtml are special, in that:

         1. they create a large set of files, where the exact names and
            their number depend on the content of the source file, and
         2. the main target is always named index.html, i.e. the output
            name for the XSL transformation is not picked up by the
            stylesheets.

          As a result, there is simply no use in specifying a target HTML
          name. So the basic syntax for these builders is always:

env = Environment(tools=['docbook'])
env.DocbookHtmlhelp('manual')

          If you want to use a specific XSL file, you can set the
          additional xsl parameter to your Builder call as follows:

env.DocbookHtml('other.html', 'manual.xml', xsl='html.xsl')

          Since this may get tedious if you always use the same local
          naming for your customized XSL files, e.g. html.xsl for HTML and
          pdf.xsl for PDF output, a set of variables for setting the
          default XSL name is provided. These are:

DOCBOOK_DEFAULT_XSL_HTML
DOCBOOK_DEFAULT_XSL_HTMLCHUNKED
DOCBOOK_DEFAULT_XSL_HTMLHELP
DOCBOOK_DEFAULT_XSL_PDF
DOCBOOK_DEFAULT_XSL_EPUB
DOCBOOK_DEFAULT_XSL_MAN
DOCBOOK_DEFAULT_XSL_SLIDESPDF
DOCBOOK_DEFAULT_XSL_SLIDESHTML

          and you can set them when constructing your environment:

env = Environment(
    tools=['docbook'],
    DOCBOOK_DEFAULT_XSL_HTML='html.xsl',
    DOCBOOK_DEFAULT_XSL_PDF='pdf.xsl',
)
env.DocbookHtml('manual')  # now uses html.xsl

          Sets: [376]$DOCBOOK_DEFAULT_XSL_EPUB,
          [377]$DOCBOOK_DEFAULT_XSL_HTML,
          [378]$DOCBOOK_DEFAULT_XSL_HTMLCHUNKED,
          [379]$DOCBOOK_DEFAULT_XSL_HTMLHELP,
          [380]$DOCBOOK_DEFAULT_XSL_MAN, [381]$DOCBOOK_DEFAULT_XSL_PDF,
          [382]$DOCBOOK_DEFAULT_XSL_SLIDESHTML,
          [383]$DOCBOOK_DEFAULT_XSL_SLIDESPDF, [384]$DOCBOOK_FOP,
          [385]$DOCBOOK_FOPCOM, [386]$DOCBOOK_FOPFLAGS,
          [387]$DOCBOOK_XMLLINT, [388]$DOCBOOK_XMLLINTCOM,
          [389]$DOCBOOK_XMLLINTFLAGS, [390]$DOCBOOK_XSLTPROC,
          [391]$DOCBOOK_XSLTPROCCOM, [392]$DOCBOOK_XSLTPROCFLAGS,
          [393]$DOCBOOK_XSLTPROCPARAMS.

          Uses: [394]$DOCBOOK_FOPCOMSTR, [395]$DOCBOOK_XMLLINTCOMSTR,
          [396]$DOCBOOK_XSLTPROCCOMSTR.

   dvi
          Attaches the [397]DVI builder to the construction environment.

   dvipdf
          Sets construction variables for the dvipdf utility.

          Sets: [398]$DVIPDF, [399]$DVIPDFCOM, [400]$DVIPDFFLAGS.

          Uses: [401]$DVIPDFCOMSTR.

   dvips
          Sets construction variables for the dvips utility.

          Sets: [402]$DVIPS, [403]$DVIPSFLAGS, [404]$PSCOM,
          [405]$PSPREFIX, [406]$PSSUFFIX.

          Uses: [407]$PSCOMSTR.

   f03
          Set construction variables for generic POSIX Fortran 03
          compilers.

          Sets: [408]$F03, [409]$F03COM, [410]$F03FLAGS, [411]$F03PPCOM,
          [412]$SHF03, [413]$SHF03COM, [414]$SHF03FLAGS, [415]$SHF03PPCOM,
          [416]$_F03INCFLAGS.

          Uses: [417]$F03COMSTR, [418]$F03PPCOMSTR,
          [419]$FORTRANCOMMONFLAGS, [420]$SHF03COMSTR,
          [421]$SHF03PPCOMSTR.

   f08
          Set construction variables for generic POSIX Fortran 08
          compilers.

          Sets: [422]$F08, [423]$F08COM, [424]$F08FLAGS, [425]$F08PPCOM,
          [426]$SHF08, [427]$SHF08COM, [428]$SHF08FLAGS, [429]$SHF08PPCOM,
          [430]$_F08INCFLAGS.

          Uses: [431]$F08COMSTR, [432]$F08PPCOMSTR,
          [433]$FORTRANCOMMONFLAGS, [434]$SHF08COMSTR,
          [435]$SHF08PPCOMSTR.

   f77
          Set construction variables for generic POSIX Fortran 77
          compilers.

          Sets: [436]$F77, [437]$F77COM, [438]$F77FILESUFFIXES,
          [439]$F77FLAGS, [440]$F77PPCOM, [441]$F77PPFILESUFFIXES,
          [442]$FORTRAN, [443]$FORTRANCOM, [444]$FORTRANFLAGS,
          [445]$SHF77, [446]$SHF77COM, [447]$SHF77FLAGS, [448]$SHF77PPCOM,
          [449]$SHFORTRAN, [450]$SHFORTRANCOM, [451]$SHFORTRANFLAGS,
          [452]$SHFORTRANPPCOM, [453]$_F77INCFLAGS.

          Uses: [454]$F77COMSTR, [455]$F77PPCOMSTR,
          [456]$FORTRANCOMMONFLAGS, [457]$FORTRANCOMSTR,
          [458]$FORTRANFLAGS, [459]$FORTRANPPCOMSTR, [460]$SHF77COMSTR,
          [461]$SHF77PPCOMSTR, [462]$SHFORTRANCOMSTR,
          [463]$SHFORTRANFLAGS, [464]$SHFORTRANPPCOMSTR.

   f90
          Set construction variables for generic POSIX Fortran 90
          compilers.

          Sets: [465]$F90, [466]$F90COM, [467]$F90FLAGS, [468]$F90PPCOM,
          [469]$SHF90, [470]$SHF90COM, [471]$SHF90FLAGS, [472]$SHF90PPCOM,
          [473]$_F90INCFLAGS.

          Uses: [474]$F90COMSTR, [475]$F90PPCOMSTR,
          [476]$FORTRANCOMMONFLAGS, [477]$SHF90COMSTR,
          [478]$SHF90PPCOMSTR.

   f95
          Set construction variables for generic POSIX Fortran 95
          compilers.

          Sets: [479]$F95, [480]$F95COM, [481]$F95FLAGS, [482]$F95PPCOM,
          [483]$SHF95, [484]$SHF95COM, [485]$SHF95FLAGS, [486]$SHF95PPCOM,
          [487]$_F95INCFLAGS.

          Uses: [488]$F95COMSTR, [489]$F95PPCOMSTR,
          [490]$FORTRANCOMMONFLAGS, [491]$SHF95COMSTR,
          [492]$SHF95PPCOMSTR.

   fortran
          Set construction variables for generic POSIX Fortran compilers.

          Sets: [493]$FORTRAN, [494]$FORTRANCOM, [495]$FORTRANFLAGS,
          [496]$SHFORTRAN, [497]$SHFORTRANCOM, [498]$SHFORTRANFLAGS,
          [499]$SHFORTRANPPCOM.

          Uses: [500]$CPPFLAGS, [501]$FORTRANCOMSTR,
          [502]$FORTRANPPCOMSTR, [503]$SHFORTRANCOMSTR,
          [504]$SHFORTRANPPCOMSTR, [505]$_CPPDEFFLAGS.

   g++
          Set construction variables for the g++ C++ compiler.

          Sets: [506]$CXX, [507]$CXXVERSION, [508]$SHCXXFLAGS,
          [509]$SHOBJSUFFIX.

   g77
          Set construction variables for the g77 Fortran compiler.

          Sets: [510]$F77, [511]$F77COM, [512]$F77FILESUFFIXES,
          [513]$F77PPCOM, [514]$F77PPFILESUFFIXES, [515]$FORTRAN,
          [516]$FORTRANCOM, [517]$FORTRANPPCOM, [518]$SHF77,
          [519]$SHF77COM, [520]$SHF77FLAGS, [521]$SHF77PPCOM,
          [522]$SHFORTRAN, [523]$SHFORTRANCOM, [524]$SHFORTRANFLAGS,
          [525]$SHFORTRANPPCOM.

          Uses: [526]$F77FLAGS, [527]$FORTRANCOMMONFLAGS,
          [528]$FORTRANFLAGS.

   gas
          Sets construction variables for the gas assembler. Calls the
          [529]as tool.

          Sets: [530]$AS.

   gcc
          Set construction variables for the gcc C compiler.

          Sets: [531]$CC, [532]$CCDEPFLAGS, [533]$CCVERSION,
          [534]$SHCCFLAGS.

   gdc
          Sets construction variables for the D language compiler GDC.

          Sets: [535]$DC, [536]$DCOM, [537]$DDEBUG, [538]$DDEBUGPREFIX,
          [539]$DDEBUGSUFFIX, [540]$DFILESUFFIX, [541]$DFLAGPREFIX,
          [542]$DFLAGS, [543]$DFLAGSUFFIX, [544]$DINCPREFIX,
          [545]$DINCSUFFIX, [546]$DLIB, [547]$DLIBCOM,
          [548]$DLIBDIRPREFIX, [549]$DLIBDIRSUFFIX, [550]$DLIBFLAGPREFIX,
          [551]$DLIBFLAGSUFFIX, [552]$DLIBLINKPREFIX,
          [553]$DLIBLINKSUFFIX, [554]$DLINK, [555]$DLINKCOM,
          [556]$DLINKFLAGPREFIX, [557]$DLINKFLAGS, [558]$DLINKFLAGSUFFIX,
          [559]$DPATH, [560]$DRPATHPREFIX, [561]$DRPATHSUFFIX,
          [562]$DVERPREFIX, [563]$DVERSIONS, [564]$DVERSUFFIX, [565]$SHDC,
          [566]$SHDCOM, [567]$SHDLIBVERSIONFLAGS, [568]$SHDLINK,
          [569]$SHDLINKCOM, [570]$SHDLINKFLAGS.

   gettext
          This is actually a toolset, which supports internationalization
          and localization of software being constructed with SCons. The
          toolset loads following tools:

          + [571]xgettext - to extract internationalized messages from
            source code to POT file(s),
          + [572]msginit - may be optionally used to initialize PO files,
          + [573]msgmerge - to update PO files, that already contain
            translated messages,
          + [574]msgfmt - to compile textual PO file to binary installable
            MO file.

          When you enable gettext, it internally loads all abovementioned
          tools, so you're encouraged to see their individual
          documentation.

          Each of the above tools provides its own builder(s) which may be
          used to perform particular activities related to software
          internationalization. You may be however interested in top-level
          [575]Translate builder.

          To use gettext tools add 'gettext' tool to your environment:

  env = Environment( tools = ['default', 'gettext'] )

   gfortran
          Sets construction variables for the GNU Fortran compiler. Calls
          the [576]fortran Tool module to set variables.

          Sets: [577]$F77, [578]$F90, [579]$F95, [580]$FORTRAN,
          [581]$SHF77, [582]$SHF77FLAGS, [583]$SHF90, [584]$SHF90FLAGS,
          [585]$SHF95, [586]$SHF95FLAGS, [587]$SHFORTRAN,
          [588]$SHFORTRANFLAGS.

   gnulink
          Set construction variables for GNU linker/loader.

          Sets: [589]$LDMODULEVERSIONFLAGS, [590]$RPATHPREFIX,
          [591]$RPATHSUFFIX, [592]$SHLIBVERSIONFLAGS, [593]$SHLINKFLAGS,
          [594]$_LDMODULESONAME, [595]$_SHLIBSONAME.

   gs
          This Tool sets the required construction variables for working
          with the Ghostscript software. It also registers an appropriate
          Action with the [596]PDF Builder, such that the conversion from
          PS/EPS to PDF happens automatically for the TeX/LaTeX toolchain.
          Finally, it adds an explicit [597]Gs Builder for Ghostscript to
          the environment.

          Sets: [598]$GS, [599]$GSCOM, [600]$GSFLAGS.

          Uses: [601]$GSCOMSTR.

   hpc++
          Set construction variables for the compilers aCC on HP/UX
          systems.

   hpcc
          Set construction variables for aCC compilers on HP/UX systems.
          Calls the [602]cXX tool for additional variables.

          Sets: [603]$CXX, [604]$CXXVERSION, [605]$SHCXXFLAGS.

   hplink
          Sets construction variables for the linker on HP/UX systems.

          Sets: [606]$LINKFLAGS, [607]$SHLIBSUFFIX, [608]$SHLINKFLAGS.

   icc
          Sets construction variables for the icc compiler on OS/2
          systems.

          Sets: [609]$CC, [610]$CCCOM, [611]$CFILESUFFIX,
          [612]$CPPDEFPREFIX, [613]$CPPDEFSUFFIX, [614]$CXXCOM,
          [615]$CXXFILESUFFIX, [616]$INCPREFIX, [617]$INCSUFFIX.

          Uses: [618]$CCFLAGS, [619]$CFLAGS, [620]$CPPFLAGS,
          [621]$_CPPDEFFLAGS, [622]$_CPPINCFLAGS.

   icl
          Sets construction variables for the Intel C/C++ compiler. Calls
          the intelc Tool module to set its variables.

   ifl
          Sets construction variables for the Intel Fortran compiler.

          Sets: [623]$FORTRAN, [624]$FORTRANCOM, [625]$FORTRANPPCOM,
          [626]$SHFORTRANCOM, [627]$SHFORTRANPPCOM.

          Uses: [628]$CPPFLAGS, [629]$FORTRANFLAGS, [630]$_CPPDEFFLAGS,
          [631]$_FORTRANINCFLAGS.

   ifort
          Sets construction variables for newer versions of the Intel
          Fortran compiler for Linux.

          Sets: [632]$F77, [633]$F90, [634]$F95, [635]$FORTRAN,
          [636]$SHF77, [637]$SHF77FLAGS, [638]$SHF90, [639]$SHF90FLAGS,
          [640]$SHF95, [641]$SHF95FLAGS, [642]$SHFORTRAN,
          [643]$SHFORTRANFLAGS.

   ilink
          Sets construction variables for the ilink linker on OS/2
          systems.

          Sets: [644]$LIBDIRPREFIX, [645]$LIBDIRSUFFIX,
          [646]$LIBLINKPREFIX, [647]$LIBLINKSUFFIX, [648]$LINK,
          [649]$LINKCOM, [650]$LINKFLAGS.

   ilink32
          Sets construction variables for the Borland ilink32 linker.

          Sets: [651]$LIBDIRPREFIX, [652]$LIBDIRSUFFIX,
          [653]$LIBLINKPREFIX, [654]$LIBLINKSUFFIX, [655]$LINK,
          [656]$LINKCOM, [657]$LINKFLAGS.

   install
          Sets construction variables for file and directory installation.

          Sets: [658]$INSTALL, [659]$INSTALLSTR.

   intelc
          Sets construction variables for the Intel C/C++ compiler (Linux
          and Windows, version 7 and later). Calls the [660]gcc or
          [661]msvc (on Linux and Windows, respectively) tool to set
          underlying variables.

          Sets: [662]$AR, [663]$CC, [664]$CXX,
          [665]$INTEL_C_COMPILER_VERSION, [666]$LINK.

   jar
          Sets construction variables for the jar utility.

          Sets: [667]$JAR, [668]$JARCOM, [669]$JARFLAGS, [670]$JARSUFFIX.

          Uses: [671]$JARCOMSTR.

   javac
          Sets construction variables for the javac compiler.

          Sets: [672]$JAVABOOTCLASSPATH, [673]$JAVAC, [674]$JAVACCOM,
          [675]$JAVACFLAGS, [676]$JAVACLASSPATH, [677]$JAVACLASSSUFFIX,
          [678]$JAVAINCLUDES, [679]$JAVASOURCEPATH, [680]$JAVASUFFIX.

          Uses: [681]$JAVACCOMSTR.

   javah
          Sets construction variables for the javah tool.

          Sets: [682]$JAVACLASSSUFFIX, [683]$JAVAH, [684]$JAVAHCOM,
          [685]$JAVAHFLAGS.

          Uses: [686]$JAVACLASSPATH, [687]$JAVAHCOMSTR.

   latex
          Sets construction variables for the latex utility.

          Sets: [688]$LATEX, [689]$LATEXCOM, [690]$LATEXFLAGS.

          Uses: [691]$LATEXCOMSTR.

   ldc
          Sets construction variables for the D language compiler LDC2.

          Sets: [692]$DC, [693]$DCOM, [694]$DDEBUG, [695]$DDEBUGPREFIX,
          [696]$DDEBUGSUFFIX, [697]$DFILESUFFIX, [698]$DFLAGPREFIX,
          [699]$DFLAGS, [700]$DFLAGSUFFIX, [701]$DINCPREFIX,
          [702]$DINCSUFFIX, [703]$DLIB, [704]$DLIBCOM,
          [705]$DLIBDIRPREFIX, [706]$DLIBDIRSUFFIX, [707]$DLIBFLAGPREFIX,
          [708]$DLIBFLAGSUFFIX, [709]$DLIBLINKPREFIX,
          [710]$DLIBLINKSUFFIX, [711]$DLINK, [712]$DLINKCOM,
          [713]$DLINKFLAGPREFIX, [714]$DLINKFLAGS, [715]$DLINKFLAGSUFFIX,
          [716]$DPATH, [717]$DRPATHPREFIX, [718]$DRPATHSUFFIX,
          [719]$DVERPREFIX, [720]$DVERSIONS, [721]$DVERSUFFIX, [722]$SHDC,
          [723]$SHDCOM, [724]$SHDLIBVERSIONFLAGS, [725]$SHDLINK,
          [726]$SHDLINKCOM, [727]$SHDLINKFLAGS.

   lex
          Sets construction variables for the lex lexical analyser.

          Sets: [728]$LEX, [729]$LEXCOM, [730]$LEXFLAGS, [731]$LEXUNISTD.

          Uses: [732]$LEXCOMSTR, [733]$LEXFLAGS, [734]$LEX_HEADER_FILE,
          [735]$LEX_TABLES_FILE.

   link
          Sets construction variables for generic POSIX linkers. This is a
          "smart" linker tool which selects a compiler to complete the
          linking based on the types of source files.

          Sets: [736]$LDMODULE, [737]$LDMODULECOM, [738]$LDMODULEFLAGS,
          [739]$LDMODULENOVERSIONSYMLINKS, [740]$LDMODULEPREFIX,
          [741]$LDMODULESUFFIX, [742]$LDMODULEVERSION,
          [743]$LDMODULEVERSIONFLAGS, [744]$LIBDIRPREFIX,
          [745]$LIBDIRSUFFIX, [746]$LIBLINKPREFIX, [747]$LIBLINKSUFFIX,
          [748]$LINK, [749]$LINKCOM, [750]$LINKFLAGS, [751]$SHLIBSUFFIX,
          [752]$SHLINK, [753]$SHLINKCOM, [754]$SHLINKFLAGS,
          [755]$__LDMODULEVERSIONFLAGS, [756]$__SHLIBVERSIONFLAGS.

          Uses: [757]$LDMODULECOMSTR, [758]$LINKCOMSTR,
          [759]$SHLINKCOMSTR.

   linkloc
          Sets construction variables for the LinkLoc linker for the Phar
          Lap ETS embedded operating system.

          Sets: [760]$LIBDIRPREFIX, [761]$LIBDIRSUFFIX,
          [762]$LIBLINKPREFIX, [763]$LIBLINKSUFFIX, [764]$LINK,
          [765]$LINKCOM, [766]$LINKFLAGS, [767]$SHLINK, [768]$SHLINKCOM,
          [769]$SHLINKFLAGS.

          Uses: [770]$LINKCOMSTR, [771]$SHLINKCOMSTR.

   m4
          Sets construction variables for the m4 macro processor.

          Sets: [772]$M4, [773]$M4COM, [774]$M4FLAGS.

          Uses: [775]$M4COMSTR.

   masm
          Sets construction variables for the Microsoft assembler.

          Sets: [776]$AS, [777]$ASCOM, [778]$ASFLAGS, [779]$ASPPCOM,
          [780]$ASPPFLAGS.

          Uses: [781]$ASCOMSTR, [782]$ASPPCOMSTR, [783]$CPPFLAGS,
          [784]$_CPPDEFFLAGS, [785]$_CPPINCFLAGS.

   midl
          Sets construction variables for the Microsoft IDL compiler.

          Sets: [786]$MIDL, [787]$MIDLCOM, [788]$MIDLFLAGS.

          Uses: [789]$MIDLCOMSTR.

   mingw
          Sets construction variables for MinGW (Minimal Gnu on Windows).

          Sets: [790]$AS, [791]$CC, [792]$CXX, [793]$LDMODULECOM,
          [794]$LIBPREFIX, [795]$LIBSUFFIX, [796]$OBJSUFFIX, [797]$RC,
          [798]$RCCOM, [799]$RCFLAGS, [800]$RCINCFLAGS, [801]$RCINCPREFIX,
          [802]$RCINCSUFFIX, [803]$SHCCFLAGS, [804]$SHCXXFLAGS,
          [805]$SHLINKCOM, [806]$SHLINKFLAGS, [807]$SHOBJSUFFIX,
          [808]$WINDOWSDEFPREFIX, [809]$WINDOWSDEFSUFFIX.

          Uses: [810]$RCCOMSTR, [811]$SHLINKCOMSTR.

   msgfmt
          This scons tool is a part of scons [812]gettext toolset. It
          provides scons interface to msgfmt(1) command, which generates
          binary message catalog (MO) from a textual translation
          description (PO).

          Sets: [813]$MOSUFFIX, [814]$MSGFMT, [815]$MSGFMTCOM,
          [816]$MSGFMTCOMSTR, [817]$MSGFMTFLAGS, [818]$POSUFFIX.

          Uses: [819]$LINGUAS_FILE.

   msginit
          This scons tool is a part of scons [820]gettext toolset. It
          provides scons interface to msginit(1) program, which creates
          new PO file, initializing the meta information with values from
          user's environment (or options).

          Sets: [821]$MSGINIT, [822]$MSGINITCOM, [823]$MSGINITCOMSTR,
          [824]$MSGINITFLAGS, [825]$POAUTOINIT, [826]$POCREATE_ALIAS,
          [827]$POSUFFIX, [828]$POTSUFFIX, [829]$_MSGINITLOCALE.

          Uses: [830]$LINGUAS_FILE, [831]$POAUTOINIT, [832]$POTDOMAIN.

   msgmerge
          This scons tool is a part of scons [833]gettext toolset. It
          provides scons interface to msgmerge(1) command, which merges
          two Uniform style .po files together.

          Sets: [834]$MSGMERGE, [835]$MSGMERGECOM, [836]$MSGMERGECOMSTR,
          [837]$MSGMERGEFLAGS, [838]$POSUFFIX, [839]$POTSUFFIX,
          [840]$POUPDATE_ALIAS.

          Uses: [841]$LINGUAS_FILE, [842]$POAUTOINIT, [843]$POTDOMAIN.

   mslib
          Sets construction variables for the Microsoft mslib library
          archiver.

          Sets: [844]$AR, [845]$ARCOM, [846]$ARFLAGS, [847]$LIBPREFIX,
          [848]$LIBSUFFIX.

          Uses: [849]$ARCOMSTR.

   mslink
          Sets construction variables for the Microsoft linker.

          Sets: [850]$LDMODULE, [851]$LDMODULECOM, [852]$LDMODULEFLAGS,
          [853]$LDMODULEPREFIX, [854]$LDMODULESUFFIX, [855]$LIBDIRPREFIX,
          [856]$LIBDIRSUFFIX, [857]$LIBLINKPREFIX, [858]$LIBLINKSUFFIX,
          [859]$LINK, [860]$LINKCOM, [861]$LINKFLAGS, [862]$REGSVR,
          [863]$REGSVRCOM, [864]$REGSVRFLAGS, [865]$SHLINK,
          [866]$SHLINKCOM, [867]$SHLINKFLAGS, [868]$WINDOWSDEFPREFIX,
          [869]$WINDOWSDEFSUFFIX, [870]$WINDOWSEXPPREFIX,
          [871]$WINDOWSEXPSUFFIX, [872]$WINDOWSPROGMANIFESTPREFIX,
          [873]$WINDOWSPROGMANIFESTSUFFIX,
          [874]$WINDOWSSHLIBMANIFESTPREFIX,
          [875]$WINDOWSSHLIBMANIFESTSUFFIX, [876]$WINDOWS_INSERT_DEF.

          Uses: [877]$LDMODULECOMSTR, [878]$LINKCOMSTR,
          [879]$REGSVRCOMSTR, [880]$SHLINKCOMSTR.

   mssdk
          Sets variables for Microsoft Platform SDK and/or Windows SDK.
          Note that unlike most other Tool modules, mssdk does not set
          construction variables, but sets the environment variables in
          the environment SCons uses to execute the Microsoft toolchain:
          %INCLUDE%, %LIB%, %LIBPATH% and %PATH%.

          Uses: [881]$MSSDK_DIR, [882]$MSSDK_VERSION, [883]$MSVS_VERSION.

   msvc
          Sets construction variables for the Microsoft Visual C/C++
          compiler.

          Sets: [884]$BUILDERS, [885]$CC, [886]$CCCOM, [887]$CCDEPFLAGS,
          [888]$CCFLAGS, [889]$CCPCHFLAGS, [890]$CCPDBFLAGS,
          [891]$CFILESUFFIX, [892]$CFLAGS, [893]$CPPDEFPREFIX,
          [894]$CPPDEFSUFFIX, [895]$CXX, [896]$CXXCOM,
          [897]$CXXFILESUFFIX, [898]$CXXFLAGS, [899]$INCPREFIX,
          [900]$INCSUFFIX, [901]$OBJPREFIX, [902]$OBJSUFFIX, [903]$PCHCOM,
          [904]$PCHPDBFLAGS, [905]$RC, [906]$RCCOM, [907]$RCFLAGS,
          [908]$SHCC, [909]$SHCCCOM, [910]$SHCCFLAGS, [911]$SHCFLAGS,
          [912]$SHCXX, [913]$SHCXXCOM, [914]$SHCXXFLAGS,
          [915]$SHOBJPREFIX, [916]$SHOBJSUFFIX.

          Uses: [917]$CCCOMSTR, [918]$CXXCOMSTR,
          [919]$MSVC_NOTFOUND_POLICY, [920]$PCH, [921]$PCHSTOP, [922]$PDB,
          [923]$SHCCCOMSTR, [924]$SHCXXCOMSTR.

   msvs
          Sets construction variables for Microsoft Visual Studio.

          Sets: [925]$MSVSBUILDCOM, [926]$MSVSCLEANCOM,
          [927]$MSVSENCODING, [928]$MSVSPROJECTCOM, [929]$MSVSREBUILDCOM,
          [930]$MSVSSCONS, [931]$MSVSSCONSCOM, [932]$MSVSSCONSCRIPT,
          [933]$MSVSSCONSFLAGS, [934]$MSVSSOLUTIONCOM.

   mwcc
          Sets construction variables for the Metrowerks CodeWarrior
          compiler.

          Sets: [935]$CC, [936]$CCCOM, [937]$CFILESUFFIX,
          [938]$CPPDEFPREFIX, [939]$CPPDEFSUFFIX, [940]$CXX, [941]$CXXCOM,
          [942]$CXXFILESUFFIX, [943]$INCPREFIX, [944]$INCSUFFIX,
          [945]$MWCW_VERSION, [946]$MWCW_VERSIONS, [947]$SHCC,
          [948]$SHCCCOM, [949]$SHCCFLAGS, [950]$SHCFLAGS, [951]$SHCXX,
          [952]$SHCXXCOM, [953]$SHCXXFLAGS.

          Uses: [954]$CCCOMSTR, [955]$CXXCOMSTR, [956]$SHCCCOMSTR,
          [957]$SHCXXCOMSTR.

   mwld
          Sets construction variables for the Metrowerks CodeWarrior
          linker.

          Sets: [958]$AR, [959]$ARCOM, [960]$LIBDIRPREFIX,
          [961]$LIBDIRSUFFIX, [962]$LIBLINKPREFIX, [963]$LIBLINKSUFFIX,
          [964]$LINK, [965]$LINKCOM, [966]$SHLINK, [967]$SHLINKCOM,
          [968]$SHLINKFLAGS.

   nasm
          Sets construction variables for the nasm Netwide Assembler.

          Sets: [969]$AS, [970]$ASCOM, [971]$ASFLAGS, [972]$ASPPCOM,
          [973]$ASPPFLAGS.

          Uses: [974]$ASCOMSTR, [975]$ASPPCOMSTR.

   ninja
          Sets up the [976]Ninja builder, which generates a ninja build
          file, and then optionally runs ninja.

Note

          This is an experimental feature. This functionality is subject
          to change and/or removal without a deprecation cycle.

          Sets: [977]$IMPLICIT_COMMAND_DEPENDENCIES,
          [978]$NINJA_ALIAS_NAME, [979]$NINJA_CMD_ARGS,
          [980]$NINJA_COMPDB_EXPAND, [981]$NINJA_DEPFILE_PARSE_FORMAT,
          [982]$NINJA_DIR, [983]$NINJA_DISABLE_AUTO_RUN,
          [984]$NINJA_ENV_VAR_CACHE, [985]$NINJA_FILE_NAME,
          [986]$NINJA_FORCE_SCONS_BUILD,
          [987]$NINJA_GENERATED_SOURCE_ALIAS_NAME,
          [988]$NINJA_GENERATED_SOURCE_SUFFIXES,
          [989]$NINJA_MSVC_DEPS_PREFIX, [990]$NINJA_POOL,
          [991]$NINJA_REGENERATE_DEPS,
          [992]$NINJA_SCONS_DAEMON_KEEP_ALIVE,
          [993]$NINJA_SCONS_DAEMON_PORT, [994]$NINJA_SYNTAX,
          [995]$_NINJA_REGENERATE_DEPS_FUNC.

          Uses: [996]$AR, [997]$ARCOM, [998]$ARFLAGS, [999]$CC,
          [1000]$CCCOM, [1001]$CCDEPFLAGS, [1002]$CCFLAGS, [1003]$CXX,
          [1004]$CXXCOM, [1005]$ESCAPE, [1006]$LINK, [1007]$LINKCOM,
          [1008]$PLATFORM, [1009]$PRINT_CMD_LINE_FUNC, [1010]$PROGSUFFIX,
          [1011]$RANLIB, [1012]$RANLIBCOM, [1013]$SHCCCOM,
          [1014]$SHCXXCOM, [1015]$SHLINK, [1016]$SHLINKCOM.

   packaging
          Sets construction variables for the [1017]Package Builder. If
          this tool is enabled, the --package-type command-line option is
          also enabled.

   pdf
          Sets construction variables for the Portable Document Format
          builder.

          Sets: [1018]$PDFPREFIX, [1019]$PDFSUFFIX.

   pdflatex
          Sets construction variables for the pdflatex utility.

          Sets: [1020]$LATEXRETRIES, [1021]$PDFLATEX, [1022]$PDFLATEXCOM,
          [1023]$PDFLATEXFLAGS.

          Uses: [1024]$PDFLATEXCOMSTR.

   pdftex
          Sets construction variables for the pdftex utility.

          Sets: [1025]$LATEXRETRIES, [1026]$PDFLATEX, [1027]$PDFLATEXCOM,
          [1028]$PDFLATEXFLAGS, [1029]$PDFTEX, [1030]$PDFTEXCOM,
          [1031]$PDFTEXFLAGS.

          Uses: [1032]$PDFLATEXCOMSTR, [1033]$PDFTEXCOMSTR.

   python
          Loads the Python source scanner into the invoking environment.
          When loaded, the scanner will attempt to find implicit
          dependencies for any Python source files in the list of sources
          provided to an Action that uses this environment.

          Available since scons 4.0..

   qt
          Sets construction variables for building Qt3 applications.

Note

          This tool is only suitable for building targeted to Qt3, which
          is obsolete (the tool is deprecated since 4.3). There are
          contributed tools for Qt4 and Qt5, see
          [1034]https://github.com/SCons/scons-contrib. Qt4 has also
          passed end of life for standard support (in Dec 2015).

          Note paths for these construction variables are assembled using
          the os.path.join method so they will have the appropriate
          separator at runtime, but are listed here in the various entries
          only with the '/' separator for simplicity.

          In addition, the construction variables [1035]$CPPPATH,
          [1036]$LIBPATH and [1037]$LIBS may be modified and the variables
          [1038]$PROGEMITTER, [1039]$SHLIBEMITTER and [1040]$LIBEMITTER
          are modified. Because the build-performance is affected when
          using this tool, you have to explicitly specify it at
          Environment creation:

Environment(tools=['default','qt'])

          The qt tool supports the following operations:

          Automatic moc file generation from header files. You do not have
          to specify moc files explicitly, the tool does it for you.
          However, there are a few preconditions to do so: Your header
          file must have the same filebase as your implementation file and
          must stay in the same directory. It must have one of the
          suffixes .h, .hpp, .H, .hxx, .hh. You can turn off automatic moc
          file generation by setting [1041]$QT_AUTOSCAN to False. See also
          the corresponding [1042]Moc Builder.

          Automatic moc file generation from C++ files. As described in
          the Qt documentation, include the moc file at the end of the C++
          file. Note that you have to include the file, which is generated
          by the transformation
          ${QT_MOCCXXPREFIX}<basename>${QT_MOCCXXSUFFIX}, by default
          <basename>.mo. A warning is generated after building the moc
          file if you do not include the correct file. If you are using
          [1043]VariantDir, you may need to specify duplicate=True. You
          can turn off automatic moc file generation by setting
          $QT_AUTOSCAN to False. See also the corresponding [1044]Moc
          Builder.

          Automatic handling of .ui files. The implementation files
          generated from .ui files are handled much the same as yacc or
          lex files. Each .ui file given as a source of [1045]Program,
          [1046]Library or [1047]SharedLibrary will generate three files:
          the declaration file, the implementation file and a moc file.
          Because there are also generated headers, you may need to
          specify duplicate=True in calls to [1048]VariantDir. See also
          the corresponding [1049]Uic Builder.

          Sets: [1050]$QTDIR, [1051]$QT_AUTOSCAN, [1052]$QT_BINPATH,
          [1053]$QT_CPPPATH, [1054]$QT_LIB, [1055]$QT_LIBPATH,
          [1056]$QT_MOC, [1057]$QT_MOCCXXPREFIX, [1058]$QT_MOCCXXSUFFIX,
          [1059]$QT_MOCFROMCXXCOM, [1060]$QT_MOCFROMCXXFLAGS,
          [1061]$QT_MOCFROMHCOM, [1062]$QT_MOCFROMHFLAGS,
          [1063]$QT_MOCHPREFIX, [1064]$QT_MOCHSUFFIX, [1065]$QT_UIC,
          [1066]$QT_UICCOM, [1067]$QT_UICDECLFLAGS,
          [1068]$QT_UICDECLPREFIX, [1069]$QT_UICDECLSUFFIX,
          [1070]$QT_UICIMPLFLAGS, [1071]$QT_UICIMPLPREFIX,
          [1072]$QT_UICIMPLSUFFIX, [1073]$QT_UISUFFIX.

          Uses: [1074]$QTDIR.

   rmic
          Sets construction variables for the rmic utility.

          Sets: [1075]$JAVACLASSSUFFIX, [1076]$RMIC, [1077]$RMICCOM,
          [1078]$RMICFLAGS.

          Uses: [1079]$RMICCOMSTR.

   rpcgen
          Sets construction variables for building with RPCGEN.

          Sets: [1080]$RPCGEN, [1081]$RPCGENCLIENTFLAGS,
          [1082]$RPCGENFLAGS, [1083]$RPCGENHEADERFLAGS,
          [1084]$RPCGENSERVICEFLAGS, [1085]$RPCGENXDRFLAGS.

   sgiar
          Sets construction variables for the SGI library archiver.

          Sets: [1086]$AR, [1087]$ARCOMSTR, [1088]$ARFLAGS,
          [1089]$LIBPREFIX, [1090]$LIBSUFFIX, [1091]$SHLINK,
          [1092]$SHLINKFLAGS.

          Uses: [1093]$ARCOMSTR, [1094]$SHLINKCOMSTR.

   sgic++
          Sets construction variables for the SGI C++ compiler.

          Sets: [1095]$CXX, [1096]$CXXFLAGS, [1097]$SHCXX,
          [1098]$SHOBJSUFFIX.

   sgicc
          Sets construction variables for the SGI C compiler.

          Sets: [1099]$CXX, [1100]$SHOBJSUFFIX.

   sgilink
          Sets construction variables for the SGI linker.

          Sets: [1101]$LINK, [1102]$RPATHPREFIX, [1103]$RPATHSUFFIX,
          [1104]$SHLINKFLAGS.

   sunar
          Sets construction variables for the Sun library archiver.

          Sets: [1105]$AR, [1106]$ARCOM, [1107]$ARFLAGS, [1108]$LIBPREFIX,
          [1109]$LIBSUFFIX.

          Uses: [1110]$ARCOMSTR.

   sunc++
          Sets construction variables for the Sun C++ compiler.

          Sets: [1111]$CXX, [1112]$CXXVERSION, [1113]$SHCXX,
          [1114]$SHCXXFLAGS, [1115]$SHOBJPREFIX, [1116]$SHOBJSUFFIX.

   suncc
          Sets construction variables for the Sun C compiler.

          Sets: [1117]$CXX, [1118]$SHCCFLAGS, [1119]$SHOBJPREFIX,
          [1120]$SHOBJSUFFIX.

   sunf77
          Set construction variables for the Sun f77 Fortran compiler.

          Sets: [1121]$F77, [1122]$FORTRAN, [1123]$SHF77,
          [1124]$SHF77FLAGS, [1125]$SHFORTRAN, [1126]$SHFORTRANFLAGS.

   sunf90
          Set construction variables for the Sun f90 Fortran compiler.

          Sets: [1127]$F90, [1128]$FORTRAN, [1129]$SHF90,
          [1130]$SHF90FLAGS, [1131]$SHFORTRAN, [1132]$SHFORTRANFLAGS.

   sunf95
          Set construction variables for the Sun f95 Fortran compiler.

          Sets: [1133]$F95, [1134]$FORTRAN, [1135]$SHF95,
          [1136]$SHF95FLAGS, [1137]$SHFORTRAN, [1138]$SHFORTRANFLAGS.

   sunlink
          Sets construction variables for the Sun linker.

          Sets: [1139]$RPATHPREFIX, [1140]$RPATHSUFFIX,
          [1141]$SHLINKFLAGS.

   swig
          Sets construction variables for the SWIG interface compiler.

          Sets: [1142]$SWIG, [1143]$SWIGCFILESUFFIX, [1144]$SWIGCOM,
          [1145]$SWIGCXXFILESUFFIX, [1146]$SWIGDIRECTORSUFFIX,
          [1147]$SWIGFLAGS, [1148]$SWIGINCPREFIX, [1149]$SWIGINCSUFFIX,
          [1150]$SWIGPATH, [1151]$SWIGVERSION, [1152]$_SWIGINCFLAGS.

          Uses: [1153]$SWIGCOMSTR.

   tar
          Sets construction variables for the tar archiver.

          Sets: [1154]$TAR, [1155]$TARCOM, [1156]$TARFLAGS,
          [1157]$TARSUFFIX.

          Uses: [1158]$TARCOMSTR.

   tex
          Sets construction variables for the TeX formatter and
          typesetter.

          Sets: [1159]$BIBTEX, [1160]$BIBTEXCOM, [1161]$BIBTEXFLAGS,
          [1162]$LATEX, [1163]$LATEXCOM, [1164]$LATEXFLAGS,
          [1165]$MAKEINDEX, [1166]$MAKEINDEXCOM, [1167]$MAKEINDEXFLAGS,
          [1168]$TEX, [1169]$TEXCOM, [1170]$TEXFLAGS.

          Uses: [1171]$BIBTEXCOMSTR, [1172]$LATEXCOMSTR,
          [1173]$MAKEINDEXCOMSTR, [1174]$TEXCOMSTR.

   textfile
          Set construction variables for the Textfile and Substfile
          builders.

          Sets: [1175]$LINESEPARATOR, [1176]$SUBSTFILEPREFIX,
          [1177]$SUBSTFILESUFFIX, [1178]$TEXTFILEPREFIX,
          [1179]$TEXTFILESUFFIX.

          Uses: [1180]$SUBST_DICT.

   tlib
          Sets construction variables for the Borlan tib library archiver.

          Sets: [1181]$AR, [1182]$ARCOM, [1183]$ARFLAGS, [1184]$LIBPREFIX,
          [1185]$LIBSUFFIX.

          Uses: [1186]$ARCOMSTR.

   xgettext
          This scons tool is a part of scons [1187]gettext toolset. It
          provides scons interface to xgettext(1) program, which extracts
          internationalized messages from source code. The tool provides
          POTUpdate builder to make PO Template files.

          Sets: [1188]$POTSUFFIX, [1189]$POTUPDATE_ALIAS,
          [1190]$XGETTEXTCOM, [1191]$XGETTEXTCOMSTR, [1192]$XGETTEXTFLAGS,
          [1193]$XGETTEXTFROM, [1194]$XGETTEXTFROMPREFIX,
          [1195]$XGETTEXTFROMSUFFIX, [1196]$XGETTEXTPATH,
          [1197]$XGETTEXTPATHPREFIX, [1198]$XGETTEXTPATHSUFFIX,
          [1199]$_XGETTEXTDOMAIN, [1200]$_XGETTEXTFROMFLAGS,
          [1201]$_XGETTEXTPATHFLAGS.

          Uses: [1202]$POTDOMAIN.

   yacc
          Sets construction variables for the yacc parse generator.

          Sets: [1203]$YACC, [1204]$YACCCOM, [1205]$YACCFLAGS,
          [1206]$YACCHFILESUFFIX, [1207]$YACCHXXFILESUFFIX,
          [1208]$YACCVCGFILESUFFIX.

          Uses: [1209]$YACCCOMSTR, [1210]$YACCFLAGS,
          [1211]$YACC_GRAPH_FILE, [1212]$YACC_HEADER_FILE.

   zip
          Sets construction variables for the zip archiver.

          Sets: [1213]$ZIP, [1214]$ZIPCOM, [1215]$ZIPCOMPRESSION,
          [1216]$ZIPFLAGS, [1217]$ZIPSUFFIX.

          Uses: [1218]$ZIPCOMSTR.

Builder Methods

   You tell SCons what to build by calling Builders, functions which take
   particular action(s) to produce target(s) of a particular type
   (conventionally hinted at by the builder name, e.g. Program) from the
   specified source files. A builder call is a declaration: SCons enters
   the specified relationship into its internal dependency node graph, and
   only later makes the decision on whether anything is actually built,
   since this depends on command-line options, target selection rules, and
   whether the target(s) are out of date with respect to the sources.

   SCons provides a number of builders, and you can also write your own
   (see [1219]Builder Objects). Builders are created dynamically at
   run-time, often (though not always) by tools which determine whether
   the external dependencies for the builder are satisfied, and which
   perform the necessary setup (see [1220]Tools). Builders are attached to
   a construction environment as methods. The available builder methods
   are registered as key-value pairs in the [1221]$BUILDERS attribute of
   the construction environment, so the available builders can be
   examined. This example displays them for debugging purposes:
env = Environment()
print("Builders:", list(env['BUILDERS']))

   Builder methods take two required arguments: target and source. The
   target and source arguments can be specified either as positional
   arguments, in which case target comes first, or as keyword arguments,
   using target= and source=. Although both arguments are nominally
   required, if there is a single source and the target can be inferred
   the target argument can be omitted (see below). Builder methods also
   take a variety of keyword arguments, described below.

   Because long lists of file names can lead to a lot of quoting in a
   builder call, SCons supplies a [1222]Split global function and a
   same-named environment method that splits a single string into a list,
   using strings of white-space characters as the delimiter (similar to
   the Python string split method, but succeeds even if the input isn't a
   string).

   The following are equivalent examples of calling the Program builder
   method:
env.Program('bar', ['bar.c', 'foo.c'])
env.Program('bar', Split('bar.c foo.c'))
env.Program('bar', env.Split('bar.c foo.c'))
env.Program(source=['bar.c', 'foo.c'], target='bar')
env.Program(target='bar', source=Split('bar.c foo.c'))
env.Program(target='bar', source=env.Split('bar.c foo.c'))
env.Program('bar', source='bar.c foo.c'.split())

   Sources and targets can be specified as a scalar or as a list, composed
   of either strings or nodes (more on nodes below). When specifying path
   strings, Python follows the POSIX pathname convention: if a string
   begins with the operating system pathname separator (on Windows both
   the slash and backslash separator are accepted, and any leading drive
   specifier is ignored for the determination) it is considered an
   absolute path, otherwise it is a relative path. If the path string
   contains no separator characters, it is searched for as a file in the
   current directory. If it contains separator characters, the search
   follows down from the starting point, which is the top of the directory
   tree for an absolute path and the current directory for a relative
   path. The "current directory" in this context is the directory of the
   SConscript file currently being processed.

   SCons also recognizes a third way to specify path strings: if the
   string begins with the # character it is top-relative - it works like a
   relative path but the search follows down from the directory containing
   the top-level SConstruct rather than from the current directory. The #
   can optionally be followed by a pathname separator, which is ignored if
   found in that position. Top-relative paths only work in places where
   scons will interpret the path (see some examples below). To be used in
   other contexts the string will need to be converted to a relative or
   absolute path first.

   Examples:
# The comments describing the targets that will be built
# assume these calls are in a SConscript file in the
# a subdirectory named "subdir".

# Builds the program "subdir/foo" from "subdir/foo.c":
env.Program('foo', 'foo.c')

# Builds the program "/tmp/bar" from "subdir/bar.c":
env.Program('/tmp/bar', 'bar.c')

# An initial '#' or '#/' are equivalent; the following
# calls build the programs "foo" and "bar" (in the
# top-level SConstruct directory) from "subdir/foo.c" and
# "subdir/bar.c", respectively:
env.Program('#foo', 'foo.c')
env.Program('#/bar', 'bar.c')

# Builds the program "other/foo" (relative to the top-level
# SConstruct directory) from "subdir/foo.c":
env.Program('#other/foo', 'foo.c')

# This will not work, only SCons interfaces understand '#',
# os.path.exists is pure Python:
if os.path.exists('#inc/foo.h'):
    env.Append(CPPPATH='#inc')

   When the target shares the same base name as the source and only the
   suffix varies, and if the builder method has a suffix defined for the
   target file type, then the target argument may be omitted completely,
   and scons will deduce the target file name from the source file name.
   The following examples all build the executable program bar (on POSIX
   systems) or bar.exe (on Windows systems) from the bar.c source file:
env.Program(target='bar', source='bar.c')
env.Program('bar', source='bar.c')
env.Program(source='bar.c')
env.Program('bar.c')

   The optional srcdir keyword argument specifies that all source file
   strings that are not absolute paths or top-relative paths shall be
   interpreted relative to the specified srcdir. The following example
   will build the build/prog (or build/prog.exe on Windows) program from
   the files src/f1.c and src/f2.c:
env.Program('build/prog', ['f1.c', 'f2.c'], srcdir='src')

   The optional parse_flags keyword argument causes behavior similar to
   the [1223]env.MergeFlags method, where the argument value is broken
   into individual settings and merged into the appropriate construction
   variables.
env.Program('hello', 'hello.c', parse_flags='-Iinclude -DEBUG -lm')

   This example adds 'include' to the [1224]$CPPPATH construction
   variable, 'EBUG' to [1225]$CPPDEFINES, and 'm' to [1226]$LIBS.

   The optional chdir keyword argument specifies that the Builder's
   action(s) should be executed after changing directory. If the chdir
   argument is a path string or a directory Node, scons will change to the
   specified directory. If the chdir is not a string or Node and evaluates
   true, then scons will change to the target file's directory.

Warning

   Python only keeps one current directory location even if there are
   multiple threads. This means that use of the chdir argument will not
   work with the SCons -j option, because individual worker threads
   spawned by SCons interfere with each other when they start changing
   directory.
# scons will change to the "sub" subdirectory
# before executing the "cp" command.
env.Command(
    target='sub/dir/foo.out',
    source='sub/dir/foo.in',
    action="cp dir/foo.in dir/foo.out",
    chdir='sub',
)

# Because chdir is not a string, scons will change to the
# target's directory ("sub/dir") before executing the
# "cp" command.
env.Command('sub/dir/foo.out', 'sub/dir/foo.in', "cp foo.in foo.out", chdir=True
)

   Note that SCons will not automatically modify its expansion of
   construction variables like [1227]$TARGET and [1228]$SOURCE when using
   the chdir keyword argument--that is, the expanded file names will still
   be relative to the top-level directory where the SConstruct was found,
   and consequently incorrect relative to the chdir directory. If you use
   the chdir keyword argument, you will typically need to supply a
   different command line using expansions like ${TARGET.file} and
   ${SOURCE.file} to use just the filename portion of the target and
   source.

   Keyword arguments that are not specifically recognized are treated as
   construction variable overrides, which replace or add those variables
   on a limited basis. These overrides will only be in effect when
   building the target of the builder call, and will not affect other
   parts of the build. For example, if you want to specify some libraries
   needed by just one program:
env.Program('hello', 'hello.c', LIBS=['gl', 'glut'])

   or generate a shared library with a non-standard suffix:
env.SharedLibrary(
    target='word',
    source='word.cpp',
    SHLIBSUFFIX='.ocx',
    LIBSUFFIXES=['.ocx'],
)

   Note that both the [1229]$SHLIBSUFFIX and [1230]$LIBSUFFIXES
   construction variables must be set if you want scons to search
   automatically for dependencies on the non-standard library names; see
   the descriptions of these variables for more information.

   Although the builder methods defined by scons are, in fact, methods of
   a construction environment object, many may also be called without an
   explicit environment:
Program('hello', 'hello.c')
SharedLibrary('word', 'word.cpp')

   If called this way, the builder will internally use the Default
   Environment that consists of the tools and values that scons has
   determined are appropriate for the local system.

   Builder methods that can be called without an explicit environment
   (indicated in the listing of builders below without a leading env.) may
   be called from custom Python modules that you import into an SConscript
   file by adding the following to the Python module:
from SCons.Script import *

   A builder may add additional targets beyond those requested if an
   attached Emitter chooses to do so (see [1231]the section called
   "Builder Objects" for more information. [1232]$PROGEMITTER is an
   example). For example, the GNU linker takes a command-line argument
   -Map=mapfile, which causes it to produce a linker map file in addition
   to the executable file actually being linked. If the [1233]Program
   builder's emitter is configured to add this mapfile if the option is
   set, then two targets will be returned when you only provided for one.

   For this reason, builder methods always return a NodeList, a list-like
   object whose elements are Nodes. Nodes are the internal representation
   of build targets or sources (see [1234]the section called "Node
   Objects" for more information). The returned NodeList object can be
   passed to other builder methods as source(s) or to other SCons
   functions or methods where a path string would normally be accepted.

   For example, to add a specific preprocessor define when compiling one
   specific object file but not the others:
bar_obj_list = env.StaticObject('bar.c', CPPDEFINES='-DBAR')
env.Program("prog", ['foo.c', bar_obj_list, 'main.c'])

   Using a Node as in this example makes for a more portable build by
   avoiding having to specify a platform-specific object suffix when
   calling the [1235]Program builder method.

   The NodeList object is also convenient to pass to the [1236]Default
   function, for the same reason of avoiding a platform-specific name:
tgt = env.Program("prog", ["foo.c", "bar.c", "main.c"])
Default(tgt)

   Builder calls will automatically "flatten" lists passed as source and
   target, so they are free to contain elements which are themselves
   lists, such as bar_obj_list returned by the [1237]StaticObject call. If
   you need to manipulate a list of lists returned by builders directly in
   Python code, you can either build a new list by hand:
foo = Object('foo.c')
bar = Object('bar.c')
objects = ['begin.o'] + foo + ['middle.o'] + bar + ['end.o']
for obj in objects:
    print(str(obj))

   Or you can use the [1238]Flatten function supplied by SCons to create a
   list containing just the Nodes, which may be more convenient:
foo = Object('foo.c')
bar = Object('bar.c')
objects = Flatten(['begin.o', foo, 'middle.o', bar, 'end.o'])
for obj in objects:
    print(str(obj))

   Since builder calls return a list-like object, not an actual Python
   list, it is not appropriate to use the Python add operator (+ or +=) to
   append builder results to a Python list. Because the list and the
   object are different types, Python will not update the original list in
   place, but will instead create a new NodeList object containing the
   concatenation of the list elements and the builder results. This will
   cause problems for any other Python variables in your SCons
   configuration that still hold on to a reference to the original list.
   Instead, use the Python list extend method to make sure the list is
   updated in-place. Example:
object_files = []

# Do NOT use += here:
#    object_files += Object('bar.c')
#
# It will not update the object_files list in place.
#
# Instead, use the list extend method:
object_files.extend(Object('bar.c'))

   The path name for a Node's file may be used by passing the Node to
   Python's builtin str function:
bar_obj_list = env.StaticObject('bar.c', CPPDEFINES='-DBAR')
print("The path to bar_obj is:", str(bar_obj_list[0]))

   Note that because the Builder call returns a NodeList, you have to
   access the first element in the list (bar_obj_list[0] in the example)
   to get at the Node that actually represents the object file.

   When trying to handle errors that may occur in a builder method,
   consider that the corresponding Action is executed at a different time
   than the SConscript file statement calling the builder. It is not
   useful to wrap a builder call in a try block, since success in the
   builder call is not the same as the builder itself succeeding. If
   necessary, a Builder's Action should be coded to exit with a useful
   exception message indicating the problem in the SConscript files -
   programmatically recovering from build errors is rarely useful.

   The following builder methods are predefined in the SCons core software
   distribution. Depending on the setup of a particular construction
   environment and on the type and software installation status of the
   underlying system, not all builders may be available in that
   construction environment. Since the function calling signature is the
   same for all builders:
Buildername(target, source, [key=val, ...])

   it is omitted in this listing for brevity.

   CFile()
          env.CFile()
          Builds a C source file given a lex (.l) or yacc (.y) input file.
          The suffix specified by the [1239]$CFILESUFFIX construction
          variable (.c by default) is automatically added to the target if
          it is not already present. Example:

# builds foo.c
env.CFile(target = 'foo.c', source = 'foo.l')
# builds bar.c
env.CFile(target = 'bar', source = 'bar.y')

   Command()
          env.Command()
          The Command "Builder" is actually a function that looks like a
          Builder, but takes a required third argument, which is the
          action to take to construct the target from the source, used for
          "one-off" builds where a full builder is not needed. Thus it
          does not follow the builder calling rules described at the start
          of this section. See instead the [1240]Command function
          description for the calling syntax and details.

   CompilationDatabase()
          env.CompilationDatabase()
          CompilationDatabase is a special builder which adds a target to
          create a JSON formatted compilation database compatible with
          clang tooling (see the [1241]LLVM specification). This database
          is suitable for consumption by various tools and editors who can
          use it to obtain build and dependency information which
          otherwise would be internal to SCons. The builder does not
          require any source files to be specified, rather it arranges to
          emit information about all of the C, C++ and assembler
          source/output pairs identified in the build that are not
          excluded by the optional filter
          [1242]$COMPILATIONDB_PATH_FILTER. The target is subject to the
          usual SCons target selection rules.

          If called with no arguments, the builder will default to a
          target name of compile_commands.json.

          If called with a single positional argument, scons will "deduce"
          the target name from that source argument, giving it the same
          name, and then ignore the source. This is the usual way to call
          the builder if a non-default target name is wanted.

          If called with either the target= or source= keyword arguments,
          the value of the argument is taken as the target name. If called
          with both, the target= value is used and source= is ignored. If
          called with multiple sources, the source list will be ignored,
          since there is no way to deduce what the intent was; in this
          case the default target name will be used.

Note

          You must load the compilation_db tool prior to specifying any
          part of your build or some source/output files will not show up
          in the compilation database.

          Available since scons 4.0.

   CXXFile()
          env.CXXFile()
          Builds a C++ source file given a lex (.ll) or yacc (.yy) input
          file. The suffix specified by the [1243]$CXXFILESUFFIX
          construction variable (.cc by default) is automatically added to
          the target if it is not already present. Example:

# builds foo.cc
env.CXXFile(target = 'foo.cc', source = 'foo.ll')
# builds bar.cc
env.CXXFile(target = 'bar', source = 'bar.yy')

   DocbookEpub()
          env.DocbookEpub()
          A pseudo-Builder, providing a Docbook toolchain for EPUB output.

env = Environment(tools=['docbook'])
env.DocbookEpub('manual.epub', 'manual.xml')

          or simply

env = Environment(tools=['docbook'])
env.DocbookEpub('manual')

   DocbookHtml()
          env.DocbookHtml()
          A pseudo-Builder, providing a Docbook toolchain for HTML output.

env = Environment(tools=['docbook'])
env.DocbookHtml('manual.html', 'manual.xml')

          or simply

env = Environment(tools=['docbook'])
env.DocbookHtml('manual')

   DocbookHtmlChunked()
          env.DocbookHtmlChunked()
          A pseudo-Builder providing a Docbook toolchain for chunked HTML
          output. It supports the base.dir parameter. The chunkfast.xsl
          file (requires "EXSLT") is used as the default stylesheet. Basic
          syntax:

env = Environment(tools=['docbook'])
env.DocbookHtmlChunked('manual')

          where manual.xml is the input file.

          If you use the root.filename parameter in your own stylesheets
          you have to specify the new target name. This ensures that the
          dependencies get correct, especially for the cleanup via "scons
          -c":

env = Environment(tools=['docbook'])
env.DocbookHtmlChunked('mymanual.html', 'manual', xsl='htmlchunk.xsl')

          Some basic support for the base.dir parameter is provided. You
          can add the base_dir keyword to your Builder call, and the given
          prefix gets prepended to all the created filenames:

env = Environment(tools=['docbook'])
env.DocbookHtmlChunked('manual', xsl='htmlchunk.xsl', base_dir='output/')

          Make sure that you don't forget the trailing slash for the base
          folder, else your files get renamed only!

   DocbookHtmlhelp()
          env.DocbookHtmlhelp()
          A pseudo-Builder, providing a Docbook toolchain for HTMLHELP
          output. Its basic syntax is:

env = Environment(tools=['docbook'])
env.DocbookHtmlhelp('manual')

          where manual.xml is the input file.

          If you use the root.filename parameter in your own stylesheets
          you have to specify the new target name. This ensures that the
          dependencies get correct, especially for the cleanup via "scons
          -c":

env = Environment(tools=['docbook'])
env.DocbookHtmlhelp('mymanual.html', 'manual', xsl='htmlhelp.xsl')

          Some basic support for the base.dir parameter is provided. You
          can add the base_dir keyword to your Builder call, and the given
          prefix gets prepended to all the created filenames:

env = Environment(tools=['docbook'])
env.DocbookHtmlhelp('manual', xsl='htmlhelp.xsl', base_dir='output/')

          Make sure that you don't forget the trailing slash for the base
          folder, else your files get renamed only!

   DocbookMan()
          env.DocbookMan()
          A pseudo-Builder, providing a Docbook toolchain for Man page
          output. Its basic syntax is:

env = Environment(tools=['docbook'])
env.DocbookMan('manual')

          where manual.xml is the input file. Note, that you can specify a
          target name, but the actual output names are automatically set
          from the refname entries in your XML source.

   DocbookPdf()
          env.DocbookPdf()
          A pseudo-Builder, providing a Docbook toolchain for PDF output.

env = Environment(tools=['docbook'])
env.DocbookPdf('manual.pdf', 'manual.xml')

          or simply

env = Environment(tools=['docbook'])
env.DocbookPdf('manual')

   DocbookSlidesHtml()
          env.DocbookSlidesHtml()
          A pseudo-Builder, providing a Docbook toolchain for HTML slides
          output.

env = Environment(tools=['docbook'])
env.DocbookSlidesHtml('manual')

          If you use the titlefoil.html parameter in your own stylesheets
          you have to give the new target name. This ensures that the
          dependencies get correct, especially for the cleanup via "scons
          -c":

env = Environment(tools=['docbook'])
env.DocbookSlidesHtml('mymanual.html','manual', xsl='slideshtml.xsl')

          Some basic support for the base.dir parameter is provided. You
          can add the base_dir keyword to your Builder call, and the given
          prefix gets prepended to all the created filenames:

env = Environment(tools=['docbook'])
env.DocbookSlidesHtml('manual', xsl='slideshtml.xsl', base_dir='output/')

          Make sure that you don't forget the trailing slash for the base
          folder, else your files get renamed only!

   DocbookSlidesPdf()
          env.DocbookSlidesPdf()
          A pseudo-Builder, providing a Docbook toolchain for PDF slides
          output.

env = Environment(tools=['docbook'])
env.DocbookSlidesPdf('manual.pdf', 'manual.xml')

          or simply

env = Environment(tools=['docbook'])
env.DocbookSlidesPdf('manual')

   DocbookXInclude()
          env.DocbookXInclude()
          A pseudo-Builder, for resolving XIncludes in a separate
          processing step.

env = Environment(tools=['docbook'])
env.DocbookXInclude('manual_xincluded.xml', 'manual.xml')

   DocbookXslt()
          env.DocbookXslt()
          A pseudo-Builder, applying a given XSL transformation to the
          input file.

env = Environment(tools=['docbook'])
env.DocbookXslt('manual_transformed.xml', 'manual.xml', xsl='transform.xslt')

          Note, that this builder requires the xsl parameter to be set.

   DVI()
          env.DVI()
          Builds a .dvi file from a .tex, .ltx or .latex input file. If
          the source file suffix is .tex, scons will examine the contents
          of the file; if the string \documentclass or \documentstyle is
          found, the file is assumed to be a LaTeX file and the target is
          built by invoking the [1244]$LATEXCOM command line; otherwise,
          the [1245]$TEXCOM command line is used. If the file is a LaTeX
          file, the DVI builder method will also examine the contents of
          the .aux file and invoke the [1246]$BIBTEX command line if the
          string bibdata is found, start [1247]$MAKEINDEX to generate an
          index if a .ind file is found and will examine the contents .log
          file and re-run the [1248]$LATEXCOM command if the log file says
          it is necessary.

          The suffix .dvi (hard-coded within TeX itself) is automatically
          added to the target if it is not already present. Examples:

# builds from aaa.tex
env.DVI(target = 'aaa.dvi', source = 'aaa.tex')
# builds bbb.dvi
env.DVI(target = 'bbb', source = 'bbb.ltx')
# builds from ccc.latex
env.DVI(target = 'ccc.dvi', source = 'ccc.latex')

   Gs()
          env.Gs()
          A Builder for explicitly calling the gs executable. Depending on
          the underlying OS, the different names gs, gsos2 and gswin32c
          are tried.

env = Environment(tools=['gs'])
env.Gs(
    'cover.jpg',
    'scons-scons.pdf',
    GSFLAGS='-dNOPAUSE -dBATCH -sDEVICE=jpeg -dFirstPage=1 -dLastPage=1 -q',
)

   Install()
          env.Install()
          Installs one or more source files or directories in the
          specified target, which must be a directory. The names of the
          specified source files or directories remain the same within the
          destination directory. The sources may be given as a string or
          as a node returned by a builder.

env.Install(target='/usr/local/bin', source=['foo', 'bar'])

          Note that if target paths chosen for the Install builder (and
          the related InstallAs and InstallVersionedLib builders) are
          outside the project tree, such as in the example above, they may
          not be selected for "building" by default, since in the absence
          of other instructions scons builds targets that are underneath
          the top directory (the directory that contains the SConstruct
          file, usually the current directory). Use command line targets
          or the Default function in this case.

          If the --install-sandbox command line option is given, the
          target directory will be prefixed by the directory path
          specified. This is useful to test installs without installing to
          a "live" location in the system.

          See also FindInstalledFiles. For more thoughts on installation,
          see the User Guide (particularly the section on Command-Line
          Targets and the chapters on Installing Files and on Alias
          Targets).

   InstallAs()
          env.InstallAs()
          Installs one or more source files or directories to specific
          names, allowing changing a file or directory name as part of the
          installation. It is an error if the target and source arguments
          list different numbers of files or directories.

env.InstallAs(target='/usr/local/bin/foo',
              source='foo_debug')
env.InstallAs(target=['../lib/libfoo.a', '../lib/libbar.a'],
              source=['libFOO.a', 'libBAR.a'])

          See the note under Install.

   InstallVersionedLib()
          env.InstallVersionedLib()
          Installs a versioned shared library. The symlinks appropriate to
          the architecture will be generated based on symlinks of the
          source library.

env.InstallVersionedLib(target='/usr/local/bin/foo',
                        source='libxyz.1.5.2.so')

          See the note under Install.

   Jar()
          env.Jar()
          Builds a Java archive (.jar) file from the specified list of
          sources. Any directories in the source list will be searched for
          .class files). Any .java files in the source list will be
          compiled to .class files by calling the [1249]Java Builder.

          If the [1250]$JARCHDIR value is set, the jar command will change
          to the specified directory using the -C option. If $JARCHDIR is
          not set explicitly, SCons will use the top of any subdirectory
          tree in which Java .class were built by the [1251]Java Builder.

          If the contents any of the source files begin with the string
          Manifest-Version, the file is assumed to be a manifest and is
          passed to the jar command with the m option set.

env.Jar(target = 'foo.jar', source = 'classes')

env.Jar(target = 'bar.jar',
        source = ['bar1.java', 'bar2.java'])

   Java()
          env.Java()
          Builds one or more Java class files. The sources may be any
          combination of explicit .java files, or directory trees which
          will be scanned for .java files.

          SCons will parse each source .java file to find the classes
          (including inner classes) defined within that file, and from
          that figure out the target .class files that will be created.
          The class files will be placed underneath the specified target
          directory.

          SCons will also search each Java file for the Java package name,
          which it assumes can be found on a line beginning with the
          string package in the first column; the resulting .class files
          will be placed in a directory reflecting the specified package
          name. For example, the file Foo.java defining a single public
          Foo class and containing a package name of sub.dir will generate
          a corresponding sub/dir/Foo.class class file.

          Examples:

env.Java(target = 'classes', source = 'src')
env.Java(target = 'classes', source = ['src1', 'src2'])
env.Java(target = 'classes', source = ['File1.java', 'File2.java'])

          Java source files can use the native encoding for the underlying
          OS. Since SCons compiles in simple ASCII mode by default, the
          compiler will generate warnings about unmappable characters,
          which may lead to errors as the file is processed further. In
          this case, the user must specify the LANG environment variable
          to tell the compiler what encoding is used. For portibility,
          it's best if the encoding is hard-coded so that the compile will
          work if it is done on a system with a different encoding.

env = Environment()
env['ENV']['LANG'] = 'en_GB.UTF-8'

   JavaH()
          env.JavaH()
          Builds C header and source files for implementing Java native
          methods. The target can be either a directory in which the
          header files will be written, or a header file name which will
          contain all of the definitions. The source can be the names of
          .class files, the names of .java files to be compiled into
          .class files by calling the [1252]Java builder method, or the
          objects returned from the Java builder method.

          If the construction variable [1253]$JAVACLASSDIR is set, either
          in the environment or in the call to the JavaH builder method
          itself, then the value of the variable will be stripped from the
          beginning of any .class file names.

          Examples:

# builds java_native.h
classes = env.Java(target="classdir", source="src")
env.JavaH(target="java_native.h", source=classes)

# builds include/package_foo.h and include/package_bar.h
env.JavaH(target="include", source=["package/foo.class", "package/bar.class"])

# builds export/foo.h and export/bar.h
env.JavaH(
    target="export",
    source=["classes/foo.class", "classes/bar.class"],
    JAVACLASSDIR="classes",
)

Note

          Java versions starting with 10.0 no longer use the javah command
          for generating JNI headers/sources, and indeed have removed the
          command entirely (see Java Enhancement Proposal [1254]JEP 313),
          making this tool harder to use for that purpose. SCons may
          autodiscover a javah belonging to an older release if there are
          multiple Java versions on the system, which will lead to
          incorrect results. To use with a newer Java, override the
          default values of [1255]$JAVAH (to contain the path to the
          javac) and [1256]$JAVAHFLAGS (to contain at least a -h flag) and
          note that generating headers with javac requires supplying
          source .java files only, not .class files.

   Library()
          env.Library()
          A synonym for the StaticLibrary builder method.

   LoadableModule()
          env.LoadableModule()
          On most systems, this is the same as SharedLibrary. On Mac OS X
          (Darwin) platforms, this creates a loadable module bundle.

   M4()
          env.M4()
          Builds an output file from an M4 input file. This uses a default
          [1257]$M4FLAGS value of -E, which considers all warnings to be
          fatal and stops on the first warning when using the GNU version
          of m4. Example:

env.M4(target = 'foo.c', source = 'foo.c.m4')

   Moc()
          env.Moc()
          Builds an output file from a moc input file. moc input files are
          either header files or C++ files. This builder is only available
          after using the tool [1258]qt. See the [1259]$QTDIR variable for
          more information. Example:

env.Moc('foo.h')  # generates moc_foo.cc
env.Moc('foo.cpp')  # generates foo.moc

   MOFiles()
          env.MOFiles()
          This builder belongs to [1260]msgfmt tool. The builder compiles
          PO files to MO files.

          Example 1. Create pl.mo and en.mo by compiling pl.po and en.po:

  # ...
  env.MOFiles(['pl', 'en'])

          Example 2. Compile files for languages defined in LINGUAS file:

  # ...
  env.MOFiles(LINGUAS_FILE = 1)

          Example 3. Create pl.mo and en.mo by compiling pl.po and en.po
          plus files for languages defined in LINGUAS file:

  # ...
  env.MOFiles(['pl', 'en'], LINGUAS_FILE = 1)

          Example 4. Compile files for languages defined in LINGUAS file
          (another version):

  # ...
  env['LINGUAS_FILE'] = 1
  env.MOFiles()

   MSVSProject()
          env.MSVSProject()
          Builds a Microsoft Visual Studio project file, and by default
          builds a solution file as well.

          This builds a Visual Studio project file, based on the version
          of Visual Studio that is configured (either the latest installed
          version, or the version specified by [1261]$MSVS_VERSION in the
          Environment constructor). For Visual Studio 6, it will generate
          a .dsp file. For Visual Studio 7, 8, and 9, it will generate a
          .vcproj file. For Visual Studio 10 and later, it will generate a
          .vcxproj file.

          By default, this also generates a solution file for the
          specified project, a .dsw file for Visual Studio 6 or a .sln
          file for Visual Studio 7 and later. This behavior may be
          disabled by specifying auto_build_solution=0 when you call
          MSVSProject, in which case you presumably want to build the
          solution file(s) by calling the MSVSSolution Builder (see
          below).

          The MSVSProject builder takes several lists of filenames to be
          placed into the project file. These are currently limited to
          srcs, incs, localincs, resources, and misc. These are pretty
          self-explanatory, but it should be noted that these lists are
          added to the [1262]$SOURCES construction variable as strings,
          NOT as SCons File Nodes. This is because they represent file
          names to be added to the project file, not the source files used
          to build the project file.

          The above filename lists are all optional, although at least one
          must be specified for the resulting project file to be
          non-empty.

          In addition to the above lists of values, the following values
          may be specified:

        target
                The name of the target .dsp or .vcproj file. The correct
                suffix for the version of Visual Studio must be used, but
                the [1263]$MSVSPROJECTSUFFIX construction variable will be
                defined to the correct value (see example below).

        variant
                The name of this particular variant. For Visual Studio 7
                projects, this can also be a list of variant names. These
                are typically things like "Debug" or "Release", but really
                can be anything you want. For Visual Studio 7 projects,
                they may also specify a target platform separated from the
                variant name by a | (vertical pipe) character: Debug|Xbox.
                The default target platform is Win32. Multiple calls to
                MSVSProject with different variants are allowed; all
                variants will be added to the project file with their
                appropriate build targets and sources.

        cmdargs
                Additional command line arguments for the different
                variants. The number of cmdargs entries must match the
                number of variant entries, or be empty (not specified). If
                you give only one, it will automatically be propagated to
                all variants.

        cppdefines
                Preprocessor definitions for the different variants. The
                number of cppdefines entries must match the number of
                variant entries, or be empty (not specified). If you give
                only one, it will automatically be propagated to all
                variants. If you don't give this parameter, SCons will use
                the invoking environment's CPPDEFINES entry for all
                variants.

        cppflags
                Compiler flags for the different variants. If a /std:c++
                flag is found then /Zc:__cplusplus is appended to the
                flags if not already found, this ensures that intellisense
                uses the /std:c++ switch. The number of cppflags entries
                must match the number of variant entries, or be empty (not
                specified). If you give only one, it will automatically be
                propagated to all variants. If you don't give this
                parameter, SCons will combine the invoking environment's
                CCFLAGS, CXXFLAGS, CPPFLAGS entries for all variants.

        cpppaths
                Compiler include paths for the different variants. The
                number of cpppaths entries must match the number of
                variant entries, or be empty (not specified). If you give
                only one, it will automatically be propagated to all
                variants. If you don't give this parameter, SCons will use
                the invoking environment's CPPPATH entry for all variants.

        buildtarget
                An optional string, node, or list of strings or nodes (one
                per build variant), to tell the Visual Studio debugger
                what output target to use in what build variant. The
                number of buildtarget entries must match the number of
                variant entries.

        runfile
                The name of the file that Visual Studio 7 and later will
                run and debug. This appears as the value of the Output
                field in the resulting Visual Studio project file. If this
                is not specified, the default is the same as the specified
                buildtarget value.

          Note that because SCons always executes its build commands from
          the directory in which the SConstruct file is located, if you
          generate a project file in a different directory than the
          SConstruct directory, users will not be able to double-click on
          the file name in compilation error messages displayed in the
          Visual Studio console output window. This can be remedied by
          adding the Visual C/C++ /FC compiler option to the
          [1264]$CCFLAGS variable so that the compiler will print the full
          path name of any files that cause compilation errors.

          Example usage:

barsrcs = ['bar.cpp']
barincs = ['bar.h']
barlocalincs = ['StdAfx.h']
barresources = ['bar.rc','resource.h']
barmisc = ['bar_readme.txt']

dll = env.SharedLibrary(target='bar.dll',
                        source=barsrcs)
buildtarget = [s for s in dll if str(s).endswith('dll')]
env.MSVSProject(target='Bar' + env['MSVSPROJECTSUFFIX'],
                srcs=barsrcs,
                incs=barincs,
                localincs=barlocalincs,
                resources=barresources,
                misc=barmisc,
                buildtarget=buildtarget,
                variant='Release')

          Starting with version 2.4 of SCons it is also possible to
          specify the optional argument DebugSettings, which creates files
          for debugging under Visual Studio:

        DebugSettings
                A dictionary of debug settings that get written to the
                .vcproj.user or the .vcxproj.user file, depending on the
                version installed. As it is done for cmdargs (see above),
                you can specify a DebugSettings dictionary per variant. If
                you give only one, it will be propagated to all variants.

          Currently, only Visual Studio v9.0 and Visual Studio version v11
          are implemented, for other versions no file is generated. To
          generate the user file, you just need to add a DebugSettings
          dictionary to the environment with the right parameters for your
          MSVS version. If the dictionary is empty, or does not contain
          any good value, no file will be generated.

          Following is a more contrived example, involving the setup of a
          project for variants and DebugSettings:

# Assuming you store your defaults in a file
vars = Variables('variables.py')
msvcver = vars.args.get('vc', '9')

# Check command args to force one Microsoft Visual Studio version
if msvcver == '9' or msvcver == '11':
  env = Environment(MSVC_VERSION=msvcver+'.0', MSVC_BATCH=False)
else:
  env = Environment()

AddOption('--userfile', action='store_true', dest='userfile', default=False,
          help="Create Visual Studio Project user file")

#
# 1. Configure your Debug Setting dictionary with options you want in the list
# of allowed options, for instance if you want to create a user file to launch
# a specific application for testing your dll with Microsoft Visual Studio 2008
(v9):
#
V9DebugSettings = {
    'Command':'c:\\myapp\\using\\thisdll.exe',
    'WorkingDirectory': 'c:\\myapp\\using\\',
    'CommandArguments': '-p password',
#     'Attach':'false',
#     'DebuggerType':'3',
#     'Remote':'1',
#     'RemoteMachine': None,
#     'RemoteCommand': None,
#     'HttpUrl': None,
#     'PDBPath': None,
#     'SQLDebugging': None,
#     'Environment': '',
#     'EnvironmentMerge':'true',
#     'DebuggerFlavor': None,
#     'MPIRunCommand': None,
#     'MPIRunArguments': None,
#     'MPIRunWorkingDirectory': None,
#     'ApplicationCommand': None,
#     'ApplicationArguments': None,
#     'ShimCommand': None,
#     'MPIAcceptMode': None,
#     'MPIAcceptFilter': None,
}

#
# 2. Because there are a lot of different options depending on the Microsoft
# Visual Studio version, if you use more than one version you have to
# define a dictionary per version, for instance if you want to create a user
# file to launch a specific application for testing your dll with Microsoft
# Visual Studio 2012 (v11):
#
V10DebugSettings = {
    'LocalDebuggerCommand': 'c:\\myapp\\using\\thisdll.exe',
    'LocalDebuggerWorkingDirectory': 'c:\\myapp\\using\\',
    'LocalDebuggerCommandArguments': '-p password',
#     'LocalDebuggerEnvironment': None,
#     'DebuggerFlavor': 'WindowsLocalDebugger',
#     'LocalDebuggerAttach': None,
#     'LocalDebuggerDebuggerType': None,
#     'LocalDebuggerMergeEnvironment': None,
#     'LocalDebuggerSQLDebugging': None,
#     'RemoteDebuggerCommand': None,
#     'RemoteDebuggerCommandArguments': None,
#     'RemoteDebuggerWorkingDirectory': None,
#     'RemoteDebuggerServerName': None,
#     'RemoteDebuggerConnection': None,
#     'RemoteDebuggerDebuggerType': None,
#     'RemoteDebuggerAttach': None,
#     'RemoteDebuggerSQLDebugging': None,
#     'DeploymentDirectory': None,
#     'AdditionalFiles': None,
#     'RemoteDebuggerDeployDebugCppRuntime': None,
#     'WebBrowserDebuggerHttpUrl': None,
#     'WebBrowserDebuggerDebuggerType': None,
#     'WebServiceDebuggerHttpUrl': None,
#     'WebServiceDebuggerDebuggerType': None,
#     'WebServiceDebuggerSQLDebugging': None,
}

#
# 3. Select the dictionary you want depending on the version of visual Studio
# Files you want to generate.
#
if not env.GetOption('userfile'):
    dbgSettings = None
elif env.get('MSVC_VERSION', None) == '9.0':
    dbgSettings = V9DebugSettings
elif env.get('MSVC_VERSION', None) == '11.0':
    dbgSettings = V10DebugSettings
else:
    dbgSettings = None

#
# 4. Add the dictionary to the DebugSettings keyword.
#
barsrcs = ['bar.cpp', 'dllmain.cpp', 'stdafx.cpp']
barincs = ['targetver.h']
barlocalincs = ['StdAfx.h']
barresources = ['bar.rc','resource.h']
barmisc = ['ReadMe.txt']

dll = env.SharedLibrary(target='bar.dll',
                        source=barsrcs)

env.MSVSProject(target='Bar' + env['MSVSPROJECTSUFFIX'],
                srcs=barsrcs,
                incs=barincs,
                localincs=barlocalincs,
                resources=barresources,
                misc=barmisc,
                buildtarget=[dll[0]] * 2,
                variant=('Debug|Win32', 'Release|Win32'),
                cmdargs='vc=%s' %  msvcver,
                DebugSettings=(dbgSettings, {}))

   MSVSSolution()
          env.MSVSSolution()
          Builds a Microsoft Visual Studio solution file.

          This builds a Visual Studio solution file, based on the version
          of Visual Studio that is configured (either the latest installed
          version, or the version specified by [1265]$MSVS_VERSION in the
          construction environment). For Visual Studio 6, it will generate
          a .dsw file. For Visual Studio 7 (.NET), it will generate a .sln
          file.

          The following values must be specified:

        target
                The name of the target .dsw or .sln file. The correct
                suffix for the version of Visual Studio must be used, but
                the value [1266]$MSVSSOLUTIONSUFFIX will be defined to the
                correct value (see example below).

        variant
                The name of this particular variant, or a list of variant
                names (the latter is only supported for MSVS 7 solutions).
                These are typically things like "Debug" or "Release", but
                really can be anything you want. For MSVS 7 they may also
                specify target platform, like this "Debug|Xbox". Default
                platform is Win32.

        projects
                A list of project file names, or Project nodes returned by
                calls to the MSVSProject Builder, to be placed into the
                solution file. It should be noted that these file names
                are NOT added to the $SOURCES environment variable in form
                of files, but rather as strings. This is because they
                represent file names to be added to the solution file, not
                the source files used to build the solution file.

          Example Usage:

env.MSVSSolution(
    target="Bar" + env["MSVSSOLUTIONSUFFIX"],
    projects=["bar" + env["MSVSPROJECTSUFFIX"]],
    variant="Release",
)

   Ninja()
          env.Ninja()
          A special builder which adds a target to create a Ninja build
          file. The builder does not require any source files to be
          specified.

Note

          This is an experimental feature. To enable it you must use one
          of the following methods

# On the command line
--experimental=ninja

# Or in your SConstruct
SetOption('experimental', 'ninja')

          This functionality is subject to change and/or removal without
          deprecation cycle.

          To use this tool you need to install the Python ninja package,
          as the tool by default depends on being able to do an import of
          the package This can be done via:

python -m pip install ninja

          If called with no arguments, the builder will default to a
          target name of ninja.build.

          If called with a single positional argument, scons will "deduce"
          the target name from that source argument, giving it the same
          name, and then ignore the source. This is the usual way to call
          the builder if a non-default target name is wanted.

          If called with either the target= or source= keyword arguments,
          the value of the argument is taken as the target name. If called
          with both, the target= value is used and source= is ignored. If
          called with multiple sources, the source list will be ignored,
          since there is no way to deduce what the intent was; in this
          case the default target name will be used.

          Available since scons 4.2.

   Object()
          env.Object()
          A synonym for the StaticObject builder method.

   Package()
          env.Package()
          Builds software distribution packages. A package is a container
          format which includes files to install along with metadata.
          Packaging is optional, and must be enabled by specifying the
          [1267]packaging tool. For example:

env = Environment(tools=['default', 'packaging'])

          SCons can build packages in a number of well known packaging
          formats. The target package type may be selected with the the
          [1268]$PACKAGETYPE construction variable or the --package-type
          command line option. The package type may be a list, in which
          case SCons will attempt to build packages for each type in the
          list. Example:

env.Package(PACKAGETYPE=['src_zip', 'src_targz'], ...other args...)

          The currently supported packagers are:

   msi Microsoft Installer package
   rpm RPM Package Manger package
   ipkg Itsy Package Management package
   tarbz2 bzip2-compressed tar file
   targz gzip-compressed tar file
   tarxz xz-compressed tar file
   zip zip file
   src_tarbz2 bzip2-compressed tar file suitable as source to another
   packager
   src_targz gzip-compressed tar file suitable as source to another
   packager
   src_tarxz xz-compressed tar file suitable as source to another packager
   src_zip zip file suitable as source to another packager

          The file list to include in the package may be specified with
          the source keyword argument. If omitted, the
          [1269]FindInstalledFiles function is called behind the scenes to
          select all files that have an [1270]Install, [1271]InstallAs or
          [1272]InstallVersionedLib Builder attached. If the target
          keyword argument is omitted, the target name(s) will be deduced
          from the package type(s).

          The metadata comes partly from attributes of the files to be
          packaged, and partly from packaging tags. Tags can be passed as
          keyword arguments to the Package builder call, and may also be
          attached to files (or more accurately, Nodes representing files)
          with the [1273]Tag function. Some package-level tags are
          mandatory, and will lead to errors if omitted. The mandatory
          tags vary depending on the package type.

          While packaging, the builder uses a temporary location named by
          the value of the [1274]$PACKAGEROOT variable - the package
          sources are copied there before packaging.

          Packaging example:

env = Environment(tools=["default", "packaging"])
env.Install("/bin/", "my_program")
env.Package(
    NAME="foo",
    VERSION="1.2.3",
    PACKAGEVERSION=0,
    PACKAGETYPE="rpm",
    LICENSE="gpl",
    SUMMARY="balalalalal",
    DESCRIPTION="this should be really really long",
    X_RPM_GROUP="Application/fu",
    SOURCE_URL="https://foo.org/foo-1.2.3.tar.gz",
)

          In this example, the target /bin/my_program created by the
          Install call would not be built by default since it is not under
          the project top directory. However, since no source is specified
          to the Package builder, it is selected for packaging by the
          default sources rule. Since packaging is done using
          [1275]$PACKAGEROOT, no write is actually done to the system's
          /bin directory, and the target will be selected since after
          rebasing to underneath $PACKAGEROOT it is now under the top
          directory of the project.

   PCH()
          env.PCH()
          Builds a Microsoft Visual C++ precompiled header. Calling this
          builder returns a list of two targets: the PCH as the first
          element, and the object file as the second element. Normally the
          object file is ignored. This builder is only provided when
          Microsoft Visual C++ is being used as the compiler. The PCH
          builder is generally used in conjunction with the [1276]$PCH
          construction variable to force object files to use the
          precompiled header:

env['PCH'] = env.PCH('StdAfx.cpp')[0]

   PDF()
          env.PDF()
          Builds a .pdf file from a .dvi input file (or, by extension, a
          .tex, .ltx, or .latex input file). The suffix specified by the
          [1277]$PDFSUFFIX construction variable (.pdf by default) is
          added automatically to the target if it is not already present.
          Example:

# builds from aaa.tex
env.PDF(target = 'aaa.pdf', source = 'aaa.tex')
# builds bbb.pdf from bbb.dvi
env.PDF(target = 'bbb', source = 'bbb.dvi')

   POInit()
          env.POInit()
          This builder belongs to [1278]msginit tool. The builder
          initializes missing PO file(s) if [1279]$POAUTOINIT is set. If
          [1280]$POAUTOINIT is not set (default), POInit prints
          instruction for user (that is supposed to be a translator),
          telling how the PO file should be initialized. In normal
          projects you should not use POInit and use [1281]POUpdate
          instead. [1282]POUpdate chooses intelligently between
          msgmerge(1) and msginit(1). POInit always uses msginit(1) and
          should be regarded as builder for special purposes or for
          temporary use (e.g. for quick, one time initialization of a
          bunch of PO files) or for tests.

          Target nodes defined through POInit are not built by default
          (they're Ignored from '.' node) but are added to special Alias
          ('po-create' by default). The alias name may be changed through
          the [1283]$POCREATE_ALIAS construction variable. All PO files
          defined through POInit may be easily initialized by scons
          po-create.

          Example 1. Initialize en.po and pl.po from messages.pot:

  # ...
  env.POInit(['en', 'pl']) # messages.pot --> [en.po, pl.po]

          Example 2. Initialize en.po and pl.po from foo.pot:

  # ...
  env.POInit(['en', 'pl'], ['foo']) # foo.pot --> [en.po, pl.po]

          Example 3. Initialize en.po and pl.po from foo.pot but using
          [1284]$POTDOMAIN construction variable:

  # ...
  env.POInit(['en', 'pl'], POTDOMAIN='foo') # foo.pot --> [en.po, pl.po]

          Example 4. Initialize PO files for languages defined in LINGUAS
          file. The files will be initialized from template messages.pot:

  # ...
  env.POInit(LINGUAS_FILE = 1) # needs 'LINGUAS' file

          Example 5. Initialize en.po and pl.pl PO files plus files for
          languages defined in LINGUAS file. The files will be initialized
          from template messages.pot:

  # ...
  env.POInit(['en', 'pl'], LINGUAS_FILE = 1)

          Example 6. You may preconfigure your environment first, and then
          initialize PO files:

  # ...
  env['POAUTOINIT'] = 1
  env['LINGUAS_FILE'] = 1
  env['POTDOMAIN'] = 'foo'
  env.POInit()

          which has same efect as:

  # ...
  env.POInit(POAUTOINIT = 1, LINGUAS_FILE = 1, POTDOMAIN = 'foo')

   PostScript()
          env.PostScript()
          Builds a .ps file from a .dvi input file (or, by extension, a
          .tex, .ltx, or .latex input file). The suffix specified by the
          [1285]$PSSUFFIX construction variable (.ps by default) is added
          automatically to the target if it is not already present.
          Example:

# builds from aaa.tex
env.PostScript(target = 'aaa.ps', source = 'aaa.tex')
# builds bbb.ps from bbb.dvi
env.PostScript(target = 'bbb', source = 'bbb.dvi')

   POTUpdate()
          env.POTUpdate()
          The builder belongs to [1286]xgettext tool. The builder updates
          target POT file if exists or creates one if it doesn't. The node
          is not built by default (i.e. it is Ignored from '.'), but only
          on demand (i.e. when given POT file is required or when special
          alias is invoked). This builder adds its targe node
          (messages.pot, say) to a special alias (pot-update by default,
          see [1287]$POTUPDATE_ALIAS) so you can update/create them easily
          with scons pot-update. The file is not written until there is no
          real change in internationalized messages (or in comments that
          enter POT file).

Note

          You may see xgettext(1) being invoked by the [1288]xgettext tool
          even if there is no real change in internationalized messages
          (so the POT file is not being updated). This happens every time
          a source file has changed. In such case we invoke xgettext(1)
          and compare its output with the content of POT file to decide
          whether the file should be updated or not.

          Example 1. Let's create po/ directory and place following
          SConstruct script there:

  # SConstruct in 'po/' subdir
  env = Environment( tools = ['default', 'xgettext'] )
  env.POTUpdate(['foo'], ['../a.cpp', '../b.cpp'])
  env.POTUpdate(['bar'], ['../c.cpp', '../d.cpp'])

          Then invoke scons few times:

  user@host:$ scons             # Does not create foo.pot nor bar.pot
  user@host:$ scons foo.pot     # Updates or creates foo.pot
  user@host:$ scons pot-update  # Updates or creates foo.pot and bar.pot
  user@host:$ scons -c          # Does not clean foo.pot nor bar.pot.

          the results shall be as the comments above say.

          Example 2. The POTUpdate builder may be used with no target
          specified, in which case default target messages.pot will be
          used. The default target may also be overridden by setting
          [1289]$POTDOMAIN construction variable or providing it as an
          override to POTUpdate builder:


  # SConstruct script
  env = Environment( tools = ['default', 'xgettext'] )
  env['POTDOMAIN'] = "foo"
  env.POTUpdate(source = ["a.cpp", "b.cpp"]) # Creates foo.pot ...
  env.POTUpdate(POTDOMAIN = "bar", source = ["c.cpp", "d.cpp"]) # and bar.pot

          Example 3. The sources may be specified within separate file,
          for example POTFILES.in:


  # POTFILES.in in 'po/' subdirectory
  ../a.cpp
  ../b.cpp
  # end of file

          The name of the file (POTFILES.in) containing the list of
          sources is provided via [1290]$XGETTEXTFROM:


  # SConstruct file in 'po/' subdirectory
  env = Environment( tools = ['default', 'xgettext'] )
  env.POTUpdate(XGETTEXTFROM = 'POTFILES.in')

          Example 4. You may use [1291]$XGETTEXTPATH to define source
          search path. Assume, for example, that you have files a.cpp,
          b.cpp, po/SConstruct, po/POTFILES.in. Then your POT-related
          files could look as below:

  # POTFILES.in in 'po/' subdirectory
  a.cpp
  b.cpp
  # end of file

  # SConstruct file in 'po/' subdirectory
  env = Environment( tools = ['default', 'xgettext'] )
  env.POTUpdate(XGETTEXTFROM = 'POTFILES.in', XGETTEXTPATH='../')

          Example 5. Multiple search directories may be defined within a
          list, i.e. XGETTEXTPATH = ['dir1', 'dir2', ...]. The order in
          the list determines the search order of source files. The path
          to the first file found is used.

          Let's create 0/1/po/SConstruct script:

  # SConstruct file in '0/1/po/' subdirectory
  env = Environment( tools = ['default', 'xgettext'] )
  env.POTUpdate(XGETTEXTFROM = 'POTFILES.in', XGETTEXTPATH=['../', '../../'])

          and 0/1/po/POTFILES.in:

  # POTFILES.in in '0/1/po/' subdirectory
  a.cpp
  # end of file

          Write two *.cpp files, the first one is 0/a.cpp:

  /* 0/a.cpp */
  gettext("Hello from ../../a.cpp")

          and the second is 0/1/a.cpp:

  /* 0/1/a.cpp */
  gettext("Hello from ../a.cpp")

          then run scons. You'll obtain 0/1/po/messages.pot with the
          message "Hello from ../a.cpp". When you reverse order in
          $XGETTEXTFOM, i.e. when you write SConscript as

  # SConstruct file in '0/1/po/' subdirectory
  env = Environment( tools = ['default', 'xgettext'] )
  env.POTUpdate(XGETTEXTFROM = 'POTFILES.in', XGETTEXTPATH=['../../', '../'])

          then the messages.pot will contain msgid "Hello from
          ../../a.cpp" line and not msgid "Hello from ../a.cpp".

   POUpdate()
          env.POUpdate()
          The builder belongs to [1292]msgmerge tool. The builder updates
          PO files with msgmerge(1), or initializes missing PO files as
          described in documentation of [1293]msginit tool and
          [1294]POInit builder (see also [1295]$POAUTOINIT). Note, that
          POUpdate does not add its targets to po-create alias as
          [1296]POInit does.

          Target nodes defined through POUpdate are not built by default
          (they're Ignored from '.' node). Instead, they are added
          automatically to special Alias ('po-update' by default). The
          alias name may be changed through the [1297]$POUPDATE_ALIAS
          construction variable. You can easily update PO files in your
          project by scons po-update.

          Example 1. Update en.po and pl.po from messages.pot template
          (see also [1298]$POTDOMAIN), assuming that the later one exists
          or there is rule to build it (see [1299]POTUpdate):

  # ...
  env.POUpdate(['en','pl']) # messages.pot --> [en.po, pl.po]

          Example 2. Update en.po and pl.po from foo.pot template:

  # ...
  env.POUpdate(['en', 'pl'], ['foo']) # foo.pot -->  [en.po, pl.pl]

          Example 3. Update en.po and pl.po from foo.pot (another
          version):

  # ...
  env.POUpdate(['en', 'pl'], POTDOMAIN='foo') # foo.pot -- > [en.po, pl.pl]

          Example 4. Update files for languages defined in LINGUAS file.
          The files are updated from messages.pot template:

  # ...
  env.POUpdate(LINGUAS_FILE = 1) # needs 'LINGUAS' file

          Example 5. Same as above, but update from foo.pot template:

  # ...
  env.POUpdate(LINGUAS_FILE = 1, source = ['foo'])

          Example 6. Update en.po and pl.po plus files for languages
          defined in LINGUAS file. The files are updated from messages.pot
          template:

  # produce 'en.po', 'pl.po' + files defined in 'LINGUAS':
  env.POUpdate(['en', 'pl' ], LINGUAS_FILE = 1)

          Example 7. Use [1300]$POAUTOINIT to automatically initialize PO
          file if it doesn't exist:

  # ...
  env.POUpdate(LINGUAS_FILE = 1, POAUTOINIT = 1)

          Example 8. Update PO files for languages defined in LINGUAS
          file. The files are updated from foo.pot template. All necessary
          settings are pre-configured via environment.

  # ...
  env['POAUTOINIT'] = 1
  env['LINGUAS_FILE'] = 1
  env['POTDOMAIN'] = 'foo'
  env.POUpdate()

   Program()
          env.Program()
          Builds an executable given one or more object files or C, C++,
          D, or Fortran source files. If any C, C++, D or Fortran source
          files are specified, then they will be automatically compiled to
          object files using the Object builder method; see that builder
          method's description for a list of legal source file suffixes
          and how they are interpreted. The target executable file prefix,
          specified by the [1301]$PROGPREFIX construction variable
          (nothing by default), and suffix, specified by the
          [1302]$PROGSUFFIX construction variable (by default, .exe on
          Windows systems, nothing on POSIX systems), are automatically
          added to the target if not already present. Example:

env.Program(target='foo', source=['foo.o', 'bar.c', 'baz.f'])

   ProgramAllAtOnce()
          env.ProgramAllAtOnce()
          Builds an executable from D sources without first creating
          individual objects for each file.

          D sources can be compiled file-by-file as C and C++ source are,
          and D is integrated into the scons Object and Program builders
          for this model of build. D codes can though do whole source
          meta-programming (some of the testing frameworks do this). For
          this it is imperative that all sources are compiled and linked
          in a single call to the D compiler. This builder serves that
          purpose.

    env.ProgramAllAtOnce('executable', ['mod_a.d, mod_b.d', 'mod_c.d'])

          This command will compile the modules mod_a, mod_b, and mod_c in
          a single compilation process without first creating object files
          for the modules. Some of the D compilers will create
          executable.o others will not.

   RES()
          env.RES()
          Builds a Microsoft Visual C++ resource file. This builder method
          is only provided when Microsoft Visual C++ or MinGW is being
          used as the compiler. The .res (or .o for MinGW) suffix is added
          to the target name if no other suffix is given. The source file
          is scanned for implicit dependencies as though it were a C file.
          Example:

env.RES('resource.rc')

   RMIC()
          env.RMIC()
          Builds stub and skeleton class files for remote objects from
          Java .class files. The target is a directory relative to which
          the stub and skeleton class files will be written. The source
          can be the names of .class files, or the objects return from the
          Java builder method.

          If the construction variable [1303]$JAVACLASSDIR is set, either
          in the environment or in the call to the RMIC builder method
          itself, then the value of the variable will be stripped from the
          beginning of any .class file names.

classes = env.Java(target = 'classdir', source = 'src')
env.RMIC(target = 'outdir1', source = classes)

env.RMIC(target = 'outdir2',
         source = ['package/foo.class', 'package/bar.class'])

env.RMIC(target = 'outdir3',
         source = ['classes/foo.class', 'classes/bar.class'],
         JAVACLASSDIR = 'classes')

   RPCGenClient()
          env.RPCGenClient()
          Generates an RPC client stub (_clnt.c) file from a specified RPC
          (.x) source file. Because rpcgen only builds output files in the
          local directory, the command will be executed in the source
          file's directory by default.

# Builds src/rpcif_clnt.c
env.RPCGenClient('src/rpcif.x')

   RPCGenHeader()
          env.RPCGenHeader()
          Generates an RPC header (.h) file from a specified RPC (.x)
          source file. Because rpcgen only builds output files in the
          local directory, the command will be executed in the source
          file's directory by default.

# Builds src/rpcif.h
env.RPCGenHeader('src/rpcif.x')

   RPCGenService()
          env.RPCGenService()
          Generates an RPC server-skeleton (_svc.c) file from a specified
          RPC (.x) source file. Because rpcgen only builds output files in
          the local directory, the command will be executed in the source
          file's directory by default.

# Builds src/rpcif_svc.c
env.RPCGenClient('src/rpcif.x')

   RPCGenXDR()
          env.RPCGenXDR()
          Generates an RPC XDR routine (_xdr.c) file from a specified RPC
          (.x) source file. Because rpcgen only builds output files in the
          local directory, the command will be executed in the source
          file's directory by default.

# Builds src/rpcif_xdr.c
env.RPCGenClient('src/rpcif.x')

   SharedLibrary()
          env.SharedLibrary()
          Builds a shared library (.so on a POSIX system, .dll on Windows)
          given one or more object files or C, C++, D or Fortran source
          files. If any source files are given, then they will be
          automatically compiled to object files. The target library file
          prefix, specified by the [1304]$SHLIBPREFIX construction
          variable (by default, lib on POSIX systems, nothing on Windows
          systems), and suffix, specified by the [1305]$SHLIBSUFFIX
          construction variable (by default, .dll on Windows systems, .so
          on POSIX systems), are automatically added to the target if not
          already present. Example:

env.SharedLibrary(target='bar', source=['bar.c', 'foo.o'])

          On Windows systems, the SharedLibrary builder method will always
          build an import library (.lib) in addition to the shared library
          (.dll), adding a .lib library with the same basename if there is
          not already a .lib file explicitly listed in the targets.

          On Cygwin systems, the SharedLibrary builder method will always
          build an import library (.dll.a) in addition to the shared
          library (.dll), adding a .dll.a library with the same basename
          if there is not already a .dll.a file explicitly listed in the
          targets.

          Any object files listed in the source must have been built for a
          shared library (that is, using the SharedObject builder method).
          scons will raise an error if there is any mismatch.

          On some platforms, there is a distinction between a shared
          library (loaded automatically by the system to resolve external
          references) and a loadable module (explicitly loaded by user
          action). For maximum portability, use the [1306]LoadableModule
          builder for the latter.

          When the [1307]$SHLIBVERSION construction variable is defined, a
          versioned shared library is created. This modifies
          [1308]$SHLINKFLAGS as required, adds the version number to the
          library name, and creates any symbolic links that are needed.

env.SharedLibrary(target='bar', source=['bar.c', 'foo.o'], SHLIBVERSION='1.5.2')

          On a POSIX system, versions with a single token create exactly
          one symlink: libbar.so.6 would have symlink libbar.so only. On a
          POSIX system, versions with two or more tokens create exactly
          two symlinks: libbar.so.2.3.1 would have symlinks libbar.so and
          libbar.so.2; on a Darwin (OSX) system the library would be
          libbar.2.3.1.dylib and the link would be libbar.dylib.

          On Windows systems, specifying register=1 will cause the .dll to
          be registered after it is built. The command that is run is
          determined by the [1309]$REGSVR construction variable (regsvr32
          by default), and the flags passed are determined by
          [1310]$REGSVRFLAGS. By default, [1311]$REGSVRFLAGS includes the
          /s option, to prevent dialogs from popping up and requiring user
          attention when it is run. If you change [1312]$REGSVRFLAGS, be
          sure to include the /s option. For example,

env.SharedLibrary(target='bar', source=['bar.cxx', 'foo.obj'], register=1)

          will register bar.dll as a COM object when it is done linking
          it.

   SharedObject()
          env.SharedObject()
          Builds an object file intended for inclusion in a shared
          library. Source files must have one of the same set of
          extensions specified above for the StaticObject builder method.
          On some platforms building a shared object requires additional
          compiler option (e.g. -fPIC for gcc) in addition to those needed
          to build a normal (static) object, but on some platforms there
          is no difference between a shared object and a normal (static)
          one. When there is a difference, SCons will only allow shared
          objects to be linked into a shared library, and will use a
          different suffix for shared objects. On platforms where there is
          no difference, SCons will allow both normal (static) and shared
          objects to be linked into a shared library, and will use the
          same suffix for shared and normal (static) objects. The target
          object file prefix, specified by the [1313]$SHOBJPREFIX
          construction variable (by default, the same as
          [1314]$OBJPREFIX), and suffix, specified by the
          [1315]$SHOBJSUFFIX construction variable, are automatically
          added to the target if not already present. Examples:

env.SharedObject(target='ddd', source='ddd.c')
env.SharedObject(target='eee.o', source='eee.cpp')
env.SharedObject(target='fff.obj', source='fff.for')

          Note that the source files will be scanned according to the
          suffix mappings in the SourceFileScanner object. See the manpage
          section "Scanner Objects" for more information.

   StaticLibrary()
          env.StaticLibrary()
          Builds a static library given one or more object files or C,
          C++, D or Fortran source files. If any source files are given,
          then they will be automatically compiled to object files. The
          static library file prefix, specified by the [1316]$LIBPREFIX
          construction variable (by default, lib on POSIX systems, nothing
          on Windows systems), and suffix, specified by the
          [1317]$LIBSUFFIX construction variable (by default, .lib on
          Windows systems, .a on POSIX systems), are automatically added
          to the target if not already present. Example:

env.StaticLibrary(target='bar', source=['bar.c', 'foo.o'])

          Any object files listed in the source must have been built for a
          static library (that is, using the StaticObject builder method).
          scons will raise an error if there is any mismatch.

   StaticObject()
          env.StaticObject()
          Builds a static object file from one or more C, C++, D, or
          Fortran source files. Source files must have one of the
          following extensions:

  .asm    assembly language file
  .ASM    assembly language file
  .c      C file
  .C      Windows:  C file
          POSIX:  C++ file
  .cc     C++ file
  .cpp    C++ file
  .cxx    C++ file
  .cxx    C++ file
  .c++    C++ file
  .C++    C++ file
  .d      D file
  .f      Fortran file
  .F      Windows:  Fortran file
          POSIX:  Fortran file + C pre-processor
  .for    Fortran file
  .FOR    Fortran file
  .fpp    Fortran file + C pre-processor
  .FPP    Fortran file + C pre-processor
  .m      Object C file
  .mm     Object C++ file
  .s      assembly language file
  .S      Windows:  assembly language file
          ARM: CodeSourcery Sourcery Lite
  .sx     assembly language file + C pre-processor
          POSIX:  assembly language file + C pre-processor
  .spp    assembly language file + C pre-processor
  .SPP    assembly language file + C pre-processor

          The target object file prefix, specified by the [1318]$OBJPREFIX
          construction variable (nothing by default), and suffix,
          specified by the [1319]$OBJSUFFIX construction variable (.obj on
          Windows systems, .o on POSIX systems), are automatically added
          to the target if not already present. Examples:

env.StaticObject(target='aaa', source='aaa.c')
env.StaticObject(target='bbb.o', source='bbb.c++')
env.StaticObject(target='ccc.obj', source='ccc.f')

          Note that the source files will be scanned according to the
          suffix mappings in the SourceFileScanner object. See the manpage
          section "Scanner Objects" for more information.

   Substfile()
          env.Substfile()
          The Substfile builder creates a single text file from a template
          consisting of a file or set of files (or nodes), replacing text
          using the [1320]$SUBST_DICT construction variable (if set). If a
          set, they are concatenated into the target file using the value
          of the [1321]$LINESEPARATOR construction variable as a separator
          between contents; the separator is not emitted after the
          contents of the last file. Nested lists of source files are
          flattened. See also [1322]Textfile.

          If a single source file name is specified and has a .in suffix,
          the suffix is stripped and the remainder of the name is used as
          the default target name.

          The prefix and suffix specified by the [1323]$SUBSTFILEPREFIX
          and [1324]$SUBSTFILESUFFIX construction variables (an empty
          string by default in both cases) are automatically added to the
          target if they are not already present.

          If a construction variable named [1325]$SUBST_DICT is present,
          it may be either a Python dictionary or a sequence of (key,
          value) tuples. If it is a dictionary it is converted into a list
          of tuples with unspecified order, so if one key is a prefix of
          another key or if one substitution could be further expanded by
          another subsitition, it is unpredictable whether the expansion
          will occur.

          Any occurrences of a key in the source are replaced by the
          corresponding value, which may be a Python callable function or
          a string. If the value is a callable, it is called with no
          arguments to get a string. Strings are subst-expanded and the
          result replaces the key.

env = Environment(tools=['default'])

env['prefix'] = '/usr/bin'
script_dict = {'@prefix@': '/bin', '@exec_prefix@': '$prefix'}
env.Substfile('script.in', SUBST_DICT=script_dict)

conf_dict = {'%VERSION%': '1.2.3', '%BASE%': 'MyProg'}
env.Substfile('config.h.in', conf_dict, SUBST_DICT=conf_dict)

# UNPREDICTABLE - one key is a prefix of another
bad_foo = {'$foo': '$foo', '$foobar': '$foobar'}
env.Substfile('foo.in', SUBST_DICT=bad_foo)

# PREDICTABLE - keys are applied longest first
good_foo = [('$foobar', '$foobar'), ('$foo', '$foo')]
env.Substfile('foo.in', SUBST_DICT=good_foo)

# UNPREDICTABLE - one substitution could be futher expanded
bad_bar = {'@bar@': '@soap@', '@soap@': 'lye'}
env.Substfile('bar.in', SUBST_DICT=bad_bar)

# PREDICTABLE - substitutions are expanded in order
good_bar = (('@bar@', '@soap@'), ('@soap@', 'lye'))
env.Substfile('bar.in', SUBST_DICT=good_bar)

# the SUBST_DICT may be in common (and not an override)
substutions = {}
subst = Environment(tools=['textfile'], SUBST_DICT=substitutions)
substitutions['@foo@'] = 'foo'
subst['SUBST_DICT']['@bar@'] = 'bar'
subst.Substfile(
    'pgm1.c',
    [Value('#include "@foo@.h"'), Value('#include "@bar@.h"'), "common.in", "pgm
1.in"],
)
subst.Substfile(
    'pgm2.c',
    [Value('#include "@foo@.h"'), Value('#include "@bar@.h"'), "common.in", "pgm
2.in"],
)


   Tar()
          env.Tar()
          Builds a tar archive of the specified files and/or directories.
          Unlike most builder methods, the Tar builder method may be
          called multiple times for a given target; each additional call
          adds to the list of entries that will be built into the archive.
          Any source directories will be scanned for changes to any
          on-disk files, regardless of whether or not scons knows about
          them from other Builder or function calls.

env.Tar('src.tar', 'src')

# Create the stuff.tar file.
env.Tar('stuff', ['subdir1', 'subdir2'])
# Also add "another" to the stuff.tar file.
env.Tar('stuff', 'another')

# Set TARFLAGS to create a gzip-filtered archive.
env = Environment(TARFLAGS = '-c -z')
env.Tar('foo.tar.gz', 'foo')

# Also set the suffix to .tgz.
env = Environment(TARFLAGS = '-c -z',
                  TARSUFFIX = '.tgz')
env.Tar('foo')

   Textfile()
          env.Textfile()
          The Textfile builder generates a single text file from a
          template consisting of a list of strings, replacing text using
          the [1326]$SUBST_DICT construction variable (if set) - see
          [1327]Substfile for a description of replacement. The strings
          will be separated in the target file using the value of the
          [1328]$LINESEPARATOR construction variable; the line separator
          is not emitted after the last string. Nested lists of source
          strings are flattened. Source strings need not literally be
          Python strings: they can be Nodes or Python objects that convert
          cleanly to [1329]Value nodes

          The prefix and suffix specified by the [1330]$TEXTFILEPREFIX and
          [1331]$TEXTFILESUFFIX construction variables (by default an
          empty string and .txt, respectively) are automatically added to
          the target if they are not already present. Examples:

# builds/writes foo.txt
env.Textfile(target='foo.txt', source=['Goethe', 42, 'Schiller'])

# builds/writes bar.txt
env.Textfile(target='bar', source=['lalala', 'tanteratei'], LINESEPARATOR='|*')

# nested lists are flattened automatically
env.Textfile(target='blob', source=['lalala', ['Goethe', 42, 'Schiller'], 'tante
ratei'])

# files may be used as input by wraping them in File()
env.Textfile(
    target='concat',  # concatenate files with a marker between
    source=[File('concat1'), File('concat2')],
    LINESEPARATOR='====================\n',
)

          Results:

          foo.txt

  Goethe
  42
  Schiller

          bar.txt

  lalala|*tanteratei

          blob.txt

  lalala
  Goethe
  42
  Schiller
  tanteratei

   Translate()
          env.Translate()
          This pseudo-builder belongs to [1332]gettext toolset. The
          builder extracts internationalized messages from source files,
          updates POT template (if necessary) and then updates PO
          translations (if necessary). If [1333]$POAUTOINIT is set,
          missing PO files will be automatically created (i.e. without
          translator person intervention). The variables
          [1334]$LINGUAS_FILE and [1335]$POTDOMAIN are taken into acount
          too. All other construction variables used by [1336]POTUpdate,
          and [1337]POUpdate work here too.

          Example 1. The simplest way is to specify input files and output
          languages inline in a SCons script when invoking Translate

# SConscript in 'po/' directory
env = Environment( tools = ["default", "gettext"] )
env['POAUTOINIT'] = 1
env.Translate(['en','pl'], ['../a.cpp','../b.cpp'])

          Example 2. If you wish, you may also stick to conventional style
          known from autotools, i.e. using POTFILES.in and LINGUAS files

# LINGUAS
en pl
#end

# POTFILES.in
a.cpp
b.cpp
# end

# SConscript
env = Environment( tools = ["default", "gettext"] )
env['POAUTOINIT'] = 1
env['XGETTEXTPATH'] = ['../']
env.Translate(LINGUAS_FILE = 1, XGETTEXTFROM = 'POTFILES.in')

          The last approach is perhaps the recommended one. It allows
          easily split internationalization/localization onto separate
          SCons scripts, where a script in source tree is responsible for
          translations (from sources to PO files) and script(s) under
          variant directories are responsible for compilation of PO to MO
          files to and for installation of MO files. The "gluing factor"
          synchronizing these two scripts is then the content of LINGUAS
          file. Note, that the updated POT and PO files are usually going
          to be committed back to the repository, so they must be updated
          within the source directory (and not in variant directories).
          Additionaly, the file listing of po/ directory contains LINGUAS
          file, so the source tree looks familiar to translators, and they
          may work with the project in their usual way.

          Example 3. Let's prepare a development tree as below

 project/
  + SConstruct
  + build/
  + src/
      + po/
          + SConscript
          + SConscript.i18n
          + POTFILES.in
          + LINGUAS

          with build being variant directory. Write the top-level
          SConstruct script as follows

  # SConstruct
  env = Environment( tools = ["default", "gettext"] )
  VariantDir('build', 'src', duplicate = 0)
  env['POAUTOINIT'] = 1
  SConscript('src/po/SConscript.i18n', exports = 'env')
  SConscript('build/po/SConscript', exports = 'env')

          the src/po/SConscript.i18n as

  # src/po/SConscript.i18n
  Import('env')
  env.Translate(LINGUAS_FILE=1, XGETTEXTFROM='POTFILES.in', XGETTEXTPATH=['../']
)

          and the src/po/SConscript

  # src/po/SConscript
  Import('env')
  env.MOFiles(LINGUAS_FILE = 1)

          Such setup produces POT and PO files under source tree in
          src/po/ and binary MO files under variant tree in build/po/.
          This way the POT and PO files are separated from other output
          files, which must not be committed back to source repositories
          (e.g. MO files).

Note

          In above example, the PO files are not updated, nor created
          automatically when you issue scons '.' command. The files must
          be updated (created) by hand via scons po-update and then MO
          files can be compiled by running scons '.'.

   TypeLibrary()
          env.TypeLibrary()
          Builds a Windows type library (.tlb) file from an input IDL file
          (.idl). In addition, it will build the associated interface stub
          and proxy source files, naming them according to the base name
          of the .idl file. For example,

env.TypeLibrary(source="foo.idl")

          Will create foo.tlb, foo.h, foo_i.c, foo_p.c and foo_data.c
          files.

   Uic()
          env.Uic()
          Builds a header file, an implementation file and a moc file from
          an ui file. and returns the corresponding nodes in the that
          order. This builder is only available after using the tool
          [1338]qt. Note: you can specify .ui files directly as source
          files to the [1339]Program, [1340]Library and
          [1341]SharedLibrary builders without using this builder. Using
          this builder lets you override the standard naming conventions
          (be careful: prefixes are always prepended to names of built
          files; if you don't want prefixes, you may set them to ``). See
          the [1342]$QTDIR variable for more information. Example:

env.Uic('foo.ui')  # -> ['foo.h', 'uic_foo.cc', 'moc_foo.cc']
env.Uic(
    target=Split('include/foo.h gen/uicfoo.cc gen/mocfoo.cc'),
    source='foo.ui'
)  # -> ['include/foo.h', 'gen/uicfoo.cc', 'gen/mocfoo.cc']

   Zip()
          env.Zip()
          Builds a zip archive of the specified files and/or directories.
          Unlike most builder methods, the Zip builder method may be
          called multiple times for a given target; each additional call
          adds to the list of entries that will be built into the archive.
          Any source directories will be scanned for changes to any
          on-disk files, regardless of whether or not scons knows about
          them from other Builder or function calls.

env.Zip('src.zip', 'src')

# Create the stuff.zip file.
env.Zip('stuff', ['subdir1', 'subdir2'])
# Also add "another" to the stuff.tar file.
env.Zip('stuff', 'another')

   All targets of builder methods automatically depend on their sources.
   An explicit dependency can be specified using the [1343]env.Depends
   method of a construction environment (see below).

   In addition, scons automatically scans source files for various
   programming languages, so the dependencies do not need to be specified
   explicitly. By default, SCons can C source files, C++ source files,
   Fortran source files with .F (POSIX systems only), .fpp, or .FPP file
   extensions, and assembly language files with .S (POSIX systems only),
   .spp, or .SPP files extensions for C preprocessor dependencies. SCons
   also has default support for scanning D source files, You can also
   write your own Scanners to add support for additional source file
   types. These can be added to the default Scanner object used by the
   [1344]Object, [1345]StaticObject and [1346]SharedObject Builders by
   adding them to the SourceFileScanner object. See [1347]the section
   called "Scanner Objects" for more information about defining your own
   Scanner objects and using the SourceFileScanner object.

Methods and Functions To Do Things

   In addition to Builder methods, scons provides a number of other
   construction environment methods and global functions to manipulate the
   build configuration.

   Usually, a construction environment method and global function with the
   same name both exist for convenience. In the following list, the global
   function is documented in this style:
Function(arguments, [optional arguments])

   and the construction environment method looks like:
env.Function(arguments, [optional arguments])

   If the function can be called both ways, then both forms are listed.

   The global function and same-named construction environment method
   provide almost identical functionality, with a couple of exceptions.
   First, many of the construction environment methods affect only that
   construction environment, while the global function has a global
   effect. Second, where appropriate, calling the functionality through a
   construction environment will substitute construction variables into
   any supplied string arguments, while the global function doesn't have
   the context of a construction environment to pick variables from, so it
   cannot perform the substitution. For example:
Default('$FOO')

env = Environment(FOO='foo')
env.Default('$FOO')

   In the above example, the call to the global Default function will add
   a target named $FOO to the list of default targets, while the call to
   the env.Default construction environment method will expand the value
   and add a target named foo to the list of default targets. For more on
   construction variable expansion, see the next section on construction
   variables.

   Global functions may be called from custom Python modules that you
   import into an SConscript file by adding the following import to the
   Python module:
from SCons.Script import *

   Construction environment methods and global functions provided by scons
   include:

   Action(action, [output, [var, ...]] [key=value, ...])
          env.Action(action, [output, [var, ...]] [key=value, ...])
          A factory function to create an Action object for the specified
          action. See the manpage section "Action Objects" for a complete
          explanation of the arguments and behavior.

          Note that the env.Action form of the invocation will expand
          construction variables in any argument strings, including the
          action argument, at the time it is called using the construction
          variables in the env construction environment through which
          env.Action was called. The Action global function form delays
          all variable expansion until the Action object is actually used.

   AddMethod(object, function, [name])
          env.AddMethod(function, [name])
          Adds function to an object as a method. function will be called
          with an instance object as the first argument as for other
          methods. If name is given, it is used as the name of the new
          method, else the name of function is used.

          When the global function AddMethod is called, the object to add
          the method to must be passed as the first argument; typically
          this will be Environment, in order to create a method which
          applies to all construction environments subsequently
          constructed. When called using the env.AddMethod form, the
          method is added to the specified construction environment only.
          Added methods propagate through env.Clone calls.

          More examples:

# Function to add must accept an instance argument.
# The Python convention is to call this 'self'.
def my_method(self, arg):
    print("my_method() got", arg)

# Use the global function to add a method to the Environment class:
AddMethod(Environment, my_method)
env = Environment()
env.my_method('arg')

# Use the optional name argument to set the name of the method:
env.AddMethod(my_method, 'other_method_name')
env.other_method_name('another arg')

   AddOption(arguments)
          Adds a local (project-specific) command-line option. arguments
          are the same as those supported by the add_option method in the
          standard Python library module optparse, with a few additional
          capabilities noted below. See the documentation for optparse for
          a thorough discussion of its option-processing capabities.

          In addition to the arguments and values supported by the
          optparse add_option method, AddOption allows setting the nargs
          keyword value to a string consisting of a question mark ('?') to
          indicate that the option argument for that option string is
          optional. If the option string is present on the command line
          but has no matching option argument, the value of the const
          keyword argument is produced as the value of the option. If the
          option string is omitted from the command line, the value of the
          default keyword argument is produced, as usual; if there is no
          default keyword argument in the AddOption call, None is
          produced.

          optparse recognizes abbreviations of long option names, as long
          as they can be unambiguously resolved. For example, if
          add_option is called to define a --devicename option, it will
          recognize --device, --dev and so forth as long as there is no
          other option which could also match to the same abbreviation.
          Options added via AddOption do not support the automatic
          recognition of abbreviations. Instead, to allow specific
          abbreviations, include them as synonyms in the AddOption call
          itself.

          Once a new command-line option has been added with AddOption,
          the option value may be accessed using [1348]GetOption or
          [1349]env.GetOption. [1350]SetOption is not currently supported
          for options added with AddOption.

          Help text for an option is a combination of the string supplied
          in the help keyword argument to AddOption and information
          collected from the other keyword arguments. Such help is
          displayed if the -h command line option is used (but not with
          -H). Help for all local options is displayed under the separate
          heading Local Options. The options are unsorted - they will
          appear in the help text in the order in which the AddOption
          calls occur.

          Example:

AddOption(
    '--prefix',
    dest='prefix',
    nargs=1,
    type='string',
    action='store',
    metavar='DIR',
    help='installation prefix',
)
env = Environment(PREFIX=GetOption('prefix'))

          For that example, the following help text would be produced:

Local Options:
  --prefix=DIR                installation prefix

          Help text for local options may be unavailable if the [1351]Help
          function has been called, see the Help documentation for
          details.

Note

          As an artifact of the internal implementation, the behavior of
          options added by AddOption which take option arguments is
          undefined if whitespace (rather than an = sign) is used as the
          separator on the command line. Users should avoid such usage; it
          is recommended to add a note to this effect to project
          documentation if the situation is likely to arise. In addition,
          if the nargs keyword is used to specify more than one following
          option argument (that is, with a value of 2 or greater), such
          arguments would necessarily be whitespace separated, triggering
          the issue. Developers should not use AddOption this way. Future
          versions of SCons will likely forbid such usage.

   AddPostAction(target, action)
          env.AddPostAction(target, action)
          Arranges for the specified action to be performed after the
          specified target has been built. The specified action(s) may be
          an Action object, or anything that can be converted into an
          Action object See the manpage section "Action Objects" for a
          complete explanation.

          When multiple targets are supplied, the action may be called
          multiple times, once after each action that generates one or
          more targets in the list.

   AddPreAction(target, action)
          env.AddPreAction(target, action)
          Arranges for the specified action to be performed before the
          specified target is built. The specified action(s) may be an
          Action object, or anything that can be converted into an Action
          object See the manpage section "Action Objects" for a complete
          explanation.

          When multiple targets are specified, the action(s) may be called
          multiple times, once before each action that generates one or
          more targets in the list.

          Note that if any of the targets are built in multiple steps, the
          action will be invoked just before the "final" action that
          specifically generates the specified target(s). For example,
          when building an executable program from a specified source .c
          file via an intermediate object file:

foo = Program('foo.c')
AddPreAction(foo, 'pre_action')

          The specified pre_action would be executed before scons calls
          the link command that actually generates the executable program
          binary foo, not before compiling the foo.c file into an object
          file.

   Alias(alias, [targets, [action]])
          env.Alias(alias, [targets, [action]])
          Creates one or more phony targets that expand to one or more
          other targets. An optional action (command) or list of actions
          can be specified that will be executed whenever the any of the
          alias targets are out-of-date. Returns the Node object
          representing the alias, which exists outside of any file system.
          This Node object, or the alias name, may be used as a dependency
          of any other target, including another alias. Alias can be
          called multiple times for the same alias to add additional
          targets to the alias, or additional actions to the list for this
          alias. Aliases are global even if set through the construction
          environment method.

          Examples:

Alias('install')
Alias('install', '/usr/bin')
Alias(['install', 'install-lib'], '/usr/local/lib')

env.Alias('install', ['/usr/local/bin', '/usr/local/lib'])
env.Alias('install', ['/usr/local/man'])

env.Alias('update', ['file1', 'file2'], "update_database $SOURCES")

   AllowSubstExceptions([exception, ...])
          Specifies the exceptions that will be allowed when expanding
          construction variables. By default, any construction variable
          expansions that generate a NameError or IndexError exception
          will expand to a '' (an empty string) and not cause scons to
          fail. All exceptions not in the specified list will generate an
          error message and terminate processing.

          If AllowSubstExceptions is called multiple times, each call
          completely overwrites the previous list of allowed exceptions.

          Example:

# Requires that all construction variable names exist.
# (You may wish to do this if you want to enforce strictly
# that all construction variables must be defined before use.)
AllowSubstExceptions()

# Also allow a string containing a zero-division expansion
# like '${1 / 0}' to evalute to ''.
AllowSubstExceptions(IndexError, NameError, ZeroDivisionError)

   AlwaysBuild(target, ...)
          env.AlwaysBuild(target, ...)
          Marks each given target so that it is always assumed to be out
          of date, and will always be rebuilt if needed. Note, however,
          that AlwaysBuild does not add its target(s) to the default
          target list, so the targets will only be built if they are
          specified on the command line, or are a dependent of a target
          specified on the command line--but they will always be built if
          so specified. Multiple targets can be passed in to a single call
          to AlwaysBuild.

   env.Append(key=val, [...])
          Intelligently append values to construction variables in the
          construction environment named by env. The construction
          variables and values to add to them are passed as key=val pairs
          (Python keyword arguments). env.Append is designed to allow
          adding values without normally having to know the data type of
          an existing construction variable. Regular Python syntax can
          also be used to manipulate the construction variable, but for
          that you must know the type of the construction variable: for
          example, different Python syntax is needed to combine a list of
          values with a single string value, or vice versa. Some
          pre-defined construction variables do have type expectations
          based on how SCons will use them, for example [1352]$CPPDEFINES
          is normally a string or a list of strings, but can be a string,
          a list of strings, a list of tuples, or a dictionary, while
          [1353]$LIBEMITTER would expect a callable or list of callables,
          and [1354]$BUILDERS would expect a mapping type. Consult the
          documentation for the various construction variables for more
          details.

          The following descriptions apply to both the append and prepend
          functions, the only difference being the insertion point of the
          added values.

          If env. does not have a construction variable indicated by key,
          val is added to the environment under that key as-is.

          val can be almost any type, and SCons will combine it with an
          existing value into an appropriate type, but there are a few
          special cases to be aware of. When two strings are combined, the
          result is normally a new string, with the caller responsible for
          supplying any needed separation. The exception to this is the
          construction variable [1355]$CPPDEFINES, in which each item will
          be postprocessed by adding a prefix and/or suffix, so the
          contents are treated as a list of strings, that is, adding a
          string will result in a separate string entry, not a combined
          string. For $CPPDEFINES as well as for [1356]$LIBS, and the
          various *PATH; variables, SCons will supply the
          compiler-specific syntax (e.g. adding a -D or /D prefix for
          $CPPDEFINES), so this syntax should be omitted when adding
          values to these variables. Example (gcc syntax shown in the
          expansion of CPPDEFINES):

env = Environment(CXXFLAGS="-std=c11", CPPDEFINES="RELEASE")
print("CXXFLAGS={}, CPPDEFINES={}".format(env['CXXFLAGS'], env['CPPDEFINES']))
# notice including a leading space in CXXFLAGS value
env.Append(CXXFLAGS=" -O", CPPDEFINES="EXTRA")
print("CXXFLAGS={}, CPPDEFINES={}".format(env['CXXFLAGS'], env['CPPDEFINES']))
print("CPPDEFINES will expand to {}".format(env.subst("$_CPPDEFFLAGS")))

$ scons -Q
CXXFLAGS=-std=c11, CPPDEFINES=RELEASE
CXXFLAGS=-std=c11 -O, CPPDEFINES=['RELEASE', 'EXTRA']
CPPDEFINES will expand to -DRELEASE -DEXTRA
scons: `.' is up to date.

          Because [1357]$CPPDEFINES is intended to describe C/C++
          pre-processor macro definitions, it accepts additional syntax.
          Preprocessor macros can be valued, or un-valued, as in -DBAR=1
          or -DFOO. The macro can be be supplied as a complete string
          including the value, or as a tuple (or list) of macro, value, or
          as a dictionary. Example (again gcc syntax in the expanded
          defines):

env = Environment(CPPDEFINES="FOO")
print("CPPDEFINES={}".format(env['CPPDEFINES']))
env.Append(CPPDEFINES="BAR=1")
print("CPPDEFINES={}".format(env['CPPDEFINES']))
env.Append(CPPDEFINES=("OTHER", 2))
print("CPPDEFINES={}".format(env['CPPDEFINES']))
env.Append(CPPDEFINES={"EXTRA": "arg"})
print("CPPDEFINES={}".format(env['CPPDEFINES']))
print("CPPDEFINES will expand to {}".format(env.subst("$_CPPDEFFLAGS")))

$ scons -Q
CPPDEFINES=FOO
CPPDEFINES=['FOO', 'BAR=1']
CPPDEFINES=['FOO', 'BAR=1', ('OTHER', 2)]
CPPDEFINES=['FOO', 'BAR=1', ('OTHER', 2), {'EXTRA': 'arg'}]
CPPDEFINES will expand to -DFOO -DBAR=1 -DOTHER=2 -DEXTRA=arg
scons: `.' is up to date.

          Adding a string val to a dictonary construction variable will
          enter val as the key in the dict, and None as its value. Using a
          tuple type to supply a key + value only works for the special
          case of [1358]$CPPDEFINES described above.

          Although most combinations of types work without needing to know
          the details, some combinations do not make sense and a Python
          exception will be raised.

          When using env.Append to modify construction variables which are
          path specifications (conventionally, the names of such end in
          PATH), it is recommended to add the values as a list of strings,
          even if there is only a single string to add. The same goes for
          adding library names to $LIBS.

env.Append(CPPPATH=["#/include"])

          See also [1359]env.AppendUnique, [1360]env.Prepend and
          [1361]env.PrependUnique.

   env.AppendENVPath(name, newpath, [envname, sep, delete_existing=False])
          Append path elements specified by newpath to the given search
          path string or list name in mapping envname in the construction
          environment. Supplying envname is optional: the default is the
          execution environment [1362]$ENV. Optional sep is used as the
          search path separator, the default is the platform's separator
          (os.pathsep). A path element will only appear once. Any
          duplicates in newpath are dropped, keeping the last appearing
          (to preserve path order). If delete_existing is False (the
          default) any addition duplicating an existing path element is
          ignored; if delete_existing is True the existing value will be
          dropped and the path element will be added at the end. To help
          maintain uniqueness all paths are normalized (using
          os.path.normpath and os.path.normcase).

          Example:

print('before:', env['ENV']['INCLUDE'])
include_path = '/foo/bar:/foo'
env.AppendENVPath('INCLUDE', include_path)
print('after:', env['ENV']['INCLUDE'])

          Yields:

before: /foo:/biz
after: /biz:/foo/bar:/foo

          See also [1363]env.PrependENVPath.

   env.AppendUnique(key=val, [...], delete_existing=False)
          Append values to construction variables in the current
          construction environment, maintaining uniqueness. Works like
          [1364]env.Append (see for details), except that values already
          present in the construction variable will not be added again. If
          delete_existing is True, the existing matching value is first
          removed, and the requested value is added, having the effect of
          moving such values to the end.

          Example:

env.AppendUnique(CCFLAGS='-g', FOO=['foo.yyy'])

          See also [1365]env.Append, [1366]env.Prepend and
          [1367]env.PrependUnique.

   Builder(action, [arguments])
          env.Builder(action, [arguments])
          Creates a Builder object for the specified action. See the
          manpage section "Builder Objects" for a complete explanation of
          the arguments and behavior.

          Note that the env.Builder() form of the invocation will expand
          construction variables in any arguments strings, including the
          action argument, at the time it is called using the construction
          variables in the env construction environment through which
          env.Builder was called. The Builder form delays all variable
          expansion until after the Builder object is actually called.

   CacheDir(cache_dir, custom_class=None)
          env.CacheDir(cache_dir, custom_class=None)
          Direct scons to maintain a derived-file cache in cache_dir. The
          derived files in the cache will be shared among all the builds
          specifying the same cache_dir. Specifying a cache_dir of None
          disables derived file caching.

          When specifying a custom_class which should be a class type
          which is a subclass of SCons.CacheDir.CacheDir, SCons will
          internally invoke this class to use for performing caching
          operations. This argument is optional and if left to default
          None, will use the default SCons.CacheDir.CacheDir class.

          Calling the environment method [1368]env.CacheDir limits the
          effect to targets built through the specified construction
          environment. Calling the global function [1369]CacheDir sets a
          global default that will be used by all targets built through
          construction environments that do not set up
          environment-specific caching by calling env.CacheDir.

          When derived-file caching is being used and scons finds a
          derived file that needs to be rebuilt, it will first look in the
          cache to see if a file with matching build signature exists
          (indicating the input file(s) and build action(s) were identical
          to those for the current target), and if so, will retrieve the
          file from the cache. scons will report Retrieved `file' from
          cache instead of the normal build message. If the derived file
          is not present in the cache, scons will build it and then place
          a copy of the built file in the cache, identified by its build
          signature, for future use.

          The Retrieved `file' from cache messages are useful for human
          consumption, but less so when comparing log files between scons
          runs which will show differences that are noisy and not actually
          significant. To disable, use the --cache-show option. With this
          option, scons will print the action that would have been used to
          build the file without considering cache retrieval.

          Derived-file caching may be disabled for any invocation of scons
          by giving the --cache-disable command line option. Cache
          updating may be disabled, leaving cache fetching enabled, by
          giving the --cache-readonly.

          If the --cache-force option is used, scons will place a copy of
          all derived files in the cache, even if they already existed and
          were not built by this invocation. This is useful to populate a
          cache the first time a cache_dir is used for a build, or to
          bring a cache up to date after a build with cache updating
          disabled (--cache-disable or --cache-readonly) has been done.

          The [1370]NoCache method can be used to disable caching of
          specific files. This can be useful if inputs and/or outputs of
          some tool are impossible to predict or prohibitively large.

          Note that (at this time) SCons provides no facilities for
          managing the derived-file cache. It is up to the developer to
          arrange for cache pruning, expiry, etc. if needed.

   Clean(targets, files_or_dirs)
          env.Clean(targets, files_or_dirs)
          This specifies a list of files or directories which should be
          removed whenever the targets are specified with the -c command
          line option. The specified targets may be a list or an
          individual target. Multiple calls to Clean are legal, and create
          new targets or add files and directories to the clean list for
          the specified targets.

          Multiple files or directories should be specified either as
          separate arguments to the Clean method, or as a list. Clean will
          also accept the return value of any of the construction
          environment Builder methods. Examples:

          The related [1371]NoClean function overrides calling Clean for
          the same target, and any targets passed to both functions will
          not be removed by the -c option.

          Examples:

Clean('foo', ['bar', 'baz'])
Clean('dist', env.Program('hello', 'hello.c'))
Clean(['foo', 'bar'], 'something_else_to_clean')

          In this example, installing the project creates a subdirectory
          for the documentation. This statement causes the subdirectory to
          be removed if the project is deinstalled.

Clean(docdir, os.path.join(docdir, projectname))

   env.Clone([key=val, ...])
          Returns a separate copy of a construction environment. If there
          are any keyword arguments specified, they are added to the
          returned copy, overwriting any existing values for the keywords.

          Example:

env2 = env.Clone()
env3 = env.Clone(CCFLAGS='-g')

          Additionally, a list of tools and a toolpath may be specified,
          as in the [1372]Environment constructor:

def MyTool(env):
    env['FOO'] = 'bar'

env4 = env.Clone(tools=['msvc', MyTool])

          The parse_flags keyword argument is also recognized to allow
          merging command-line style arguments into the appropriate
          construction variables (see [1373]env.MergeFlags).

# create an environment for compiling programs that use wxWidgets
wx_env = env.Clone(parse_flags='!wx-config --cflags --cxxflags')

   Command(target, source, action, [key=val, ...])
          env.Command(target, source, action, [key=val, ...])
          Executes a specific action (or list of actions) to build a
          target file or files from a source file or files. This is more
          convenient than defining a separate Builder object for a single
          special-case build.

          The Command function accepts source_scanner, target_scanner,
          source_factory, and target_factory keyword arguments. These
          arguments can be used to specify a Scanner object that will be
          used to apply a custom scanner for a source or target. For
          example, the global DirScanner object can be used if any of the
          sources will be directories that must be scanned on-disk for
          changes to files that aren't already specified in other Builder
          of function calls. The *_factory arguments take a factory
          function that Command will use to turn any sources or targets
          specified as strings into SCons Nodes. See the manpage section
          "Builder Objects" for more information about how these arguments
          work in a Builder.

          Any other keyword arguments specified override any same-named
          existing construction variables.

          An action can be an external command, specified as a string, or
          a callable Python object; see the manpage section "Action
          Objects" for more complete information. Also note that a string
          specifying an external command may be preceded by an at-sign (@)
          to suppress printing the command in question, or by a hyphen (-)
          to ignore the exit status of the external command.

          Examples:

env.Command(
    target='foo.out',
    source='foo.in',
    action="$FOO_BUILD < $SOURCES > $TARGET"
)

env.Command(
    target='bar.out',
    source='bar.in',
    action=["rm -f $TARGET", "$BAR_BUILD < $SOURCES > $TARGET"],
    ENV={'PATH': '/usr/local/bin/'},
)


import os
def rename(env, target, source):
    os.rename('.tmp', str(target[0]))


env.Command(
    target='baz.out',
    source='baz.in',
    action=["$BAZ_BUILD < $SOURCES > .tmp", rename],
)

          Note that the Command function will usually assume, by default,
          that the specified targets and/or sources are Files, if no other
          part of the configuration identifies what type of entries they
          are. If necessary, you can explicitly specify that targets or
          source nodes should be treated as directories by using the
          [1374]Dir or [1375]env.Dir functions.

          Examples:

env.Command('ddd.list', Dir('ddd'), 'ls -l $SOURCE > $TARGET')

env['DISTDIR'] = 'destination/directory'
env.Command(env.Dir('$DISTDIR')), None, make_distdir)

          Also note that SCons will usually automatically create any
          directory necessary to hold a target file, so you normally don't
          need to create directories by hand.

   Configure(env, [custom_tests, conf_dir, log_file, config_h])
          env.Configure([custom_tests, conf_dir, log_file, config_h])
          Creates a Configure object for integrated functionality similar
          to GNU autoconf. See the manpage section "Configure Contexts"
          for a complete explanation of the arguments and behavior.

   Decider(function)
          env.Decider(function)
          Specifies that all up-to-date decisions for targets built
          through this construction environment will be handled by the
          specified function. function can be the name of a function or
          one of the following strings that specify the predefined
          decision function that will be applied:

        "timestamp-newer"
                Specifies that a target shall be considered out of date
                and rebuilt if the dependency's timestamp is newer than
                the target file's timestamp. This is the behavior of the
                classic Make utility, and make can be used a synonym for
                timestamp-newer.

        "timestamp-match"
                Specifies that a target shall be considered out of date
                and rebuilt if the dependency's timestamp is different
                than the timestamp recorded the last time the target was
                built. This provides behavior very similar to the classic
                Make utility (in particular, files are not opened up so
                that their contents can be checksummed) except that the
                target will also be rebuilt if a dependency file has been
                restored to a version with an earlier timestamp, such as
                can happen when restoring files from backup archives.

        "content"
                Specifies that a target shall be considered out of date
                and rebuilt if the dependency's content has changed since
                the last time the target was built, as determined be
                performing an checksum on the dependency's contents and
                comparing it to the checksum recorded the last time the
                target was built. MD5 can be used as a synonym for
                content, but it is deprecated.

        "content-timestamp"
                Specifies that a target shall be considered out of date
                and rebuilt if the dependency's content has changed since
                the last time the target was built, except that
                dependencies with a timestamp that matches the last time
                the target was rebuilt will be assumed to be up-to-date
                and not rebuilt. This provides behavior very similar to
                the content behavior of always checksumming file contents,
                with an optimization of not checking the contents of files
                whose timestamps haven't changed. The drawback is that
                SCons will not detect if a file's content has changed but
                its timestamp is the same, as might happen in an automated
                script that runs a build, updates a file, and runs the
                build again, all within a single second. MD5-timestamp can
                be used as a synonym for content-timestamp, but it is
                deprecated.

          Examples:

# Use exact timestamp matches by default.
Decider('timestamp-match')

# Use hash content signatures for any targets built
# with the attached construction environment.
env.Decider('content')

          In addition to the above already-available functions, the
          function argument may be a Python function you supply. Such a
          function must accept the following four arguments:

        dependency
                The Node (file) which should cause the target to be
                rebuilt if it has "changed" since the last tme target was
                built.

        target
                The Node (file) being built. In the normal case, this is
                what should get rebuilt if the dependency has "changed."

        prev_ni
                Stored information about the state of the dependency the
                last time the target was built. This can be consulted to
                match various file characteristics such as the timestamp,
                size, or content signature.

        repo_node
                If set, use this Node instead of the one specified by
                dependency to determine if the dependency has changed.
                This argument is optional so should be written as a
                default argument (typically it would be written as
                repo_node=None). A caller will normally only set this if
                the target only exists in a Repository.

          The function should return a value which evaluates True if the
          dependency has "changed" since the last time the target was
          built (indicating that the target should be rebuilt), and a
          value which evaluates False otherwise (indicating that the
          target should not be rebuilt). Note that the decision can be
          made using whatever criteria are appopriate. Ignoring some or
          all of the function arguments is perfectly normal.

          Example:

def my_decider(dependency, target, prev_ni, repo_node=None):
    return not os.path.exists(str(target))

env.Decider(my_decider)

   Default(target[, ...])
          env.Default(target[, ...])
          Specify default targets to the SCons target selection mechanism.
          Any call to Default will cause SCons to use the defined default
          target list instead of its built-in algorithm for determining
          default targets (see the manpage section "Target Selection").

          target may be one or more strings, a list of strings, a NodeList
          as returned by a Builder, or None. A string target may be the
          name of a file or directory, or a target previously defined by a
          call to [1376]Alias (defining the alias later will still create
          the alias, but it will not be recognized as a default). Calls to
          Default are additive. A target of None will clear any existing
          default target list; subsequent calls to Default will add to the
          (now empty) default target list like normal.

          Both forms of this call affect the same global list of default
          targets; the construction environment method applies
          construction variable expansion to the targets.

          The current list of targets added using Default is available in
          the DEFAULT_TARGETS list (see below).

          Examples:

Default('foo', 'bar', 'baz')
env.Default(['a', 'b', 'c'])
hello = env.Program('hello', 'hello.c')
env.Default(hello)

   DefaultEnvironment([**kwargs])
          Instantiates and returns the default construction environment
          object. The default environment is used internally by SCons in
          order to execute many of the global functions in this list (that
          is, those not called as methods of a specific construction
          environment). It is not mandatory to call DefaultEnvironment:
          the default environment will be instantiated automatically when
          the build phase begins if the function has not been called,
          however calling it explicitly gives the opportunity to affect
          and examine the contents of the default environment.

          The default environment is a singleton, so the keyword arguments
          affect it only on the first call, on subsequent calls the
          already-constructed object is returned and any keyword arguments
          are silently ignored. The default environment can be modified
          after instantiation in the same way as any construction
          environment. Modifying the default environment has no effect on
          the construction environment constructed by an [1377]Environment
          or [1378]Clone call.

   Depends(target, dependency)
          env.Depends(target, dependency)
          Specifies an explicit dependency; the target will be rebuilt
          whenever the dependency has changed. Both the specified target
          and dependency can be a string (usually the path name of a file
          or directory) or Node objects, or a list of strings or Node
          objects (such as returned by a Builder call). This should only
          be necessary for cases where the dependency is not caught by a
          Scanner for the file.

          Example:

env.Depends('foo', 'other-input-file-for-foo')

mylib = env.Library('mylib.c')
installed_lib = env.Install('lib', mylib)
bar = env.Program('bar.c')

# Arrange for the library to be copied into the installation
# directory before trying to build the "bar" program.
# (Note that this is for example only.  A "real" library
# dependency would normally be configured through the $LIBS
# and $LIBPATH variables, not using an env.Depends() call.)

env.Depends(bar, installed_lib)

   env.Detect(progs)
          Find an executable from one or more choices: progs may be a
          string or a list of strings. Returns the first value from progs
          that was found, or None. Executable is searched by checking the
          paths in the execution environment (env['ENV']['PATH']). On
          Windows systems, additionally applies the filename suffixes
          found in the execution environment (env['ENV']['PATHEXT']) but
          will not include any such extension in the return value.
          env.Detect is a wrapper around [1379]env.WhereIs.

   env.Dictionary([vars])
          Returns a dictionary object containing the construction
          variables in the construction environment. If there are any
          arguments specified, the values of the specified construction
          variables are returned as a string (if one argument) or as a
          list of strings.

          Example:

cvars = env.Dictionary()
cc_values = env.Dictionary('CC', 'CCFLAGS', 'CCCOM')

   Dir(name, [directory])
          env.Dir(name, [directory])
          Returns Directory Node(s). A Directory Node is an object that
          represents a directory. name can be a relative or absolute path
          or a list of such paths. directory is an optional directory that
          will be used as the parent directory. If no directory is
          specified, the current script's directory is used as the parent.

          If name is a single pathname, the corresponding node is
          returned. If name is a list, SCons returns a list of nodes.
          Construction variables are expanded in name.

          Directory Nodes can be used anywhere you would supply a string
          as a directory name to a Builder method or function. Directory
          Nodes have attributes and methods that are useful in many
          situations; see manpage section "File and Directory Nodes" for
          more information.

   env.Dump([key], [format])
          Serializes construction variables to a string. The method
          supports the following formats specified by format:

        pretty
                Returns a pretty printed representation of the environment
                (if format is not specified, this is the default).

        json
                Returns a JSON-formatted string representation of the
                environment.

          If key is None (the default) the entire dictionary of
          construction variables is serialized. If supplied, it is taken
          as the name of a construction variable whose value is
          serialized.

          This SConstruct:

env=Environment()
print(env.Dump('CCCOM'))

          will print:

'$CC -c -o $TARGET $CCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $SOURCES'

          While this SConstruct:

env = Environment()
print(env.Dump())

          will print:

{ 'AR': 'ar',
  'ARCOM': '$AR $ARFLAGS $TARGET $SOURCES\n$RANLIB $RANLIBFLAGS $TARGET',
  'ARFLAGS': ['r'],
  'AS': 'as',
  'ASCOM': '$AS $ASFLAGS -o $TARGET $SOURCES',
  'ASFLAGS': [],
  ...

   EnsurePythonVersion(major, minor)
          env.EnsurePythonVersion(major, minor)
          Ensure that the Python version is at least major.minor. This
          function will print out an error message and exit SCons with a
          non-zero exit code if the actual Python version is not late
          enough.

          Example:

EnsurePythonVersion(2,2)

   EnsureSConsVersion(major, minor, [revision])
          env.EnsureSConsVersion(major, minor, [revision])
          Ensure that the SCons version is at least major.minor, or
          major.minor.revision. if revision is specified. This function
          will print out an error message and exit SCons with a non-zero
          exit code if the actual SCons version is not late enough.

          Examples:

EnsureSConsVersion(0,14)

EnsureSConsVersion(0,96,90)

   Environment([key=value, ...])
          env.Environment([key=value, ...])
          Return a new construction environment initialized with the
          specified key=value pairs. The keyword arguments parse_flags,
          platform, toolpath, tools and variables are also specially
          recognized. See the manpage section "Construction Environments"
          for more details.

   Execute(action, [actionargs ...])
          env.Execute(action, [actionargs ...])
          Executes an Action. action may be an Action object or it may be
          a command-line string, list of commands, or executable Python
          function, each of which will first be converted into an Action
          object and then executed. Any additional arguments to Execute
          are passed on to the [1380]Action factory function which
          actually creates the Action object (see the manpage section
          [1381]Action Objects for a description). Example:

Execute(Copy('file.out', 'file.in'))

          Execute performs its action immediately, as part of the
          SConscript-reading phase. There are no sources or targets
          declared in an Execute call, so any objects it manipulates will
          not be tracked as part of the SCons dependency graph. In the
          example above, neither file.out nor file.in will be tracked
          objects.

          Execute returns the exit value of the command or return value of
          the Python function. scons prints an error message if the
          executed action fails (exits with or returns a non-zero value),
          however it does not, automatically terminate the build for such
          a failure. If you want the build to stop in response to a failed
          Execute call, you must explicitly check for a non-zero return
          value:

if Execute("mkdir sub/dir/ectory"):
    # The mkdir failed, don't try to build.
    Exit(1)

   Exit([value])
          env.Exit([value])
          This tells scons to exit immediately with the specified value. A
          default exit value of 0 (zero) is used if no value is specified.

   Export([vars...], [key=value...])
          env.Export([vars...], [key=value...])
          Exports variables from the current SConscript file to a global
          collection where they can be imported by other SConscript files.
          vars may be one or more strings representing variable names to
          be exported. If a string contains whitespace, it is split into
          separate strings, as if multiple string arguments had been
          given. A vars argument may also be a dictionary, which can be
          used to map variables to different names when exported. Keyword
          arguments can be used to provide names and their values.

          Export calls are cumulative. Specifying a previously exported
          variable will overwrite the earlier value. Both local variables
          and global variables can be exported.

          Examples:

env = Environment()
# Make env available for all SConscript files to Import().
Export("env")

package = 'my_name'
# Make env and package available for all SConscript files:.
Export("env", "package")

# Make env and package available for all SConscript files:
Export(["env", "package"])

# Make env available using the name debug:
Export(debug=env)

# Make env available using the name debug:
Export({"debug": env})

          Note that the [1382]SConscript function supports an exports
          argument that allows exporting a variable or set of variables to
          a specific SConscript file or files. See the description below.

   File(name, [directory])
          env.File(name, [directory])
          Returns File Node(s). A File Node is an object that represents a
          file. name can be a relative or absolute path or a list of such
          paths. directory is an optional directory that will be used as
          the parent directory. If no directory is specified, the current
          script's directory is used as the parent.

          If name is a single pathname, the corresponding node is
          returned. If name is a list, SCons returns a list of nodes.
          Construction variables are expanded in name.

          File Nodes can be used anywhere you would supply a string as a
          file name to a Builder method or function. File Nodes have
          attributes and methods that are useful in many situations; see
          manpage section "File and Directory Nodes" for more information.

   FindFile(file, dirs)
          env.FindFile(file, dirs)
          Search for file in the path specified by dirs. dirs may be a
          list of directory names or a single directory name. In addition
          to searching for files that exist in the filesystem, this
          function also searches for derived files that have not yet been
          built.

          Example:

foo = env.FindFile('foo', ['dir1', 'dir2'])

   FindInstalledFiles()
          env.FindInstalledFiles()
          Returns the list of targets set up by the [1383]Install or
          [1384]InstallAs builders.

          This function serves as a convenient method to select the
          contents of a binary package.

          Example:

Install('/bin', ['executable_a', 'executable_b'])

# will return the file node list
# ['/bin/executable_a', '/bin/executable_b']
FindInstalledFiles()

Install('/lib', ['some_library'])

# will return the file node list
# ['/bin/executable_a', '/bin/executable_b', '/lib/some_library']
FindInstalledFiles()

   FindPathDirs(variable)
          Returns a function (actually a callable Python object) intended
          to be used as the path_function of a Scanner object. The
          returned object will look up the specified variable in a
          construction environment and treat the construction variable's
          value as a list of directory paths that should be searched (like
          [1385]$CPPPATH, [1386]$LIBPATH, etc.).

          Note that use of FindPathDirs is generally preferable to writing
          your own path_function for the following reasons: 1) The
          returned list will contain all appropriate directories found in
          source trees (when [1387]VariantDir is used) or in code
          repositories (when Repository or the -Y option are used). 2)
          scons will identify expansions of variable that evaluate to the
          same list of directories as, in fact, the same list, and avoid
          re-scanning the directories for files, when possible.

          Example:

def my_scan(node, env, path, arg):
    # Code to scan file contents goes here...
    return include_files

scanner = Scanner(name = 'myscanner',
                  function = my_scan,
                  path_function = FindPathDirs('MYPATH'))

   FindSourceFiles(node='"."')
          env.FindSourceFiles(node='"."')
          Returns the list of nodes which serve as the source of the built
          files. It does so by inspecting the dependency tree starting at
          the optional argument node which defaults to the '"."'-node. It
          will then return all leaves of node. These are all children
          which have no further children.

          This function is a convenient method to select the contents of a
          Source Package.

          Example:

Program('src/main_a.c')
Program('src/main_b.c')
Program('main_c.c')

# returns ['main_c.c', 'src/main_a.c', 'SConstruct', 'src/main_b.c']
FindSourceFiles()

# returns ['src/main_b.c', 'src/main_a.c' ]
FindSourceFiles('src')

          As you can see build support files (SConstruct in the above
          example) will also be returned by this function.

   Flatten(sequence)
          env.Flatten(sequence)
          Takes a sequence (that is, a Python list or tuple) that may
          contain nested sequences and returns a flattened list containing
          all of the individual elements in any sequence. This can be
          helpful for collecting the lists returned by calls to Builders;
          other Builders will automatically flatten lists specified as
          input, but direct Python manipulation of these lists does not.

          Examples:

foo = Object('foo.c')
bar = Object('bar.c')

# Because `foo' and `bar' are lists returned by the Object() Builder,
# `objects' will be a list containing nested lists:
objects = ['f1.o', foo, 'f2.o', bar, 'f3.o']

# Passing such a list to another Builder is all right because
# the Builder will flatten the list automatically:
Program(source = objects)

# If you need to manipulate the list directly using Python, you need to
# call Flatten() yourself, or otherwise handle nested lists:
for object in Flatten(objects):
    print(str(object))

   GetBuildFailures()
          Returns a list of exceptions for the actions that failed while
          attempting to build targets. Each element in the returned list
          is a BuildError object with the following attributes that record
          various aspects of the build failure:

          .node The node that was being built when the build failure
          occurred.

          .status The numeric exit status returned by the command or
          Python function that failed when trying to build the specified
          Node.

          .errstr The SCons error string describing the build failure.
          (This is often a generic message like "Error 2" to indicate that
          an executed command exited with a status of 2.)

          .filename The name of the file or directory that actually caused
          the failure. This may be different from the .node attribute. For
          example, if an attempt to build a target named sub/dir/target
          fails because the sub/dir directory could not be created, then
          the .node attribute will be sub/dir/target but the .filename
          attribute will be sub/dir.

          .executor The SCons Executor object for the target Node being
          built. This can be used to retrieve the construction environment
          used for the failed action.

          .action The actual SCons Action object that failed. This will be
          one specific action out of the possible list of actions that
          would have been executed to build the target.

          .command The actual expanded command that was executed and
          failed, after expansion of [1388]$TARGET, [1389]$SOURCE, and
          other construction variables.

          Note that the GetBuildFailures function will always return an
          empty list until any build failure has occurred, which means
          that GetBuildFailures will always return an empty list while the
          SConscript files are being read. Its primary intended use is for
          functions that will be executed before SCons exits by passing
          them to the standard Python atexit.register() function. Example:

import atexit

def print_build_failures():
    from SCons.Script import GetBuildFailures
    for bf in GetBuildFailures():
        print("%s failed: %s" % (bf.node, bf.errstr))

atexit.register(print_build_failures)

   GetBuildPath(file, [...])
          env.GetBuildPath(file, [...])
          Returns the scons path name (or names) for the specified file
          (or files). The specified file or files may be scons Nodes or
          strings representing path names.

   GetLaunchDir()
          env.GetLaunchDir()
          Returns the absolute path name of the directory from which scons
          was initially invoked. This can be useful when using the -u, -U
          or -D options, which internally change to the directory in which
          the SConstruct file is found.

   GetOption(name)
          env.GetOption(name)
          This function provides a way to query the value of options which
          can be set via the command line or using the [1390]SetOption
          function.

          name can be an entry from the following table, which shows the
          corresponding command line arguments that could affect the
          value. name can be also be the destination variable name from a
          project-specific option added using the [1391]AddOption
          function, as long as the addition happens prior to the GetOption
          call in the SConscript files.

   Query name Command-line options Notes
   cache_debug --cache-debug
   cache_disable --cache-disable, --no-cache
   cache_force --cache-force, --cache-populate
   cache_readonly --cache-readonly
   cache_show --cache-show
   clean -c, --clean, --remove
   climb_up -D -U -u --up --search_up
   config --config
   debug --debug
   directory -C, --directory
   diskcheck --diskcheck
   duplicate --duplicate
   enable_virtualenv --enable-virtualenv
   experimental --experimental since 4.2
   file -f, --file, --makefile, --sconstruct
   hash_format --hash-format since 4.2
   help -h, --help
   ignore_errors -i, --ignore-errors
   ignore_virtualenv --ignore-virtualenv
   implicit_cache --implicit-cache
   implicit_deps_changed --implicit-deps-changed
   implicit_deps_unchanged --implicit-deps-unchanged
   include_dir -I, --include-dir
   install_sandbox --install-sandbox Available only if the [1392]install
   tool has been called
   keep_going -k, --keep-going
   max_drift --max-drift
   md5_chunksize --hash-chunksize, --md5-chunksize --hash-chunksize since
   4.2
   no_exec -n, --no-exec, --just-print, --dry-run, --recon
   no_progress -Q
   num_jobs -j, --jobs
   package_type --package-type Available only if the [1393]packaging tool
   has been called
   profile_file --profile
   question -q, --question
   random --random
   repository -Y, --repository, --srcdir
   silent -s, --silent, --quiet
   site_dir --site-dir, --no-site-dir
   stack_size --stack-size
   taskmastertrace_file --taskmastertrace
   tree_printers --tree
   warn --warn, --warning

          See the documentation for the corresponding command line option
          for information about each specific option.

   Glob(pattern, [ondisk, source, strings, exclude])
          env.Glob(pattern, [ondisk, source, strings, exclude])
          Returns Nodes (or strings) that match the specified pattern,
          relative to the directory of the current SConscript file. The
          evironment method form (env.Glob) performs string substition on
          pattern and returns whatever matches the resulting expanded
          pattern.

          The specified pattern uses Unix shell style metacharacters for
          matching:

  *       matches everything
  ?       matches any single character
  [seq]   matches any character in seq
  [!seq]  matches any char not in seq

          If the first character of a filename is a dot, it must be
          matched explicitly. Character matches do not span directory
          separators.

          The Glob knows about repositories (see the [1394]Repository
          function) and source directories (see the [1395]VariantDir
          function) and returns a Node (or string, if so configured) in
          the local (SConscript) directory if a matching Node is found
          anywhere in a corresponding repository or source directory.

          The ondisk argument may be set to a value which evaluates False
          to disable the search for matches on disk, thereby only
          returning matches among already-configured File or Dir Nodes.
          The default behavior is to return corresponding Nodes for any
          on-disk matches found.

          The source argument may be set to a value which evaluates True
          to specify that, when the local directory is a VariantDir, the
          returned Nodes should be from the corresponding source
          directory, not the local directory.

          The strings argument may be set to a value which evaluates True
          to have the Glob function return strings, not Nodes, that
          represent the matched files or directories. The returned strings
          will be relative to the local (SConscript) directory. (Note that
          This may make it easier to perform arbitrary manipulation of
          file names, but if the returned strings are passed to a
          different SConscript file, any Node translation will be relative
          to the other SConscript directory, not the original SConscript
          directory.)

          The exclude argument may be set to a pattern or a list of
          patterns (following the same Unix shell semantics) which must be
          filtered out of returned elements. Elements matching a least one
          pattern of this list will be excluded.

          Examples:

Program("foo", Glob("*.c"))
Zip("/tmp/everything", Glob(".??*") + Glob("*"))
sources = Glob("*.cpp", exclude=["os_*_specific_*.cpp"]) + \
          Glob( "os_%s_specific_*.cpp" % currentOS)

   Help(text, append=False)
          env.Help(text, append=False)
          Specifies a local help message to be printed if the -h argument
          is given to scons. Subsequent calls to Help append text to the
          previously defined local help text.

          For the first call to Help only, if append is False (the
          default) any local help message generated through
          [1396]AddOption calls is replaced. If append is True, text is
          appended to the existing help text.

   Ignore(target, dependency)
          env.Ignore(target, dependency)
          The specified dependency file(s) will be ignored when deciding
          if the target file(s) need to be rebuilt.

          You can also use Ignore to remove a target from the default
          build. In order to do this you must specify the directory the
          target will be built in as the target, and the file you want to
          skip building as the dependency.

          Note that this will only remove the dependencies listed from the
          files built by default. It will still be built if that
          dependency is needed by another object being built. See the
          third and forth examples below.

          Examples:

env.Ignore('foo', 'foo.c')
env.Ignore('bar', ['bar1.h', 'bar2.h'])
env.Ignore('.', 'foobar.obj')
env.Ignore('bar', 'bar/foobar.obj')

   Import(vars...)
          env.Import(vars...)
          Imports variables into the current SConscript file. vars must be
          strings representing names of variables which have been
          previously exported either by the [1397]Export function or by
          the exports argument to [1398]SConscript. Variables exported by
          SConscript take precedence. Multiple variable names can be
          passed to Import as separate arguments or as words in a
          space-separated string. The wildcard "*" can be used to import
          all available variables.

          Examples:

Import("env")
Import("env", "variable")
Import(["env", "variable"])
Import("*")

   Literal(string)
          env.Literal(string)
          The specified string will be preserved as-is and not have
          construction variables expanded.

   Local(targets)
          env.Local(targets)
          The specified targets will have copies made in the local tree,
          even if an already up-to-date copy exists in a repository.
          Returns a list of the target Node or Nodes.

   env.MergeFlags(arg, [unique])
          Merges values from arg into construction variables in the
          current construction environment. If arg is not a dictionary, it
          is converted to one by calling [1399]env.ParseFlags on the
          argument before the values are merged. Note that arg must be a
          single value, so multiple strings must be passed in as a list,
          not as separate arguments to env.MergeFlags.

          If unique is true (the default), duplicate values are not
          stored. When eliminating duplicate values, any construction
          variables that end with the string PATH keep the left-most
          unique value. All other construction variables keep the
          right-most unique value. If unique is false, values are added
          even if they are duplicates.

          Examples:

# Add an optimization flag to $CCFLAGS.
env.MergeFlags('-O3')

# Combine the flags returned from running pkg-config with an optimization
# flag and merge the result into the construction variables.
env.MergeFlags(['!pkg-config gtk+-2.0 --cflags', '-O3'])

# Combine an optimization flag with the flags returned from running pkg-config
# twice and merge the result into the construction variables.
env.MergeFlags(
    [
        '-O3',
        '!pkg-config gtk+-2.0 --cflags --libs',
        '!pkg-config libpng12 --cflags --libs',
    ]
)

   NoCache(target, ...)
          env.NoCache(target, ...)
          Specifies a list of files which should not be cached whenever
          the [1400]CacheDir method has been activated. The specified
          targets may be a list or an individual target.

          Multiple files should be specified either as separate arguments
          to the NoCache method, or as a list. NoCache will also accept
          the return value of any of the construction environment Builder
          methods.

          Calling NoCache on directories and other non-File Node types has
          no effect because only File Nodes are cached.

          Examples:

NoCache('foo.elf')
NoCache(env.Program('hello', 'hello.c'))

   NoClean(target, ...)
          env.NoClean(target, ...)
          Specifies a list of files or directories which should not be
          removed whenever the targets (or their dependencies) are
          specified with the -c command line option. The specified targets
          may be a list or an individual target. Multiple calls to NoClean
          are legal, and prevent each specified target from being removed
          by calls to the -c option.

          Multiple files or directories should be specified either as
          separate arguments to the NoClean method, or as a list. NoClean
          will also accept the return value of any of the construction
          environment Builder methods.

          Calling NoClean for a target overrides calling [1401]Clean for
          the same target, and any targets passed to both functions will
          not be removed by the -c option.

          Examples:

NoClean('foo.elf')
NoClean(env.Program('hello', 'hello.c'))

   env.ParseConfig(command, [function, unique])
          Updates the current construction environment with the values
          extracted from the output of running external command, by
          passing it to a helper function. command may be a string or a
          list of strings representing the command and its arguments. If
          function is omitted or None, [1402]env.MergeFlags is used. By
          default, duplicate values are not added to any construction
          variables; you can specify unique=False to allow duplicate
          values to be added.

          command is executed using the SCons execution environment (that
          is, the construction variable [1403]$ENV in the current
          construction environment). If command needs additional
          information to operate properly, that needs to be set in the
          execution environment. For example, pkg-config may need a custom
          value set in the PKG_CONFIG_PATH environment variable.

          env.MergeFlags needs to understand the output produced by
          command in order to distribute it to appropriate construction
          variables. env.MergeFlags uses a separate function to do that
          processing - see [1404]env.ParseFlags for the details, including
          a a table of options and corresponding construction variables.
          To provide alternative processing of the output of command, you
          can suppply a custom function, which must accept three
          arguments: the construction environment to modify, a string
          argument containing the output from running command, and the
          optional unique flag.

   ParseDepends(filename, [must_exist, only_one])
          env.ParseDepends(filename, [must_exist, only_one])
          Parses the contents of filename as a list of dependencies in the
          style of Make or mkdep, and explicitly establishes all of the
          listed dependencies.

          By default, it is not an error if filename does not exist. The
          optional must_exist argument may be set to True to have SCons
          raise an exception if the file does not exist, or is otherwise
          inaccessible.

          The optional only_one argument may be set to True to have SCons
          raise an exception if the file contains dependency information
          for more than one target. This can provide a small sanity check
          for files intended to be generated by, for example, the gcc -M
          flag, which should typically only write dependency information
          for one output file into a corresponding .d file.

          filename and all of the files listed therein will be interpreted
          relative to the directory of the SConscript file which calls the
          ParseDepends function.

   env.ParseFlags(flags, ...)
          Parses one or more strings containing typical command-line flags
          for GCC-style tool chains and returns a dictionary with the flag
          values separated into the appropriate SCons construction
          variables. Intended as a companion to the [1405]env.MergeFlags
          method, but allows for the values in the returned dictionary to
          be modified, if necessary, before merging them into the
          construction environment. (Note that env.MergeFlags will call
          this method if its argument is not a dictionary, so it is
          usually not necessary to call env.ParseFlags directly unless you
          want to manipulate the values.)

          If the first character in any string is an exclamation mark (!),
          the rest of the string is executed as a command, and the output
          from the command is parsed as GCC tool chain command-line flags
          and added to the resulting dictionary. This can be used to call
          a *-config command typical of the POSIX programming environment
          (for example, pkg-config). Note that such a comamnd is executed
          using the SCons execution environment; if the command needs
          additional information, that information needs to be explcitly
          provided. See [1406]ParseConfig for more details.

          Flag values are translated accordig to the prefix found, and
          added to the following construction variables:

-arch                   CCFLAGS, LINKFLAGS
-D                      CPPDEFINES
-framework              FRAMEWORKS
-frameworkdir=          FRAMEWORKPATH
-fmerge-all-constants   CCFLAGS, LINKFLAGS
-fopenmp                CCFLAGS, LINKFLAGS
-include                CCFLAGS
-imacros                CCFLAGS
-isysroot               CCFLAGS, LINKFLAGS
-isystem                CCFLAGS
-iquote                 CCFLAGS
-idirafter              CCFLAGS
-I                      CPPPATH
-l                      LIBS
-L                      LIBPATH
-mno-cygwin             CCFLAGS, LINKFLAGS
-mwindows               LINKFLAGS
-openmp                 CCFLAGS, LINKFLAGS
-pthread                CCFLAGS, LINKFLAGS
-std=                   CFLAGS
-Wa,                    ASFLAGS, CCFLAGS
-Wl,-rpath=             RPATH
-Wl,-R,                 RPATH
-Wl,-R                  RPATH
-Wl,                    LINKFLAGS
-Wp,                    CPPFLAGS
-                       CCFLAGS
+                       CCFLAGS, LINKFLAGS

          Any other strings not associated with options are assumed to be
          the names of libraries and added to the $LIBS construction
          variable.

          Examples (all of which produce the same result):

dict = env.ParseFlags('-O2 -Dfoo -Dbar=1')
dict = env.ParseFlags('-O2', '-Dfoo', '-Dbar=1')
dict = env.ParseFlags(['-O2', '-Dfoo -Dbar=1'])
dict = env.ParseFlags('-O2', '!echo -Dfoo -Dbar=1')

   Platform(plat)
          env.Platform(plat)
          When called as a global function, returns a callable platform
          object selected by plat (defaults to the detected platform for
          the current system) that can be used to initialize a
          construction environment by passing it as the platform keyword
          argument to the [1407]Environment function.

          Example:

env = Environment(platform=Platform('win32'))

          When called as a method of an environment, calls the platform
          object indicated by plat to update that environment.

env.Platform('posix')

          See the manpage section "Construction Environments" for more
          details.

   Precious(target, ...)
          env.Precious(target, ...)
          Marks each given target as precious so it is not deleted before
          it is rebuilt. Normally scons deletes a target before building
          it. Multiple targets can be passed in to a single call to
          Precious.

   env.Prepend(key=val, [...])
          Prepend values to construction variables in the current
          construction environment, Works like [1408]env.Append (see for
          details), except that values are added to the front, rather than
          the end, of any existing value of the construction variable

          Example:

env.Prepend(CCFLAGS='-g ', FOO=['foo.yyy'])

          See also [1409]env.Append, [1410]env.AppendUnique and
          [1411]env.PrependUnique.

   env.PrependENVPath(name, newpath, [envname, sep, delete_existing=True])
          Prepend path elements specified by newpath to the given search
          path string or list name in mapping envname in the construction
          environment. Supplying envname is optional: the default is the
          execution environment [1412]$ENV. Optional sep is used as the
          search path separator, the default is the platform's separator
          (os.pathsep). A path element will only appear once. Any
          duplicates in newpath are dropped, keeping the first appearing
          (to preserve path order). If delete_existing is False any
          addition duplicating an existing path element is ignored; if
          delete_existing is True (the default) the existing value will be
          dropped and the path element will be inserted at the beginning.
          To help maintain uniqueness all paths are normalized (using
          os.path.normpath and os.path.normcase).

          Example:

print('before:', env['ENV']['INCLUDE'])
include_path = '/foo/bar:/foo'
env.PrependENVPath('INCLUDE', include_path)
print('after:', env['ENV']['INCLUDE'])

          Yields:

before: /biz:/foo
after: /foo/bar:/foo:/biz

          See also [1413]env.AppendENVPath.

   env.PrependUnique(key=val, delete_existing=False, [...])
          Prepend values to construction variables in the current
          construction environment, maintaining uniqueness. Works like
          [1414]env.Append (see for details), except that values are added
          to the front, rather than the end, of any existing value of the
          construction variable, and values already present in the
          construction variable will not be added again. If
          delete_existing is True, the existing matching value is first
          removed, and the requested value is inserted, having the effect
          of moving such values to the front.

          Example:

env.PrependUnique(CCFLAGS='-g', FOO=['foo.yyy'])

          See also [1415]env.Append, [1416]env.AppendUnique and
          [1417]env.Prepend.

   Progress(callable, [interval])
          Progress(string, [interval, file, overwrite])
          Progress(list_of_strings, [interval, file, overwrite])
          Allows SCons to show progress made during the build by
          displaying a string or calling a function while evaluating Nodes
          (e.g. files).

          If the first specified argument is a Python callable (a function
          or an object that has a __call__ method), the function will be
          called once every interval times a Node is evaluated (default
          1). The callable will be passed the evaluated Node as its only
          argument. (For future compatibility, it's a good idea to also
          add *args and **kwargs as arguments to your function or method
          signatures. This will prevent the code from breaking if SCons
          ever changes the interface to call the function with additional
          arguments in the future.)

          An example of a simple custom progress function that prints a
          string containing the Node name every 10 Nodes:

def my_progress_function(node, *args, **kwargs):
    print('Evaluating node %s!' % node)
Progress(my_progress_function, interval=10)

          A more complicated example of a custom progress display object
          that prints a string containing a count every 100 evaluated
          Nodes. Note the use of \r (a carriage return) at the end so that
          the string will overwrite itself on a display:

import sys
class ProgressCounter(object):
    count = 0
    def __call__(self, node, *args, **kw):
        self.count += 100
        sys.stderr.write('Evaluated %s nodes\r' % self.count)

Progress(ProgressCounter(), interval=100)

          If the first argument to Progress is a string or list of
          strings, it is taken as text to be displayed every interval
          evaluated Nodes. If the first argument is a list of strings,
          then each string in the list will be displayed in rotating
          fashion every interval evaluated Nodes.

          The default is to print the string on standard output. An
          alternate output stream may be specified with the file keyword
          argument, which the caller must pass already opened.

          The following will print a series of dots on the error output,
          one dot for every 100 evaluated Nodes:

import sys
Progress('.', interval=100, file=sys.stderr)

          If the string contains the verbatim substring $TARGET;, it will
          be replaced with the Node. Note that, for performance reasons,
          this is not a regular SCons variable substition, so you can not
          use other variables or use curly braces. The following example
          will print the name of every evaluated Node, using a carriage
          return) (\r) to cause each line to overwritten by the next line,
          and the overwrite keyword argument (default False) to make sure
          the previously-printed file name is overwritten with blank
          spaces:

import sys
Progress('$TARGET\r', overwrite=True)

          A list of strings can be used to implement a "spinner" on the
          user's screen as follows, changing every five evaluated Nodes:

Progress(['-\r', '\\\r', '|\r', '/\r'], interval=5)

   Pseudo(target, ...)
          env.Pseudo(target, ...)
          This indicates that each given target should not be created by
          the build rule, and if the target is created, an error will be
          generated. This is similar to the gnu make .PHONY target.
          However, in the vast majority of cases, an Alias is more
          appropriate. Multiple targets can be passed in to a single call
          to Pseudo.

   PyPackageDir(modulename)
          env.PyPackageDir(modulename)
          This returns a Directory Node similar to Dir. The python module
          / package is looked up and if located the directory is returned
          for the location. modulename Is a named python package / module
          to lookup the directory for it's location.

          If modulename is a list, SCons returns a list of Dir nodes.
          Construction variables are expanded in modulename.

   env.Replace(key=val, [...])
          Replaces construction variables in the Environment with the
          specified keyword arguments.

          Example:

env.Replace(CCFLAGS='-g', FOO='foo.xxx')

   Repository(directory)
          env.Repository(directory)
          Specifies that directory is a repository to be searched for
          files. Multiple calls to Repository are legal, and each one adds
          to the list of repositories that will be searched.

          To scons, a repository is a copy of the source tree, from the
          top-level directory on down, which may contain both source files
          and derived files that can be used to build targets in the local
          source tree. The canonical example would be an official source
          tree maintained by an integrator. If the repository contains
          derived files, then the derived files should have been built
          using scons, so that the repository contains the necessary
          signature information to allow scons to figure out when it is
          appropriate to use the repository copy of a derived file,
          instead of building one locally.

          Note that if an up-to-date derived file already exists in a
          repository, scons will not make a copy in the local directory
          tree. In order to guarantee that a local copy will be made, use
          the [1418]Local method.

   Requires(target, prerequisite)
          env.Requires(target, prerequisite)
          Specifies an order-only relationship between the specified
          target file(s) and the specified prerequisite file(s). The
          prerequisite file(s) will be (re)built, if necessary, before the
          target file(s), but the target file(s) do not actually depend on
          the prerequisites and will not be rebuilt simply because the
          prerequisite file(s) change.

          Example:

env.Requires('foo', 'file-that-must-be-built-before-foo')

   Return([vars..., stop=True])
          Return to the calling SConscript, optionally returning the
          values of variables named in vars. Multiple strings contaning
          variable names may be passed to Return. A string containing
          white space is split into individual variable names. Returns the
          value if one variable is specified, else returns a tuple of
          values. Returns an empty tuple if vars is omitted.

          By default Return stops processing the current SConscript and
          returns immediately. The optional stop keyword argument may be
          set to a false value to continue processing the rest of the
          SConscript file after the Return call (this was the default
          behavior prior to SCons 0.98.) However, the values returned are
          still the values of the variables in the named vars at the point
          Return was called.

          Examples:

# Returns no values (evaluates False)
Return()

# Returns the value of the 'foo' Python variable.
Return("foo")

# Returns the values of the Python variables 'foo' and 'bar'.
Return("foo", "bar")

# Returns the values of Python variables 'val1' and 'val2'.
Return('val1 val2')

   Scanner(function, [name, argument, skeys, path_function, node_class,
          node_factory, scan_check, recursive])
          env.Scanner(function, [name, argument, skeys, path_function,
          node_class, node_factory, scan_check, recursive])
          Creates a Scanner object for the specified function. See manpage
          section "Scanner Objects" for a complete explanation of the
          arguments and behavior.

   SConscript(scripts, [exports, variant_dir, duplicate, must_exist])
          env.SConscript(scripts, [exports, variant_dir, duplicate,
          must_exist])
          SConscript(dirs=subdirs, [name=scriptname, exports, variant_dir,
          duplicate, must_exist])
          env.SConscript(dirs=subdirs, [name=scriptname, exports,
          variant_dir, duplicate, must_exist])
          Executes one or more subsidiary SConscript (configuration)
          files. There are two ways to call the SConscript function.

          The first calling style is to supply one or more SConscript file
          names as the first (positional) argument. A single script may be
          specified as a string; multiple scripts must be specified as a
          list of strings (either explicitly or as created by a function
          like [1419]Split). Examples:

SConscript('SConscript')  # run SConscript in the current directory
SConscript('src/SConscript')  # run SConscript in the src directory
SConscript(['src/SConscript', 'doc/SConscript'])
config = SConscript('MyConfig.py')

          The other calling style is to omit the positional argument
          naming scripts and instead specify a list of directory names
          using the dirs keyword argument. In this case, scons will
          execute a subsidiary configuration file named SConscript in each
          of the specified directories. You may specify a name other than
          SConscript by supplying an optional name=scriptname keyword
          argument. The first three examples below have the same effect as
          the first three examples above:

SConscript(dirs='.')  # run SConscript in the current directory
SConscript(dirs='src')  # run SConscript in the src directory
SConscript(dirs=['src', 'doc'])
SConscript(dirs=['sub1', 'sub2'], name='MySConscript')

          The optional exports keyword argument provides a string or list
          of strings representing variable names, or a dictionary of named
          values, to export. For the first calling style only, a second
          positional argument will be interpreted as exports; the second
          calling style must use the keyword argument form for exports.
          These variables are locally exported only to the called
          SConscript file(s) and do not affect the global pool of
          variables managed by the [1420]Export function. The subsidiary
          SConscript files must use the [1421]Import function to import
          the variables. Examples:

foo = SConscript('sub/SConscript', exports='env')
SConscript('dir/SConscript', exports=['env', 'variable'])
SConscript(dirs='subdir', exports='env variable')
SConscript(dirs=['one', 'two', 'three'], exports='shared_info')

          If the optional variant_dir argument is present, it causes an
          effect equivalent to the [1422]VariantDir function, but in
          effect only within the scope of the SConscript call. The
          variant_dir argument is interpreted relative to the directory of
          the calling SConscript file. The source directory is the
          directory in which the called SConscript file resides and the
          SConscript file is evaluated as if it were in the variant_dir
          directory. Thus:

SConscript('src/SConscript', variant_dir='build')

          is equivalent to:

VariantDir('build', 'src')
SConscript('build/SConscript')

          If the sources are in the same directory as the SConstruct,

SConscript('SConscript', variant_dir='build')

          is equivalent to:

VariantDir('build', '.')
SConscript('build/SConscript')

          The optional duplicate argument is interpreted as for
          [1423]VariantDir. If the variant_dir argument is omitted, the
          duplicate argument is ignored. See the description of
          [1424]VariantDir for additional details and restrictions.

          If the optional must_exist is True, causes an exception to be
          raised if a requested SConscript file is not found. The current
          default is False, causing only a warning to be emitted, but this
          default is deprecated (since 3.1). For scripts which truly
          intend to be optional, transition to explicitly supplying
          must_exist=False to the SConscript call.

          Here are some composite examples:

# collect the configuration information and use it to build src and doc
shared_info = SConscript('MyConfig.py')
SConscript('src/SConscript', exports='shared_info')
SConscript('doc/SConscript', exports='shared_info')

# build debugging and production versions.  SConscript
# can use Dir('.').path to determine variant.
SConscript('SConscript', variant_dir='debug', duplicate=0)
SConscript('SConscript', variant_dir='prod', duplicate=0)

# build debugging and production versions.  SConscript
# is passed flags to use.
opts = { 'CPPDEFINES' : ['DEBUG'], 'CCFLAGS' : '-pgdb' }
SConscript('SConscript', variant_dir='debug', duplicate=0, exports=opts)
opts = { 'CPPDEFINES' : ['NODEBUG'], 'CCFLAGS' : '-O' }
SConscript('SConscript', variant_dir='prod', duplicate=0, exports=opts)

# build common documentation and compile for different architectures
SConscript('doc/SConscript', variant_dir='build/doc', duplicate=0)
SConscript('src/SConscript', variant_dir='build/x86', duplicate=0)
SConscript('src/SConscript', variant_dir='build/ppc', duplicate=0)

          SConscript returns the values of any variables named by the
          executed SConscript file(s) in arguments to the [1425]Return
          function. If a single SConscript call causes multiple scripts to
          be executed, the return value is a tuple containing the returns
          of each of the scripts. If an executed script does not
          explicitly call Return, it returns None.

   SConscriptChdir(value)
          env.SConscriptChdir(value)
          By default, scons changes its working directory to the directory
          in which each subsidiary SConscript file lives. This behavior
          may be disabled by specifying either:

SConscriptChdir(0)
env.SConscriptChdir(0)

          in which case scons will stay in the top-level directory while
          reading all SConscript files. (This may be necessary when
          building from repositories, when all the directories in which
          SConscript files may be found don't necessarily exist locally.)
          You may enable and disable this ability by calling
          SConscriptChdir multiple times.

          Example:

env = Environment()
SConscriptChdir(0)
SConscript('foo/SConscript')    # will not chdir to foo
env.SConscriptChdir(1)
SConscript('bar/SConscript')    # will chdir to bar

   SConsignFile([name, dbm_module])
          env.SConsignFile([name, dbm_module])
          Specify where to store the SCons file signature database, and
          which database format to use. This may be useful to specify
          alternate database files and/or file locations for different
          types of builds.

          The optional name argument is the base name of the database
          file(s). If not an absolute path name, these are placed relative
          to the directory containing the top-level SConstruct file. The
          default is .sconsign. The actual database file(s) stored on disk
          may have an appropriate suffix appended by the chosen dbm_module

          The optional dbm_module argument specifies which Python database
          module to use for reading/writing the file. The module must be
          imported first; then the imported module name is passed as the
          argument. The default is a custom SCons.dblite module that uses
          pickled Python data structures, which works on all Python
          versions. See documentation of the Python dbm module for other
          available types.

          If called with no arguments, the database will default to
          .sconsign.dblite in the top directory of the project, which is
          also the default if if SConsignFile is not called.

          The setting is global, so the only difference between the global
          function and the environment method form is variable expansion
          on name. There should only be one active call to this
          function/method in a given build setup.

          If name is set to None, scons will store file signatures in a
          separate .sconsign file in each directory, not in a single
          combined database file. This is a backwards-compatibility meaure
          to support what was the default behavior prior to SCons 0.97
          (i.e. before 2008). Use of this mode is discouraged and may be
          deprecated in a future SCons release.

          Examples:

# Explicitly stores signatures in ".sconsign.dblite"
# in the top-level SConstruct directory (the default behavior).
SConsignFile()

# Stores signatures in the file "etc/scons-signatures"
# relative to the top-level SConstruct directory.
# SCons will add a database suffix to this name.
SConsignFile("etc/scons-signatures")

# Stores signatures in the specified absolute file name.
# SCons will add a database suffix to this name.
SConsignFile("/home/me/SCons/signatures")

# Stores signatures in a separate .sconsign file
# in each directory.
SConsignFile(None)

# Stores signatures in a GNU dbm format .sconsign file
import dbm.gnu
SConsignFile(dbm_module=dbm.gnu)

   env.SetDefault(key=val, [...])
          Sets construction variables to default values specified with the
          keyword arguments if (and only if) the variables are not already
          set. The following statements are equivalent:

env.SetDefault(FOO='foo')
if 'FOO' not in env:
    env['FOO'] = 'foo'

   SetOption(name, value)
          env.SetOption(name, value)
          Sets scons option variable name to value. These options are all
          also settable via command-line options but the variable name may
          differ from the command-line option name - see the table for
          correspondences. A value set via command-line option will take
          precedence over one set with SetOption, which allows setting a
          project default in the scripts and temporarily overriding it via
          command line. SetOption calls can also be placed in the
          site_init.py file.

          See the documentation in the manpage for the corresponding
          command line option for information about each specific option.
          The value parameter is mandatory, for option values which are
          boolean in nature (that is, the command line option does not
          take an argument) use a value which evaluates to true (e.g.
          True, 1) or false (e.g. False, 0).

          Options which affect the reading and processing of SConscript
          files are not settable using SetOption since those files must be
          read in order to find the SetOption call in the first place.

          The settable variables with their associated command-line
          options are:

   Settable name Command-line options Notes
   clean -c, --clean, --remove
   diskcheck --diskcheck
   duplicate --duplicate
   experimental --experimental since 4.2
   hash_chunksize --hash-chunksize Actually sets md5_chunksize. since 4.2
   hash_format --hash-format since 4.2
   help -h, --help
   implicit_cache --implicit-cache
   implicit_deps_changed --implicit-deps-changed Also sets implicit_cache.
   (settable since 4.2)
   implicit_deps_unchanged --implicit-deps-unchanged Also sets
   implicit_cache. (settable since 4.2)
   max_drift --max-drift
   md5_chunksize --md5-chunksize
   no_exec -n, --no-exec, --just-print, --dry-run, --recon
   no_progress -Q See ^[[1426]a]
   num_jobs -j, --jobs
   random --random
   silent -s, --silent, --quiet
   stack_size --stack-size
   warn --warn
   ^[[1427]a] If no_progress is set via SetOption in an SConscript file
   (but not if set in a site_init.py file) there will still be an initial
   status message about reading SConscript files since SCons has to start
   reading them before it can see the SetOption.

          Example:

SetOption('max_drift', 0)

   SideEffect(side_effect, target)
          env.SideEffect(side_effect, target)
          Declares side_effect as a side effect of building target. Both
          side_effect and target can be a list, a file name, or a node. A
          side effect is a target file that is created or updated as a
          side effect of building other targets. For example, a Windows
          PDB file is created as a side effect of building the .obj files
          for a static library, and various log files are created updated
          as side effects of various TeX commands. If a target is a side
          effect of multiple build commands, scons will ensure that only
          one set of commands is executed at a time. Consequently, you
          only need to use this method for side-effect targets that are
          built as a result of multiple build commands.

          Because multiple build commands may update the same side effect
          file, by default the side_effect target is not automatically
          removed when the target is removed by the -c option. (Note,
          however, that the side_effect might be removed as part of
          cleaning the directory in which it lives.) If you want to make
          sure the side_effect is cleaned whenever a specific target is
          cleaned, you must specify this explicitly with the [1428]Clean
          or env.Clean function.

          This function returns the list of side effect Node objects that
          were successfully added. If the list of side effects contained
          any side effects that had already been added, they are not added
          and included in the returned list.

   Split(arg)
          env.Split(arg)
          If arg is a string, splits on whitespace and returns a list of
          strings without whitespace. This mode is the most common case,
          and can be used to split a list of filenames (for example)
          rather than having to type them as a list of individually quoted
          words. If arg is a list or tuple returns the list or tuple
          unchanged. If arg is any other type of object, returns a list
          containing just the object. These non-string cases do not
          actually do any spliting, but allow an argument variable to be
          passed to Split without having to first check its type.

          Example:

files = Split("f1.c f2.c f3.c")
files = env.Split("f4.c f5.c f6.c")
files = Split("""
    f7.c
    f8.c
    f9.c
""")

   env.subst(input, [raw, target, source, conv])
          Performs construction variable interpolation (substitution) on
          input, which can be a string or a sequence. Substitutable
          elements take the form ${expression}, although if there is no
          ambiguity in recognizing the element, the braces can be omitted.
          A literal $ can be entered by using $$.

          By default, leading or trailing white space will be removed from
          the result, and all sequences of white space will be compressed
          to a single space character. Additionally, any $( and $)
          character sequences will be stripped from the returned string,
          The optional raw argument may be set to 1 if you want to
          preserve white space and $(-$) sequences. The raw argument may
          be set to 2 if you want to additionally discard all characters
          between any $( and $) pairs (as is done for signature
          calculation).

          If input is a sequence (list or tuple), the individual elements
          of the sequence will be expanded, and the results will be
          returned as a list.

          The optional target and source keyword arguments must be set to
          lists of target and source nodes, respectively, if you want the
          $TARGET, $TARGETS, $SOURCE and $SOURCES to be available for
          expansion. This is usually necessary if you are calling
          env.subst from within a Python function used as an SCons action.

          Returned string values or sequence elements are converted to
          their string representation by default. The optional conv
          argument may specify a conversion function that will be used in
          place of the default. For example, if you want Python objects
          (including SCons Nodes) to be returned as Python objects, you
          can use a Python lambda expression to pass in an unnamed
          function that simply returns its unconverted argument.

          Example:

print(env.subst("The C compiler is: $CC"))

def compile(target, source, env):
    sourceDir = env.subst(
        "${SOURCE.srcdir}",
        target=target,
        source=source
    )

source_nodes = env.subst('$EXPAND_TO_NODELIST', conv=lambda x: x)

   Tag(node, tags)
          Annotates file or directory Nodes with information about how the
          [1429]Package Builder should package those files or directories.
          All Node-level tags are optional.

          Examples:

# makes sure the built library will be installed with 644 file access mode
Tag(Library('lib.c'), UNIX_ATTR="0o644")

# marks file2.txt to be a documentation file
Tag('file2.txt', DOC)

   Tool(name, [toolpath, **kwargs])
          env.Tool(name, [toolpath, **kwargs])
          Locates the tool specification module name and returns a
          callable tool object for that tool. The tool module is searched
          for in standard locations and in any paths specified by the
          optional toolpath parameter. The standard locations are SCons'
          own internal path for tools plus the toolpath, if any (see the
          Tools section in the manual page for more details). Any
          additional keyword arguments kwargs are passed to the tool
          module's generate function during tool object construction.

          When called, the tool object updates a construction environment
          with construction variables and arranges any other
          initialization needed to use the mechanisms that tool describes.

          When the env.Tool form is used, the tool object is automatically
          called to update env and the value of tool is appended to the
          [1430]$TOOLS construction variable in that environment.

          Examples:

env.Tool('gcc')
env.Tool('opengl', toolpath=['build/tools'])

          When the global function Tool form is used, the tool object is
          constructed but not called, as it lacks the context of an
          environment to update. The tool object can be passed to an
          [1431]Environment or [1432]Clone call as part of the tools
          keyword argument, in which case the tool is applied to the
          environment being constructed, or it can be called directly, in
          which case a construction environment to update must be passed
          as the argument. Either approach will also update the $TOOLS
          construction variable.

          Examples:

env = Environment(tools=[Tool('msvc')])

env = Environment()
msvctool = Tool('msvc')
msvctool(env)  # adds 'msvc' to the TOOLS variable
gltool = Tool('opengl', toolpath = ['tools'])
gltool(env)  # adds 'opengl' to the TOOLS variable

          Changed in SCons 4.2: env.Tool now returns the tool object,
          previously it did not return (i.e. returned None).

   Value(value, [built_value], [name])
          env.Value(value, [built_value], [name])
          Returns a Node object representing the specified Python value.
          Value Nodes can be used as dependencies of targets. If the
          result of calling str(value) changes between SCons runs, any
          targets depending on Value(value) will be rebuilt. (This is true
          even when using timestamps to decide if files are up-to-date.)
          When using timestamp source signatures, Value Nodes' timestamps
          are equal to the system time when the Node is created. name can
          be provided as an alternative name for the resulting Value node;
          this is advised if the value parameter can't be converted to a
          string.

          The returned Value Node object has a write() method that can be
          used to "build" a Value Node by setting a new value. The
          optional built_value argument can be specified when the Value
          Node is created to indicate the Node should already be
          considered "built." There is a corresponding read() method that
          will return the built value of the Node.

          Examples:

env = Environment()

def create(target, source, env):
    # A function that will write a 'prefix=$SOURCE'
    # string into the file name specified as the
    # $TARGET.
    with open(str(target[0]), 'wb') as f:
        f.write('prefix=' + source[0].get_contents())

# Fetch the prefix= argument, if any, from the command
# line, and use /usr/local as the default.
prefix = ARGUMENTS.get('prefix', '/usr/local')

# Attach a .Config() builder for the above function action
# to the construction environment.
env['BUILDERS']['Config'] = Builder(action = create)
env.Config(target = 'package-config', source = Value(prefix))

def build_value(target, source, env):
    # A function that "builds" a Python Value by updating
    # the Python value with the contents of the file
    # specified as the source of the Builder call ($SOURCE).
    target[0].write(source[0].get_contents())

output = env.Value('before')
input = env.Value('after')

# Attach a .UpdateValue() builder for the above function
# action to the construction environment.
env['BUILDERS']['UpdateValue'] = Builder(action = build_value)
env.UpdateValue(target = Value(output), source = Value(input))

   VariantDir(variant_dir, src_dir, [duplicate])
          env.VariantDir(variant_dir, src_dir, [duplicate])
          Sets up a mapping to define a variant build directory in
          variant_dir. src_dir may not be underneath variant_dir. A
          VariantDir mapping is global, even if called using the
          env.VariantDir form. VariantDir can be called multiple times
          with the same src_dir to set up multiple variant builds with
          different options.

          Note if variant_dir is not under the project top directory,
          target selection rules will not pick targets in the variant
          directory unless they are explicitly specified.

          When files in variant_dir are referenced, SCons backfills as
          needed with files from src_dir to create a complete build
          directory. By default, SCons physically duplicates the source
          files, SConscript files, and directory structure as needed into
          the variant directory. Thus, a build performed in the variant
          directory is guaranteed to be identical to a build performed in
          the source directory even if intermediate source files are
          generated during the build, or if preprocessors or other
          scanners search for included files using paths relative to the
          source file, or if individual compilers or other invoked tools
          are hard-coded to put derived files in the same directory as
          source files. Only the files SCons calculates are needed for the
          build are duplicated into variant_dir. If possible on the
          platform, the duplication is performed by linking rather than
          copying. This behavior is affected by the --duplicate
          command-line option.

          Duplicating the source files may be disabled by setting the
          duplicate argument to False. This will cause SCons to invoke
          Builders using the path names of source files in src_dir and the
          path names of derived files within variant_dir. This is more
          efficient than duplicating, and is safe for most builds; revert
          to duplicate=True if it causes problems.

          VariantDir works most naturally when used with a subsidiary
          SConscript file. The subsidiary SConscript file must be called
          as if it were in variant_dir, regardless of the value of
          duplicate. When calling an SConscript file, you can use the
          exports keyword argument to pass parameters (individually or as
          an appropriately set up environment) so the SConscript can pick
          up the right settings for that variant build. The SConscript
          must [1433]Import these to use them. Example:

env1 = Environment(...settings for variant1...)
env2 = Environment(...settings for variant2...)

# run src/SConscript in two variant directories
VariantDir('build/variant1', 'src')
SConscript('build/variant1/SConscript', exports={"env": env1})
VariantDir('build/variant2', 'src')
SConscript('build/variant2/SConscript', exports={"env": env2})

          See also the [1434]SConscript function for another way to
          specify a variant directory in conjunction with calling a
          subsidiary SConscript file.

          More examples:

# use names in the build directory, not the source directory
VariantDir('build', 'src', duplicate=0)
Program('build/prog', 'build/source.c')

# this builds both the source and docs in a separate subtree
VariantDir('build', '.', duplicate=0)
SConscript(dirs=['build/src','build/doc'])

# same as previous example, but only uses SConscript
SConscript(dirs='src', variant_dir='build/src', duplicate=0)
SConscript(dirs='doc', variant_dir='build/doc', duplicate=0)

   WhereIs(program, [path, pathext, reject])
          env.WhereIs(program, [path, pathext, reject])
          Searches for the specified executable program, returning the
          full path to the program or None.

          When called as a construction environment method, searches the
          paths in the path keyword argument, or if None (the default) the
          paths listed in the construction environment
          (env['ENV']['PATH']). The external environment's path list
          (os.environ['PATH']) is used as a fallback if the key
          env['ENV']['PATH'] does not exist.

          On Windows systems, searches for executable programs with any of
          the file extensions listed in the pathext keyword argument, or
          if None (the default) the pathname extensions listed in the
          construction environment (env['ENV']['PATHEXT']). The external
          environment's pathname extensions list (os.environ['PATHEXT'])
          is used as a fallback if the key env['ENV']['PATHEXT'] does not
          exist.

          When called as a global function, uses the external
          environment's path os.environ['PATH'] and path extensions
          os.environ['PATHEXT'], respectively, if path and pathext are
          None.

          Will not select any path name or names in the optional reject
          list.

SConscript Variables

   In addition to the global functions and methods, scons supports a
   number of variables that can be used in SConscript files to affect how
   you want the build to be performed.

   ARGLIST
          A list of the keyword=value arguments specified on the command
          line. Each element in the list is a tuple containing the
          argument. The separate keyword and value elements of the tuple
          can be accessed by subscripting for elements [0] and [1] of the
          tuple, or, more readably, by using tuple unpacking. Example:

print("first keyword, value =", ARGLIST[0][0], ARGLIST[0][1])
print("second keyword, value =", ARGLIST[1][0], ARGLIST[1][1])
key, value = ARGLIST[2]
print("third keyword, value =", key, value)
for key, value in ARGLIST:
    # process key and value

   ARGUMENTS
          A dictionary of all the keyword=value arguments specified on the
          command line. The dictionary is not in order, and if a given
          keyword has more than one value assigned to it on the command
          line, the last (right-most) value is the one in the ARGUMENTS
          dictionary.

          Example:

if ARGUMENTS.get('debug', 0):
    env = Environment(CCFLAGS='-g')
else:
    env = Environment()

   BUILD_TARGETS
          A list of the targets which scons has been asked to build. The
          contents will be either those targets listed on the command
          line, or, if none, those targets set via calls to the
          [1435]Default function. It does not contain any dependent
          targets that scons selects for building as a result of making
          the sure the specified targets are up to date, if those targets
          did not appear on the command line. The list is empty if neither
          command line targets or Default calls are present.

          The elements of this list may be strings or nodes, so you should
          run the list through the Python str function to make sure any
          Node path names are converted to strings.

          Because this list may be taken from the list of targets
          specified using the Default function, the contents of the list
          may change on each successive call to Default. See the
          DEFAULT_TARGETS list, below, for additional information.

          Example:

if 'foo' in BUILD_TARGETS:
    print("Don't forget to test the `foo' program!")
if 'special/program' in BUILD_TARGETS:
    SConscript('special')

   COMMAND_LINE_TARGETS
          A list of the targets explicitly specified on the command line.
          If there are command line targets, this list will have the same
          contents as BUILD_TARGETS. If there are no targets specified on
          the command line, the list is empty. The elements of this list
          are strings. This can be used, for example, to take specific
          actions only when certain targets are explicitly being built.

          Example:

if 'foo' in COMMAND_LINE_TARGETS:
    print("Don't forget to test the `foo' program!")
if 'special/program' in COMMAND_LINE_TARGETS:
    SConscript('special')

   DEFAULT_TARGETS
          A list of the target nodes that have been specified using the
          [1436]Default function. If there are no command line targets,
          this list will have the same contents as BUILD_TARGETS. Since
          the elements of the list are nodes, you need to call the Python
          str function on them to get the path name for each Node.

          Example:

print(str(DEFAULT_TARGETS[0]))
if 'foo' in [str(t) for t in DEFAULT_TARGETS]:
    print("Don't forget to test the `foo' program!")

          The contents of the DEFAULT_TARGETS list change on on each
          successive call to the Default function:

print([str(t) for t in DEFAULT_TARGETS])   # originally []
Default('foo')
print([str(t) for t in DEFAULT_TARGETS])   # now a node ['foo']
Default('bar')
print([str(t) for t in DEFAULT_TARGETS])   # now a node ['foo', 'bar']
Default(None)
print([str(t) for t in DEFAULT_TARGETS])   # back to []

          Consequently, be sure to use DEFAULT_TARGETS only after you've
          made all of your Default() calls, or else simply be careful of
          the order of these statements in your SConscript files so that
          you don't look for a specific default target before it's
          actually been added to the list.

   These variables may be accessed from custom Python modules that you
   import into an SConscript file by adding the following to the Python
   module:
from SCons.Script import *

Construction Variables

   A construction environment has an associated dictionary of construction
   variables that are used by built-in or user-supplied build rules.
   Construction variable naming must follow the same rules as Python
   identifier naming: the initial character must be an underscore or
   letter, followed by any number of underscores, letters, or digits. A
   construction environment is not a Python dictionary itself, but it can
   be indexed like one to access a construction variable:
env["CC"] = "cc"
flags = env.get("CPPDEFINES", [])

   Construction variables can also be retrieved and set by using the
   [1437]Dictionary method of the construction environment to create an
   actual dictionary:
cvars = env.Dictionary()
cvars["CC"] = "cc"

   Construction variables can also be passed to the construction
   environment constructor:
env = Environment(CC="cc")

   or when copying a construction environment using the [1438]Clone
   method:
env2 = env.Clone(CC="cl.exe")

   Construction variables can also be supplied as keyword arguments to a
   builder, in which case those settings affect only the work done by that
   builder call, and not the construction environment as a whole. This
   concept is called an override:
env.Program('hello', 'hello.c', LIBS=['gl', 'glut'])

   A number of useful construction variables are automatically defined by
   scons for each supported platform, and you can modify these or define
   any additional construction variables for your own use, taking care not
   to overwrite ones which SCons is using. The following is a list of the
   possible automatically defined construction variables.

   Note the actual list available at execution time will never include all
   of these, as the ones detected as not being useful (wrong platform,
   necessary external command or files not installed, etc.) will not be
   set up. Correct build setups should be resilient to the possible
   absence of certain construction variables before using them, for
   example by using a Python dictionary get method to retrieve the value
   and taking alternative action if the return indicates the variable is
   unset. The [1439]env.Dump method can be called to examine the
   construction variables set in a particular environment.

   __LDMODULEVERSIONFLAGS
          This construction variable automatically introduces
          [1440]$_LDMODULEVERSIONFLAGS if [1441]$LDMODULEVERSION is set.
          Othervise it evaluates to an empty string.

   __SHLIBVERSIONFLAGS
          This construction variable automatically introduces
          [1442]$_SHLIBVERSIONFLAGS if [1443]$SHLIBVERSION is set.
          Othervise it evaluates to an empty string.

   APPLELINK_COMPATIBILITY_VERSION
          On Mac OS X this is used to set the linker flag:
          -compatibility_version

          The value is specified as X[.Y[.Z]] where X is between 1 and
          65535, Y can be omitted or between 1 and 255, Z can be omitted
          or between 1 and 255. This value will be derived from
          [1444]$SHLIBVERSION if not specified. The lowest digit will be
          dropped and replaced by a 0.

          If the [1445]$APPLELINK_NO_COMPATIBILITY_VERSION is set then no
          -compatibility_version will be output.

          See MacOS's ld manpage for more details

   _APPLELINK_COMPATIBILITY_VERSION
          A macro (by default a generator function) used to create the
          linker flags to specify apple's linker's -compatibility_version
          flag. The default generator uses
          [1446]$APPLELINK_COMPATIBILITY_VERSION and
          [1447]$APPLELINK_NO_COMPATIBILITY_VERSION and
          [1448]$SHLIBVERSION to determine the correct flag.

   APPLELINK_CURRENT_VERSION
          On Mac OS X this is used to set the linker flag:
          -current_version

          The value is specified as X[.Y[.Z]] where X is between 1 and
          65535, Y can be omitted or between 1 and 255, Z can be omitted
          or between 1 and 255. This value will be set to
          [1449]$SHLIBVERSION if not specified.

          If the [1450]$APPLELINK_NO_CURRENT_VERSION is set then no
          -current_version will be output.

          See MacOS's ld manpage for more details

   _APPLELINK_CURRENT_VERSION
          A macro (by default a generator function) used to create the
          linker flags to specify apple's linker's -current_version flag.
          The default generator uses [1451]$APPLELINK_CURRENT_VERSION and
          [1452]$APPLELINK_NO_CURRENT_VERSION and [1453]$SHLIBVERSION to
          determine the correct flag.

   APPLELINK_NO_COMPATIBILITY_VERSION
          Set this to any True (1|True|non-empty string) value to disable
          adding -compatibility_version flag when generating versioned
          shared libraries.

          This overrides [1454]$APPLELINK_COMPATIBILITY_VERSION.

   APPLELINK_NO_CURRENT_VERSION
          Set this to any True (1|True|non-empty string) value to disable
          adding -current_version flag when generating versioned shared
          libraries.

          This overrides [1455]$APPLELINK_CURRENT_VERSION.

   AR
          The static library archiver.

   ARCHITECTURE
          Specifies the system architecture for which the package is being
          built. The default is the system architecture of the machine on
          which SCons is running. This is used to fill in the
          Architecture: field in an Ipkg control file, and the BuildArch:
          field in the RPM .spec file, as well as forming part of the name
          of a generated RPM package file.

          See the [1456]Package builder.

   ARCOM
          The command line used to generate a static library from object
          files.

   ARCOMSTR
          The string displayed when a static library is generated from
          object files. If this is not set, then [1457]$ARCOM (the command
          line) is displayed.

env = Environment(ARCOMSTR = "Archiving $TARGET")

   ARFLAGS
          General options passed to the static library archiver.

   AS
          The assembler.

   ASCOM
          The command line used to generate an object file from an
          assembly-language source file.

   ASCOMSTR
          The string displayed when an object file is generated from an
          assembly-language source file. If this is not set, then
          [1458]$ASCOM (the command line) is displayed.

env = Environment(ASCOMSTR = "Assembling $TARGET")

   ASFLAGS
          General options passed to the assembler.

   ASPPCOM
          The command line used to assemble an assembly-language source
          file into an object file after first running the file through
          the C preprocessor. Any options specified in the [1459]$ASFLAGS
          and [1460]$CPPFLAGS construction variables are included on this
          command line.

   ASPPCOMSTR
          The string displayed when an object file is generated from an
          assembly-language source file after first running the file
          through the C preprocessor. If this is not set, then
          [1461]$ASPPCOM (the command line) is displayed.

env = Environment(ASPPCOMSTR = "Assembling $TARGET")

   ASPPFLAGS
          General options when an assembling an assembly-language source
          file into an object file after first running the file through
          the C preprocessor. The default is to use the value of
          [1462]$ASFLAGS.

   BIBTEX
          The bibliography generator for the TeX formatter and typesetter
          and the LaTeX structured formatter and typesetter.

   BIBTEXCOM
          The command line used to call the bibliography generator for the
          TeX formatter and typesetter and the LaTeX structured formatter
          and typesetter.

   BIBTEXCOMSTR
          The string displayed when generating a bibliography for TeX or
          LaTeX. If this is not set, then [1463]$BIBTEXCOM (the command
          line) is displayed.

env = Environment(BIBTEXCOMSTR = "Generating bibliography $TARGET")

   BIBTEXFLAGS
          General options passed to the bibliography generator for the TeX
          formatter and typesetter and the LaTeX structured formatter and
          typesetter.

   BUILDERS
          A dictionary mapping the names of the builders available through
          the construction environment to underlying Builder objects.
          Custom builders need to be added to this to make them available.

          A platform-dependent default list of builders such as
          [1464]Program, [1465]Library etc. is used to populate this
          construction variable when the construction environment is
          initialized via the presence/absence of the tools those builders
          depend on. $BUILDERS can be examined to learn which builders
          will actually be available at run-time.

          Note that if you initialize this construction variable through
          assignment when the construction environment is created, that
          value for $BUILDERS will override any defaults:

bld = Builder(action='foobuild < $SOURCE > $TARGET')
env = Environment(BUILDERS={'NewBuilder': bld})

          To instead use a new Builder object in addition to the default
          Builders, add your new Builder object like this:

env = Environment()
env.Append(BUILDERS={'NewBuilder': bld})

          or this:

env = Environment()
env['BUILDERS']['NewBuilder'] = bld

   CACHEDIR_CLASS
          The class type that SCons should use when instantiating a new
          [1466]CacheDir for the given environment. It must be a subclass
          of the SCons.CacheDir.CacheDir class.

   CC
          The C compiler.

   CCCOM
          The command line used to compile a C source file to a (static)
          object file. Any options specified in the [1467]$CFLAGS,
          [1468]$CCFLAGS and [1469]$CPPFLAGS construction variables are
          included on this command line. See also [1470]$SHCCCOM for
          compiling to shared objects.

   CCCOMSTR
          If set, the string displayed when a C source file is compiled to
          a (static) object file. If not set, then [1471]$CCCOM (the
          command line) is displayed. See also [1472]$SHCCCOMSTR for
          compiling to shared objects.

env = Environment(CCCOMSTR = "Compiling static object $TARGET")

   CCDEPFLAGS
          Options to pass to C or C++ compiler to generate list of
          dependency files.

          This is set only by compilers which support this functionality.
          ([1473]gcc, [1474]clang, and [1475]msvc currently)

   CCFLAGS
          General options that are passed to the C and C++ compilers. See
          also [1476]$SHCCFLAGS for compiling to shared objects.

   CCPCHFLAGS
          Options added to the compiler command line to support building
          with precompiled headers. The default value expands expands to
          the appropriate Microsoft Visual C++ command-line options when
          the [1477]$PCH construction variable is set.

   CCPDBFLAGS
          Options added to the compiler command line to support storing
          debugging information in a Microsoft Visual C++ PDB file. The
          default value expands expands to appropriate Microsoft Visual
          C++ command-line options when the [1478]$PDB construction
          variable is set.

          The Visual C++ compiler option that SCons uses by default to
          generate PDB information is /Z7. This works correctly with
          parallel (-j) builds because it embeds the debug information in
          the intermediate object files, as opposed to sharing a single
          PDB file between multiple object files. This is also the only
          way to get debug information embedded into a static library.
          Using the /Zi instead may yield improved link-time performance,
          although parallel builds will no longer work.

          You can generate PDB files with the /Zi switch by overriding the
          default [1479]$CCPDBFLAGS variable as follows:

env['CCPDBFLAGS'] = ['${(PDB and "/Zi /Fd%s" % File(PDB)) or ""}']

          An alternative would be to use the /Zi to put the debugging
          information in a separate .pdb file for each object file by
          overriding the [1480]$CCPDBFLAGS variable as follows:

env['CCPDBFLAGS'] = '/Zi /Fd${TARGET}.pdb'

   CCVERSION
          The version number of the C compiler. This may or may not be
          set, depending on the specific C compiler being used.

   CFILESUFFIX
          The suffix for C source files. This is used by the internal
          CFile builder when generating C files from Lex (.l) or YACC (.y)
          input files. The default suffix, of course, is .c (lower case).
          On case-insensitive systems (like Windows), SCons also treats .C
          (upper case) files as C files.

   CFLAGS
          General options that are passed to the C compiler (C only; not
          C++). See also [1481]$SHCFLAGS for compiling to shared objects.

   CHANGE_SPECFILE
          A hook for modifying the file that controls the packaging build
          (the .spec for RPM, the control for Ipkg, the .wxs for MSI). If
          set, the function will be called after the SCons template for
          the file has been written.

          See the [1482]Package builder.

   CHANGED_SOURCES
          A reserved variable name that may not be set or used in a
          construction environment. (See the manpage section "Variable
          Substitution" for more information).

   CHANGED_TARGETS
          A reserved variable name that may not be set or used in a
          construction environment. (See the manpage section "Variable
          Substitution" for more information).

   CHANGELOG
          The name of a file containing the change log text to be included
          in the package. This is included as the %changelog section of
          the RPM .spec file.

          See the [1483]Package builder.

   COMPILATIONDB_COMSTR
          The string displayed when the [1484]CompilationDatabase
          builder's action is run.

   COMPILATIONDB_PATH_FILTER
          A string which instructs [1485]CompilationDatabase to only
          include entries where the output member matches the pattern in
          the filter string using fnmatch, which uses glob style
          wildcards.

          The default value is an empty string '', which disables
          filtering.

   COMPILATIONDB_USE_ABSPATH
          A boolean flag to instruct [1486]CompilationDatabase whether to
          write the file and output members in the compilation database
          using absolute or relative paths.

          The default value is False (use relative paths)

   _concat
          A function used to produce variables like [1487]$_CPPINCFLAGS.
          It takes four mandatory arguments, and up to 4 additional
          optional arguments: 1) a prefix to concatenate onto each
          element, 2) a list of elements, 3) a suffix to concatenate onto
          each element, 4) an environment for variable interpolation, 5)
          an optional function that will be called to transform the list
          before concatenation, 6) an optionally specified target (Can use
          TARGET), 7) an optionally specified source (Can use SOURCE), 8)
          optional affect_signature flag which will wrap non-empty
          returned value with $( and $) to indicate the contents should
          not affect the signature of the generated command line.

        env['_CPPINCFLAGS'] = '${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__,
 RDirs, TARGET, SOURCE, affect_signature=False)}'

   CONFIGUREDIR
          The name of the directory in which Configure context test files
          are written. The default is .sconf_temp in the top-level
          directory containing the SConstruct file.

   CONFIGURELOG
          The name of the Configure context log file. The default is
          config.log in the top-level directory containing the SConstruct
          file.

   _CPPDEFFLAGS
          An automatically-generated construction variable containing the
          C preprocessor command-line options to define values. The value
          of [1488]$_CPPDEFFLAGS is created by respectively prepending and
          appending [1489]$CPPDEFPREFIX and [1490]$CPPDEFSUFFIX to each
          definition in [1491]$CPPDEFINES.

   CPPDEFINES
          A platform independent specification of C preprocessor macro
          definitions. The definitions will be added to command lines
          through the automatically-generated [1492]$_CPPDEFFLAGS
          construction variable (see above), which is constructed
          according to the type of value of $CPPDEFINES:

          If $CPPDEFINES is a string, the values of the
          [1493]$CPPDEFPREFIX and [1494]$CPPDEFSUFFIX construction
          variables will be respectively prepended and appended to each
          definition in [1495]$CPPDEFINES.

# Will add -Dxyz to POSIX compiler command lines,
# and /Dxyz to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES='xyz')

          If $CPPDEFINES is a list, the values of the $CPPDEFPREFIX and
          $CPPDEFSUFFIX construction variables will be respectively
          prepended and appended to each element in the list. If any
          element is a list or tuple, then the first item is the name
          being defined and the second item is its value:

# Will add -DB=2 -DA to POSIX compiler command lines,
# and /DB=2 /DA to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES=[('B', 2), 'A'])

          If $CPPDEFINES is a dictionary, the values of the $CPPDEFPREFIX
          and $CPPDEFSUFFIX construction variables will be respectively
          prepended and appended to each item from the dictionary. The key
          of each dictionary item is a name being defined to the
          dictionary item's corresponding value; if the value is None,
          then the name is defined without an explicit value. Note that
          the resulting flags are sorted by keyword to ensure that the
          order of the options on the command line is consistent each time
          scons is run.

# Will add -DA -DB=2 to POSIX compiler command lines,
# and /DA /DB=2 to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES={'B':2, 'A':None})

   CPPDEFPREFIX
          The prefix used to specify preprocessor macro definitions on the
          C compiler command line. This will be prepended to each
          definition in the [1496]$CPPDEFINES construction variable when
          the [1497]$_CPPDEFFLAGS variable is automatically generated.

   CPPDEFSUFFIX
          The suffix used to specify preprocessor macro definitions on the
          C compiler command line. This will be appended to each
          definition in the [1498]$CPPDEFINES construction variable when
          the [1499]$_CPPDEFFLAGS variable is automatically generated.

   CPPFLAGS
          User-specified C preprocessor options. These will be included in
          any command that uses the C preprocessor, including not just
          compilation of C and C++ source files via the [1500]$CCCOM,
          [1501]$SHCCCOM, [1502]$CXXCOM and [1503]$SHCXXCOM command lines,
          but also the [1504]$FORTRANPPCOM, [1505]$SHFORTRANPPCOM,
          [1506]$F77PPCOM and [1507]$SHF77PPCOM command lines used to
          compile a Fortran source file, and the [1508]$ASPPCOM command
          line used to assemble an assembly language source file, after
          first running each file through the C preprocessor. Note that
          this variable does not contain -I (or similar) include search
          path options that scons generates automatically from
          [1509]$CPPPATH. See [1510]$_CPPINCFLAGS, below, for the variable
          that expands to those options.

   _CPPINCFLAGS
          An automatically-generated construction variable containing the
          C preprocessor command-line options for specifying directories
          to be searched for include files. The value of $_CPPINCFLAGS is
          created by respectively prepending and appending
          [1511]$INCPREFIX and [1512]$INCSUFFIX to each directory in
          [1513]$CPPPATH.

   CPPPATH
          The list of directories that the C preprocessor will search for
          include directories. The C/C++ implicit dependency scanner will
          search these directories for include files. In general it's not
          advised to put include directory directives directly into
          [1514]$CCFLAGS or [1515]$CXXFLAGS as the result will be
          non-portable and the directories will not be searched by the
          dependency scanner. $CPPPATH should be a list of path strings,
          or a single string, not a pathname list joined by Python's
          os.sep.

          Note: directory names in $CPPPATH will be looked-up relative to
          the directory of the SConscript file when they are used in a
          command. To force scons to look-up a directory relative to the
          root of the source tree use the # prefix:

env = Environment(CPPPATH='#/include')

          The directory look-up can also be forced using the [1516]Dir
          function:

include = Dir('include')
env = Environment(CPPPATH=include)

          The directory list will be added to command lines through the
          automatically-generated [1517]$_CPPINCFLAGS construction
          variable, which is constructed by respectively prepending and
          appending the values of the [1518]$INCPREFIX and
          [1519]$INCSUFFIX construction variables to each directory in
          [1520]$CPPPATH. Any command lines you define that need the
          $CPPPATH directory list should include [1521]$_CPPINCFLAGS:

env = Environment(CCCOM="my_compiler $_CPPINCFLAGS -c -o $TARGET $SOURCE")

   CPPSUFFIXES
          The list of suffixes of files that will be scanned for C
          preprocessor implicit dependencies (#include lines). The default
          list is:

[".c", ".C", ".cxx", ".cpp", ".c++", ".cc",
 ".h", ".H", ".hxx", ".hpp", ".hh",
 ".F", ".fpp", ".FPP",
 ".m", ".mm",
 ".S", ".spp", ".SPP"]

   CXX
          The C++ compiler. See also [1522]$SHCXX for compiling to shared
          objects..

   CXXCOM
          The command line used to compile a C++ source file to an object
          file. Any options specified in the [1523]$CXXFLAGS and
          [1524]$CPPFLAGS construction variables are included on this
          command line. See also [1525]$SHCXXCOM for compiling to shared
          objects..

   CXXCOMSTR
          If set, the string displayed when a C++ source file is compiled
          to a (static) object file. If not set, then [1526]$CXXCOM (the
          command line) is displayed. See also [1527]$SHCXXCOMSTR for
          compiling to shared objects..

env = Environment(CXXCOMSTR = "Compiling static object $TARGET")

   CXXFILESUFFIX
          The suffix for C++ source files. This is used by the internal
          CXXFile builder when generating C++ files from Lex (.ll) or YACC
          (.yy) input files. The default suffix is .cc. SCons also treats
          files with the suffixes .cpp, .cxx, .c++, and .C++ as C++ files,
          and files with .mm suffixes as Objective C++ files. On
          case-sensitive systems (Linux, UNIX, and other POSIX-alikes),
          SCons also treats .C (upper case) files as C++ files.

   CXXFLAGS
          General options that are passed to the C++ compiler. By default,
          this includes the value of [1528]$CCFLAGS, so that setting
          $CCFLAGS affects both C and C++ compilation. If you want to add
          C++-specific flags, you must set or override the value of
          [1529]$CXXFLAGS. See also [1530]$SHCXXFLAGS for compiling to
          shared objects..

   CXXVERSION
          The version number of the C++ compiler. This may or may not be
          set, depending on the specific C++ compiler being used.

   DC
          The D compiler to use. See also [1531]$SHDC for compiling to
          shared objects.

   DCOM
          The command line used to compile a D file to an object file. Any
          options specified in the [1532]$DFLAGS construction variable is
          included on this command line. See also [1533]$SHDCOM for
          compiling to shared objects.

   DCOMSTR
          If set, the string displayed when a D source file is compiled to
          a (static) object file. If not set, then [1534]$DCOM (the
          command line) is displayed. See also [1535]$SHDCOMSTR for
          compiling to shared objects.

   DDEBUG
          List of debug tags to enable when compiling.

   DDEBUGPREFIX
          DDEBUGPREFIX.

   DDEBUGSUFFIX
          DDEBUGSUFFIX.

   DESCRIPTION
          A long description of the project being packaged. This is
          included in the relevant section of the file that controls the
          packaging build.

          See the [1536]Package builder.

   DESCRIPTION_lang
          A language-specific long description for the specified lang.
          This is used to populate a %description -l section of an RPM
          .spec file.

          See the [1537]Package builder.

   DFILESUFFIX
          DFILESUFFIX.

   DFLAGPREFIX
          DFLAGPREFIX.

   DFLAGS
          General options that are passed to the D compiler.

   DFLAGSUFFIX
          DFLAGSUFFIX.

   DINCPREFIX
          DINCPREFIX.

   DINCSUFFIX
          DLIBFLAGSUFFIX.

   Dir
          A function that converts a string into a Dir instance relative
          to the target being built.

   Dirs
          A function that converts a list of strings into a list of Dir
          instances relative to the target being built.

   DLIB
          Name of the lib tool to use for D codes.

   DLIBCOM
          The command line to use when creating libraries.

   DLIBDIRPREFIX
          DLIBLINKPREFIX.

   DLIBDIRSUFFIX
          DLIBLINKSUFFIX.

   DLIBFLAGPREFIX
          DLIBFLAGPREFIX.

   DLIBFLAGSUFFIX
          DLIBFLAGSUFFIX.

   DLIBLINKPREFIX
          DLIBLINKPREFIX.

   DLIBLINKSUFFIX
          DLIBLINKSUFFIX.

   DLINK
          Name of the linker to use for linking systems including D
          sources. See also [1538]$SHDLINK for linking shared objects.

   DLINKCOM
          The command line to use when linking systems including D
          sources. See also [1539]$SHDLINKCOM for linking shared objects.

   DLINKFLAGPREFIX
          DLINKFLAGPREFIX.

   DLINKFLAGS
          List of linker flags. See also [1540]$SHDLINKFLAGS for linking
          shared objects.

   DLINKFLAGSUFFIX
          DLINKFLAGSUFFIX.

   DOCBOOK_DEFAULT_XSL_EPUB
          The default XSLT file for the [1541]DocbookEpub builder within
          the current environment, if no other XSLT gets specified via
          keyword.

   DOCBOOK_DEFAULT_XSL_HTML
          The default XSLT file for the [1542]DocbookHtml builder within
          the current environment, if no other XSLT gets specified via
          keyword.

   DOCBOOK_DEFAULT_XSL_HTMLCHUNKED
          The default XSLT file for the [1543]DocbookHtmlChunked builder
          within the current environment, if no other XSLT gets specified
          via keyword.

   DOCBOOK_DEFAULT_XSL_HTMLHELP
          The default XSLT file for the [1544]DocbookHtmlhelp builder
          within the current environment, if no other XSLT gets specified
          via keyword.

   DOCBOOK_DEFAULT_XSL_MAN
          The default XSLT file for the [1545]DocbookMan builder within
          the current environment, if no other XSLT gets specified via
          keyword.

   DOCBOOK_DEFAULT_XSL_PDF
          The default XSLT file for the [1546]DocbookPdf builder within
          the current environment, if no other XSLT gets specified via
          keyword.

   DOCBOOK_DEFAULT_XSL_SLIDESHTML
          The default XSLT file for the [1547]DocbookSlidesHtml builder
          within the current environment, if no other XSLT gets specified
          via keyword.

   DOCBOOK_DEFAULT_XSL_SLIDESPDF
          The default XSLT file for the [1548]DocbookSlidesPdf builder
          within the current environment, if no other XSLT gets specified
          via keyword.

   DOCBOOK_FOP
          The path to the PDF renderer fop or xep, if one of them is
          installed (fop gets checked first).

   DOCBOOK_FOPCOM
          The full command-line for the PDF renderer fop or xep.

   DOCBOOK_FOPCOMSTR
          The string displayed when a renderer like fop or xep is used to
          create PDF output from an XML file.

   DOCBOOK_FOPFLAGS
          Additonal command-line flags for the PDF renderer fop or xep.

   DOCBOOK_XMLLINT
          The path to the external executable xmllint, if it's installed.
          Note, that this is only used as last fallback for resolving
          XIncludes, if no lxml Python binding can be imported in the
          current system.

   DOCBOOK_XMLLINTCOM
          The full command-line for the external executable xmllint.

   DOCBOOK_XMLLINTCOMSTR
          The string displayed when xmllint is used to resolve XIncludes
          for a given XML file.

   DOCBOOK_XMLLINTFLAGS
          Additonal command-line flags for the external executable
          xmllint.

   DOCBOOK_XSLTPROC
          The path to the external executable xsltproc (or saxon, xalan),
          if one of them is installed. Note, that this is only used as
          last fallback for XSL transformations, if no lxml Python binding
          can be imported in the current system.

   DOCBOOK_XSLTPROCCOM
          The full command-line for the external executable xsltproc (or
          saxon, xalan).

   DOCBOOK_XSLTPROCCOMSTR
          The string displayed when xsltproc is used to transform an XML
          file via a given XSLT stylesheet.

   DOCBOOK_XSLTPROCFLAGS
          Additonal command-line flags for the external executable
          xsltproc (or saxon, xalan).

   DOCBOOK_XSLTPROCPARAMS
          Additonal parameters that are not intended for the XSLT
          processor executable, but the XSL processing itself. By default,
          they get appended at the end of the command line for saxon and
          saxon-xslt, respectively.

   DPATH
          List of paths to search for import modules.

   DRPATHPREFIX
          DRPATHPREFIX.

   DRPATHSUFFIX
          DRPATHSUFFIX.

   DSUFFIXES
          The list of suffixes of files that will be scanned for imported
          D package files. The default list is ['.d'].

   DVERPREFIX
          DVERPREFIX.

   DVERSIONS
          List of version tags to enable when compiling.

   DVERSUFFIX
          DVERSUFFIX.

   DVIPDF
          The TeX DVI file to PDF file converter.

   DVIPDFCOM
          The command line used to convert TeX DVI files into a PDF file.

   DVIPDFCOMSTR
          The string displayed when a TeX DVI file is converted into a PDF
          file. If this is not set, then [1549]$DVIPDFCOM (the command
          line) is displayed.

   DVIPDFFLAGS
          General options passed to the TeX DVI file to PDF file
          converter.

   DVIPS
          The TeX DVI file to PostScript converter.

   DVIPSFLAGS
          General options passed to the TeX DVI file to PostScript
          converter.

   ENV
          The execution environment - a dictionary of environment
          variables used when SCons invokes external commands to build
          targets defined in this construction environment. When $ENV is
          passed to a command, all list values are assumed to be path
          lists and are joined using the search path separator. Any other
          non-string values are coerced to a string.

          Note that by default SCons does not propagate the environment in
          effect when you execute scons (the "shell environment") to the
          execution environment. This is so that builds will be guaranteed
          repeatable regardless of the environment variables set at the
          time scons is invoked. If you want to propagate a shell
          environment variable to the commands executed to build target
          files, you must do so explicitly. A common example is the system
          PATH environment variable, so that scons will find utilities the
          same way as the invoking shell (or other process):

import os
env = Environment(ENV={'PATH': os.environ['PATH']})

          Although it is usually not recommended, you can propagate the
          entire shell environment in one go:

import os
env = Environment(ENV=os.environ.copy())

   ESCAPE
          A function that will be called to escape shell special
          characters in command lines. The function should take one
          argument: the command line string to escape; and should return
          the escaped command line.

   F03
          The Fortran 03 compiler. You should normally set the
          [1550]$FORTRAN variable, which specifies the default Fortran
          compiler for all Fortran versions. You only need to set
          [1551]$F03 if you need to use a specific compiler or compiler
          version for Fortran 03 files.

   F03COM
          The command line used to compile a Fortran 03 source file to an
          object file. You only need to set [1552]$F03COM if you need to
          use a specific command line for Fortran 03 files. You should
          normally set the [1553]$FORTRANCOM variable, which specifies the
          default command line for all Fortran versions.

   F03COMSTR
          If set, the string displayed when a Fortran 03 source file is
          compiled to an object file. If not set, then [1554]$F03COM or
          [1555]$FORTRANCOM (the command line) is displayed.

   F03FILESUFFIXES
          The list of file extensions for which the F03 dialect will be
          used. By default, this is ['.f03']

   F03FLAGS
          General user-specified options that are passed to the Fortran 03
          compiler. Note that this variable does not contain -I (or
          similar) include search path options that scons generates
          automatically from [1556]$F03PATH. See [1557]$_F03INCFLAGS
          below, for the variable that expands to those options. You only
          need to set [1558]$F03FLAGS if you need to define specific user
          options for Fortran 03 files. You should normally set the
          [1559]$FORTRANFLAGS variable, which specifies the user-specified
          options passed to the default Fortran compiler for all Fortran
          versions.

   _F03INCFLAGS
          An automatically-generated construction variable containing the
          Fortran 03 compiler command-line options for specifying
          directories to be searched for include files. The value of
          [1560]$_F03INCFLAGS is created by appending [1561]$INCPREFIX and
          [1562]$INCSUFFIX to the beginning and end of each directory in
          [1563]$F03PATH.

   F03PATH
          The list of directories that the Fortran 03 compiler will search
          for include directories. The implicit dependency scanner will
          search these directories for include files. Don't explicitly put
          include directory arguments in [1564]$F03FLAGS because the
          result will be non-portable and the directories will not be
          searched by the dependency scanner. Note: directory names in
          [1565]$F03PATH will be looked-up relative to the SConscript
          directory when they are used in a command. To force scons to
          look-up a directory relative to the root of the source tree use
          #: You only need to set [1566]$F03PATH if you need to define a
          specific include path for Fortran 03 files. You should normally
          set the [1567]$FORTRANPATH variable, which specifies the include
          path for the default Fortran compiler for all Fortran versions.

env = Environment(F03PATH='#/include')

          The directory look-up can also be forced using the Dir()
          function:

include = Dir('include')
env = Environment(F03PATH=include)

          The directory list will be added to command lines through the
          automatically-generated [1568]$_F03INCFLAGS construction
          variable, which is constructed by appending the values of the
          [1569]$INCPREFIX and [1570]$INCSUFFIX construction variables to
          the beginning and end of each directory in [1571]$F03PATH. Any
          command lines you define that need the F03PATH directory list
          should include [1572]$_F03INCFLAGS:

env = Environment(F03COM="my_compiler $_F03INCFLAGS -c -o $TARGET $SOURCE")

   F03PPCOM
          The command line used to compile a Fortran 03 source file to an
          object file after first running the file through the C
          preprocessor. Any options specified in the [1573]$F03FLAGS and
          [1574]$CPPFLAGS construction variables are included on this
          command line. You only need to set [1575]$F03PPCOM if you need
          to use a specific C-preprocessor command line for Fortran 03
          files. You should normally set the [1576]$FORTRANPPCOM variable,
          which specifies the default C-preprocessor command line for all
          Fortran versions.

   F03PPCOMSTR
          If set, the string displayed when a Fortran 03 source file is
          compiled to an object file after first running the file through
          the C preprocessor. If not set, then [1577]$F03PPCOM or
          [1578]$FORTRANPPCOM (the command line) is displayed.

   F03PPFILESUFFIXES
          The list of file extensions for which the compilation +
          preprocessor pass for F03 dialect will be used. By default, this
          is empty.

   F08
          The Fortran 08 compiler. You should normally set the
          [1579]$FORTRAN variable, which specifies the default Fortran
          compiler for all Fortran versions. You only need to set
          [1580]$F08 if you need to use a specific compiler or compiler
          version for Fortran 08 files.

   F08COM
          The command line used to compile a Fortran 08 source file to an
          object file. You only need to set [1581]$F08COM if you need to
          use a specific command line for Fortran 08 files. You should
          normally set the [1582]$FORTRANCOM variable, which specifies the
          default command line for all Fortran versions.

   F08COMSTR
          If set, the string displayed when a Fortran 08 source file is
          compiled to an object file. If not set, then [1583]$F08COM or
          [1584]$FORTRANCOM (the command line) is displayed.

   F08FILESUFFIXES
          The list of file extensions for which the F08 dialect will be
          used. By default, this is ['.f08']

   F08FLAGS
          General user-specified options that are passed to the Fortran 08
          compiler. Note that this variable does not contain -I (or
          similar) include search path options that scons generates
          automatically from [1585]$F08PATH. See [1586]$_F08INCFLAGS
          below, for the variable that expands to those options. You only
          need to set [1587]$F08FLAGS if you need to define specific user
          options for Fortran 08 files. You should normally set the
          [1588]$FORTRANFLAGS variable, which specifies the user-specified
          options passed to the default Fortran compiler for all Fortran
          versions.

   _F08INCFLAGS
          An automatically-generated construction variable containing the
          Fortran 08 compiler command-line options for specifying
          directories to be searched for include files. The value of
          [1589]$_F08INCFLAGS is created by appending [1590]$INCPREFIX and
          [1591]$INCSUFFIX to the beginning and end of each directory in
          [1592]$F08PATH.

   F08PATH
          The list of directories that the Fortran 08 compiler will search
          for include directories. The implicit dependency scanner will
          search these directories for include files. Don't explicitly put
          include directory arguments in [1593]$F08FLAGS because the
          result will be non-portable and the directories will not be
          searched by the dependency scanner. Note: directory names in
          [1594]$F08PATH will be looked-up relative to the SConscript
          directory when they are used in a command. To force scons to
          look-up a directory relative to the root of the source tree use
          #: You only need to set [1595]$F08PATH if you need to define a
          specific include path for Fortran 08 files. You should normally
          set the [1596]$FORTRANPATH variable, which specifies the include
          path for the default Fortran compiler for all Fortran versions.

env = Environment(F08PATH='#/include')

          The directory look-up can also be forced using the Dir()
          function:

include = Dir('include')
env = Environment(F08PATH=include)

          The directory list will be added to command lines through the
          automatically-generated [1597]$_F08INCFLAGS construction
          variable, which is constructed by appending the values of the
          [1598]$INCPREFIX and [1599]$INCSUFFIX construction variables to
          the beginning and end of each directory in [1600]$F08PATH. Any
          command lines you define that need the F08PATH directory list
          should include [1601]$_F08INCFLAGS:

env = Environment(F08COM="my_compiler $_F08INCFLAGS -c -o $TARGET $SOURCE")

   F08PPCOM
          The command line used to compile a Fortran 08 source file to an
          object file after first running the file through the C
          preprocessor. Any options specified in the [1602]$F08FLAGS and
          [1603]$CPPFLAGS construction variables are included on this
          command line. You only need to set [1604]$F08PPCOM if you need
          to use a specific C-preprocessor command line for Fortran 08
          files. You should normally set the [1605]$FORTRANPPCOM variable,
          which specifies the default C-preprocessor command line for all
          Fortran versions.

   F08PPCOMSTR
          If set, the string displayed when a Fortran 08 source file is
          compiled to an object file after first running the file through
          the C preprocessor. If not set, then [1606]$F08PPCOM or
          [1607]$FORTRANPPCOM (the command line) is displayed.

   F08PPFILESUFFIXES
          The list of file extensions for which the compilation +
          preprocessor pass for F08 dialect will be used. By default, this
          is empty.

   F77
          The Fortran 77 compiler. You should normally set the
          [1608]$FORTRAN variable, which specifies the default Fortran
          compiler for all Fortran versions. You only need to set
          [1609]$F77 if you need to use a specific compiler or compiler
          version for Fortran 77 files.

   F77COM
          The command line used to compile a Fortran 77 source file to an
          object file. You only need to set [1610]$F77COM if you need to
          use a specific command line for Fortran 77 files. You should
          normally set the [1611]$FORTRANCOM variable, which specifies the
          default command line for all Fortran versions.

   F77COMSTR
          If set, the string displayed when a Fortran 77 source file is
          compiled to an object file. If not set, then [1612]$F77COM or
          [1613]$FORTRANCOM (the command line) is displayed.

   F77FILESUFFIXES
          The list of file extensions for which the F77 dialect will be
          used. By default, this is ['.f77']

   F77FLAGS
          General user-specified options that are passed to the Fortran 77
          compiler. Note that this variable does not contain -I (or
          similar) include search path options that scons generates
          automatically from [1614]$F77PATH. See [1615]$_F77INCFLAGS
          below, for the variable that expands to those options. You only
          need to set [1616]$F77FLAGS if you need to define specific user
          options for Fortran 77 files. You should normally set the
          [1617]$FORTRANFLAGS variable, which specifies the user-specified
          options passed to the default Fortran compiler for all Fortran
          versions.

   _F77INCFLAGS
          An automatically-generated construction variable containing the
          Fortran 77 compiler command-line options for specifying
          directories to be searched for include files. The value of
          [1618]$_F77INCFLAGS is created by appending [1619]$INCPREFIX and
          [1620]$INCSUFFIX to the beginning and end of each directory in
          [1621]$F77PATH.

   F77PATH
          The list of directories that the Fortran 77 compiler will search
          for include directories. The implicit dependency scanner will
          search these directories for include files. Don't explicitly put
          include directory arguments in [1622]$F77FLAGS because the
          result will be non-portable and the directories will not be
          searched by the dependency scanner. Note: directory names in
          [1623]$F77PATH will be looked-up relative to the SConscript
          directory when they are used in a command. To force scons to
          look-up a directory relative to the root of the source tree use
          #: You only need to set [1624]$F77PATH if you need to define a
          specific include path for Fortran 77 files. You should normally
          set the [1625]$FORTRANPATH variable, which specifies the include
          path for the default Fortran compiler for all Fortran versions.

env = Environment(F77PATH='#/include')

          The directory look-up can also be forced using the Dir()
          function:

include = Dir('include')
env = Environment(F77PATH=include)

          The directory list will be added to command lines through the
          automatically-generated [1626]$_F77INCFLAGS construction
          variable, which is constructed by appending the values of the
          [1627]$INCPREFIX and [1628]$INCSUFFIX construction variables to
          the beginning and end of each directory in [1629]$F77PATH. Any
          command lines you define that need the F77PATH directory list
          should include [1630]$_F77INCFLAGS:

env = Environment(F77COM="my_compiler $_F77INCFLAGS -c -o $TARGET $SOURCE")

   F77PPCOM
          The command line used to compile a Fortran 77 source file to an
          object file after first running the file through the C
          preprocessor. Any options specified in the [1631]$F77FLAGS and
          [1632]$CPPFLAGS construction variables are included on this
          command line. You only need to set [1633]$F77PPCOM if you need
          to use a specific C-preprocessor command line for Fortran 77
          files. You should normally set the [1634]$FORTRANPPCOM variable,
          which specifies the default C-preprocessor command line for all
          Fortran versions.

   F77PPCOMSTR
          If set, the string displayed when a Fortran 77 source file is
          compiled to an object file after first running the file through
          the C preprocessor. If not set, then [1635]$F77PPCOM or
          [1636]$FORTRANPPCOM (the command line) is displayed.

   F77PPFILESUFFIXES
          The list of file extensions for which the compilation +
          preprocessor pass for F77 dialect will be used. By default, this
          is empty.

   F90
          The Fortran 90 compiler. You should normally set the
          [1637]$FORTRAN variable, which specifies the default Fortran
          compiler for all Fortran versions. You only need to set
          [1638]$F90 if you need to use a specific compiler or compiler
          version for Fortran 90 files.

   F90COM
          The command line used to compile a Fortran 90 source file to an
          object file. You only need to set [1639]$F90COM if you need to
          use a specific command line for Fortran 90 files. You should
          normally set the [1640]$FORTRANCOM variable, which specifies the
          default command line for all Fortran versions.

   F90COMSTR
          If set, the string displayed when a Fortran 90 source file is
          compiled to an object file. If not set, then [1641]$F90COM or
          [1642]$FORTRANCOM (the command line) is displayed.

   F90FILESUFFIXES
          The list of file extensions for which the F90 dialect will be
          used. By default, this is ['.f90']

   F90FLAGS
          General user-specified options that are passed to the Fortran 90
          compiler. Note that this variable does not contain -I (or
          similar) include search path options that scons generates
          automatically from [1643]$F90PATH. See [1644]$_F90INCFLAGS
          below, for the variable that expands to those options. You only
          need to set [1645]$F90FLAGS if you need to define specific user
          options for Fortran 90 files. You should normally set the
          [1646]$FORTRANFLAGS variable, which specifies the user-specified
          options passed to the default Fortran compiler for all Fortran
          versions.

   _F90INCFLAGS
          An automatically-generated construction variable containing the
          Fortran 90 compiler command-line options for specifying
          directories to be searched for include files. The value of
          [1647]$_F90INCFLAGS is created by appending [1648]$INCPREFIX and
          [1649]$INCSUFFIX to the beginning and end of each directory in
          [1650]$F90PATH.

   F90PATH
          The list of directories that the Fortran 90 compiler will search
          for include directories. The implicit dependency scanner will
          search these directories for include files. Don't explicitly put
          include directory arguments in [1651]$F90FLAGS because the
          result will be non-portable and the directories will not be
          searched by the dependency scanner. Note: directory names in
          [1652]$F90PATH will be looked-up relative to the SConscript
          directory when they are used in a command. To force scons to
          look-up a directory relative to the root of the source tree use
          #: You only need to set [1653]$F90PATH if you need to define a
          specific include path for Fortran 90 files. You should normally
          set the [1654]$FORTRANPATH variable, which specifies the include
          path for the default Fortran compiler for all Fortran versions.

env = Environment(F90PATH='#/include')

          The directory look-up can also be forced using the Dir()
          function:

include = Dir('include')
env = Environment(F90PATH=include)

          The directory list will be added to command lines through the
          automatically-generated [1655]$_F90INCFLAGS construction
          variable, which is constructed by appending the values of the
          [1656]$INCPREFIX and [1657]$INCSUFFIX construction variables to
          the beginning and end of each directory in [1658]$F90PATH. Any
          command lines you define that need the F90PATH directory list
          should include [1659]$_F90INCFLAGS:

env = Environment(F90COM="my_compiler $_F90INCFLAGS -c -o $TARGET $SOURCE")

   F90PPCOM
          The command line used to compile a Fortran 90 source file to an
          object file after first running the file through the C
          preprocessor. Any options specified in the [1660]$F90FLAGS and
          [1661]$CPPFLAGS construction variables are included on this
          command line. You only need to set [1662]$F90PPCOM if you need
          to use a specific C-preprocessor command line for Fortran 90
          files. You should normally set the [1663]$FORTRANPPCOM variable,
          which specifies the default C-preprocessor command line for all
          Fortran versions.

   F90PPCOMSTR
          If set, the string displayed when a Fortran 90 source file is
          compiled after first running the file through the C
          preprocessor. If not set, then [1664]$F90PPCOM or
          [1665]$FORTRANPPCOM (the command line) is displayed.

   F90PPFILESUFFIXES
          The list of file extensions for which the compilation +
          preprocessor pass for F90 dialect will be used. By default, this
          is empty.

   F95
          The Fortran 95 compiler. You should normally set the
          [1666]$FORTRAN variable, which specifies the default Fortran
          compiler for all Fortran versions. You only need to set
          [1667]$F95 if you need to use a specific compiler or compiler
          version for Fortran 95 files.

   F95COM
          The command line used to compile a Fortran 95 source file to an
          object file. You only need to set [1668]$F95COM if you need to
          use a specific command line for Fortran 95 files. You should
          normally set the [1669]$FORTRANCOM variable, which specifies the
          default command line for all Fortran versions.

   F95COMSTR
          If set, the string displayed when a Fortran 95 source file is
          compiled to an object file. If not set, then [1670]$F95COM or
          [1671]$FORTRANCOM (the command line) is displayed.

   F95FILESUFFIXES
          The list of file extensions for which the F95 dialect will be
          used. By default, this is ['.f95']

   F95FLAGS
          General user-specified options that are passed to the Fortran 95
          compiler. Note that this variable does not contain -I (or
          similar) include search path options that scons generates
          automatically from [1672]$F95PATH. See [1673]$_F95INCFLAGS
          below, for the variable that expands to those options. You only
          need to set [1674]$F95FLAGS if you need to define specific user
          options for Fortran 95 files. You should normally set the
          [1675]$FORTRANFLAGS variable, which specifies the user-specified
          options passed to the default Fortran compiler for all Fortran
          versions.

   _F95INCFLAGS
          An automatically-generated construction variable containing the
          Fortran 95 compiler command-line options for specifying
          directories to be searched for include files. The value of
          [1676]$_F95INCFLAGS is created by appending [1677]$INCPREFIX and
          [1678]$INCSUFFIX to the beginning and end of each directory in
          [1679]$F95PATH.

   F95PATH
          The list of directories that the Fortran 95 compiler will search
          for include directories. The implicit dependency scanner will
          search these directories for include files. Don't explicitly put
          include directory arguments in [1680]$F95FLAGS because the
          result will be non-portable and the directories will not be
          searched by the dependency scanner. Note: directory names in
          [1681]$F95PATH will be looked-up relative to the SConscript
          directory when they are used in a command. To force scons to
          look-up a directory relative to the root of the source tree use
          #: You only need to set [1682]$F95PATH if you need to define a
          specific include path for Fortran 95 files. You should normally
          set the [1683]$FORTRANPATH variable, which specifies the include
          path for the default Fortran compiler for all Fortran versions.

env = Environment(F95PATH='#/include')

          The directory look-up can also be forced using the Dir()
          function:

include = Dir('include')
env = Environment(F95PATH=include)

          The directory list will be added to command lines through the
          automatically-generated [1684]$_F95INCFLAGS construction
          variable, which is constructed by appending the values of the
          [1685]$INCPREFIX and [1686]$INCSUFFIX construction variables to
          the beginning and end of each directory in [1687]$F95PATH. Any
          command lines you define that need the F95PATH directory list
          should include [1688]$_F95INCFLAGS:

env = Environment(F95COM="my_compiler $_F95INCFLAGS -c -o $TARGET $SOURCE")

   F95PPCOM
          The command line used to compile a Fortran 95 source file to an
          object file after first running the file through the C
          preprocessor. Any options specified in the [1689]$F95FLAGS and
          [1690]$CPPFLAGS construction variables are included on this
          command line. You only need to set [1691]$F95PPCOM if you need
          to use a specific C-preprocessor command line for Fortran 95
          files. You should normally set the [1692]$FORTRANPPCOM variable,
          which specifies the default C-preprocessor command line for all
          Fortran versions.

   F95PPCOMSTR
          If set, the string displayed when a Fortran 95 source file is
          compiled to an object file after first running the file through
          the C preprocessor. If not set, then [1693]$F95PPCOM or
          [1694]$FORTRANPPCOM (the command line) is displayed.

   F95PPFILESUFFIXES
          The list of file extensions for which the compilation +
          preprocessor pass for F95 dialect will be used. By default, this
          is empty.

   File
          A function that converts a string into a File instance relative
          to the target being built.

   FORTRAN
          The default Fortran compiler for all versions of Fortran.

   FORTRANCOM
          The command line used to compile a Fortran source file to an
          object file. By default, any options specified in the
          [1695]$FORTRANFLAGS, [1696]$_FORTRANMODFLAG, and
          [1697]$_FORTRANINCFLAGS construction variables are included on
          this command line.

   FORTRANCOMMONFLAGS
          General user-specified options that are passed to the Fortran
          compiler. Similar to [1698]$FORTRANFLAGS, but this variable is
          applied to all dialects.

   FORTRANCOMSTR
          If set, the string displayed when a Fortran source file is
          compiled to an object file. If not set, then [1699]$FORTRANCOM
          (the command line) is displayed.

   FORTRANFILESUFFIXES
          The list of file extensions for which the FORTRAN dialect will
          be used. By default, this is ['.f', '.for', '.ftn']

   FORTRANFLAGS
          General user-specified options for the FORTRAN dialect that are
          passed to the Fortran compiler. Note that this variable does not
          contain -I (or similar) include or module search path options
          that scons generates automatically from [1700]$FORTRANPATH. See
          [1701]$_FORTRANINCFLAGS and [1702]$_FORTRANMODFLAG, below, for
          the variables that expand those options.

   _FORTRANINCFLAGS
          An automatically-generated construction variable containing the
          Fortran compiler command-line options for specifying directories
          to be searched for include files and module files. The value of
          [1703]$_FORTRANINCFLAGS is created by respectively prepending
          and appending [1704]$INCPREFIX and [1705]$INCSUFFIX to the
          beginning and end of each directory in [1706]$FORTRANPATH.

   FORTRANMODDIR
          Directory location where the Fortran compiler should place any
          module files it generates. This variable is empty, by default.
          Some Fortran compilers will internally append this directory in
          the search path for module files, as well.

   FORTRANMODDIRPREFIX
          The prefix used to specify a module directory on the Fortran
          compiler command line. This will be prepended to the beginning
          of the directory in the [1707]$FORTRANMODDIR construction
          variables when the [1708]$_FORTRANMODFLAG variables is
          automatically generated.

   FORTRANMODDIRSUFFIX
          The suffix used to specify a module directory on the Fortran
          compiler command line. This will be appended to the end of the
          directory in the [1709]$FORTRANMODDIR construction variables
          when the [1710]$_FORTRANMODFLAG variables is automatically
          generated.

   _FORTRANMODFLAG
          An automatically-generated construction variable containing the
          Fortran compiler command-line option for specifying the
          directory location where the Fortran compiler should place any
          module files that happen to get generated during compilation.
          The value of [1711]$_FORTRANMODFLAG is created by respectively
          prepending and appending [1712]$FORTRANMODDIRPREFIX and
          [1713]$FORTRANMODDIRSUFFIX to the beginning and end of the
          directory in [1714]$FORTRANMODDIR.

   FORTRANMODPREFIX
          The module file prefix used by the Fortran compiler. SCons
          assumes that the Fortran compiler follows the quasi-standard
          naming convention for module files of module_name.mod. As a
          result, this variable is left empty, by default. For situations
          in which the compiler does not necessarily follow the normal
          convention, the user may use this variable. Its value will be
          appended to every module file name as scons attempts to resolve
          dependencies.

   FORTRANMODSUFFIX
          The module file suffix used by the Fortran compiler. SCons
          assumes that the Fortran compiler follows the quasi-standard
          naming convention for module files of module_name.mod. As a
          result, this variable is set to ".mod", by default. For
          situations in which the compiler does not necessarily follow the
          normal convention, the user may use this variable. Its value
          will be appended to every module file name as scons attempts to
          resolve dependencies.

   FORTRANPATH
          The list of directories that the Fortran compiler will search
          for include files and (for some compilers) module files. The
          Fortran implicit dependency scanner will search these
          directories for include files (but not module files since they
          are autogenerated and, as such, may not actually exist at the
          time the scan takes place). Don't explicitly put include
          directory arguments in FORTRANFLAGS because the result will be
          non-portable and the directories will not be searched by the
          dependency scanner. Note: directory names in FORTRANPATH will be
          looked-up relative to the SConscript directory when they are
          used in a command. To force scons to look-up a directory
          relative to the root of the source tree use #:

env = Environment(FORTRANPATH='#/include')

          The directory look-up can also be forced using the Dir()
          function:

include = Dir('include')
env = Environment(FORTRANPATH=include)

          The directory list will be added to command lines through the
          automatically-generated [1715]$_FORTRANINCFLAGS construction
          variable, which is constructed by respectively prepending and
          appending the values of the [1716]$INCPREFIX and
          [1717]$INCSUFFIX construction variables to the beginning and end
          of each directory in [1718]$FORTRANPATH. Any command lines you
          define that need the FORTRANPATH directory list should include
          [1719]$_FORTRANINCFLAGS:

env = Environment(FORTRANCOM="my_compiler $_FORTRANINCFLAGS -c -o $TARGET $SOURC
E")

   FORTRANPPCOM
          The command line used to compile a Fortran source file to an
          object file after first running the file through the C
          preprocessor. By default, any options specified in the
          [1720]$FORTRANFLAGS, [1721]$CPPFLAGS, [1722]$_CPPDEFFLAGS,
          [1723]$_FORTRANMODFLAG, and [1724]$_FORTRANINCFLAGS construction
          variables are included on this command line.

   FORTRANPPCOMSTR
          If set, the string displayed when a Fortran source file is
          compiled to an object file after first running the file through
          the C preprocessor. If not set, then [1725]$FORTRANPPCOM (the
          command line) is displayed.

   FORTRANPPFILESUFFIXES
          The list of file extensions for which the compilation +
          preprocessor pass for FORTRAN dialect will be used. By default,
          this is ['.fpp', '.FPP']

   FORTRANSUFFIXES
          The list of suffixes of files that will be scanned for Fortran
          implicit dependencies (INCLUDE lines and USE statements). The
          default list is:

[".f", ".F", ".for", ".FOR", ".ftn", ".FTN", ".fpp", ".FPP",
".f77", ".F77", ".f90", ".F90", ".f95", ".F95"]

   FRAMEWORKPATH
          On Mac OS X with gcc, a list containing the paths to search for
          frameworks. Used by the compiler to find framework-style
          includes like #include <Fmwk/Header.h>. Used by the linker to
          find user-specified frameworks when linking (see
          [1726]$FRAMEWORKS). For example:

env.AppendUnique(FRAMEWORKPATH='#myframeworkdir')

          will add

... -Fmyframeworkdir

          to the compiler and linker command lines.

   _FRAMEWORKPATH
          On Mac OS X with gcc, an automatically-generated construction
          variable containing the linker command-line options
          corresponding to [1727]$FRAMEWORKPATH.

   FRAMEWORKPATHPREFIX
          On Mac OS X with gcc, the prefix to be used for the
          FRAMEWORKPATH entries. (see [1728]$FRAMEWORKPATH). The default
          value is -F.

   FRAMEWORKPREFIX
          On Mac OS X with gcc, the prefix to be used for linking in
          frameworks (see [1729]$FRAMEWORKS). The default value is
          -framework.

   FRAMEWORKS
          On Mac OS X with gcc, a list of the framework names to be linked
          into a program or shared library or bundle. The default value is
          the empty list. For example:

env.AppendUnique(FRAMEWORKS=Split('System Cocoa SystemConfiguration'))

   _FRAMEWORKS
          On Mac OS X with gcc, an automatically-generated construction
          variable containing the linker command-line options for linking
          with FRAMEWORKS.

   FRAMEWORKSFLAGS
          On Mac OS X with gcc, general user-supplied frameworks options
          to be added at the end of a command line building a loadable
          module. (This has been largely superseded by the
          [1730]$FRAMEWORKPATH, [1731]$FRAMEWORKPATHPREFIX,
          [1732]$FRAMEWORKPREFIX and [1733]$FRAMEWORKS variables described
          above.)

   GS
          The Ghostscript program used to, for example, convert PostScript
          to PDF files.

   GSCOM
          The full Ghostscript command line used for the conversion
          process. Its default value is "$GS $GSFLAGS -sOutputFile=$TARGET
          $SOURCES".

   GSCOMSTR
          The string displayed when Ghostscript is called for the
          conversion process. If this is not set (the default), then
          [1734]$GSCOM (the command line) is displayed.

   GSFLAGS
          General options passed to the Ghostscript program, when
          converting PostScript to PDF files for example. Its default
          value is "-dNOPAUSE -dBATCH -sDEVICE=pdfwrite"

   HOST_ARCH
          The name of the host hardware architecture used to create this
          construction environment. The platform code sets this when
          initializing (see [1735]$PLATFORM and the platform argument to
          [1736]Environment). Note the detected name of the architecture
          may not be identical to that returned by the Python
          platform.machine method.

          On the win32 platform, if the Microsoft Visual C++ compiler is
          available, [1737]msvc tool setup is done using $HOST_ARCH and
          [1738]$TARGET_ARCH. Changing the values at any later time will
          not cause the tool to be reinitialized. Valid host arch values
          are x86 and arm for 32-bit hosts and amd64 and x86_64 for 64-bit
          hosts.

          Should be considered immutable. $HOST_ARCH is not currently used
          by other platforms, but the option is reserved to do so in
          future

   HOST_OS
          The name of the host operating system for the platform used to
          create this construction environment. The platform code sets
          this when initializing (see [1739]$PLATFORM and the platform
          argument to [1740]Environment).

          Should be considered immutable. $HOST_OS is not currently used
          by SCons, but the option is reserved to do so in future

   IDLSUFFIXES
          The list of suffixes of files that will be scanned for IDL
          implicit dependencies (#include or import lines). The default
          list is:

[".idl", ".IDL"]

   IMPLIBNOVERSIONSYMLINKS
          Used to override
          [1741]$SHLIBNOVERSIONSYMLINKS/[1742]$LDMODULENOVERSIONSYMLINKS
          when creating versioned import library for a shared
          library/loadable module. If not defined, then
          [1743]$SHLIBNOVERSIONSYMLINKS/[1744]$LDMODULENOVERSIONSYMLINKS
          is used to determine whether to disable symlink generation or
          not.

   IMPLIBPREFIX
          The prefix used for import library names. For example, cygwin
          uses import libraries (libfoo.dll.a) in pair with dynamic
          libraries (cygfoo.dll). The [1745]cyglink linker sets
          [1746]$IMPLIBPREFIX to 'lib' and [1747]$SHLIBPREFIX to 'cyg'.

   IMPLIBSUFFIX
          The suffix used for import library names. For example, cygwin
          uses import libraries (libfoo.dll.a) in pair with dynamic
          libraries (cygfoo.dll). The [1748]cyglink linker sets
          [1749]$IMPLIBSUFFIX to '.dll.a' and [1750]$SHLIBSUFFIX to
          '.dll'.

   IMPLIBVERSION
          Used to override [1751]$SHLIBVERSION/[1752]$LDMODULEVERSION when
          generating versioned import library for a shared
          library/loadable module. If undefined, the
          [1753]$SHLIBVERSION/[1754]$LDMODULEVERSION is used to determine
          the version of versioned import library.

   IMPLICIT_COMMAND_DEPENDENCIES
          Controls whether or not SCons will add implicit dependencies for
          the commands executed to build targets.

          By default, SCons will add to each target an implicit dependency
          on the command represented by the first argument of any command
          line it executes (which is typically the command itself). By
          setting such a dependency, SCons can determine that a target
          should be rebuilt if the command changes, such as when a
          compiler is upgraded to a new version. The specific file for the
          dependency is found by searching the PATH variable in the ENV
          dictionary in the construction environment used to execute the
          command. The default is the same as setting the construction
          variable $IMPLICIT_COMMAND_DEPENDENCIES to a True-like value
          ("true", "yes", or "1" - but not a number greater than one, as
          that has a different meaning).

          Action strings can be segmented by the use of an AND operator,
          &&. In a segemented string, each segment is a separate "command
          line", these are run sequentially until one fails or the entire
          sequence has been executed. If an action string is segmented,
          then the selected behavior of $IMPLICIT_COMMAND_DEPENDENCIES is
          applied to each segment.

          If $IMPLICIT_COMMAND_DEPENDENCIES is set to a False-like value
          ("none", "false", "no", "0", etc.), then the implicit dependency
          will not be added to the targets built with that construction
          environment.

          If $IMPLICIT_COMMAND_DEPENDENCIES is set to "2" or higher, then
          that number of arguments in the command line will be scanned for
          relative or absolute paths. If any are present, they will be
          added as implicit dependencies to the targets built with that
          construction environment. The first argument in the command line
          will be searched for using the PATH variable in the ENV
          dictionary in the construction environment used to execute the
          command. The other arguments will only be found if they are
          absolute paths or valid paths relative to the working directory.

          If $IMPLICIT_COMMAND_DEPENDENCIES is set to "all", then all
          arguments in the command line will be scanned for relative or
          absolute paths. If any are present, they will be added as
          implicit dependencies to the targets built with that
          construction environment. The first argument in the command line
          will be searched for using the PATH variable in the ENV
          dictionary in the construction environment used to execute the
          command. The other arguments will only be found if they are
          absolute paths or valid paths relative to the working directory.

env = Environment(IMPLICIT_COMMAND_DEPENDENCIES=False)

   INCPREFIX
          The prefix used to specify an include directory on the C
          compiler command line. This will be prepended to each directory
          in the [1755]$CPPPATH and [1756]$FORTRANPATH construction
          variables when the [1757]$_CPPINCFLAGS and
          [1758]$_FORTRANINCFLAGS variables are automatically generated.

   INCSUFFIX
          The suffix used to specify an include directory on the C
          compiler command line. This will be appended to each directory
          in the [1759]$CPPPATH and [1760]$FORTRANPATH construction
          variables when the [1761]$_CPPINCFLAGS and
          [1762]$_FORTRANINCFLAGS variables are automatically generated.

   INSTALL
          A function to be called to install a file into a destination
          file name. The default function copies the file into the
          destination (and sets the destination file's mode and permission
          bits to match the source file's). The function takes the
          following arguments:

def install(dest, source, env):

          dest is the path name of the destination file. source is the
          path name of the source file. env is the construction
          environment (a dictionary of construction values) in force for
          this file installation.

   INSTALLSTR
          The string displayed when a file is installed into a destination
          file name. The default is:

Install file: "$SOURCE" as "$TARGET"

   INTEL_C_COMPILER_VERSION
          Set by the [1763]intelc Tool to the major version number of the
          Intel C compiler selected for use.

   JAR
          The Java archive tool.

   JARCHDIR
          The directory to which the Java archive tool should change
          (using the -C option).

   JARCOM
          The command line used to call the Java archive tool.

   JARCOMSTR
          The string displayed when the Java archive tool is called If
          this is not set, then [1764]$JARCOM (the command line) is
          displayed.

env = Environment(JARCOMSTR="JARchiving $SOURCES into $TARGET")

   JARFLAGS
          General options passed to the Java archive tool. By default this
          is set to cf to create the necessary jar file.

   JARSUFFIX
          The suffix for Java archives: .jar by default.

   JAVABOOTCLASSPATH
          Specifies the list of directories that will be added to the
          javac command line via the -bootclasspath option. The individual
          directory names will be separated by the operating system's path
          separate character (: on UNIX/Linux/POSIX, ; on Windows).

   JAVAC
          The Java compiler.

   JAVACCOM
          The command line used to compile a directory tree containing
          Java source files to corresponding Java class files. Any options
          specified in the [1765]$JAVACFLAGS construction variable are
          included on this command line.

   JAVACCOMSTR
          The string displayed when compiling a directory tree of Java
          source files to corresponding Java class files. If this is not
          set, then [1766]$JAVACCOM (the command line) is displayed.

env = Environment(JAVACCOMSTR="Compiling class files $TARGETS from $SOURCES")

   JAVACFLAGS
          General options that are passed to the Java compiler.

   JAVACLASSDIR
          The directory in which Java class files may be found. This is
          stripped from the beginning of any Java .class file names
          supplied to the JavaH builder.

   JAVACLASSPATH
          Specifies the list of directories that will be searched for Java
          .class file. The directories in this list will be added to the
          javac and javah command lines via the -classpath option. The
          individual directory names will be separated by the operating
          system's path separate character (: on UNIX/Linux/POSIX, ; on
          Windows).

   JAVACLASSSUFFIX
          The suffix for Java class files; .class by default.

   JAVAH
          The Java generator for C header and stub files.

   JAVAHCOM
          The command line used to generate C header and stub files from
          Java classes. Any options specified in the [1767]$JAVAHFLAGS
          construction variable are included on this command line.

   JAVAHCOMSTR
          The string displayed when C header and stub files are generated
          from Java classes. If this is not set, then [1768]$JAVAHCOM (the
          command line) is displayed.

env = Environment(JAVAHCOMSTR="Generating header/stub file(s) $TARGETS from $SOU
RCES")

   JAVAHFLAGS
          General options passed to the C header and stub file generator
          for Java classes.

   JAVAINCLUDES
          Include path for Java header files (such as jni.h)

   JAVASOURCEPATH
          Specifies the list of directories that will be searched for
          input .java file. The directories in this list will be added to
          the javac command line via the -sourcepath option. The
          individual directory names will be separated by the operating
          system's path separate character (: on UNIX/Linux/POSIX, ; on
          Windows).

          Note that this currently just adds the specified directory via
          the -sourcepath option. SCons does not currently search the
          $JAVASOURCEPATH directories for dependency .java files.

   JAVASUFFIX
          The suffix for Java files; .java by default.

   JAVAVERSION
          Specifies the Java version being used by the [1769]Java builder.
          Set this to specify the version of Java targeted by the javac
          compiler. This is sometimes necessary because Java 1.5 changed
          the file names that are created for nested anonymous inner
          classes, which can cause a mismatch with the files that SCons
          expects will be generated by the javac compiler. Setting
          $JAVAVERSION to a version greater than 1.4 makes SCons realize
          that a build with such a compiler is actually up to date. The
          default is 1.4.

          While this is not primarily intended for selecting one version
          of the Java compiler vs. another, it does have that effect on
          the Windows platform. A more precise approach is to set
          [1770]$JAVAC (and related construction variables for related
          utilities) to the path to the specific Java compiler you want,
          if that is not the default compiler. On non-Windows platforms,
          the alternatives system may provide a way to adjust the default
          Java compiler without having to specify explicit paths.

   LATEX
          The LaTeX structured formatter and typesetter.

   LATEXCOM
          The command line used to call the LaTeX structured formatter and
          typesetter.

   LATEXCOMSTR
          The string displayed when calling the LaTeX structured formatter
          and typesetter. If this is not set, then [1771]$LATEXCOM (the
          command line) is displayed.

env = Environment(LATEXCOMSTR = "Building $TARGET from LaTeX input $SOURCES")

   LATEXFLAGS
          General options passed to the LaTeX structured formatter and
          typesetter.

   LATEXRETRIES
          The maximum number of times that LaTeX will be re-run if the
          .log generated by the [1772]$LATEXCOM command indicates that
          there are undefined references. The default is to try to resolve
          undefined references by re-running LaTeX up to three times.

   LATEXSUFFIXES
          The list of suffixes of files that will be scanned for LaTeX
          implicit dependencies (\include or \import files). The default
          list is:

[".tex", ".ltx", ".latex"]

   LDMODULE
          The linker for building loadable modules. By default, this is
          the same as [1773]$SHLINK.

   LDMODULECOM
          The command line for building loadable modules. On Mac OS X,
          this uses the [1774]$LDMODULE, [1775]$LDMODULEFLAGS and
          [1776]$FRAMEWORKSFLAGS variables. On other systems, this is the
          same as [1777]$SHLINK.

   LDMODULECOMSTR
          If set, the string displayed when building loadable modules. If
          not set, then [1778]$LDMODULECOM (the command line) is
          displayed.

   LDMODULEEMITTER
          Contains the emitter specification for the [1779]LoadableModule
          builder. The manpage section "Builder Objects" contains general
          information on specifying emitters.

   LDMODULEFLAGS
          General user options passed to the linker for building loadable
          modules.

   LDMODULENOVERSIONSYMLINKS
          Instructs the [1780]LoadableModule builder to not automatically
          create symlinks for versioned modules. Defaults to
          $SHLIBNOVERSIONSYMLINKS

   LDMODULEPREFIX
          The prefix used for loadable module file names. On Mac OS X,
          this is null; on other systems, this is the same as
          [1781]$SHLIBPREFIX.

   _LDMODULESONAME
          A macro that automatically generates loadable module's SONAME
          based on $TARGET, $LDMODULEVERSION and $LDMODULESUFFIX. Used by
          [1782]LoadableModule builder when the linker tool supports
          SONAME (e.g. [1783]gnulink).

   LDMODULESUFFIX
          The suffix used for loadable module file names. On Mac OS X,
          this is null; on other systems, this is the same as
          $SHLIBSUFFIX.

   LDMODULEVERSION
          When this construction variable is defined, a versioned loadable
          module is created by [1784]LoadableModule builder. This
          activates the [1785]$_LDMODULEVERSIONFLAGS and thus modifies the
          [1786]$LDMODULECOM as required, adds the version number to the
          library name, and creates the symlinks that are needed.
          [1787]$LDMODULEVERSION versions should exist in the same format
          as [1788]$SHLIBVERSION.

   _LDMODULEVERSIONFLAGS
          This macro automatically introduces extra flags to
          [1789]$LDMODULECOM when building versioned [1790]LoadableModule
          (that is when [1791]$LDMODULEVERSION is set).
          _LDMODULEVERSIONFLAGS usually adds [1792]$SHLIBVERSIONFLAGS and
          some extra dynamically generated options (such as
          -Wl,-soname=$_LDMODULESONAME). It is unused by plain
          (unversioned) loadable modules.

   LDMODULEVERSIONFLAGS
          Extra flags added to [1793]$LDMODULECOM when building versioned
          [1794]LoadableModule. These flags are only used when
          [1795]$LDMODULEVERSION is set.

   LEX
          The lexical analyzer generator.

   LEX_HEADER_FILE
          If supplied, generate a C header file with the name taken from
          this variable. Will be emitted as a --header-file= command-line
          option. Use this in preference to including --header-file= in
          [1796]$LEXFLAGS directly.

   LEX_TABLES_FILE
          If supplied, write the lex tables to a file with the name taken
          from this variable. Will be emitted as a --tables-file=
          command-line option. Use this in preference to including
          --tables-file= in [1797]$LEXFLAGS directly.

   LEXCOM
          The command line used to call the lexical analyzer generator to
          generate a source file.

   LEXCOMSTR
          The string displayed when generating a source file using the
          lexical analyzer generator. If this is not set, then
          [1798]$LEXCOM (the command line) is displayed.

env = Environment(LEXCOMSTR="Lex'ing $TARGET from $SOURCES")

   LEXFLAGS
          General options passed to the lexical analyzer generator. In
          addition to passing the value on during invocation, the
          [1799]lex tool also examines this construction variable for
          options which cause additional output files to be generated, and
          adds those to the target list. Recognized for this purpose are
          GNU flex options --header-file= and --tables-file=; the output
          file is named by the option argument.

          Note that files specified by --header-file= and --tables-file=
          may not be properly handled by SCons in all situations. Consider
          using [1800]$LEX_HEADER_FILE and [1801]$LEX_TABLES_FILE instead.

   LEXUNISTD
          Used only on windows environments to set a lex flag to prevent
          'unistd.h' from being included. The default value is
          '--nounistd'.

   _LIBDIRFLAGS
          An automatically-generated construction variable containing the
          linker command-line options for specifying directories to be
          searched for library. The value of $_LIBDIRFLAGS is created by
          respectively prepending and appending [1802]$LIBDIRPREFIX and
          [1803]$LIBDIRSUFFIX to each directory in [1804]$LIBPATH.

   LIBDIRPREFIX
          The prefix used to specify a library directory on the linker
          command line. This will be prepended to each directory in the
          [1805]$LIBPATH construction variable when the
          [1806]$_LIBDIRFLAGS variable is automatically generated.

   LIBDIRSUFFIX
          The suffix used to specify a library directory on the linker
          command line. This will be appended to each directory in the
          [1807]$LIBPATH construction variable when the
          [1808]$_LIBDIRFLAGS variable is automatically generated.

   LIBEMITTER
          Contains the emitter specification for the [1809]StaticLibrary
          builder. The manpage section "Builder Objects" contains general
          information on specifying emitters.

   _LIBFLAGS
          An automatically-generated construction variable containing the
          linker command-line options for specifying libraries to be
          linked with the resulting target. The value of [1810]$_LIBFLAGS
          is created by respectively prepending and appending
          [1811]$LIBLINKPREFIX and [1812]$LIBLINKSUFFIX to each filename
          in [1813]$LIBS.

   LIBLINKPREFIX
          The prefix used to specify a library to link on the linker
          command line. This will be prepended to each library in the
          [1814]$LIBS construction variable when the [1815]$_LIBFLAGS
          variable is automatically generated.

   LIBLINKSUFFIX
          The suffix used to specify a library to link on the linker
          command line. This will be appended to each library in the
          [1816]$LIBS construction variable when the [1817]$_LIBFLAGS
          variable is automatically generated.

   LIBPATH
          The list of directories that will be searched for libraries
          specified by the [1818]$LIBS construction variable. $LIBPATH
          should be a list of path strings, or a single string, not a
          pathname list joined by Python's os.sep. Do not put library
          search directives directly into $LINKFLAGS or $SHLINKFLAGS as
          the result will be non-portable.

          Note: directory names in $LIBPATH will be looked-up relative to
          the directory of the SConscript file when they are used in a
          command. To force scons to look-up a directory relative to the
          root of the source tree use the # prefix:

env = Environment(LIBPATH='#/libs')

          The directory look-up can also be forced using the [1819]Dir
          function:

libs = Dir('libs')
env = Environment(LIBPATH=libs)

          The directory list will be added to command lines through the
          automatically-generated [1820]$_LIBDIRFLAGS construction
          variable, which is constructed by respectively prepending and
          appending the values of the [1821]$LIBDIRPREFIX and
          [1822]$LIBDIRSUFFIX construction variables to each directory in
          $LIBPATH. Any command lines you define that need the $LIBPATH
          directory list should include $_LIBDIRFLAGS:

env = Environment(LINKCOM="my_linker $_LIBDIRFLAGS $_LIBFLAGS -o $TARGET $SOURCE
")

   LIBPREFIX
          The prefix used for (static) library file names. A default value
          is set for each platform (posix, win32, os2, etc.), but the
          value is overridden by individual tools (ar, mslib, sgiar,
          sunar, tlib, etc.) to reflect the names of the libraries they
          create.

   LIBPREFIXES
          A list of all legal prefixes for library file names. When
          searching for library dependencies, SCons will look for files
          with these prefixes, the base library name, and suffixes from
          the [1823]$LIBSUFFIXES list.

   LIBS
          A list of one or more libraries that will be added to the link
          line for linking with any executable program, shared library, or
          loadable module created by the construction environment or
          override.

          String-valued library names should include only the library base
          names, without prefixes such as lib or suffixes such as .so or
          .dll. The library list will be added to command lines through
          the automatically-generated $_LIBFLAGS construction variable
          which is constructed by respectively prepending and appending
          the values of the $LIBLINKPREFIX and $LIBLINKSUFFIX construction
          variables to each library name in $LIBS. Library name strings
          should not include a path component, instead the compiler will
          be directed to look for libraries in the paths specified by
          [1824]$LIBPATH.

          Any command lines you define that need the $LIBS library list
          should include $_LIBFLAGS:

env = Environment(LINKCOM="my_linker $_LIBDIRFLAGS $_LIBFLAGS -o $TARGET $SOURCE
")

          If you add a File object to the $LIBS list, the name of that
          file will be added to $_LIBFLAGS, and thus to the link line,
          as-is, without $LIBLINKPREFIX or $LIBLINKSUFFIX. For example:

env.Append(LIBS=File('/tmp/mylib.so'))

          In all cases, scons will add dependencies from the executable
          program to all the libraries in this list.

   LIBSUFFIX
          The suffix used for (static) library file names. A default value
          is set for each platform (posix, win32, os2, etc.), but the
          value is overridden by individual tools (ar, mslib, sgiar,
          sunar, tlib, etc.) to reflect the names of the libraries they
          create.

   LIBSUFFIXES
          A list of all legal suffixes for library file names. When
          searching for library dependencies, SCons will look for files
          with prefixes from the [1825]$LIBPREFIXES list, the base library
          name, and these suffixes.

   LICENSE
          The abbreviated name, preferably the SPDX code, of the license
          under which this project is released (GPL-3.0, LGPL-2.1,
          BSD-2-Clause etc.). See
          [1826]http://www.opensource.org/licenses/alphabetical for a list
          of license names and SPDX codes.

          See the [1827]Package builder.

   LINESEPARATOR
          The separator used by the [1828]Substfile and [1829]Textfile
          builders. This value is used between sources when constructing
          the target. It defaults to the current system line separator.

   LINGUAS_FILE
          The $LINGUAS_FILE defines file(s) containing list of additional
          linguas to be processed by [1830]POInit, [1831]POUpdate or
          [1832]MOFiles builders. It also affects [1833]Translate builder.
          If the variable contains a string, it defines name of the list
          file. The $LINGUAS_FILE may be a list of file names as well. If
          $LINGUAS_FILE is set to True (or non-zero numeric value), the
          list will be read from default file named LINGUAS.

   LINK
          The linker. See also [1834]$SHLINK for linking shared objects.

          On POSIX systems (those using the [1835]link tool), you should
          normally not change this value as it defaults to a "smart"
          linker tool which selects a compiler driver matching the type of
          source files in use. So for example, if you set [1836]$CXX to a
          specific compiler name, and are compiling C++ sources, the
          smartlink function will automatically select the same compiler
          for linking.

   LINKCOM
          The command line used to link object files into an executable.
          See also [1837]$SHLINKCOM for linking shared objects.

   LINKCOMSTR
          If set, the string displayed when object files are linked into
          an executable. If not set, then [1838]$LINKCOM (the command
          line) is displayed. See also [1839]$SHLINKCOMSTR. for linking
          shared objects.

env = Environment(LINKCOMSTR = "Linking $TARGET")

   LINKFLAGS
          General user options passed to the linker. Note that this
          variable should not contain -l (or similar) options for linking
          with the libraries listed in [1840]$LIBS, nor -L (or similar)
          library search path options that scons generates automatically
          from [1841]$LIBPATH. See [1842]$_LIBFLAGS above, for the
          variable that expands to library-link options, and
          [1843]$_LIBDIRFLAGS above, for the variable that expands to
          library search path options. See also [1844]$SHLINKFLAGS. for
          linking shared objects.

   M4
          The M4 macro preprocessor.

   M4COM
          The command line used to pass files through the M4 macro
          preprocessor.

   M4COMSTR
          The string displayed when a file is passed through the M4 macro
          preprocessor. If this is not set, then [1845]$M4COM (the command
          line) is displayed.

   M4FLAGS
          General options passed to the M4 macro preprocessor.

   MAKEINDEX
          The makeindex generator for the TeX formatter and typesetter and
          the LaTeX structured formatter and typesetter.

   MAKEINDEXCOM
          The command line used to call the makeindex generator for the
          TeX formatter and typesetter and the LaTeX structured formatter
          and typesetter.

   MAKEINDEXCOMSTR
          The string displayed when calling the makeindex generator for
          the TeX formatter and typesetter and the LaTeX structured
          formatter and typesetter. If this is not set, then
          [1846]$MAKEINDEXCOM (the command line) is displayed.

   MAKEINDEXFLAGS
          General options passed to the makeindex generator for the TeX
          formatter and typesetter and the LaTeX structured formatter and
          typesetter.

   MAXLINELENGTH
          The maximum number of characters allowed on an external command
          line. On Win32 systems, link lines longer than this many
          characters are linked via a temporary file name.

   MIDL
          The Microsoft IDL compiler.

   MIDLCOM
          The command line used to pass files to the Microsoft IDL
          compiler.

   MIDLCOMSTR
          The string displayed when the Microsoft IDL compiler is called.
          If this is not set, then [1847]$MIDLCOM (the command line) is
          displayed.

   MIDLFLAGS
          General options passed to the Microsoft IDL compiler.

   MOSUFFIX
          Suffix used for MO files (default: '.mo'). See [1848]msgfmt tool
          and [1849]MOFiles builder.

   MSGFMT
          Absolute path to msgfmt(1) binary, found by Detect(). See
          [1850]msgfmt tool and [1851]MOFiles builder.

   MSGFMTCOM
          Complete command line to run msgfmt(1) program. See [1852]msgfmt
          tool and [1853]MOFiles builder.

   MSGFMTCOMSTR
          String to display when msgfmt(1) is invoked (default: '', which
          means ``print [1854]$MSGFMTCOM''). See [1855]msgfmt tool and
          [1856]MOFiles builder.

   MSGFMTFLAGS
          Additional flags to msgfmt(1). See [1857]msgfmt tool and
          [1858]MOFiles builder.

   MSGINIT
          Path to msginit(1) program (found via Detect()). See
          [1859]msginit tool and [1860]POInit builder.

   MSGINITCOM
          Complete command line to run msginit(1) program. See
          [1861]msginit tool and [1862]POInit builder.

   MSGINITCOMSTR
          String to display when msginit(1) is invoked (default: '', which
          means ``print [1863]$MSGINITCOM''). See [1864]msginit tool and
          [1865]POInit builder.

   MSGINITFLAGS
          List of additional flags to msginit(1) (default: []). See
          [1866]msginit tool and [1867]POInit builder.

   _MSGINITLOCALE
          Internal ``macro''. Computes locale (language) name based on
          target filename (default: '${TARGET.filebase}' ).

          See [1868]msginit tool and [1869]POInit builder.

   MSGMERGE
          Absolute path to msgmerge(1) binary as found by Detect(). See
          [1870]msgmerge tool and [1871]POUpdate builder.

   MSGMERGECOM
          Complete command line to run msgmerge(1) command. See
          [1872]msgmerge tool and [1873]POUpdate builder.

   MSGMERGECOMSTR
          String to be displayed when msgmerge(1) is invoked (default: '',
          which means ``print [1874]$MSGMERGECOM''). See [1875]msgmerge
          tool and [1876]POUpdate builder.

   MSGMERGEFLAGS
          Additional flags to msgmerge(1) command. See [1877]msgmerge tool
          and [1878]POUpdate builder.

   MSSDK_DIR
          The directory containing the Microsoft SDK (either Platform SDK
          or Windows SDK) to be used for compilation.

   MSSDK_VERSION
          The version string of the Microsoft SDK (either Platform SDK or
          Windows SDK) to be used for compilation. Supported versions
          include 6.1, 6.0A, 6.0, 2003R2 and 2003R1.

   MSVC_BATCH
          When set to any true value, specifies that SCons should batch
          compilation of object files when calling the Microsoft Visual
          C/C++ compiler. All compilations of source files from the same
          source directory that generate target files in a same output
          directory and were configured in SCons using the same
          construction environment will be built in a single call to the
          compiler. Only source files that have changed since their object
          files were built will be passed to each compiler invocation (via
          the [1879]$CHANGED_SOURCES construction variable). Any
          compilations where the object (target) file base name (minus the
          .obj) does not match the source file base name will be compiled
          separately.

   MSVC_NOTFOUND_POLICY
          Specify the scons behavior when the Microsoft Visual C/C++
          compiler is not detected.

          The $MSVC_NOTFOUND_POLICY specifies the scons behavior when no
          msvc versions are detected or when the requested msvc version is
          not detected.

          The valid values for $MSVC_NOTFOUND_POLICY and the corresponding
          scons behavior are:

        'Error' or 'Exception'
                Raise an exception when no msvc versions are detected or
                when the requested msvc version is not detected.

        'Warning' or 'Warn'
                Issue a warning and continue when no msvc versions are
                detected or when the requested msvc version is not
                detected. Depending on usage, this could result in build
                failure(s).

        'Ignore' or 'Suppress'
                Take no action and continue when no msvc versions are
                detected or when the requested msvc version is not
                detected. Depending on usage, this could result in build
                failure(s).

          Note: in addition to the camel case values shown above, lower
          case and upper case values are accepted as well.

          The $MSVC_NOTFOUND_POLICY is applied when any of the following
          conditions are satisfied:

          + $MSVC_VERSION is specified, the default tools list is
            implicitly defined (i.e., the tools list is not specified),
            and the default tools list contains one or more of the msvc
            tools.
          + $MSVC_VERSION is specified, the default tools list is
            explicitly specified (e.g., tools=['default']), and the
            default tools list contains one or more of the msvc tools.
          + A non-default tools list is specified that contains one or
            more of the msvc tools (e.g., tools=['msvc', 'mslink']).

          The $MSVC_NOTFOUND_POLICY is ignored when any of the following
          conditions are satisfied:

          + $MSVC_VERSION is not specified and the default tools list is
            implicitly defined (i.e., the tools list is not specified).
          + $MSVC_VERSION is not specified and the default tools list is
            explicitly specified (e.g., tools=['default']).
          + A non-default tool list is specified that does not contain any
            of the msvc tools (e.g., tools=['mingw']).

          Important usage details:

          + $MSVC_NOTFOUND_POLICY must be passed as an argument to the
            [1880]Environment constructor when an msvc tool (e.g.,
            [1881]msvc, [1882]msvs, etc.) is loaded via the default tools
            list or via a tools list passed to the [1883]Environment
            constructor. Otherwise, $MSVC_NOTFOUND_POLICY must be set
            before the first msvc tool is loaded into the environment.

          When $MSVC_NOTFOUND_POLICY is not specified, the default scons
          behavior is to issue a warning and continue subject to the
          conditions listed above. The default scons behavior may change
          in the future.

   MSVC_SCRIPT_ARGS
          Pass user-defined arguments to the Visual C++ batch file
          determined via autodetection.

          $MSVC_SCRIPT_ARGS is available for msvc batch file arguments
          that do not have first-class support via construction variables
          or when there is an issue with the appropriate construction
          variable validation. When available, it is recommended to use
          the appropriate construction variables (e.g.,
          [1884]$MSVC_TOOLSET_VERSION) rather than $MSVC_SCRIPT_ARGS
          arguments.

          The valid values for $MSVC_SCRIPT_ARGS are: None, a string, or a
          list of strings.

          The $MSVC_SCRIPT_ARGS value is converted to a scalar string
          (i.e., "flattened"). The resulting scalar string, if not empty,
          is passed as an argument to the msvc batch file determined via
          autodetection subject to the validation conditions listed below.

          $MSVC_SCRIPT_ARGS is ignored when the value is None and when the
          result from argument conversion is an empty string. The
          validation conditions below do not apply.

          An exception is raised when any of the following conditions are
          satisfied:

          + $MSVC_SCRIPT_ARGS is specified for Visual Studio 2013 and
            earlier.
          + Multiple SDK version arguments (e.g., '10.0.20348.0') are
            specified in $MSVC_SCRIPT_ARGS.
          + [1885]$MSVC_SDK_VERSION is specified and an SDK version
            argument (e.g., '10.0.20348.0') is specified in
            $MSVC_SCRIPT_ARGS. Multiple SDK version declarations via
            [1886]$MSVC_SDK_VERSION and $MSVC_SCRIPT_ARGS are not allowed.
          + Multiple toolset version arguments (e.g., '-vcvars_ver=14.29')
            are specified in $MSVC_SCRIPT_ARGS.
          + [1887]$MSVC_TOOLSET_VERSION is specified and a toolset version
            argument (e.g., '-vcvars_ver=14.29') is specified in
            $MSVC_SCRIPT_ARGS. Multiple toolset version declarations via
            [1888]$MSVC_TOOLSET_VERSION and $MSVC_SCRIPT_ARGS are not
            allowed.
          + Multiple spectre library arguments (e.g.,
            '-vcvars_spectre_libs=spectre') are specified in
            $MSVC_SCRIPT_ARGS.
          + [1889]$MSVC_SPECTRE_LIBS is enabled and a spectre library
            argument (e.g., '-vcvars_spectre_libs=spectre') is specified
            in $MSVC_SCRIPT_ARGS. Multiple spectre library declarations
            via [1890]$MSVC_SPECTRE_LIBS and $MSVC_SCRIPT_ARGS are not
            allowed.
          + Multiple UWP arguments (e.g., uwp or store) are specified in
            $MSVC_SCRIPT_ARGS.
          + [1891]$MSVC_UWP_APP is enabled and a UWP argument (e.g., uwp
            or store) is specified in $MSVC_SCRIPT_ARGS. Multiple UWP
            declarations via [1892]$MSVC_UWP_APP and $MSVC_SCRIPT_ARGS are
            not allowed.

          Example 1 - A Visual Studio 2022 build with an SDK version and a
          toolset version specified with a string argument:

env = Environment(MSVC_VERSION='14.3', MSVC_SCRIPT_ARGS='10.0.20348.0 -vcvars_ve
r=14.29.30133')

          Example 2 - A Visual Studio 2022 build with an SDK version and a
          toolset version specified with a list argument:

env = Environment(MSVC_VERSION='14.3', MSVC_SCRIPT_ARGS=['10.0.20348.0', '-vcvar
s_ver=14.29.30133'])

          Important usage details:

          + $MSVC_SCRIPT_ARGS must be passed as an argument to the
            [1893]Environment constructor when an msvc tool (e.g.,
            [1894]msvc, [1895]msvs, etc.) is loaded via the default tools
            list or via a tools list passed to the [1896]Environment
            constructor. Otherwise, $MSVC_SCRIPT_ARGS must be set before
            the first msvc tool is loaded into the environment.
          + Other than checking for multiple declarations as described
            above, $MSVC_SCRIPT_ARGS arguments are not validated.
          + Erroneous, inconsistent, and/or version incompatible
            $MSVC_SCRIPT_ARGS arguments are likely to result in build
            failures for reasons that are not readily apparent and may be
            difficult to diagnose. The burden is on the user to ensure
            that the arguments provided to the msvc batch file are valid,
            consistent and compatible with the version of msvc selected.

   MSVC_SCRIPTERROR_POLICY
          Specify the scons behavior when Microsoft Visual C/C++ batch
          file errors are detected.

          The $MSVC_SCRIPTERROR_POLICY specifies the scons behavior when
          msvc batch file errors are detected. When
          $MSVC_SCRIPTERROR_POLICY is not specified, the default scons
          behavior is to suppress msvc batch file error messages.

          The root cause of msvc build failures may be difficult to
          diagnose. In these situations, setting the scons behavior to
          issue a warning when msvc batch file errors are detected may
          produce additional diagnostic information.

          The valid values for $MSVC_SCRIPTERROR_POLICY and the
          corresponding scons behavior are:

        'Error' or 'Exception'
                Raise an exception when msvc batch file errors are
                detected.

        'Warning' or 'Warn'
                Issue a warning when msvc batch file errors are detected.

        'Ignore' or 'Suppress'
                Suppress msvc batch file error messages.

          Note: in addition to the camel case values shown above, lower
          case and upper case values are accepted as well.

          Example 1 - A Visual Studio 2022 build with user-defined script
          arguments:

env = environment(MSVC_VERSION='14.3', MSVC_SCRIPT_ARGS=['8.1', 'store', '-vcvar
s_ver=14.1'])
env.Program('hello', ['hello.c'], CCFLAGS='/MD', LIBS=['kernel32', 'user32', 'ru
ntimeobject'])

          Example 1 - Output fragment:

...
link /nologo /OUT:_build001\hello.exe kernel32.lib user32.lib runtimeobject.lib
_build001\hello.obj
LINK : fatal error LNK1104: cannot open file 'MSVCRT.lib'
...

          Example 2 - A Visual Studio 2022 build with user-defined script
          arguments and the script error policy set to issue a warning
          when msvc batch file errors are detected:

env = environment(MSVC_VERSION='14.3', MSVC_SCRIPT_ARGS=['8.1', 'store', '-vcvar
s_ver=14.1'], MSVC_SCRIPTERROR_POLICY='warn')
env.Program('hello', ['hello.c'], CCFLAGS='/MD', LIBS=['kernel32', 'user32', 'ru
ntimeobject'])

          Example 2 - Output fragment:

...
scons: warning: vc script errors detected:
[ERROR:vcvars.bat] The UWP Application Platform requires a Windows 10 SDK.
[ERROR:vcvars.bat] WindowsSdkDir = "C:\Program Files (x86)\Windows Kits\8.1\"
[ERROR:vcvars.bat] host/target architecture is not supported : { x64 , x64 }
...
link /nologo /OUT:_build001\hello.exe kernel32.lib user32.lib runtimeobject.lib
_build001\hello.obj
LINK : fatal error LNK1104: cannot open file 'MSVCRT.lib'

          Important usage details:

          + $MSVC_SCRIPTERROR_POLICY must be passed as an argument to the
            [1897]Environment constructor when an msvc tool (e.g.,
            [1898]msvc, [1899]msvs, etc.) is loaded via the default tools
            list or via a tools list passed to the [1900]Environment
            constructor. Otherwise, $MSVC_SCRIPTERROR_POLICY must be set
            before the first msvc tool is loaded into the environment.
          + Due to scons implementation details, not all Windows system
            environment variables are propagated to the environment in
            which the msvc batch file is executed. Depending on Visual
            Studio version and installation options, non-fatal msvc batch
            file error messages may be generated for ancillary tools which
            may not affect builds with the msvc compiler. For this reason,
            caution is recommended when setting the script error policy to
            raise an exception (e.g., 'Error').

   MSVC_SDK_VERSION
          Build with a specific version of the Microsoft Software
          Development Kit (SDK).

          The valid values for $MSVC_SDK_VERSION are: None or a string
          containing the requested SDK version (e.g., '10.0.20348.0').

          $MSVC_SDK_VERSION is ignored when the value is None and when the
          value is an empty string. The validation conditions below do not
          apply.

          An exception is raised when any of the following conditions are
          satisfied:

          + $MSVC_SDK_VERSION is specified for Visual Studio 2013 and
            earlier.
          + $MSVC_SDK_VERSION is specified and an SDK version argument is
            specified in [1901]$MSVC_SCRIPT_ARGS. Multiple SDK version
            declarations via $MSVC_SDK_VERSION and [1902]$MSVC_SCRIPT_ARGS
            are not allowed.
          + The $MSVC_SDK_VERSION specified does not match any of the
            supported formats:
               o '10.0.XXXXX.Y' [SDK 10.0]
               o '8.1' [SDK 8.1]
          + The system folder for the corresponding $MSVC_SDK_VERSION
            version is not found. The requested SDK version does not
            appear to be installed.
          + The $MSVC_SDK_VERSION version does not appear to support the
            requested platform type (i.e., UWP or Desktop). The requested
            SDK version platform type components do not appear to be
            installed.
          + The $MSVC_SDK_VERSION version is 8.1, the platform type is
            UWP, and the build tools selected are from Visual Studio 2017
            and later (i.e., [1903]$MSVC_VERSION must be '14.0' or
            [1904]$MSVC_TOOLSET_VERSION must be '14.0').

          Example 1 - A Visual Studio 2022 build with a specific Windows
          SDK version:

env = Environment(MSVC_VERSION='14.3', MSVC_SDK_VERSION='10.0.20348.0')

          Example 2 - A Visual Studio 2022 build with a specific SDK
          version for the Universal Windows Platform:

env = Environment(MSVC_VERSION='14.3', MSVC_SDK_VERSION='10.0.20348.0', MSVC_UWP
_APP=True)

          Important usage details:

          + $MSVC_SDK_VERSION must be passed as an argument to the
            [1905]Environment constructor when an msvc tool (e.g.,
            [1906]msvc, [1907]msvs, etc.) is loaded via the default tools
            list or via a tools list passed to the [1908]Environment
            constructor. Otherwise, $MSVC_SDK_VERSION must be set before
            the first msvc tool is loaded into the environment.
          + Should a SDK 10.0 version be installed that does not follow
            the naming scheme above, the SDK version will need to be
            specified via [1909]$MSVC_SCRIPT_ARGS until the version number
            validation format can be extended.
          + Should an exception be raised indicating that the SDK version
            is not found, verify that the requested SDK version is
            installed with the necessary platform type components.
          + There is a known issue with the Microsoft libraries when the
            target architecture is ARM64 and a Windows 11 SDK (version
            '10.0.22000.0' and later) is used with the v141 build tools
            and older v142 toolsets (versions '14.28.29333' and earlier).
            Should build failures arise with these combinations of
            settings due to unresolved symbols in the Microsoft libraries,
            $MSVC_SDK_VERSION may be employed to specify a Windows 10 SDK
            (e.g., '10.0.20348.0') for the build.

   MSVC_SPECTRE_LIBS
          Build with the spectre-mitigated Visual C++ libraries.

          The valid values for $MSVC_SPECTRE_LIBS are: True, False, or
          None.

          When $MSVC_SPECTRE_LIBS is enabled (i.e., True), the Visual C++
          environment will include the paths to the spectre-mitigated
          implementations of the Microsoft Visual C++ libraries.

          An exception is raised when any of the following conditions are
          satisfied:

          + $MSVC_SPECTRE_LIBS is enabled for Visual Studio 2015 and
            earlier.
          + $MSVC_SPECTRE_LIBS is enabled and a spectre library argument
            is specified in [1910]$MSVC_SCRIPT_ARGS. Multiple spectre
            library declarations via $MSVC_SPECTRE_LIBS and
            [1911]$MSVC_SCRIPT_ARGS are not allowed.
          + $MSVC_SPECTRE_LIBS is enabled and the platform type is UWP.
            There are no spectre-mitigated libraries for Universal Windows
            Platform (UWP) applications or components.

          Example - A Visual Studio 2022 build with spectre mitigated
          Visual C++ libraries:

env = Environment(MSVC_VERSION='14.3', MSVC_SPECTRE_LIBS=True)

          Important usage details:

          + $MSVC_SPECTRE_LIBS must be passed as an argument to the
            [1912]Environment constructor when an msvc tool (e.g.,
            [1913]msvc, [1914]msvs, etc.) is loaded via the default tools
            list or via a tools list passed to the [1915]Environment
            constructor. Otherwise, $MSVC_SPECTRE_LIBS must be set before
            the first msvc tool is loaded into the environment.
          + Additional compiler switches (e.g., /Qspectre) are necessary
            for including spectre mitigations when building user
            artifacts. Refer to the Visual Studio documentation for
            details.
          + The existence of the spectre libraries host architecture and
            target architecture folders are not verified when
            $MSVC_SPECTRE_LIBS is enabled which could result in build
            failures. The burden is on the user to ensure the requisite
            libraries with spectre mitigations are installed.

   MSVC_TOOLSET_VERSION
          Build with a specific Visual C++ toolset version.

          Specifying $MSVC_TOOLSET_VERSION does not affect the
          autodetection and selection of msvc instances. The
          $MSVC_TOOLSET_VERSION is applied after an msvc instance is
          selected. This could be the default version of msvc if
          [1916]$MSVC_VERSION is not specified.

          The valid values for $MSVC_TOOLSET_VERSION are: None or a string
          containing the requested toolset version (e.g., '14.29').

          $MSVC_TOOLSET_VERSION is ignored when the value is None and when
          the value is an empty string. The validation conditions below do
          not apply.

          An exception is raised when any of the following conditions are
          satisfied:

          + $MSVC_TOOLSET_VERSION is specified for Visual Studio 2015 and
            earlier.
          + $MSVC_TOOLSET_VERSION is specified and a toolset version
            argument is specified in [1917]$MSVC_SCRIPT_ARGS. Multiple
            toolset version declarations via $MSVC_TOOLSET_VERSION and
            [1918]$MSVC_SCRIPT_ARGS are not allowed.
          + The $MSVC_TOOLSET_VERSION specified does not match any of the
            supported formats:
               o 'XX.Y'
               o 'XX.YY'
               o 'XX.YY.ZZZZZ'
               o 'XX.YY.Z' to 'XX.YY.ZZZZ' [scons extension not directly
                 supported by the msvc batch files and may be removed in
                 the future]
               o 'XX.YY.ZZ.N' [SxS format]
               o 'XX.YY.ZZ.NN' [SxS format]
          + The major msvc version prefix (i.e., 'XX.Y') of the
            $MSVC_TOOLSET_VERSION specified is for Visual Studio 2013 and
            earlier (e.g., '12.0').
          + The major msvc version prefix (i.e., 'XX.Y') of the
            $MSVC_TOOLSET_VERSION specified is greater than the msvc
            version selected (e.g., '99.0').
          + A system folder for the corresponding $MSVC_TOOLSET_VERSION
            version is not found. The requested toolset version does not
            appear to be installed.

          Toolset selection details:

          + When $MSVC_TOOLSET_VERSION is not an SxS version number or a
            full toolset version number: the first toolset version, ranked
            in descending order, that matches the $MSVC_TOOLSET_VERSION
            prefix is selected.
          + When $MSVC_TOOLSET_VERSION is specified using the major msvc
            version prefix (i.e., 'XX.Y') and the major msvc version is
            that of the latest release of Visual Studio, the selected
            toolset version may not be the same as the default Visual C++
            toolset version.
            In the latest release of Visual Studio, the default Visual C++
            toolset version is not necessarily the toolset with the
            largest version number.

          Example 1 - A default Visual Studio build with a partial toolset
          version specified:

env = Environment(MSVC_TOOLSET_VERSION='14.2')

          Example 2 - A default Visual Studio build with a partial toolset
          version specified:

env = Environment(MSVC_TOOLSET_VERSION='14.29')

          Example 3 - A Visual Studio 2022 build with a full toolset
          version specified:

env = Environment(MSVC_VERSION='14.3', MSVC_TOOLSET_VERSION='14.29.30133')

          Example 4 - A Visual Studio 2022 build with an SxS toolset
          version specified:

env = Environment(MSVC_VERSION='14.3', MSVC_TOOLSET_VERSION='14.29.16.11')

          Important usage details:

          + $MSVC_TOOLSET_VERSION must be passed as an argument to the
            [1919]Environment constructor when an msvc tool (e.g.,
            [1920]msvc, [1921]msvs, etc.) is loaded via the default tools
            list or via a tools list passed to the [1922]Environment
            constructor. Otherwise, $MSVC_TOOLSET_VERSION must be set
            before the first msvc tool is loaded into the environment.
          + The existence of the toolset host architecture and target
            architecture folders are not verified when
            $MSVC_TOOLSET_VERSION is specified which could result in build
            failures. The burden is on the user to ensure the requisite
            toolset target architecture build tools are installed.

   MSVC_USE_SCRIPT
          Use a batch script to set up the Microsoft Visual C++ compiler.

          If set to the name of a Visual Studio .bat file (e.g.
          vcvars.bat), SCons will run that batch file instead of the
          auto-detected one, and extract the relevant variables from the
          result (typically %INCLUDE%, %LIB%, and %PATH%) for supplying to
          the build. This can be useful to force the use of a compiler
          version that SCons does not detect. [1923]$MSVC_USE_SCRIPT_ARGS
          provides arguments passed to this script.

          Setting $MSVC_USE_SCRIPT to None bypasses the Visual Studio
          autodetection entirely; use this if you are running SCons in a
          Visual Studio cmd window and importing the shell's environment
          variables - that is, if you are sure everything is set correctly
          already and you don't want SCons to change anything.

          $MSVC_USE_SCRIPT ignores [1924]$MSVC_VERSION and
          [1925]$TARGET_ARCH.

   MSVC_USE_SCRIPT_ARGS
          Provides arguments passed to the script [1926]$MSVC_USE_SCRIPT.

   MSVC_USE_SETTINGS
          Use a dictionary to set up the Microsoft Visual C++ compiler.

          $MSVC_USE_SETTINGS is ignored when [1927]$MSVC_USE_SCRIPT is
          defined and/or when $MSVC_USE_SETTINGS is set to None.

          The dictionary is used to populate the environment with the
          relevant variables (typically %INCLUDE%, %LIB%, and %PATH%) for
          supplying to the build. This can be useful to force the use of a
          compiler environment that SCons does not configure correctly.
          This is an alternative to manually configuring the environment
          when bypassing Visual Studio autodetection entirely by setting
          [1928]$MSVC_USE_SCRIPT to None.

          Here is an example of configuring a build environment using the
          Microsoft Visual C/C++ compiler included in the Microsoft SDK on
          a 64-bit host and building for a 64-bit architecture:

# Microsoft SDK 6.0 (MSVC 8.0): 64-bit host and 64-bit target
msvc_use_settings = {
    "PATH": [
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\VC\\Bin\\x64",
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\Bin\\x64",
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\Bin",
        "C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727",
        "C:\\Windows\\system32",
        "C:\\Windows",
        "C:\\Windows\\System32\\Wbem",
        "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\"
    ],
    "INCLUDE": [
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\VC\\Include",
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\VC\\Include\\Sys",
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\Include",
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\Include\\gl",
    ],
    "LIB": [
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\VC\\Lib\\x64",
        "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\Lib\\x64",
    ],
    "LIBPATH": [],
    "VSCMD_ARG_app_plat": [],
    "VCINSTALLDIR": [],
    "VCToolsInstallDir": []
}

# Specifying MSVC_VERSION is recommended
env = Environment(MSVC_VERSION='8.0', MSVC_USE_SETTINGS=msvc_use_settings)

          Important usage details:

          + $MSVC_USE_SETTINGS must be passed as an argument to the
            [1929]Environment constructor when an msvc tool (e.g.,
            [1930]msvc, [1931]msvs, etc.) is loaded via the default tools
            list or via a tools list passed to the [1932]Environment
            constructor. Otherwise, $MSVC_USE_SETTINGS must be set before
            the first msvc tool is loaded into the environment.
          + The dictionary content requirements are based on the internal
            msvc implementation and therefore may change at any time. The
            burden is on the user to ensure the dictionary contents are
            minimally sufficient to ensure successful builds.

   MSVC_UWP_APP
          Build with the Universal Windows Platform (UWP) application
          Visual C++ libraries.

          The valid values for $MSVC_UWP_APP are: True, '1', False, '0',
          or None.

          When $MSVC_UWP_APP is enabled (i.e., True or '1'), the Visual
          C++ environment will be set up to point to the Windows Store
          compatible libraries and Visual C++ runtimes. In doing so, any
          libraries that are built will be able to be used in a UWP App
          and published to the Windows Store.

          An exception is raised when any of the following conditions are
          satisfied:

          + $MSVC_UWP_APP is enabled for Visual Studio 2013 and earlier.
          + $MSVC_UWP_APP is enabled and a UWP argument is specified in
            [1933]$MSVC_SCRIPT_ARGS. Multiple UWP declarations via
            $MSVC_UWP_APP and [1934]$MSVC_SCRIPT_ARGS are not allowed.

          Example - A Visual Studio 2022 build for the Universal Windows
          Platform:

env = Environment(MSVC_VERSION='14.3', MSVC_UWP_APP=True)

          Important usage details:

          + $MSVC_UWP_APP must be passed as an argument to the
            [1935]Environment constructor when an msvc tool (e.g.,
            [1936]msvc, [1937]msvs, etc.) is loaded via the default tools
            list or via a tools list passed to the [1938]Environment
            constructor. Otherwise, $MSVC_UWP_APP must be set before the
            first msvc tool is loaded into the environment.
          + The existence of the UWP libraries is not verified when
            $MSVC_UWP_APP is enabled which could result in build failures.
            The burden is on the user to ensure the requisite UWP
            libraries are installed.

   MSVC_VERSION
          Sets the preferred version of Microsoft Visual C/C++ to use.

          If $MSVC_VERSION is not set, SCons will (by default) select the
          latest version of Visual C/C++ installed on your system. If the
          specified version isn't installed, tool initialization will
          fail.

          $MSVC_VERSION must be passed as an argument to the
          [1939]Environment constructor when an msvc tool (e.g.,
          [1940]msvc, [1941]msvs, etc.) is loaded via the default tools
          list or via a tools list passed to the [1942]Environment
          constructor. Otherwise, $MSVC_VERSION must be set before the
          first msvc tool is loaded into the environment.

          Valid values for Windows are 14.3, 14.2, 14.1, 14.1Exp, 14.0,
          14.0Exp, 12.0, 12.0Exp, 11.0, 11.0Exp, 10.0, 10.0Exp, 9.0,
          9.0Exp, 8.0, 8.0Exp, 7.1, 7.0, and 6.0. Versions ending in Exp
          refer to "Express" or "Express for Desktop" editions.

   MSVS
          When the Microsoft Visual Studio tools are initialized, they set
          up this dictionary with the following keys:

        VERSION
                the version of MSVS being used (can be set via
                [1943]$MSVS_VERSION)

        VERSIONS
                the available versions of MSVS installed

        VCINSTALLDIR
                installed directory of Visual C++

        VSINSTALLDIR
                installed directory of Visual Studio

        FRAMEWORKDIR
                installed directory of the .NET framework

        FRAMEWORKVERSIONS
                list of installed versions of the .NET framework, sorted
                latest to oldest.

        FRAMEWORKVERSION
                latest installed version of the .NET framework

        FRAMEWORKSDKDIR
                installed location of the .NET SDK.

        PLATFORMSDKDIR
                installed location of the Platform SDK.

        PLATFORMSDK_MODULES
                dictionary of installed Platform SDK modules, where the
                dictionary keys are keywords for the various modules, and
                the values are 2-tuples where the first is the release
                date, and the second is the version number.

          If a value is not set, it was not available in the registry.

   MSVS_ARCH
          Sets the architecture for which the generated project(s) should
          build.

          The default value is x86. amd64 is also supported by SCons for
          most Visual Studio versions. Since Visual Studio 2015 arm is
          supported, and since Visual Studio 2017 arm64 is supported.
          Trying to set $MSVS_ARCH to an architecture that's not supported
          for a given Visual Studio version will generate an error.

   MSVS_PROJECT_GUID
          The string placed in a generated Microsoft Visual Studio project
          file as the value of the ProjectGUID attribute. There is no
          default value. If not defined, a new GUID is generated.

   MSVS_SCC_AUX_PATH
          The path name placed in a generated Microsoft Visual Studio
          project file as the value of the SccAuxPath attribute if the
          MSVS_SCC_PROVIDER construction variable is also set. There is no
          default value.

   MSVS_SCC_CONNECTION_ROOT
          The root path of projects in your SCC workspace, i.e the path
          under which all project and solution files will be generated. It
          is used as a reference path from which the relative paths of the
          generated Microsoft Visual Studio project and solution files are
          computed. The relative project file path is placed as the value
          of the SccLocalPath attribute of the project file and as the
          values of the SccProjectFilePathRelativizedFromConnection[i]
          (where [i] ranges from 0 to the number of projects in the
          solution) attributes of the GlobalSection(SourceCodeControl)
          section of the Microsoft Visual Studio solution file. Similarly
          the relative solution file path is placed as the values of the
          SccLocalPath[i] (where [i] ranges from 0 to the number of
          projects in the solution) attributes of the
          GlobalSection(SourceCodeControl) section of the Microsoft Visual
          Studio solution file. This is used only if the MSVS_SCC_PROVIDER
          construction variable is also set. The default value is the
          current working directory.

   MSVS_SCC_PROJECT_NAME
          The project name placed in a generated Microsoft Visual Studio
          project file as the value of the SccProjectName attribute if the
          MSVS_SCC_PROVIDER construction variable is also set. In this
          case the string is also placed in the SccProjectName0 attribute
          of the GlobalSection(SourceCodeControl) section of the Microsoft
          Visual Studio solution file. There is no default value.

   MSVS_SCC_PROVIDER
          The string placed in a generated Microsoft Visual Studio project
          file as the value of the SccProvider attribute. The string is
          also placed in the SccProvider0 attribute of the
          GlobalSection(SourceCodeControl) section of the Microsoft Visual
          Studio solution file. There is no default value.

   MSVS_VERSION
          Sets the preferred version of Microsoft Visual Studio to use.

          If $MSVS_VERSION is not set, SCons will (by default) select the
          latest version of Visual Studio installed on your system. So, if
          you have version 6 and version 7 (MSVS .NET) installed, it will
          prefer version 7. You can override this by specifying the
          MSVS_VERSION variable in the Environment initialization, setting
          it to the appropriate version ('6.0' or '7.0', for example). If
          the specified version isn't installed, tool initialization will
          fail.

          This is obsolete: use $MSVC_VERSION instead. If $MSVS_VERSION is
          set and $MSVC_VERSION is not, $MSVC_VERSION will be set
          automatically to $MSVS_VERSION. If both are set to different
          values, scons will raise an error.

   MSVSBUILDCOM
          The build command line placed in a generated Microsoft Visual
          Studio project file. The default is to have Visual Studio invoke
          SCons with any specified build targets.

   MSVSCLEANCOM
          The clean command line placed in a generated Microsoft Visual
          Studio project file. The default is to have Visual Studio invoke
          SCons with the -c option to remove any specified targets.

   MSVSENCODING
          The encoding string placed in a generated Microsoft Visual
          Studio project file. The default is encoding Windows-1252.

   MSVSPROJECTCOM
          The action used to generate Microsoft Visual Studio project
          files.

   MSVSPROJECTSUFFIX
          The suffix used for Microsoft Visual Studio project (DSP) files.
          The default value is .vcproj when using Visual Studio version
          7.x (.NET) or later version, and .dsp when using earlier
          versions of Visual Studio.

   MSVSREBUILDCOM
          The rebuild command line placed in a generated Microsoft Visual
          Studio project file. The default is to have Visual Studio invoke
          SCons with any specified rebuild targets.

   MSVSSCONS
          The SCons used in generated Microsoft Visual Studio project
          files. The default is the version of SCons being used to
          generate the project file.

   MSVSSCONSCOM
          The default SCons command used in generated Microsoft Visual
          Studio project files.

   MSVSSCONSCRIPT
          The sconscript file (that is, SConstruct or SConscript file)
          that will be invoked by Visual Studio project files (through the
          [1944]$MSVSSCONSCOM variable). The default is the same
          sconscript file that contains the call to MSVSProject to build
          the project file.

   MSVSSCONSFLAGS
          The SCons flags used in generated Microsoft Visual Studio
          project files.

   MSVSSOLUTIONCOM
          The action used to generate Microsoft Visual Studio solution
          files.

   MSVSSOLUTIONSUFFIX
          The suffix used for Microsoft Visual Studio solution (DSW)
          files. The default value is .sln when using Visual Studio
          version 7.x (.NET), and .dsw when using earlier versions of
          Visual Studio.

   MT
          The program used on Windows systems to embed manifests into DLLs
          and EXEs. See also [1945]$WINDOWS_EMBED_MANIFEST.

   MTEXECOM
          The Windows command line used to embed manifests into
          executables. See also [1946]$MTSHLIBCOM.

   MTFLAGS
          Flags passed to the [1947]$MT manifest embedding program
          (Windows only).

   MTSHLIBCOM
          The Windows command line used to embed manifests into shared
          libraries (DLLs). See also [1948]$MTEXECOM.

   MWCW_VERSION
          The version number of the MetroWerks CodeWarrior C compiler to
          be used.

   MWCW_VERSIONS
          A list of installed versions of the MetroWerks CodeWarrior C
          compiler on this system.

   NAME
          Specfies the name of the project to package.

          See the [1949]Package builder.

   NINJA_ALIAS_NAME
          The name of the alias target which will cause SCons to create
          the ninja build file, and then (optionally) run ninja. The
          default value is generate-ninja.

   NINJA_CMD_ARGS
          A string which will pass arguments through SCons to the ninja
          command when scons executes ninja. Has no effect if
          $NINJA_DISABLE_AUTO_RUN is set.

          This value can also be passed on the command line:

scons NINJA_CMD_ARGS=-v
or
scons NINJA_CMD_ARGS="-v -j 3"

   NINJA_COMPDB_EXPAND
          Boolean value to instruct ninja to expand the command line
          arguments normally put into response files. If true, prevents
          unexpanded lines in the compilation database like "gcc
          @rsp_file" and instead yields expanded lines like "gcc -c -o
          myfile.o myfile.c -Ia -DXYZ".

          Ninja's compdb tool added the -x flag in Ninja V1.9.0

   NINJA_DEPFILE_PARSE_FORMAT
          Determines the type of format ninja should expect when parsing
          header include depfiles. Can be msvc, gcc, or clang. The msvc
          option corresponds to /showIncludes format, and gcc or clang
          correspond to -MMD -MF.

   NINJA_DIR
          The builddir value. Propagates directly into the generated ninja
          build file. From Ninja's docs: " A directory for some Ninja
          output files. ... (You can also store other build output in this
          directory.) " The default value is .ninja.

   NINJA_DISABLE_AUTO_RUN
          Boolean. Default: False. If true, SCons will not run ninja
          automatically after creating the ninja build file.

          If not explicitly set, this will be set to True if
          --disable_execute_ninja or SetOption('disable_execute_ninja',
          True) is seen.

   NINJA_ENV_VAR_CACHE
          A string that sets the environment for any environment variables
          that differ between the OS environment and the SCons execution
          environment.

          It will be compatible with the default shell of the operating
          system.

          If not explicitly set, SCons will generate this dynamically from
          the execution environment stored in the current construction
          environment (e.g. env['ENV']) where those values differ from the
          existing shell..

   NINJA_FILE_NAME
          The filename for the generated Ninja build file. The default is
          ninja.build.

   NINJA_FORCE_SCONS_BUILD
          If true, causes the build nodes to callback to scons instead of
          using ninja to build them. This is intended to be passed to the
          environment on the builder invocation. It is useful if you have
          a build node which does something which is not easily translated
          into ninja.

   NINJA_GENERATED_SOURCE_ALIAS_NAME
          A string matching the name of a user defined alias which
          represents a list of all generated sources. This will prevent
          the auto-detection of generated sources from
          $NINJA_GENERATED_SOURCE_SUFFIXES. Then all other source files
          will be made to depend on this in the ninja build file, forcing
          the generated sources to be built first.

   NINJA_GENERATED_SOURCE_SUFFIXES
          The list of source file suffixes which are generated by SCons
          build steps. All source files which match these suffixes will be
          added to the _generated_sources alias in the output ninja build
          file. Then all other source files will be made to depend on this
          in the ninja build file, forcing the generated sources to be
          built first.

   NINJA_MSVC_DEPS_PREFIX
          The msvc_deps_prefix string. Propagates directly into the
          generated ninja build file. From Ninja's docs: "defines the
          string which should be stripped from msvc's /showIncludes
          output"

   NINJA_POOL
          Set the ninja_pool for this or all targets in scope for this env
          var.

   NINJA_REGENERATE_DEPS
          A generator function used to create a ninja depfile which
          includes all the files which would require SCons to be invoked
          if they change. Or a list of said files.

   _NINJA_REGENERATE_DEPS_FUNC
          Internal value used to specify the function to call with
          argument env to generate the list of files which if changed
          would require the ninja build file to be regenerated.

   NINJA_SCONS_DAEMON_KEEP_ALIVE
          The number of seconds for the SCons deamon launched by ninja to
          stay alive. (Default: 180000)

   NINJA_SCONS_DAEMON_PORT
          The TCP/IP port for the SCons daemon to listen on. NOTE: You
          cannot use a port already being listened to on your build
          machine. (Default: random number between 10000,60000)

   NINJA_SYNTAX
          The path to a custom ninja_syntax.py file which is used in
          generation. The tool currently assumes you have ninja installed
          as a Python module and grabs the syntax file from that
          installation if $NINJA_SYNTAX is not explicitly set.

   no_import_lib
          When set to non-zero, suppresses creation of a corresponding
          Windows static import lib by the [1950]SharedLibrary builder
          when used with MinGW, Microsoft Visual Studio or Metrowerks.
          This also suppresses creation of an export (.exp) file when
          using Microsoft Visual Studio.

   OBJPREFIX
          The prefix used for (static) object file names.

   OBJSUFFIX
          The suffix used for (static) object file names.

   PACKAGEROOT
          Specifies the directory where all files in resulting archive
          will be placed if applicable. The default value is
          "$NAME-$VERSION".

          See the [1951]Package builder.

   PACKAGETYPE
          Selects the package type to build when using the [1952]Package
          builder. May be a string or list of strings. See the
          docuentation for the builder for the currently supported types.

          $PACKAGETYPE may be overridden with the --package-type command
          line option.

          See the [1953]Package builder.

   PACKAGEVERSION
          The version of the package (not the underlying project). This is
          currently only used by the rpm packager and should reflect
          changes in the packaging, not the underlying project code
          itself.

          See the [1954]Package builder.

   PCH
          The Microsoft Visual C++ precompiled header that will be used
          when compiling object files. This variable is ignored by tools
          other than Microsoft Visual C++. When this variable is defined
          SCons will add options to the compiler command line to cause it
          to use the precompiled header, and will also set up the
          dependencies for the PCH file. Example:

env['PCH'] = File('StdAfx.pch')

   PCHCOM
          The command line used by the [1955]PCH builder to generated a
          precompiled header.

   PCHCOMSTR
          The string displayed when generating a precompiled header. If
          this is not set, then [1956]$PCHCOM (the command line) is
          displayed.

   PCHPDBFLAGS
          A construction variable that, when expanded, adds the /yD flag
          to the command line only if the [1957]$PDB construction variable
          is set.

   PCHSTOP
          This variable specifies how much of a source file is
          precompiled. This variable is ignored by tools other than
          Microsoft Visual C++, or when the PCH variable is not being
          used. When this variable is define it must be a string that is
          the name of the header that is included at the end of the
          precompiled portion of the source files, or the empty string if
          the "#pragma hrdstop" construct is being used:

env['PCHSTOP'] = 'StdAfx.h'

   PDB
          The Microsoft Visual C++ PDB file that will store debugging
          information for object files, shared libraries, and programs.
          This variable is ignored by tools other than Microsoft Visual
          C++. When this variable is defined SCons will add options to the
          compiler and linker command line to cause them to generate
          external debugging information, and will also set up the
          dependencies for the PDB file. Example:

env['PDB'] = 'hello.pdb'

          The Visual C++ compiler switch that SCons uses by default to
          generate PDB information is /Z7. This works correctly with
          parallel (-j) builds because it embeds the debug information in
          the intermediate object files, as opposed to sharing a single
          PDB file between multiple object files. This is also the only
          way to get debug information embedded into a static library.
          Using the /Zi instead may yield improved link-time performance,
          although parallel builds will no longer work. You can generate
          PDB files with the /Zi switch by overriding the default
          [1958]$CCPDBFLAGS variable; see the entry for that variable for
          specific examples.

   PDFLATEX
          The pdflatex utility.

   PDFLATEXCOM
          The command line used to call the pdflatex utility.

   PDFLATEXCOMSTR
          The string displayed when calling the pdflatex utility. If this
          is not set, then [1959]$PDFLATEXCOM (the command line) is
          displayed.

env = Environment(PDFLATEX;COMSTR = "Building $TARGET from LaTeX input $SOURCES"
)

   PDFLATEXFLAGS
          General options passed to the pdflatex utility.

   PDFPREFIX
          The prefix used for PDF file names.

   PDFSUFFIX
          The suffix used for PDF file names.

   PDFTEX
          The pdftex utility.

   PDFTEXCOM
          The command line used to call the pdftex utility.

   PDFTEXCOMSTR
          The string displayed when calling the pdftex utility. If this is
          not set, then [1960]$PDFTEXCOM (the command line) is displayed.

env = Environment(PDFTEXCOMSTR = "Building $TARGET from TeX input $SOURCES")

   PDFTEXFLAGS
          General options passed to the pdftex utility.

   PKGCHK
          On Solaris systems, the package-checking program that will be
          used (along with $PKGINFO) to look for installed versions of the
          Sun PRO C++ compiler. The default is /usr/sbin/pgkchk.

   PKGINFO
          On Solaris systems, the package information program that will be
          used (along with $PKGCHK) to look for installed versions of the
          Sun PRO C++ compiler. The default is pkginfo.

   PLATFORM
          The name of the platform used to create this construction
          environment. SCons sets this when initializing the platform,
          which by default is auto-detected (see the platform argument to
          [1961]Environment).

env = Environment(tools=[])
if env['PLATFORM'] == 'cygwin':
    Tool('mingw')(env)
else:
    Tool('msvc')(env)

   POAUTOINIT
          The $POAUTOINIT variable, if set to True (on non-zero numeric
          value), let the [1962]msginit tool to automatically initialize
          missing PO files with msginit(1). This applies to both,
          [1963]POInit and [1964]POUpdate builders (and others that use
          any of them).

   POCREATE_ALIAS
          Common alias for all PO files created with POInit builder
          (default: 'po-create'). See [1965]msginit tool and [1966]POInit
          builder.

   POSUFFIX
          Suffix used for PO files (default: '.po') See [1967]msginit tool
          and [1968]POInit builder.

   POTDOMAIN
          The $POTDOMAIN defines default domain, used to generate POT
          filename as $POTDOMAIN.pot when no POT file name is provided by
          the user. This applies to [1969]POTUpdate, [1970]POInit and
          [1971]POUpdate builders (and builders, that use them, e.g.
          Translate). Normally (if $POTDOMAIN is not defined), the
          builders use messages.pot as default POT file name.

   POTSUFFIX
          Suffix used for PO Template files (default: '.pot'). See
          [1972]xgettext tool and [1973]POTUpdate builder.

   POTUPDATE_ALIAS
          Name of the common phony target for all PO Templates created
          with [1974]POUpdate (default: 'pot-update'). See [1975]xgettext
          tool and [1976]POTUpdate builder.

   POUPDATE_ALIAS
          Common alias for all PO files being defined with [1977]POUpdate
          builder (default: 'po-update'). See [1978]msgmerge tool and
          [1979]POUpdate builder.

   PRINT_CMD_LINE_FUNC
          A Python function used to print the command lines as they are
          executed (assuming command printing is not disabled by the -q or
          -s options or their equivalents). The function must accept four
          arguments: s, target, source and env. s is a string showing the
          command being executed, target, is the target being built (file
          node, list, or string name(s)), source, is the source(s) used
          (file node, list, or string name(s)), and env is the environment
          being used.

          The function must do the printing itself. The default
          implementation, used if this variable is not set or is None, is
          to just print the string, as in:

def print_cmd_line(s, target, source, env):
    sys.stdout.write(s + "\n")

          Here is an example of a more interesting function:

def print_cmd_line(s, target, source, env):
    sys.stdout.write(
        "Building %s -> %s...\n"
        % (
            ' and '.join([str(x) for x in source]),
            ' and '.join([str(x) for x in target]),
        )
    )

env = Environment(PRINT_CMD_LINE_FUNC=print_cmd_line)
env.Program('foo', ['foo.c', 'bar.c'])

          This prints:

...
scons: Building targets ...
Building bar.c -> bar.o...
Building foo.c -> foo.o...
Building foo.o and bar.o -> foo...
scons: done building targets.

          Another example could be a function that logs the actual
          commands to a file.

   PROGEMITTER
          Contains the emitter specification for the [1980]Program
          builder. The manpage section "Builder Objects" contains general
          information on specifying emitters.

   PROGPREFIX
          The prefix used for executable file names.

   PROGSUFFIX
          The suffix used for executable file names.

   PSCOM
          The command line used to convert TeX DVI files into a PostScript
          file.

   PSCOMSTR
          The string displayed when a TeX DVI file is converted into a
          PostScript file. If this is not set, then [1981]$PSCOM (the
          command line) is displayed.

   PSPREFIX
          The prefix used for PostScript file names.

   PSSUFFIX
          The prefix used for PostScript file names.

   QT_AUTOSCAN
          Turn off scanning for mocable files. Use the [1982]Moc Builder
          to explicitly specify files to run moc on.

   QT_BINPATH
          The path where the Qt binaries are installed. The default value
          is '[1983]$QTDIR/bin'.

   QT_CPPPATH
          The path where the Qt header files are installed. The default
          value is '[1984]$QTDIR/include'. Note: If you set this variable
          to None, the tool won't change the [1985]$CPPPATH construction
          variable.

   QT_DEBUG
          Prints lots of debugging information while scanning for moc
          files.

   QT_LIB
          Default value is 'qt'. You may want to set this to 'qt-mt'.
          Note: If you set this variable to None, the tool won't change
          the [1986]$LIBS variable.

   QT_LIBPATH
          The path where the Qt libraries are installed. The default value
          is '[1987]$QTDIR/lib'. Note: If you set this variable to None,
          the tool won't change the [1988]$LIBPATH construction variable.

   QT_MOC
          Default value is '[1989]$QT_BINPATH/moc'.

   QT_MOCCXXPREFIX
          Default value is ''. Prefix for moc output files when source is
          a C++ file.

   QT_MOCCXXSUFFIX
          Default value is '.moc'. Suffix for moc output files when source
          is a C++ file.

   QT_MOCFROMCXXCOM
          Command to generate a moc file from a C++ file.

   QT_MOCFROMCXXCOMSTR
          The string displayed when generating a moc file from a C++ file.
          If this is not set, then [1990]$QT_MOCFROMCXXCOM (the command
          line) is displayed.

   QT_MOCFROMCXXFLAGS
          Default value is '-i'. These flags are passed to moc when
          moccing a C++ file.

   QT_MOCFROMHCOM
          Command to generate a moc file from a header.

   QT_MOCFROMHCOMSTR
          The string displayed when generating a moc file from a C++ file.
          If this is not set, then [1991]$QT_MOCFROMHCOM (the command
          line) is displayed.

   QT_MOCFROMHFLAGS
          Default value is ''. These flags are passed to moc when moccing
          a header file.

   QT_MOCHPREFIX
          Default value is 'moc_'. Prefix for moc output files when source
          is a header.

   QT_MOCHSUFFIX
          Default value is '[1992]$CXXFILESUFFIX'. Suffix for moc output
          files when source is a header.

   QT_UIC
          Default value is '[1993]$QT_BINPATH/uic'.

   QT_UICCOM
          Command to generate header files from .ui files.

   QT_UICCOMSTR
          The string displayed when generating header files from .ui
          files. If this is not set, then [1994]$QT_UICCOM (the command
          line) is displayed.

   QT_UICDECLFLAGS
          Default value is ''. These flags are passed to uic when creating
          a header file from a .ui file.

   QT_UICDECLPREFIX
          Default value is ''. Prefix for uic generated header files.

   QT_UICDECLSUFFIX
          Default value is '.h'. Suffix for uic generated header files.

   QT_UICIMPLFLAGS
          Default value is ''. These flags are passed to uic when creating
          a C++ file from a .ui file.

   QT_UICIMPLPREFIX
          Default value is 'uic_'. Prefix for uic generated implementation
          files.

   QT_UICIMPLSUFFIX
          Default value is '[1995]$CXXFILESUFFIX'. Suffix for uic
          generated implementation files.

   QT_UISUFFIX
          Default value is '.ui'. Suffix of designer input files.

   QTDIR
          The path to the Qt installation to build against. If not already
          set, [1996]qt tool tries to obtain this from os.environ; if not
          found there, it tries to make a guess.

   RANLIB
          The archive indexer.

   RANLIBCOM
          The command line used to index a static library archive.

   RANLIBCOMSTR
          The string displayed when a static library archive is indexed.
          If this is not set, then [1997]$RANLIBCOM (the command line) is
          displayed.

env = Environment(RANLIBCOMSTR = "Indexing $TARGET")

   RANLIBFLAGS
          General options passed to the archive indexer.

   RC
          The resource compiler used to build a Microsoft Visual C++
          resource file.

   RCCOM
          The command line used to build a Microsoft Visual C++ resource
          file.

   RCCOMSTR
          The string displayed when invoking the resource compiler to
          build a Microsoft Visual C++ resource file. If this is not set,
          then [1998]$RCCOM (the command line) is displayed.

   RCFLAGS
          The flags passed to the resource compiler by the [1999]RES
          builder.

   RCINCFLAGS
          An automatically-generated construction variable containing the
          command-line options for specifying directories to be searched
          by the resource compiler. The value of $RCINCFLAGS is created by
          respectively prepending and appending [2000]$RCINCPREFIX and
          [2001]$RCINCSUFFIX to the beginning and end of each directory in
          [2002]$CPPPATH.

   RCINCPREFIX
          The prefix (flag) used to specify an include directory on the
          resource compiler command line. This will be prepended to the
          beginning of each directory in the [2003]$CPPPATH construction
          variable when the [2004]$RCINCFLAGS variable is expanded.

   RCINCSUFFIX
          The suffix used to specify an include directory on the resource
          compiler command line. This will be appended to the end of each
          directory in the [2005]$CPPPATH construction variable when the
          [2006]$RCINCFLAGS variable is expanded.

   RDirs
          A function that converts a string into a list of Dir instances
          by searching the repositories.

   REGSVR
          The program used on Windows systems to register a newly-built
          DLL library whenever the [2007]SharedLibrary builder is passed a
          keyword argument of register=True.

   REGSVRCOM
          The command line used on Windows systems to register a
          newly-built DLL library whenever the [2008]SharedLibrary builder
          is passed a keyword argument of register=True.

   REGSVRCOMSTR
          The string displayed when registering a newly-built DLL file. If
          this is not set, then [2009]$REGSVRCOM (the command line) is
          displayed.

   REGSVRFLAGS
          Flags passed to the DLL registration program on Windows systems
          when a newly-built DLL library is registered. By default, this
          includes the /s that prevents dialog boxes from popping up and
          requiring user attention.

   RMIC
          The Java RMI stub compiler.

   RMICCOM
          The command line used to compile stub and skeleton class files
          from Java classes that contain RMI implementations. Any options
          specified in the [2010]$RMICFLAGS construction variable are
          included on this command line.

   RMICCOMSTR
          The string displayed when compiling stub and skeleton class
          files from Java classes that contain RMI implementations. If
          this is not set, then [2011]$RMICCOM (the command line) is
          displayed.

env = Environment(RMICCOMSTR = "Generating stub/skeleton class files $TARGETS fr
om $SOURCES")

   RMICFLAGS
          General options passed to the Java RMI stub compiler.

   RPATH
          A list of paths to search for shared libraries when running
          programs. Currently only used in the GNU (gnulink), IRIX
          (sgilink) and Sun (sunlink) linkers. Ignored on platforms and
          toolchains that don't support it. Note that the paths added to
          RPATH are not transformed by scons in any way: if you want an
          absolute path, you must make it absolute yourself.

   _RPATH
          An automatically-generated construction variable containing the
          rpath flags to be used when linking a program with shared
          libraries. The value of $_RPATH is created by respectively
          prepending $RPATHPREFIX and appending $RPATHSUFFIX to the
          beginning and end of each directory in $RPATH.

   RPATHPREFIX
          The prefix used to specify a directory to be searched for shared
          libraries when running programs. This will be prepended to the
          beginning of each directory in the $RPATH construction variable
          when the $_RPATH variable is automatically generated.

   RPATHSUFFIX
          The suffix used to specify a directory to be searched for shared
          libraries when running programs. This will be appended to the
          end of each directory in the $RPATH construction variable when
          the $_RPATH variable is automatically generated.

   RPCGEN
          The RPC protocol compiler.

   RPCGENCLIENTFLAGS
          Options passed to the RPC protocol compiler when generating
          client side stubs. These are in addition to any flags specified
          in the [2012]$RPCGENFLAGS construction variable.

   RPCGENFLAGS
          General options passed to the RPC protocol compiler.

   RPCGENHEADERFLAGS
          Options passed to the RPC protocol compiler when generating a
          header file. These are in addition to any flags specified in the
          [2013]$RPCGENFLAGS construction variable.

   RPCGENSERVICEFLAGS
          Options passed to the RPC protocol compiler when generating
          server side stubs. These are in addition to any flags specified
          in the [2014]$RPCGENFLAGS construction variable.

   RPCGENXDRFLAGS
          Options passed to the RPC protocol compiler when generating XDR
          routines. These are in addition to any flags specified in the
          [2015]$RPCGENFLAGS construction variable.

   SCANNERS
          A list of the available implicit dependency scanners. New file
          scanners may be added by appending to this list, although the
          more flexible approach is to associate scanners with a specific
          Builder. See the manpage sections "Builder Objects" and "Scanner
          Objects" for more information.

   SCONS_HOME
          The (optional) path to the SCons library directory, initialized
          from the external environment. If set, this is used to construct
          a shorter and more efficient search path in the [2016]$MSVSSCONS
          command line executed from Microsoft Visual Studio project
          files.

   SHCC
          The C compiler used for generating shared-library objects. See
          also [2017]$CC for compiling to static objects.

   SHCCCOM
          The command line used to compile a C source file to a
          shared-library object file. Any options specified in the
          [2018]$SHCFLAGS, [2019]$SHCCFLAGS and [2020]$CPPFLAGS
          construction variables are included on this command line. See
          also [2021]$CCCOM for compiling to static objects.

   SHCCCOMSTR
          If set, the string displayed when a C source file is compiled to
          a shared object file. If not set, then [2022]$SHCCCOM (the
          command line) is displayed. See also [2023]$CCCOMSTR for
          compiling to static objects.

env = Environment(SHCCCOMSTR = "Compiling shared object $TARGET")

   SHCCFLAGS
          Options that are passed to the C and C++ compilers to generate
          shared-library objects. See also [2024]$CCFLAGS for compiling to
          static objects.

   SHCFLAGS
          Options that are passed to the C compiler (only; not C++) to
          generate shared-library objects. See also [2025]$CFLAGS for
          compiling to static objects.

   SHCXX
          The C++ compiler used for generating shared-library objects. See
          also [2026]$CXX for compiling to static objects.

   SHCXXCOM
          The command line used to compile a C++ source file to a
          shared-library object file. Any options specified in the
          [2027]$SHCXXFLAGS and [2028]$CPPFLAGS construction variables are
          included on this command line. See also [2029]$CXXCOM for
          compiling to static objects.

   SHCXXCOMSTR
          If set, the string displayed when a C++ source file is compiled
          to a shared object file. If not set, then [2030]$SHCXXCOM (the
          command line) is displayed. See also [2031]$CXXCOMSTR for
          compiling to static objects.

env = Environment(SHCXXCOMSTR = "Compiling shared object $TARGET")

   SHCXXFLAGS
          Options that are passed to the C++ compiler to generate
          shared-library objects. See also [2032]$CXXFLAGS for compiling
          to static objects.

   SHDC
          The name of the compiler to use when compiling D source destined
          to be in a shared objects. See also [2033]$DC for compiling to
          static objects.

   SHDCOM
          The command line to use when compiling code to be part of shared
          objects. See also [2034]$DCOM for compiling to static objects.

   SHDCOMSTR
          If set, the string displayed when a D source file is compiled to
          a (shared) object file. If not set, then [2035]$SHDCOM (the
          command line) is displayed. See also [2036]$DCOMSTR for
          compiling to static objects.

   SHDLIBVERSIONFLAGS
          Extra flags added to [2037]$SHDLINKCOM when building versioned
          [2038]SharedLibrary. These flags are only used when
          [2039]$SHLIBVERSION is set.

   SHDLINK
          The linker to use when creating shared objects for code bases
          include D sources. See also [2040]$DLINK for linking static
          objects.

   SHDLINKCOM
          The command line to use when generating shared objects. See also
          [2041]$DLINKCOM for linking static objects.

   SHDLINKFLAGS
          The list of flags to use when generating a shared object. See
          also [2042]$DLINKFLAGS for linking static objects.

   SHELL
          A string naming the shell program that will be passed to the
          $SPAWN function. See the $SPAWN construction variable for more
          information.

   SHELL_ENV_GENERATORS
          Must be a list (or an iterable) containing functions where each
          function generates or alters the environment dictionary which
          will be used when executing the [2043]$SPAWN function. The
          functions will initially be passed a reference of the current
          execution environment (e.g. env['ENV']), and each called while
          iterating the list. Each function must return a dictionary which
          will then be passed to the next function iterated. The return
          dictionary should contain keys which represent the environment
          variables and their respective values. This primary purpose of
          this construction variable is to give the user the ability to
          substitute execution environment variables based on env,
          targets, and sources. If desired, the user can completely
          customize the execution environment for particular targets.

def custom_shell_env(env, target, source, shell_env):
    """customize shell_env if desired"""
    if str(target[0]) == 'special_target':
        shell_env['SPECIAL_VAR'] = env.subst('SOME_VAR', target=target, source=s
ource)
    return shell_env

env["SHELL_ENV_GENERATORS"] = [custom_shell_env]

          env The SCons construction environment from which the execution
          environment can be derived from.

          target The list of targets associated with this action.

          source The list of sources associated with this action.

          shell_env The current shell_env after iterating other
          SHELL_ENV_GENERATORS functions. This can be compared to the
          passed env['ENV'] to detect any changes.

   SHF03
          The Fortran 03 compiler used for generating shared-library
          objects. You should normally set the [2044]$SHFORTRAN variable,
          which specifies the default Fortran compiler for all Fortran
          versions. You only need to set [2045]$SHF03 if you need to use a
          specific compiler or compiler version for Fortran 03 files.

   SHF03COM
          The command line used to compile a Fortran 03 source file to a
          shared-library object file. You only need to set [2046]$SHF03COM
          if you need to use a specific command line for Fortran 03 files.
          You should normally set the [2047]$SHFORTRANCOM variable, which
          specifies the default command line for all Fortran versions.

   SHF03COMSTR
          If set, the string displayed when a Fortran 03 source file is
          compiled to a shared-library object file. If not set, then
          [2048]$SHF03COM or [2049]$SHFORTRANCOM (the command line) is
          displayed.

   SHF03FLAGS
          Options that are passed to the Fortran 03 compiler to generated
          shared-library objects. You only need to set [2050]$SHF03FLAGS
          if you need to define specific user options for Fortran 03
          files. You should normally set the [2051]$FORTRANCOMMONFLAGS
          variable, which specifies the user-specified options passed to
          the default Fortran compiler for all Fortran versions.

   SHF03PPCOM
          The command line used to compile a Fortran 03 source file to a
          shared-library object file after first running the file through
          the C preprocessor. Any options specified in the
          [2052]$SHF03FLAGS and [2053]$CPPFLAGS construction variables are
          included on this command line. You only need to set
          [2054]$SHF03PPCOM if you need to use a specific C-preprocessor
          command line for Fortran 03 files. You should normally set the
          [2055]$SHFORTRANPPCOM variable, which specifies the default
          C-preprocessor command line for all Fortran versions.

   SHF03PPCOMSTR
          If set, the string displayed when a Fortran 03 source file is
          compiled to a shared-library object file after first running the
          file through the C preprocessor. If not set, then
          [2056]$SHF03PPCOM or [2057]$SHFORTRANPPCOM (the command line) is
          displayed.

   SHF08
          The Fortran 08 compiler used for generating shared-library
          objects. You should normally set the [2058]$SHFORTRAN variable,
          which specifies the default Fortran compiler for all Fortran
          versions. You only need to set [2059]$SHF08 if you need to use a
          specific compiler or compiler version for Fortran 08 files.

   SHF08COM
          The command line used to compile a Fortran 08 source file to a
          shared-library object file. You only need to set [2060]$SHF08COM
          if you need to use a specific command line for Fortran 08 files.
          You should normally set the [2061]$SHFORTRANCOM variable, which
          specifies the default command line for all Fortran versions.

   SHF08COMSTR
          If set, the string displayed when a Fortran 08 source file is
          compiled to a shared-library object file. If not set, then
          [2062]$SHF08COM or [2063]$SHFORTRANCOM (the command line) is
          displayed.

   SHF08FLAGS
          Options that are passed to the Fortran 08 compiler to generated
          shared-library objects. You only need to set [2064]$SHF08FLAGS
          if you need to define specific user options for Fortran 08
          files. You should normally set the [2065]$FORTRANCOMMONFLAGS
          variable, which specifies the user-specified options passed to
          the default Fortran compiler for all Fortran versions.

   SHF08PPCOM
          The command line used to compile a Fortran 08 source file to a
          shared-library object file after first running the file through
          the C preprocessor. Any options specified in the
          [2066]$SHF08FLAGS and [2067]$CPPFLAGS construction variables are
          included on this command line. You only need to set
          [2068]$SHF08PPCOM if you need to use a specific C-preprocessor
          command line for Fortran 08 files. You should normally set the
          [2069]$SHFORTRANPPCOM variable, which specifies the default
          C-preprocessor command line for all Fortran versions.

   SHF08PPCOMSTR
          If set, the string displayed when a Fortran 08 source file is
          compiled to a shared-library object file after first running the
          file through the C preprocessor. If not set, then
          [2070]$SHF08PPCOM or [2071]$SHFORTRANPPCOM (the command line) is
          displayed.

   SHF77
          The Fortran 77 compiler used for generating shared-library
          objects. You should normally set the [2072]$SHFORTRAN variable,
          which specifies the default Fortran compiler for all Fortran
          versions. You only need to set [2073]$SHF77 if you need to use a
          specific compiler or compiler version for Fortran 77 files.

   SHF77COM
          The command line used to compile a Fortran 77 source file to a
          shared-library object file. You only need to set [2074]$SHF77COM
          if you need to use a specific command line for Fortran 77 files.
          You should normally set the [2075]$SHFORTRANCOM variable, which
          specifies the default command line for all Fortran versions.

   SHF77COMSTR
          If set, the string displayed when a Fortran 77 source file is
          compiled to a shared-library object file. If not set, then
          [2076]$SHF77COM or [2077]$SHFORTRANCOM (the command line) is
          displayed.

   SHF77FLAGS
          Options that are passed to the Fortran 77 compiler to generated
          shared-library objects. You only need to set [2078]$SHF77FLAGS
          if you need to define specific user options for Fortran 77
          files. You should normally set the [2079]$FORTRANCOMMONFLAGS
          variable, which specifies the user-specified options passed to
          the default Fortran compiler for all Fortran versions.

   SHF77PPCOM
          The command line used to compile a Fortran 77 source file to a
          shared-library object file after first running the file through
          the C preprocessor. Any options specified in the
          [2080]$SHF77FLAGS and [2081]$CPPFLAGS construction variables are
          included on this command line. You only need to set
          [2082]$SHF77PPCOM if you need to use a specific C-preprocessor
          command line for Fortran 77 files. You should normally set the
          [2083]$SHFORTRANPPCOM variable, which specifies the default
          C-preprocessor command line for all Fortran versions.

   SHF77PPCOMSTR
          If set, the string displayed when a Fortran 77 source file is
          compiled to a shared-library object file after first running the
          file through the C preprocessor. If not set, then
          [2084]$SHF77PPCOM or [2085]$SHFORTRANPPCOM (the command line) is
          displayed.

   SHF90
          The Fortran 90 compiler used for generating shared-library
          objects. You should normally set the [2086]$SHFORTRAN variable,
          which specifies the default Fortran compiler for all Fortran
          versions. You only need to set [2087]$SHF90 if you need to use a
          specific compiler or compiler version for Fortran 90 files.

   SHF90COM
          The command line used to compile a Fortran 90 source file to a
          shared-library object file. You only need to set [2088]$SHF90COM
          if you need to use a specific command line for Fortran 90 files.
          You should normally set the [2089]$SHFORTRANCOM variable, which
          specifies the default command line for all Fortran versions.

   SHF90COMSTR
          If set, the string displayed when a Fortran 90 source file is
          compiled to a shared-library object file. If not set, then
          [2090]$SHF90COM or [2091]$SHFORTRANCOM (the command line) is
          displayed.

   SHF90FLAGS
          Options that are passed to the Fortran 90 compiler to generated
          shared-library objects. You only need to set [2092]$SHF90FLAGS
          if you need to define specific user options for Fortran 90
          files. You should normally set the [2093]$FORTRANCOMMONFLAGS
          variable, which specifies the user-specified options passed to
          the default Fortran compiler for all Fortran versions.

   SHF90PPCOM
          The command line used to compile a Fortran 90 source file to a
          shared-library object file after first running the file through
          the C preprocessor. Any options specified in the
          [2094]$SHF90FLAGS and [2095]$CPPFLAGS construction variables are
          included on this command line. You only need to set
          [2096]$SHF90PPCOM if you need to use a specific C-preprocessor
          command line for Fortran 90 files. You should normally set the
          [2097]$SHFORTRANPPCOM variable, which specifies the default
          C-preprocessor command line for all Fortran versions.

   SHF90PPCOMSTR
          If set, the string displayed when a Fortran 90 source file is
          compiled to a shared-library object file after first running the
          file through the C preprocessor. If not set, then
          [2098]$SHF90PPCOM or [2099]$SHFORTRANPPCOM (the command line) is
          displayed.

   SHF95
          The Fortran 95 compiler used for generating shared-library
          objects. You should normally set the [2100]$SHFORTRAN variable,
          which specifies the default Fortran compiler for all Fortran
          versions. You only need to set [2101]$SHF95 if you need to use a
          specific compiler or compiler version for Fortran 95 files.

   SHF95COM
          The command line used to compile a Fortran 95 source file to a
          shared-library object file. You only need to set [2102]$SHF95COM
          if you need to use a specific command line for Fortran 95 files.
          You should normally set the [2103]$SHFORTRANCOM variable, which
          specifies the default command line for all Fortran versions.

   SHF95COMSTR
          If set, the string displayed when a Fortran 95 source file is
          compiled to a shared-library object file. If not set, then
          [2104]$SHF95COM or [2105]$SHFORTRANCOM (the command line) is
          displayed.

   SHF95FLAGS
          Options that are passed to the Fortran 95 compiler to generated
          shared-library objects. You only need to set [2106]$SHF95FLAGS
          if you need to define specific user options for Fortran 95
          files. You should normally set the [2107]$FORTRANCOMMONFLAGS
          variable, which specifies the user-specified options passed to
          the default Fortran compiler for all Fortran versions.

   SHF95PPCOM
          The command line used to compile a Fortran 95 source file to a
          shared-library object file after first running the file through
          the C preprocessor. Any options specified in the
          [2108]$SHF95FLAGS and [2109]$CPPFLAGS construction variables are
          included on this command line. You only need to set
          [2110]$SHF95PPCOM if you need to use a specific C-preprocessor
          command line for Fortran 95 files. You should normally set the
          [2111]$SHFORTRANPPCOM variable, which specifies the default
          C-preprocessor command line for all Fortran versions.

   SHF95PPCOMSTR
          If set, the string displayed when a Fortran 95 source file is
          compiled to a shared-library object file after first running the
          file through the C preprocessor. If not set, then
          [2112]$SHF95PPCOM or [2113]$SHFORTRANPPCOM (the command line) is
          displayed.

   SHFORTRAN
          The default Fortran compiler used for generating shared-library
          objects.

   SHFORTRANCOM
          The command line used to compile a Fortran source file to a
          shared-library object file. By default, any options specified in
          the [2114]$SHFORTRANFLAGS, [2115]$_FORTRANMODFLAG, and
          [2116]$_FORTRANINCFLAGS construction variables are included on
          this command line. See also [2117]$FORTRANCOM.

   SHFORTRANCOMSTR
          If set, the string displayed when a Fortran source file is
          compiled to a shared-library object file. If not set, then
          [2118]$SHFORTRANCOM (the command line) is displayed.

   SHFORTRANFLAGS
          Options that are passed to the Fortran compiler to generate
          shared-library objects.

   SHFORTRANPPCOM
          The command line used to compile a Fortran source file to a
          shared-library object file after first running the file through
          the C preprocessor. By default, any options specified in the
          [2119]$SHFORTRANFLAGS, [2120]$CPPFLAGS, [2121]$_CPPDEFFLAGS,
          [2122]$_FORTRANMODFLAG, and [2123]$_FORTRANINCFLAGS construction
          variables are included on this command line. See also
          [2124]$SHFORTRANCOM.

   SHFORTRANPPCOMSTR
          If set, the string displayed when a Fortran source file is
          compiled to a shared-library object file after first running the
          file through the C preprocessor. If not set, then
          [2125]$SHFORTRANPPCOM (the command line) is displayed.

   SHLIBEMITTER
          Contains the emitter specification for the [2126]SharedLibrary
          builder. The manpage section "Builder Objects" contains general
          information on specifying emitters.

   SHLIBNOVERSIONSYMLINKS
          Instructs the [2127]SharedLibrary builder to not create symlinks
          for versioned shared libraries.

   SHLIBPREFIX
          The prefix used for shared library file names.

   _SHLIBSONAME
          A macro that automatically generates shared library's SONAME
          based on $TARGET, $SHLIBVERSION and $SHLIBSUFFIX. Used by
          [2128]SharedLibrary builder when the linker tool supports SONAME
          (e.g. [2129]gnulink).

   SHLIBSUFFIX
          The suffix used for shared library file names.

   SHLIBVERSION
          When this construction variable is defined, a versioned shared
          library is created by the [2130]SharedLibrary builder. This
          activates the [2131]$_SHLIBVERSIONFLAGS and thus modifies the
          [2132]$SHLINKCOM as required, adds the version number to the
          library name, and creates the symlinks that are needed.
          [2133]$SHLIBVERSION versions should exist as alpha-numeric,
          decimal-delimited values as defined by the regular expression
          "\w+[\.\w+]*". Example [2134]$SHLIBVERSION values include '1',
          '1.2.3', and '1.2.gitaa412c8b'.

   _SHLIBVERSIONFLAGS
          This macro automatically introduces extra flags to
          [2135]$SHLINKCOM when building versioned [2136]SharedLibrary
          (that is when [2137]$SHLIBVERSION is set). _SHLIBVERSIONFLAGS
          usually adds [2138]$SHLIBVERSIONFLAGS and some extra dynamically
          generated options (such as -Wl,-soname=$_SHLIBSONAME. It is
          unused by "plain" (unversioned) shared libraries.

   SHLIBVERSIONFLAGS
          Extra flags added to [2139]$SHLINKCOM when building versioned
          [2140]SharedLibrary. These flags are only used when
          [2141]$SHLIBVERSION is set.

   SHLINK
          The linker for programs that use shared libraries. See also
          [2142]$LINK for linking static objects.

          On POSIX systems (those using the [2143]link tool), you should
          normally not change this value as it defaults to a "smart"
          linker tool which selects a compiler driver matching the type of
          source files in use. So for example, if you set [2144]$SHCXX to
          a specific compiler name, and are compiling C++ sources, the
          smartlink function will automatically select the same compiler
          for linking.

   SHLINKCOM
          The command line used to link programs using shared libraries.
          See also [2145]$LINKCOM for linking static objects.

   SHLINKCOMSTR
          The string displayed when programs using shared libraries are
          linked. If this is not set, then [2146]$SHLINKCOM (the command
          line) is displayed. See also [2147]$LINKCOMSTR for linking
          static objects.

env = Environment(SHLINKCOMSTR = "Linking shared $TARGET")

   SHLINKFLAGS
          General user options passed to the linker for programs using
          shared libraries. Note that this variable should not contain -l
          (or similar) options for linking with the libraries listed in
          [2148]$LIBS, nor -L (or similar) include search path options
          that scons generates automatically from [2149]$LIBPATH. See
          [2150]$_LIBFLAGS above, for the variable that expands to
          library-link options, and [2151]$_LIBDIRFLAGS above, for the
          variable that expands to library search path options. See also
          [2152]$LINKFLAGS for linking static objects.

   SHOBJPREFIX
          The prefix used for shared object file names.

   SHOBJSUFFIX
          The suffix used for shared object file names.

   SONAME
          Variable used to hard-code SONAME for versioned shared
          library/loadable module.

env.SharedLibrary('test', 'test.c', SHLIBVERSION='0.1.2', SONAME='libtest.so.2')

          The variable is used, for example, by [2153]gnulink linker tool.

   SOURCE
          A reserved variable name that may not be set or used in a
          construction environment. (See the manpage section "Variable
          Substitution" for more information).

   SOURCE_URL
          The URL (web address) of the location from which the project was
          retrieved. This is used to fill in the Source: field in the
          controlling information for Ipkg and RPM packages.

          See the [2154]Package builder.

   SOURCES
          A reserved variable name that may not be set or used in a
          construction environment. (See the manpage section "Variable
          Substitution" for more information).

   SOVERSION
          This will construct the SONAME using on the base library name
          (test in the example below) and use specified SOVERSION to
          create SONAME.

env.SharedLibrary('test', 'test.c', SHLIBVERSION='0.1.2', SOVERSION='2')

          The variable is used, for example, by [2155]gnulink linker tool.

          In the example above SONAME would be libtest.so.2 which would be
          a symlink and point to libtest.so.0.1.2

   SPAWN
          A command interpreter function that will be called to execute
          command line strings. The function must accept five arguments:

def spawn(shell, escape, cmd, args, env):

          shell is a string naming the shell program to use, escape is a
          function that can be called to escape shell special characters
          in the command line, cmd is the path to the command to be
          executed, args holds the arguments to the command and env is a
          dictionary of environment variables defining the execution
          environment in which the command should be executed.

   STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME
          When this variable is true, static objects and shared objects
          are assumed to be the same; that is, SCons does not check for
          linking static objects into a shared library.

   SUBST_DICT
          The dictionary used by the [2156]Substfile or [2157]Textfile
          builders for substitution values. It can be anything acceptable
          to the dict() constructor, so in addition to a dictionary, lists
          of tuples are also acceptable.

   SUBSTFILEPREFIX
          The prefix used for [2158]Substfile file names, an empty string
          by default.

   SUBSTFILESUFFIX
          The suffix used for [2159]Substfile file names, an empty string
          by default.

   SUMMARY
          A short summary of what the project is about. This is used to
          fill in the Summary: field in the controlling information for
          Ipkg and RPM packages, and as the Description: field in MSI
          packages.

          See the [2160]Package builder.

   SWIG
          The name of the SWIG compiler to use.

   SWIGCFILESUFFIX
          The suffix that will be used for intermediate C source files
          generated by SWIG. The default value is '_wrap$CFILESUFFIX' -
          that is, the concatenation of the string _wrap and the current C
          suffix [2161]$CFILESUFFIX. By default, this value is used
          whenever the -c++ option is not specified as part of the
          [2162]$SWIGFLAGS construction variable.

   SWIGCOM
          The command line used to call SWIG.

   SWIGCOMSTR
          The string displayed when calling SWIG. If this is not set, then
          [2163]$SWIGCOM (the command line) is displayed.

   SWIGCXXFILESUFFIX
          The suffix that will be used for intermediate C++ source files
          generated by SWIG. The default value is '_wrap$CXXFILESUFFIX' -
          that is, the concatenation of the string _wrap and the current
          C++ suffix [2164]$CXXFILESUFFIX. By default, this value is used
          whenever the -c++ option is specified as part of the
          [2165]$SWIGFLAGS construction variable.

   SWIGDIRECTORSUFFIX
          The suffix that will be used for intermediate C++ header files
          generated by SWIG. These are only generated for C++ code when
          the SWIG 'directors' feature is turned on. The default value is
          _wrap.h.

   SWIGFLAGS
          General options passed to SWIG. This is where you should set the
          target language (-python, -perl5, -tcl, etc.) and whatever other
          options you want to specify to SWIG, such as the -c++ to
          generate C++ code instead of C Code.

   _SWIGINCFLAGS
          An automatically-generated construction variable containing the
          SWIG command-line options for specifying directories to be
          searched for included files. The value of $_SWIGINCFLAGS is
          created by respectively prepending and appending $SWIGINCPREFIX
          and $SWIGINCSUFFIX to the beginning and end of each directory in
          $SWIGPATH.

   SWIGINCPREFIX
          The prefix used to specify an include directory on the SWIG
          command line. This will be prepended to the beginning of each
          directory in the $SWIGPATH construction variable when the
          $_SWIGINCFLAGS variable is automatically generated.

   SWIGINCSUFFIX
          The suffix used to specify an include directory on the SWIG
          command line. This will be appended to the end of each directory
          in the $SWIGPATH construction variable when the $_SWIGINCFLAGS
          variable is automatically generated.

   SWIGOUTDIR
          Specifies the output directory in which SWIG should place
          generated language-specific files. This will be used by SCons to
          identify the files that will be generated by the SWIG call, and
          translated into the swig -outdir option on the command line.

   SWIGPATH
          The list of directories that SWIG will search for included
          files. SCons' SWIG implicit dependency scanner will search these
          directories for include files. The default value is an empty
          list.

          Don't explicitly put include directory arguments in
          [2166]$SWIGFLAGS the result will be non-portable and the
          directories will not be searched by the dependency scanner.
          Note: directory names in [2167]$SWIGPATH will be looked-up
          relative to the SConscript directory when they are used in a
          command. To force scons to look-up a directory relative to the
          root of the source tree use a top-relative path (#):

env = Environment(SWIGPATH='#/include')

          The directory look-up can also be forced using the Dir()
          function:

include = Dir('include')
env = Environment(SWIGPATH=include)

          The directory list will be added to command lines through the
          automatically-generated $_SWIGINCFLAGS construction variable,
          which is constructed by respectively prepending and appending
          the values of the $SWIGINCPREFIX and $SWIGINCSUFFIX construction
          variables to the beginning and end of each directory in
          $SWIGPATH. Any command lines you define that need the SWIGPATH
          directory list should include $_SWIGINCFLAGS:

env = Environment(SWIGCOM="my_swig -o $TARGET $_SWIGINCFLAGS $SOURCES")

   SWIGVERSION
          The detected version string of the SWIG tool.

   TAR
          The tar archiver.

   TARCOM
          The command line used to call the tar archiver.

   TARCOMSTR
          The string displayed when archiving files using the tar
          archiver. If this is not set, then [2168]$TARCOM (the command
          line) is displayed.

env = Environment(TARCOMSTR = "Archiving $TARGET")

   TARFLAGS
          General options passed to the tar archiver.

   TARGET
          A reserved variable name that may not be set or used in a
          construction environment. (See the manpage section "Variable
          Substitution" for more information).

   TARGET_ARCH
          The name of the hardware architecture that objects created using
          this construction environment should target. Can be set when
          creating a construction environment by passing as a keyword
          argument in the [2169]Environment call.

          On the win32 platform, if the Microsoft Visual C++ compiler is
          available, [2170]msvc tool setup is done using [2171]$HOST_ARCH
          and $TARGET_ARCH. If a value is not specified, will be set to
          the same value as [2172]$HOST_ARCH. Changing the value after the
          environment is initialized will not cause the tool to be
          reinitialized. Compiled objects will be in the target
          architecture if the compilation system supports generating for
          that target. The latest compiler which can fulfill the
          requirement will be selected, unless a different version is
          directed by the value of the [2173]$MSVC_VERSION construction
          variable.

          On the win32/msvc combination, valid target arch values are x86,
          arm, i386 for 32-bit targets and amd64, arm64, x86_64 and ia64
          (Itanium) for 64-bit targets. For example, if you want to
          compile 64-bit binaries, you would set TARGET_ARCH='x86_64' when
          creating the construction environment. Note that not all target
          architectures are supported for all Visual Studio / MSVC
          versions. Check the relevant Microsoft documentation.

          $TARGET_ARCH is not currently used by other compilation tools,
          but the option is reserved to do so in future

   TARGET_OS
          The name of the operating system that objects created using this
          construction environment should target. Can be set when creating
          a construction environment by passing as a keyword argument in
          the [2174]Environment call;.

          $TARGET_OS is not currently used by SCons but the option is
          reserved to do so in future

   TARGETS
          A reserved variable name that may not be set or used in a
          construction environment. (See the manpage section "Variable
          Substitution" for more information).

   TARSUFFIX
          The suffix used for tar file names.

   TEMPFILE
          A callable object used to handle overly long command line
          strings, since operations which call out to a shell will fail if
          the line is longer than the shell can accept. This tends to
          particularly impact linking. The tempfile object stores the
          command line in a temporary file in the appropriate format, and
          returns an alternate command line so the invoked tool will make
          use of the contents of the temporary file. If you need to
          replace the default tempfile object, the callable should take
          into account the settings of [2175]$MAXLINELENGTH,
          [2176]$TEMPFILEPREFIX, [2177]$TEMPFILESUFFIX,
          [2178]$TEMPFILEARGJOIN, [2179]$TEMPFILEDIR and
          [2180]$TEMPFILEARGESCFUNC.

   TEMPFILEARGESCFUNC
          The default argument escape function is
          SCons.Subst.quote_spaces. If you need to apply extra operations
          on a command argument (to fix Windows slashes, normalize paths,
          etc.) before writing to the temporary file, you can set the
          $TEMPFILEARGESCFUNC variable to a custom function. Such a
          function takes a single string argument and returns a new string
          with any modifications applied. Example:

import sys
import re
from SCons.Subst import quote_spaces

WINPATHSEP_RE = re.compile(r"\\([^\"'\\]|$)")

def tempfile_arg_esc_func(arg):
    arg = quote_spaces(arg)
    if sys.platform != "win32":
        return arg
    # GCC requires double Windows slashes, let's use UNIX separator
    return WINPATHSEP_RE.sub(r"/\1", arg)

env["TEMPFILEARGESCFUNC"] = tempfile_arg_esc_func

   TEMPFILEARGJOIN
          The string to use to join the arguments passed to
          [2181]$TEMPFILE when the command line exceeds the limit set by
          [2182]$MAXLINELENGTH. The default value is a space. However for
          MSVC, MSLINK the default is a line separator as defined by
          os.linesep. Note this value is used literally and not expanded
          by the subst logic.

   TEMPFILEDIR
          The directory to create the long-lines temporary file in.

   TEMPFILEPREFIX
          The prefix for the name of the temporary file used to store
          command lines exceeding [2183]$MAXLINELENGTH. The default prefix
          is '@', which works for the Microsoft and GNU toolchains on
          Windows. Set this appropriately for other toolchains, for
          example '-@' for the diab compiler or '-via' for ARM toolchain.

   TEMPFILESUFFIX
          The suffix for the name of the temporary file used to store
          command lines exceeding [2184]$MAXLINELENGTH. The suffix should
          include the dot ('.') if one is wanted as it will not be added
          automatically. The default is .lnk.

   TEX
          The TeX formatter and typesetter.

   TEXCOM
          The command line used to call the TeX formatter and typesetter.

   TEXCOMSTR
          The string displayed when calling the TeX formatter and
          typesetter. If this is not set, then [2185]$TEXCOM (the command
          line) is displayed.

env = Environment(TEXCOMSTR = "Building $TARGET from TeX input $SOURCES")

   TEXFLAGS
          General options passed to the TeX formatter and typesetter.

   TEXINPUTS
          List of directories that the LaTeX program will search for
          include directories. The LaTeX implicit dependency scanner will
          search these directories for \include and \import files.

   TEXTFILEPREFIX
          The prefix used for [2186]Textfile file names, an empty string
          by default.

   TEXTFILESUFFIX
          The suffix used for [2187]Textfile file names; .txt by default.

   TOOLS
          A list of the names of the Tool specifications that are part of
          this construction environment.

   UNCHANGED_SOURCES
          A reserved variable name that may not be set or used in a
          construction environment. (See the manpage section "Variable
          Substitution" for more information).

   UNCHANGED_TARGETS
          A reserved variable name that may not be set or used in a
          construction environment. (See the manpage section "Variable
          Substitution" for more information).

   VENDOR
          The person or organization who supply the packaged software.
          This is used to fill in the Vendor: field in the controlling
          information for RPM packages, and the Manufacturer: field in the
          controlling information for MSI packages.

          See the [2188]Package builder.

   VERSION
          The version of the project, specified as a string.

          See the [2189]Package builder.

   VSWHERE
          Specify the location of vswhere.exe.

          The vswhere.exe executable is distributed with Microsoft Visual
          Studio and Build Tools since the 2017 edition, but is also
          available standalone. It provides full information about
          installations of 2017 and later editions. With the -legacy
          argument, vswhere.exe can detect installations of the 2010
          through 2015 editions with limited data returned. If VSWHERE is
          set, SCons will use that location.

          Otherwise SCons will look in the following locations and set
          VSWHERE to the path of the first vswhere.exe located.

          + %ProgramFiles(x86)%\Microsoft Visual Studio\Installer
          + %ProgramFiles%\Microsoft Visual Studio\Installer
          + %ChocolateyInstall%\bin

          Note that VSWHERE must be set at the same time or prior to any
          of [2190]msvc, [2191]msvs , and/or [2192]mslink [2193]Tool being
          initialized. Either set it as follows

env = Environment(VSWHERE='c:/my/path/to/vswhere')

          or if your construction environment is created specifying an
          empty tools list (or a list of tools which omits all of default,
          msvs, msvc, and mslink), and also before [2194]env.Tool is
          called to ininitialize any of those tools:

    env = Environment(tools=[])
    env['VSWHERE'] = r'c:/my/vswhere/install/location/vswhere.exe'
    env.Tool('msvc')
    env.Tool('mslink')
    env.Tool('msvs')

   WINDOWS_EMBED_MANIFEST
          Set to True to embed the compiler-generated manifest (normally
          ${TARGET}.manifest) into all Windows executables and DLLs built
          with this environment, as a resource during their link step.
          This is done using [2195]$MT and [2196]$MTEXECOM and
          [2197]$MTSHLIBCOM. See also [2198]$WINDOWS_INSERT_MANIFEST.

   WINDOWS_INSERT_DEF
          If set to true, a library build of a Windows shared library
          (.dll file) will include a reference to the corresponding
          module-definition file at the same time, if a module-definition
          file is not already listed as a build target. The name of the
          module-definition file will be constructed from the base name of
          the library and the construction variables
          [2199]$WINDOWSDEFSUFFIX and [2200]$WINDOWSDEFPREFIX. The default
          is to not add a module-definition file. The module-definition
          file is not created by this directive, and must be supplied by
          the developer.

   WINDOWS_INSERT_MANIFEST
          If set to true, scons will add the manifest file generated by
          Microsoft Visual C++ 8.0 and later to the target list so SCons
          will be aware they were generated. In the case of an executable,
          the manifest file name is constructed using
          [2201]$WINDOWSPROGMANIFESTSUFFIX and
          [2202]$WINDOWSPROGMANIFESTPREFIX. In the case of a shared
          library, the manifest file name is constructed using
          [2203]$WINDOWSSHLIBMANIFESTSUFFIX and
          [2204]$WINDOWSSHLIBMANIFESTPREFIX. See also
          [2205]$WINDOWS_EMBED_MANIFEST.

   WINDOWSDEFPREFIX
          The prefix used for a Windows linker module-definition file
          name. Defaults to empty.

   WINDOWSDEFSUFFIX
          The suffix used for a Windows linker module-definition file
          name. Defaults to .def.

   WINDOWSEXPPREFIX
          The prefix used for Windows linker exports file names. Defaults
          to empty.

   WINDOWSEXPSUFFIX
          The suffix used for Windows linker exports file names. Defaults
          to .exp.

   WINDOWSPROGMANIFESTPREFIX
          The prefix used for executable program manifest files generated
          by Microsoft Visual C/C++. Defaults to empty.

   WINDOWSPROGMANIFESTSUFFIX
          The suffix used for executable program manifest files generated
          by Microsoft Visual C/C++. Defaults to .manifest.

   WINDOWSSHLIBMANIFESTPREFIX
          The prefix used for shared library manifest files generated by
          Microsoft Visual C/C++. Defaults to empty.

   WINDOWSSHLIBMANIFESTSUFFIX
          The suffix used for shared library manifest files generated by
          Microsoft Visual C/C++. Defaults to .manifest.

   X_IPK_DEPENDS
          This is used to fill in the Depends: field in the controlling
          information for Ipkg packages.

          See the [2206]Package builder.

   X_IPK_DESCRIPTION
          This is used to fill in the Description: field in the
          controlling information for Ipkg packages. The default value is
          "$SUMMARY\n$DESCRIPTION"

   X_IPK_MAINTAINER
          This is used to fill in the Maintainer: field in the controlling
          information for Ipkg packages.

   X_IPK_PRIORITY
          This is used to fill in the Priority: field in the controlling
          information for Ipkg packages.

   X_IPK_SECTION
          This is used to fill in the Section: field in the controlling
          information for Ipkg packages.

   X_MSI_LANGUAGE
          This is used to fill in the Language: attribute in the
          controlling information for MSI packages.

          See the [2207]Package builder.

   X_MSI_LICENSE_TEXT
          The text of the software license in RTF format. Carriage return
          characters will be replaced with the RTF equivalent \\par.

          See the [2208]Package builder.

   X_MSI_UPGRADE_CODE
          TODO

   X_RPM_AUTOREQPROV
          This is used to fill in the AutoReqProv: field in the RPM .spec
          file.

          See the [2209]Package builder.

   X_RPM_BUILD
          internal, but overridable

   X_RPM_BUILDREQUIRES
          This is used to fill in the BuildRequires: field in the RPM
          .spec file. Note this should only be used on a host managed by
          rpm as the dependencies will not be resolvable at build time
          otherwise.

   X_RPM_BUILDROOT
          internal, but overridable

   X_RPM_CLEAN
          internal, but overridable

   X_RPM_CONFLICTS
          This is used to fill in the Conflicts: field in the RPM .spec
          file.

   X_RPM_DEFATTR
          This value is used as the default attributes for the files in
          the RPM package. The default value is "(-,root,root)".

   X_RPM_DISTRIBUTION
          This is used to fill in the Distribution: field in the RPM .spec
          file.

   X_RPM_EPOCH
          This is used to fill in the Epoch: field in the RPM .spec file.

   X_RPM_EXCLUDEARCH
          This is used to fill in the ExcludeArch: field in the RPM .spec
          file.

   X_RPM_EXLUSIVEARCH
          This is used to fill in the ExclusiveArch: field in the RPM
          .spec file.

   X_RPM_EXTRADEFS
          A list used to supply extra defintions or flags to be added to
          the RPM .spec file. Each item is added as-is with a carriage
          return appended. This is useful if some specific RPM feature not
          otherwise anticipated by SCons needs to be turned on or off.
          Note if this variable is omitted, SCons will by default supply
          the value '%global debug_package %{nil}' to disable debug
          package generation. To enable debug package generation, include
          this variable set either to None, or to a custom list that does
          not include the default line. Added in version 3.1.

env.Package(
    NAME="foo",
    ...
    X_RPM_EXTRADEFS=[
        "%define _unpackaged_files_terminate_build 0"
        "%define _missing_doc_files_terminate_build 0"
    ],
    ...
)

   X_RPM_GROUP
          This is used to fill in the Group: field in the RPM .spec file.

   X_RPM_GROUP_lang
          This is used to fill in the Group(lang): field in the RPM .spec
          file. Note that lang is not literal and should be replaced by
          the appropriate language code.

   X_RPM_ICON
          This is used to fill in the Icon: field in the RPM .spec file.

   X_RPM_INSTALL
          internal, but overridable

   X_RPM_PACKAGER
          This is used to fill in the Packager: field in the RPM .spec
          file.

   X_RPM_POSTINSTALL
          This is used to fill in the %post: section in the RPM .spec
          file.

   X_RPM_POSTUNINSTALL
          This is used to fill in the %postun: section in the RPM .spec
          file.

   X_RPM_PREFIX
          This is used to fill in the Prefix: field in the RPM .spec file.

   X_RPM_PREINSTALL
          This is used to fill in the %pre: section in the RPM .spec file.

   X_RPM_PREP
          internal, but overridable

   X_RPM_PREUNINSTALL
          This is used to fill in the %preun: section in the RPM .spec
          file.

   X_RPM_PROVIDES
          This is used to fill in the Provides: field in the RPM .spec
          file.

   X_RPM_REQUIRES
          This is used to fill in the Requires: field in the RPM .spec
          file.

   X_RPM_SERIAL
          This is used to fill in the Serial: field in the RPM .spec file.

   X_RPM_URL
          This is used to fill in the Url: field in the RPM .spec file.

   XGETTEXT
          Path to xgettext(1) program (found via Detect()). See
          [2210]xgettext tool and [2211]POTUpdate builder.

   XGETTEXTCOM
          Complete xgettext command line. See [2212]xgettext tool and
          [2213]POTUpdate builder.

   XGETTEXTCOMSTR
          A string that is shown when xgettext(1) command is invoked
          (default: '', which means "print [2214]$XGETTEXTCOM"). See
          [2215]xgettext tool and [2216]POTUpdate builder.

   _XGETTEXTDOMAIN
          Internal "macro". Generates xgettext domain name form source and
          target (default: '${TARGET.filebase}').

   XGETTEXTFLAGS
          Additional flags to xgettext(1). See [2217]xgettext tool and
          [2218]POTUpdate builder.

   XGETTEXTFROM
          Name of file containing list of xgettext(1)'s source files.
          Autotools' users know this as POTFILES.in so they will in most
          cases set XGETTEXTFROM="POTFILES.in" here. The $XGETTEXTFROM
          files have same syntax and semantics as the well known GNU
          POTFILES.in. See [2219]xgettext tool and [2220]POTUpdate
          builder.

   _XGETTEXTFROMFLAGS
          Internal "macro". Genrates list of -D<dir> flags from the
          [2221]$XGETTEXTPATH list.

   XGETTEXTFROMPREFIX
          This flag is used to add single [2222]$XGETTEXTFROM file to
          xgettext(1)'s commandline (default: '-f').

   XGETTEXTFROMSUFFIX
          (default: '')

   XGETTEXTPATH
          List of directories, there xgettext(1) will look for source
          files (default: []).

Note

          This variable works only together with [2223]$XGETTEXTFROM

          See also [2224]xgettext tool and [2225]POTUpdate builder.

   _XGETTEXTPATHFLAGS
          Internal "macro". Generates list of -f<file> flags from
          [2226]$XGETTEXTFROM.

   XGETTEXTPATHPREFIX
          This flag is used to add single search path to xgettext(1)'s
          commandline (default: '-D').

   XGETTEXTPATHSUFFIX
          (default: '')

   YACC
          The parser generator.

   YACC_GRAPH_FILE
          If supplied, write a graph of the automaton to a file with the
          name taken from this variable. Will be emitted as a --graph=
          command-line option. Use this in preference to including
          --graph= in [2227]$YACCFLAGS directly.

   YACC_HEADER_FILE
          If supplied, generate a header file with the name taken from
          this variable. Will be emitted as a --header= command-line
          option. Use this in preference to including --header= in
          [2228]$YACCFLAGS directly.

   YACCCOM
          The command line used to call the parser generator to generate a
          source file.

   YACCCOMSTR
          The string displayed when generating a source file using the
          parser generator. If this is not set, then [2229]$YACCCOM (the
          command line) is displayed.

env = Environment(YACCCOMSTR="Yacc'ing $TARGET from $SOURCES")

   YACCFLAGS
          General options passed to the parser generator. In addition to
          passing the value on during invocation, the [2230]yacc tool also
          examines this construction variable for options which cause
          additional output files to be generated, and adds those to the
          target list.

          If a -d option is present, scons assumes that the call will also
          create a header file with the suffix defined by
          [2231]$YACCHFILESUFFIX if the yacc source file ends in a .y
          suffix, or a file with the suffix defined by
          [2232]$YACCHXXFILESUFFIX if the yacc source file ends in a .yy
          suffix.

          If a -g option is present, scons assumes that the call will also
          create a graph file with the suffix defined by
          [2233]$YACCVCGFILESUFFIX.

          If a -v option is present, scons assumes that the call will also
          create an output debug file with the suffix .output.

          Also recognized are GNU bison options --header= and its
          deprecated synonym --defines=, which is similar to -d but the
          output filename is named by the option argument; and --graph=,
          which is similar to -g but the output filename is named by the
          option argument.

          Note that files specified by --header= and --graph= may not be
          properly handled by SCons in all situations. Consider using
          [2234]$YACC_HEADER_FILE and [2235]$YACC_GRAPH_FILE instead.

   YACCHFILESUFFIX
          The suffix of the C header file generated by the parser
          generator when the -d option is used. Note that setting this
          variable does not cause the parser generator to generate a
          header file with the specified suffix, it exists to allow you to
          specify what suffix the parser generator will use of its own
          accord. The default value is .h.

   YACCHXXFILESUFFIX
          The suffix of the C++ header file generated by the parser
          generator when the -d option is used. Note that setting this
          variable does not cause the parser generator to generate a
          header file with the specified suffix, it exists to allow you to
          specify what suffix the parser generator will use of its own
          accord. The default value is .hpp, except on Mac OS X, where the
          default is ${TARGET.suffix}.h. because the default bison parser
          generator just appends .h to the name of the generated C++ file.

   YACCVCGFILESUFFIX
          The suffix of the file containing the VCG grammar automaton
          definition when the --graph= option is used. Note that setting
          this variable does not cause the parser generator to generate a
          VCG file with the specified suffix, it exists to allow you to
          specify what suffix the parser generator will use of its own
          accord. The default value is .vcg.

   ZIP
          The zip compression and file packaging utility.

   ZIP_OVERRIDE_TIMESTAMP
          An optional timestamp which overrides the last modification time
          of the file when stored inside the Zip archive. This is a tuple
          of six values: Year (>= 1980) Month (one-based) Day of month
          (one-based) Hours (zero-based) Minutes (zero-based) Seconds
          (zero-based)

   ZIPCOM
          The command line used to call the zip utility, or the internal
          Python function used to create a zip archive.

   ZIPCOMPRESSION
          The compression flag from the Python zipfile module used by the
          internal Python function to control whether the zip archive is
          compressed or not. The default value is zipfile.ZIP_DEFLATED,
          which creates a compressed zip archive. This value has no effect
          if the zipfile module is unavailable.

   ZIPCOMSTR
          The string displayed when archiving files using the zip utility.
          If this is not set, then [2236]$ZIPCOM (the command line or
          internal Python function) is displayed.

env = Environment(ZIPCOMSTR = "Zipping $TARGET")

   ZIPFLAGS
          General options passed to the zip utility.

   ZIPROOT
          An optional zip root directory (default empty). The filenames
          stored in the zip file will be relative to this directory, if
          given. Otherwise the filenames are relative to the current
          directory of the command. For instance:

env = Environment()
env.Zip('foo.zip', 'subdir1/subdir2/file1', ZIPROOT='subdir1')

          will produce a zip file foo.zip containing a file with the name
          subdir2/file1 rather than subdir1/subdir2/file1.

   ZIPSUFFIX
          The suffix used for zip file names.

Configure Contexts

   SCons supports a configure context, an integrated mechanism similar to
   the various AC_CHECK macros in GNU Autoconf for testing the existence
   of external items needed for the build, such as C header files,
   libraries, etc. The mechanism is portable across platforms.

   scons does not maintain an explicit cache of the tested values (this is
   different than Autoconf), but uses its normal dependency tracking to
   keep the checked values up to date. However, users may override this
   behaviour with the --config command line option.

   Configure(env, [custom_tests, conf_dir, log_file, config_h, clean,
          help])
          env.Configure([custom_tests, conf_dir, log_file, config_h,
          clean, help])
          Create a configure context, which tracks information discovered
          while running tests. The context includes a local construction
          environment (available as context.env) which is used when
          running the tests and which can be updated with the check
          results. Only one context may be active at a time (since 4.0,
          scons will raise an exception on an attempt to create a new
          context when there is an active context), but a new context can
          be created after the active one is completed. For the global
          function form, the required env describes the initial values for
          the context's local construction environment; for the
          construction environment method form the instance provides the
          values.

          custom_tests specifies a dictionary containing custom tests (see
          the section on custom tests below). The default value is None,
          meaning no custom tests are added to the configure context.

          conf_dir specifies a directory where the test cases are built.
          This directory is not used for building normal targets. The
          default value is "#/.sconf_temp".

          log_file specifies a file which collects the output from
          commands that are executed to check for the existence of header
          files, libraries, etc. The default is "#/config.log". If you are
          using the VariantDir function, you may want to specify a
          subdirectory under your variant directory.

          config_h specifies a C header file where the results of tests
          will be written. The results will consist of lines like #define
          HAVE_STDIO_H, #define HAVE_LIBM, etc. Customarily, the name
          chosen is "config.h". The default is to not write a config_h
          file. You can specify the same config_h file in multiple calls
          to Configure, in which case SCons will concatenate all results
          in the specified file. Note that SCons uses its normal
          dependency checking to decide if it's necessary to rebuild the
          specified config_h file. This means that the file is not
          necessarily re-built each time scons is run, but is only rebuilt
          if its contents will have changed and some target that depends
          on the config_h file is being built.

          The clean and help arguments can be used to suppress execution
          of the configuration tests when the -c/--clean or -H/-h/--help
          options are used, respectively. The default behavior is always
          to execute configure context tests, since the results of the
          tests may affect the list of targets to be cleaned or the help
          text. If the configure tests do not affect these, then you may
          add the clean=False or help=False arguments (or both) to avoid
          unnecessary test execution.

   context.Finish()
          This method must be called after configuration is done. Though
          required, this is not enforced except if Configure is called
          again while there is still an active context, in which case an
          exception is raised. Finish returns the environment as modified
          during the course of running the configuration checks. After
          this method is called, no further checks can be performed with
          this configuration context. However, you can create a new
          configure context to perform additional checks.

   Example of a typical Configure usage:
env = Environment()
conf = Configure(env)
if not conf.CheckCHeader("math.h"):
    print("We really need math.h!")
    Exit(1)
if conf.CheckLibWithHeader("qt", "qapp.h", "c++", "QApplication qapp(0,0);"):
    # do stuff for qt - usage, e.g.
    conf.env.Append(CPPDEFINES="WITH_QT")
env = conf.Finish()

   A configure context has the following predefined methods which can be
   used to perform checks. Where language is a required or optional
   parameter, the choice can currently be C or C++. The spellings accepted
   for C are "C" or "c"; for C++ the value can be "CXX", "cxx", "C++" or
   "c++".

   context.CheckHeader(header, [include_quotes, language])
          Checks if header is usable in the specified language. header may
          be a list, in which case the last item in the list is the header
          file to be checked, and the previous list items are header files
          whose #include lines should precede the header line being
          checked for. The optional argument include_quotes must be a two
          character string, where the first character denotes the opening
          quote and the second character denotes the closing quote. By
          default, both characters are " (double quote). The optional
          argument language should be either C or C++ and selects the
          compiler to be used for the check. Returns a boolean indicating
          success or failure.

   context.CheckCHeader(header, [include_quotes])
          Checks if header is usable when compiling a C language program.
          header may be a list, in which case the last item in the list is
          the header file to be checked, and the previous list items are
          header files whose #include lines should precede the header line
          being checked for. The optional argument include_quotes must be
          a two character string, where the first character denotes the
          opening quote and the second character denotes the closing
          quote. By default, both characters are " (double quote). Note
          this is a wrapper around CheckHeader. Returns a boolean
          indicating success or failure.

   context.CheckCXXHeader(header, [include_quotes])
          Checks if header is usable when compiling a C++ language
          program. header may be a list, in which case the last item in
          the list is the header file to be checked, and the previous list
          items are header files whose #include lines should precede the
          header line being checked for. The optional argument
          include_quotes must be a two character string, where the first
          character denotes the opening quote and the second character
          denotes the closing quote. By default, both characters are "
          (double quote). Note this is a wrapper around CheckHeader.
          Returns a boolean indicating success or failure.

   context.CheckFunc(function_name, [header, language])
          Checks if the specified C or C++ library function is available
          based on the context's local environment settings (that is,
          using the values of [2237]$CFLAGS, [2238]$CPPFLAGS, [2239]$LIBS
          or other relevant construction variables).

          function_name is the name of the function to check for. The
          optional header argument is a string that will be placed at the
          top of the test file that will be compiled to check if the
          function exists; the default is:

#ifdef __cplusplus
extern "C"
#endif
char function_name();

          Returns an empty string on success, a string containing an error
          message on failure.

   context.CheckLib([library, symbol, header, language, autoadd=True])
          Checks if library provides symbol. If autoadd is true (the
          default) and the library provides the specified symbol, appends
          the library to the LIBS construction variable library may also
          be None (the default), in which case symbol is checked with the
          current LIBS variable, or a list of library names, in which case
          each library in the list will be checked for symbol. If symbol
          is not set or is None, then CheckLib just checks if you can link
          against the specified library. Note though it is legal syntax,
          it would not be very useful to call this method with library and
          symbol both omitted or None. Returns a boolean indicating
          success or failure.

   context.CheckLibWithHeader(library, header, language, [call,
          autoadd=True])
          Provides a more sophisticated way to check against libraries
          then the CheckLib call. library specifies the library or a list
          of libraries to check. header specifies a header to check for.
          header may be a list, in which case the last item in the list is
          the header file to be checked, and the previous list items are
          header files whose #include lines should precede the header line
          being checked for. call can be any valid expression (with a
          trailing ';'). If call is not set, the default simply checks
          that you can link against the specified library. autoadd
          (default true) specifies whether to add the library to the
          environment if the check succeeds. Returns a boolean indicating
          success or failure.

   context.CheckType(type_name, [includes, language])
          Checks for the existence of a type defined by typedef. type_name
          specifies the typedef name to check for. includes is a string
          containing one or more #include lines that will be inserted into
          the program that will be run to test for the existence of the
          type. Example:

sconf.CheckType('foo_type', '#include "my_types.h"', 'C++')

          Returns an empty string on success, a string containing an error
          message on failure.

   context.CheckTypeSize(type_name, [header, language, expect])
          Checks for the size of a type defined by typedef. type_name
          specifies the typedef name to check for. The optional header
          argument is a string that will be placed at the top of the test
          file that will be compiled to check if the type exists; the
          default is empty. If the optional expect, is supplied, it should
          be an integer size; CheckTypeSize will fail unless type_name is
          actually that size. Returns the size in bytes, or zero if the
          type was not found (or if the size did not match expect).

          For example,

CheckTypeSize('short', expect=2)

          will return the size 2 only if short is actually two bytes.

   context.CheckCC()
          Checks whether the C compiler (as defined by the [2240]$CC
          construction variable) works, by trying to compile a small
          source file. This provides a more rigorous check: by default,
          SCons itself only detects if there is a program with the correct
          name, not if it is a functioning compiler. Returns a boolean
          indicating success or failure.

          The test program will be built with the same command line as the
          one used by the [2241]Object builder for C source files, so by
          setting relevant construction variables it can be used to detect
          if particular compiler flags will be accepted or rejected by the
          compiler.

   context.CheckCXX()
          Checks whether the C++ compiler (as defined by the [2242]$CXX
          construction variable) works, by trying to compile a small
          source file. This provides a more rigorous check: by default,
          SCons itself only detects if there is a program with the correct
          name, not if it is a functioning compiler. Returns a boolean
          indicating success or failure.

          The test program will be built with the same command line as the
          one used by the [2243]Object builder for C++ source files, so by
          setting relevant construction variables it can be used to detect
          if particular compiler flags will be accepted or rejected by the
          compiler.

   context.CheckSHCC()
          Checks whether the shared-object C compiler (as defined by the
          [2244]$SHCC construction variable) works by trying to compile a
          small source file. This provides a more rigorous check: by
          default, SCons itself only detects if there is a program with
          the correct name, not if it is a functioning compiler. Returns a
          boolean indicating success or failure.

          The test program will be built with the same command line as the
          one used by the [2245]SharedObject builder for C source files,
          so by setting relevant construction variables it can be used to
          detect if particular compiler flags will be accepted or rejected
          by the compiler. Note this does not check whether a shared
          library/dll can be created.

   context.CheckSHCXX()
          Checks whether the shared-object C++ compiler (as defined by the
          [2246]$SHCXX construction variable) works by trying to compile a
          small source file. This provides a more rigorous check: by
          default, SCons itself only detects if there is a program with
          the correct name, not if it is a functioning compiler. Returns a
          boolean indicating success or failure.

          The test program will be built with the same command line as the
          one used by the [2247]SharedObject builder for C++ source files,
          so by setting relevant construction variables it can be used to
          detect if particular compiler flags will be accepted or rejected
          by the compiler. Note this does not check whether a shared
          library/dll can be created.

   context.CheckProg(prog_name)
          Checks if prog_name exists in the path SCons will use at build
          time. (context.env['ENV']['PATH']). Returns a string containing
          the path to the program, or None on failure.

   context.CheckDeclaration(symbol, [includes, language])
          Checks if the specified symbol is declared. includes is a string
          containing one or more #include lines that will be inserted into
          the program that will be run to test for the existence of the
          symbol. Returns a boolean indicating success or failure.

   context.CheckMember(aggregate_member, [header, language])
          Checks for the existence of a member of the C/C++ struct or
          class. aggregate_member specifies the struct/class and member to
          check for. header is a string containing one or more #include
          lines that will be inserted into the program that will be run to
          test for the existence of the member. Example:

sconf.CheckMember('struct tm.tm_sec', '#include <time.h>')

          Returns a boolean indicating success or failure.

   context.Define(symbol, [value, comment])
          This method does not check for anything, but rather forces the
          definition of a preprocessor macro that will be added to the
          configuration header file. name is the macro's identifier. If
          value is given, it will be be used as the macro replacement
          value. If value is a string and needs to display with quotes,
          the quotes need to be included, as in '"string"' If the optional
          comment is given, it is inserted as a comment above the macro
          definition (suitable comment marks will be added automatically).
          This is analogous to using AC_DEFINE in Autoconf.

          Examples:

env = Environment()
conf = Configure(env)

# Puts the following line in the config header file:
#    #define A_SYMBOL
conf.Define("A_SYMBOL")

# Puts the following line in the config header file:
#    #define A_SYMBOL 1
conf.Define("A_SYMBOL", 1)

          Examples of quoting string values:

env = Environment()
conf = Configure(env)

# Puts the following line in the config header file:
#    #define A_SYMBOL YA
conf.Define("A_SYMBOL", "YA")

# Puts the following line in the config header file:
#    #define A_SYMBOL "YA"
conf.Define("A_SYMBOL", '"YA"')

          Example including comment:

env = Environment()
conf = Configure(env)

# Puts the following lines in the config header file:
#    /* Set to 1 if you have a symbol */
#    #define A_SYMBOL 1
conf.Define("A_SYMBOL", 1, "Set to 1 if you have a symbol")

   You can define your own custom checks in addition to using the
   predefined checks. To enable custom checks, pass a dictionary to the
   [2248]Configure function as the custom_tests parameter. The dictionary
   maps the names of the checks to the custom check callables (either a
   Python function or an instance of a class implementing a __call__
   method). Each custom check will be called with a a CheckContext
   instance as the first parameter followed by the remaining arguments,
   which must be supplied by the user of the check. A CheckContext is not
   the same as a configure context; rather it is an instance of a class
   which contains a configure context (available as chk_ctx.sconf). A
   CheckContext provides the following methods which custom checks can
   make use of::

   chk_ctx.Message(text)
          Displays text as an indicator of progess. For example: Checking
          for library X.... Usually called before the check is started.

   chk_ctx.Result(res)
          Displays a result message as an indicator of progress. If res is
          an integer, displays yes if res evaluates true or no if false.
          If res is a string, it is displayed as-is. Usually called after
          the check has completed.

   chk_ctx.TryCompile(text, extension='')
          Checks if a file containing text and given the specified
          extension (e.g. '.c') can be compiled to an object file using
          the environment's [2249]Object builder. Returns a boolean
          indicating success or failure.

   chk_ctx.TryLink(text, extension='')
          Checks if a file containing text and given the specified
          extension (e.g. '.c') can be compiled to an executable program
          using the environment's [2250]Program builder. Returns a boolean
          indicating success or failure.

   chk_ctx.TryRun(text, extension='')
          Checks if a file containing text and given the specified
          extension (e.g. '.c') can be compiled to an excutable program
          using the environment's [2251]Program builder and subsequently
          executed. Execution is only attempted if the build succeeds. If
          the program executes successfully (that is, its return status is
          0), a tuple (True, outputStr) is returned, where outputStr is
          the standard output of the program. If the program fails
          execution (its return status is non-zero), then (False, '') is
          returned.

   chk_ctx.TryAction(action, [text, extension=''])
          Checks if the specified action with an optional source file
          (contents text, given extension extension) can be executed.
          action may be anything which can be converted to an [2252]Action
          Object. On success, a tuple (True, outputStr) is returned, where
          outputStr is the content of the target file. On failure (False,
          '') is returned.

   chk_ctx.TryBuild(builder, [text, extension=''])
          Low level implementation for testing specific builds; the
          methods above are based on this method. Given the Builder
          instance builder and the optional text of a source file with
          optional extension, returns a boolean indicating success or
          failure. In addition, chk_ctx.lastTarget is set to the build
          target node if the build was successful.

   Example of implementing and using custom tests:
def CheckQt(chk_ctx, qtdir):
    chk_ctx.Message('Checking for qt ...')
    lastLIBS = chk_ctx.env['LIBS']
    lastLIBPATH = chk_ctx.env['LIBPATH']
    lastCPPPATH = chk_ctx.env['CPPPATH']
    chk_ctx.env.Append(LIBS='qt', LIBPATH=qtdir + '/lib', CPPPATH=qtdir + '/incl
ude')
    ret = chk_ctx.TryLink(
        """\
#include <qapp.h>
int main(int argc, char **argv) {
  QApplication qapp(argc, argv);
  return 0;
}
"""
    )
    if not ret:
        chkctx.env.Replace(LIBS=lastLIBS, LIBPATH=lastLIBPATH, CPPPATH=lastCPPPA
TH)
    chkctx.Result(ret)
    return ret

env = Environment()
conf = Configure(env, custom_tests={'CheckQt': CheckQt})
if not conf.CheckQt('/usr/lib/qt'):
    print('We really need qt!')
    Exit(1)
env = conf.Finish()

Command-Line Construction Variables

   Often when building software, some variables need to be specified at
   build time. For example, libraries needed for the build may be in
   non-standard locations, or site-specific compiler options may need to
   be passed to the compiler. SCons provides a Variables object to support
   overriding construction variables with values obtained from various
   sources, often from the command line:
scons VARIABLE=foo

   The variable values can also be specified in a configuration file or an
   SConscript file.

   To obtain the object for manipulating values, call the Variables
   function:

   Variables([files, [args]])
          If files is a file or list of files, they are executed as Python
          scripts, and the values of (global) Python variables set in
          those files are added as construction variables in the Default
          Environment. If no files are specified, or the files argument is
          None, then no files will be read (supplying None is necessary if
          there are no files but you want to specify args as a positional
          argument).

          The following example file contents could be used to set an
          alternative C compiler:

CC = 'my_cc'

          If args is specified, it is a dictionary of values that will
          override anything read from files. The primary use is to pass
          the ARGUMENTS dictionary that holds variables specified on the
          command line, allowing you to indicate that if a setting appears
          on both the command line and in the file(s), the command line
          setting takes precedence. However, any dictionary can be passed.
          Examples:

vars = Variables('custom.py')
vars = Variables('overrides.py', ARGUMENTS)
vars = Variables(None, {FOO:'expansion', BAR:7})

          Calling Variables with no arguments is equivalent to:

vars = Variables(files=None, args=ARGUMENTS)

          Note that since the variables are eventually added as
          construction variables, you should choose variable names which
          do not unintentionally change pre-defined construction variables
          that your project will make use of (see [2253]the section called
          "Construction Variables").

   Variables objects have the following methods:

   vars.Add(key, [help, default, validator, converter])
          Add a customizable construction variable to the Variables
          object. key is either the name of the variable, or a tuple (or
          list), in which case the first item in the tuple is taken as the
          variable name, and any remaining values are considered aliases
          for the variable. help is the help text for the variable
          (default empty string). default is the default value of the
          variable (default None). If default is None and a value is not
          specified, the construction variable will not be added to the
          construction environment.

          As a special case, if key is a tuple (or list) and is the only
          argument, the tuple is unpacked into the five parameters listed
          above left to right, with any missing members filled with the
          respecitive default values. This form allows Add to consume a
          tuple emitted by the convenience functions [2254]BoolVariable,
          [2255]EnumVariable, [2256]ListVariable, [2257]PackageVariable
          and [2258]PathVariable.

          If the optional validator is supplied, it is called to validate
          the value of the variable. A function supplied as a validator
          must accept three arguments: key, value and env, and should
          raise an exception with a helpful error message if value is
          invalid. No return value is expected from the validator.

          If the optional converter is supplied, it is called to convert
          the value before putting it in the environment, and should take
          either a value or a value and environment as parameters. The
          converter function must return a value, which will be converted
          into a string and be passed to the validator (if any) and then
          added to the construction environment.

          Examples:

vars.Add('CC', help='The C compiler')

def valid_color(key, val, env):
    if not val in ['red', 'blue', 'yellow']:
        raise Exception("Invalid color value '%s'" % val)

vars.Add('COLOR', validator=valid_color)

   vars.AddVariables(args)
          A convenience method that adds one or more customizable
          construction variables to a Variables object in one call;
          equivalent to calling Add multiple times. The args are tuples
          (or lists) that contain the arguments for an individual call to
          the Add method. Since tuples are not Python mappings, the
          arguments cannot use the keyword form, but rather are positional
          arguments as documented for [2259]Add: a required name, the
          other four optional, but must be in the specified order if used.

opt.AddVariables(
    ("debug", "", 0),
    ("CC", "The C compiler"),
    ("VALIDATE", "An option for testing validation", "notset", validator, None),
)

   vars.Update(env, [args])
          Update a construction environment env with the customized
          construction variables. Any specified variables that are not
          configured for the Variables object will be saved and may be
          retrieved using the [2260]UnknownVariables method.

          Normally this method is not called directly, but rather invoked
          indirectly by passing the Variables object to the
          [2261]Environment function:

env = Environment(variables=vars)

   vars.UnknownVariables()
          Returns a dictionary containing any variables that were
          specified either in the files or the dictionary with which the
          Variables object was initialized, but for which the Variables
          object was not configured.

env = Environment(variables=vars)
for key, value in vars.UnknownVariables():
    print("unknown variable:  %s=%s" % (key, value))

   vars.Save(filename, env)
          Save the currently set variables into a script file named by
          filename. Only variables that are set to non-default values are
          saved. You can load these saved settings on a subsequent run by
          passing filename to the [2262]Variables function, providing a
          way to cache particular settings for reuse.

env = Environment()
vars = Variables(['variables.cache', 'custom.py'])
vars.Add(...)
vars.Update(env)
vars.Save('variables.cache', env)

   vars.GenerateHelpText(env, [sort])
          Generate help text documenting the customizable construction
          variables, suitable for passing in to the [2263]Help function.
          env is the construction environment that will be used to get the
          actual values of the customizable variables. If the (optional)
          value of sort is callable, it is used as a comparison function
          to determine how to sort the added variables. This function must
          accept two arguments, compare them, and return a negative
          integer if the first is less-than the second, zero for equality,
          or a positive integer for greater-than. Optionally a Boolean
          value of True for sort will cause a standard alphabetical sort
          to be performed.

Help(vars.GenerateHelpText(env))

def cmp(a, b):
    return (a > b) - (a < b)

Help(vars.GenerateHelpText(env, sort=cmp))

   vars.FormatVariableHelpText(env, opt, help, default, actual)
          Returns a formatted string containing the printable help text
          for one option. It is normally not called directly, but is
          called by the GenerateHelpText method to create the returned
          help text. It may be overridden with your own function that
          takes the arguments specified above and returns a string of help
          text formatted to your liking. Note that GenerateHelpText will
          not put any blank lines or extra characters in between the
          entries, so you must add those characters to the returned string
          if you want the entries separated.

def my_format(env, opt, help, default, actual):
    fmt = "\n%s: default=%s actual=%s (%s)\n"
    return fmt % (opt, default, actual, help)

vars.FormatVariableHelpText = my_format

   To make it more convenient to work with customizable Variables, scons
   provides a number of functions that make it easy to set up various
   types of Variables. Each of these return a tuple ready to be passed to
   the Add or AddVariables method:

   BoolVariable(key, help, default)
          Returns a tuple of arguments to set up a Boolean option. The
          option will use the specified name key, have a default value of
          default, and help will form the descriptive part of the help
          text. The option will interpret the values y, yes, t, true, 1,
          on and all as true, and the values n, no, f, false, 0, off and
          none as false.

   EnumVariable(key, help, default, allowed_values, [map, ignorecase])
          Returns a tuple of arguments to set up an option whose value may
          be one of a specified list of legal enumerated values. The
          option will use the specified name key, have a default value of
          default, and help will form the descriptive part of the help
          text. The option will only support those values in the
          allowed_values list. The optional map argument is a dictionary
          that can be used to convert input values into specific legal
          values in the allowed_values list. If the value of ignore_case
          is 0 (the default), then the values are case-sensitive. If the
          value of ignore_case is 1, then values will be matched
          case-insensitively. If the value of ignore_case is 2, then
          values will be matched case-insensitively, and all input values
          will be converted to lower case.

   ListVariable(key, help, default, names, [map])
          Returns a tuple of arguments to set up an option whose value may
          be one or more of a specified list of legal enumerated values.
          The option will use the specified name key, have a default value
          of default, and help will form the descriptive part of the help
          text. The option will only accept the values "all", "none", or
          the values in the names list. More than one value may be
          specified, separated by commas. The default may be a string of
          comma-separated default values, or a list of the default values.
          The optional map argument is a dictionary that can be used to
          convert input values into specific legal values in the names
          list. (Note that the additional values accepted through the use
          of a map are not reflected in the generated help message).

   PackageVariable(key, help, default)
          Returns a tuple of arguments to set up an option whose value is
          a path name of a package that may be enabled, disabled or given
          an explicit path name. The option will use the specified name
          key, have a default value of default, and help will form the
          descriptive part of the help text. The option will support the
          values yes, true, on, enable or search, in which case the
          specified default will be used, or the option may be set to an
          arbitrary string (typically the path name to a package that is
          being enabled). The option will also support the values no,
          false, off or disable to disable use of the specified option.

   PathVariable(key, help, default, [validator])
          Returns a tuple of arguments to set up an option whose value is
          expected to be a path name. The option will use the specified
          name key, have a default value of default, and help will form
          the descriptive part of the help text. An additional validator
          may be specified that will be called to verify that the
          specified path is acceptable. SCons supplies the following
          ready-made validators:

        PathVariable.PathExists
                Verify that the specified path exists (this the default
                behavior if no validator is supplied).

        PathVariable.PathIsFile
                Verify that the specified path exists and is a regular
                file.

        PathVariable.PathIsDir
                Verify that the specified path exists and is a directory.

        PathVariable.PathIsDirCreate
                Verify that the specified path exists and is a directory;
                if it does not exist, create the directory.

        PathVariable.PathAccept
                Accept the specific path name argument without validation,
                suitable for when you want your users to be able to
                specify a directory path that will be created as part of
                the build process, for example.

          You may supply your own validator function, which must accept
          three arguments (key, the name of the variable to be set; val,
          the specified value being checked; and env, the construction
          environment) and should raise an exception if the specified
          value is not acceptable.

   These functions make it convenient to create a number of variables with
   consistent behavior in a single call to the AddVariables method:
vars.AddVariables(
    BoolVariable(
        "warnings",
        help="compilation with -Wall and similar",
        default=1,
    ),
    EnumVariable(
        "debug",
        help="debug output and symbols",
        default="no",
        allowed_values=("yes", "no", "full"),
        map={},
        ignorecase=0,  # case sensitive
    ),
    ListVariable(
        "shared",
        help="libraries to build as shared libraries",
        default="all",
        names=list_of_libs,
    ),
    PackageVariable(
        "x11",
        help="use X11 installed here (yes = search some places)",
        default="yes",
    ),
    PathVariable(
        "qtdir",
        help="where the root of Qt is installed",
        default=qtdir),
    PathVariable(
        "foopath",
        help="where the foo library is installed",
        default=foopath,
        validator=PathVariable.PathIsDir,
    ),
)

Node Objects

   SCons represents objects that are the sources or targets of build
   operations as Nodes, which are internal data structures. There are a
   number of user-visible types of nodes: File Nodes, Directory Nodes,
   Value Nodes and Alias Nodes. Some of the node types have public
   attributes and methods, described below. Each of the node types has a
   global function and a matching environment method to create instances:
   [2264]File, [2265]Dir, [2266]Value and [2267]Alias.

Filesystem Nodes

   The [2268]File and [2269]Dir functions/methods return File and
   Directory Nodes, respectively. File and Directory Nodes (collectively,
   Filesystem Nodes) represent build components that correspond to an
   entry in the computer's filesystem, whether or not such an entry exists
   at the time the Node is created. You do not usually need to explicitly
   create filesystem Nodes, since when you supply a string as a target or
   source of a Builder, SCons will create the Nodes as needed to populate
   the dependency graph. Builders return the target Node(s) in the form of
   a list, which you can then make use of. However, since filesystem Nodes
   have some useful public attributes and methods that you can use in
   SConscript files, it is sometimes appropriate to create them manually,
   outside the regular context of a Builder call.

   The following attributes provide information about a Node:

   node.path
          The build path of the given file or directory. This path is
          relative to the top-level directory (where the SConstruct file
          is found). The build path is the same as the source path if
          variant_dir is not being used.

   node.abspath
          The absolute build path of the given file or directory.

   node.relpath
          The build path of the given file or directory relative to the
          root SConstruct file's directory.

   node.srcnode()
          The srcnode method returns another File or Directory Node
          representing the source path of the given File or Directory
          Node.

   Examples:
# Get the current build dir's path, relative to top.
Dir('.').path

# Current dir's absolute path
Dir('.').abspath

# Current dir's path relative to the root SConstruct file's directory
Dir('.').relpath

# Next line is always '.', because it is the top dir's path relative to itself.
Dir('#.').path

# Source path of the given source file.
File('foo.c').srcnode().path

# Builders return lists of File objects:
foo = env.Program('foo.c')
print("foo will be built in", foo[0].path)

   Filesystem Node objects have methods to create new File and Directory
   Nodes relative to the original Node. There are also times when you may
   need to refer to an entry in a filesystem without knowing in advance
   whether it's a file or a directory. For those situations, there is an
   Entry method of filesystem node objects, which returns a Node that can
   represent either a file or a directory.

   If the original Node is a Directory Node, these methods will place the
   new Node within the directory the original Node represents:

   node.Dir(name)
          Returns a directory Node name which is a subdirectory of the
          directory represented by node.

   node.File(name)
          Returns a file Node name in the directory represented by node.

   node.Entry(name)
          Returns an unresolved Node name in the directory represented by
          node.

   If the original Node is a File Node, these methods will place the the
   new Node in the same directory as the one the original Node represents:

   node.Dir(name)
          Returns a Node name for a directory in the parent directory of
          the file represented by node.

   node.File(name)
          Returns a Node name for a file in the parent directory of the
          file represented by node.

   node.Entry(name)
          Returns an unresolved Node name in the parent directory of the
          file represented by node.

   For example:
# Get a Node for a file within a directory
incl = Dir('include')
f = incl.File('header.h')

# Get a Node for a subdirectory within a directory
dist = Dir('project-3.2.1')
src = dist.Dir('src')

# Get a Node for a file in the same directory
cfile = File('sample.c')
hfile = cfile.File('sample.h')

# Combined example
docs = Dir('docs')
html = docs.Dir('html')
index = html.File('index.html')
css = index.File('app.css')

Value and Alias Nodes

   SCons provides two other Node types to represent object that will not
   have an equivalent filesystem entry. Such Nodes always need to be
   created explicitly.

   The [2270]Alias method returns an Alias Node. Aliases are virtual
   objects - they will not themselves result in physical objects being
   constructed, but are entered into the dependency graph related to their
   sources. An alias is checked for up to date by checking if its sources
   are up to date. An alias is built by making sure its sources have been
   built, and if any building took place, applying any Actions that are
   defined as part of the alias.

   An [2271]Alias call creates an entry in the alias namespace, which is
   used for disambiguation. If an alias source has a string valued name,
   it will be resolved to a filesystem entry Node, unless it is found in
   the alias namespace, in which case it it resolved to the matching alias
   Node. As a result, the order of Alias calls is significant. An alias
   can refer to another alias, but only if the other alias has previously
   been created.

   The [2272]Value method returns a Value Node. Value nodes are often used
   for generated data that will not have any corresponding filesystem
   entry, but will be used to determine whether a build target is out of
   date, or to include as part of a build Action. Common examples are
   timestamp strings, revision control version strings and other run-time
   generated strings.

   A Value Node can also be the target of a builder.

EXTENDING SCONS

   SCons is designed to be extensible through provided facilities, so
   changing the code of SCons itself is only rarely needed to customize
   its behavior. A number of the main operations use callable objects
   which can be supplemented by writing your own. Builders, Scanners and
   Tools each use a kind of plugin system, allowing you to easily drop in
   new ones. Information about creating [2273]Builder Objects and
   [2274]Scanner Objects appear in the following sections. The
   instructions SCons actually uses to construct things are called
   Actions, and it is easy to create Action Objects and hand them to the
   objects that need to know about those actions (besides Builders, see
   [2275]AddPostAction, [2276]AddPreAction and [2277]Alias for some
   examples of other places that take Actions). [2278]Action Objects are
   also described below. Adding new Tool modules is described in
   [2279]Tool Modules

Builder Objects

   scons can be extended to build different types of targets by adding new
   Builder objects to a construction environment. In general, you should
   only need to add a new Builder object when you want to build a new type
   of file or other external target. For output file types scons already
   knows about, you can usually modify the behavior of premade Builders
   such as [2280]Program, [2281]Object or [2282]Library by changing the
   construction variables they use ([2283]$CC, [2284]$LINK, etc.). In this
   manner you can, for example, change the compiler to use, which is
   simpler and less error-prone than writing a new builder. The
   documentation for each Builder lists which construction variables it
   uses.

   Builder objects are created using the [2285]Builder factory function.
   Once created, a builder is added to an environment by entering it in
   the [2286]$BUILDERS dictionary in that environment (some of the
   examples in this section illustrate this). Doing so automatically
   triggers SCons to add a method with the name of the builder to the
   environment.

   The Builder function accepts the following keyword arguments:

   action
          The command used to build the target from the source. action may
          be a string representing a template command line to execute, a
          list of strings representing the command to execute with its
          arguments (suitable for enclosing white space in an argument), a
          dictionary mapping source file name suffixes to any combination
          of command line strings (if the builder should accept multiple
          source file extensions), a Python function, an Action object
          (see [2287]Action Objects) or a list of any of the above.

          An action function must accept three arguments: source, target
          and env. source is a list of source nodes; target is a list of
          target nodes; env is the construction environment to use for
          context.

          The action and generator arguments must not both be used for the
          same Builder.

   prefix
          The prefix to prepend to the target file name. prefix may be a
          string, a function (or other callable) that takes two arguments
          (a construction environment and a list of sources) and returns a
          prefix string, or a dictionary specifying a mapping from a
          specific source suffix (of the first source specified) to a
          corresponding target prefix string. For the dictionary form,
          both the source suffix (key) and target prefix (value)
          specifications may use environment variable substitution, and
          the target prefix may also be a callable object. The default
          target prefix may be indicated by a dictionary entry with a key
          of None.

b = Builder("build_it < $SOURCE > $TARGET",
            prefix="file-")

def gen_prefix(env, sources):
    return "file-" + env['PLATFORM'] + '-'

b = Builder("build_it < $SOURCE > $TARGET",
            prefix=gen_prefix)

b = Builder("build_it < $SOURCE > $TARGET",
            suffix={None: "file-", "$SRC_SFX_A": gen_prefix})

   suffix
          The suffix to append to the target file name. Specified in the
          same manner as for prefix above. If the suffix is a string, then
          scons prepends a '.' to the suffix if it's not already there.
          The string returned by the callable object or obtained from the
          dictionary is untouched and you need to manually prepend a '.'
          if one is required.

b = Builder("build_it < $SOURCE > $TARGET"
            suffix="-file")

def gen_suffix(env, sources):
    return "." + env['PLATFORM'] + "-file"

b = Builder("build_it < $SOURCE > $TARGET",
            suffix=gen_suffix)

b = Builder("build_it < $SOURCE > $TARGET",
            suffix={None: ".sfx1", "$SRC_SFX_A": gen_suffix})

   ensure_suffix
          If set to a true value, ensures that targets will end in suffix.
          Thus, the suffix will also be added to any target strings that
          have a suffix that is not already suffix. The default behavior
          (also indicated by a false value) is to leave unchanged any
          target string that looks like it already has a suffix.

b1 = Builder("build_it < $SOURCE > $TARGET"
             suffix = ".out")
b2 = Builder("build_it < $SOURCE > $TARGET"
             suffix = ".out",
             ensure_suffix=True)
env = Environment()
env['BUILDERS']['B1'] = b1
env['BUILDERS']['B2'] = b2

# Builds "foo.txt" because ensure_suffix is not set.
env.B1('foo.txt', 'foo.in')

# Builds "bar.txt.out" because ensure_suffix is set.
env.B2('bar.txt', 'bar.in')

   src_suffix
          The expected source file name suffix. src_suffix may be a string
          or a list of strings.

   target_scanner
          A Scanner object that will be invoked to find implicit
          dependencies for this target file. This keyword argument should
          be used for Scanner objects that find implicit dependencies
          based only on the target file and the construction environment,
          not for implicit dependencies based on source files. See
          [2288]the section called "Scanner Objects" for information about
          creating Scanner objects.

   source_scanner
          A Scanner object that will be invoked to find implicit
          dependencies in any source files used to build this target file.
          This is where you would specify a scanner to find things like
          #include lines in source files. The pre-built DirScanner Scanner
          object may be used to indicate that this Builder should scan
          directory trees for on-disk changes to files that scons does not
          know about from other Builder or function calls. See [2289]the
          section called "Scanner Objects" for information about creating
          your own Scanner objects.

   target_factory
          A factory function that the Builder will use to turn any targets
          specified as strings into SCons Nodes. By default, SCons assumes
          that all targets are files. Other useful target_factory values
          include Dir, for when a Builder creates a directory target, and
          Entry, for when a Builder can create either a file or directory
          target.

          Example:

MakeDirectoryBuilder = Builder(action=my_mkdir, target_factory=Dir)
env = Environment()
env.Append(BUILDERS={'MakeDirectory': MakeDirectoryBuilder})
env.MakeDirectory('new_directory', [])

          Note that the call to this MakeDirectory Builder needs to
          specify an empty source list to make the string represent the
          builder's target; without that, it would assume the argument is
          the source, and would try to deduce the target name from it,
          which in the absence of an automatically-added prefix or suffix
          would lead to a matching target and source name and a circular
          dependency.

   source_factory
          A factory function that the Builder will use to turn any sources
          specified as strings into SCons Nodes. By default, SCons assumes
          that all source are files. Other useful source_factory values
          include Dir, for when a Builder uses a directory as a source,
          and Entry, for when a Builder can use files or directories (or
          both) as sources.

          Example:

CollectBuilder = Builder(action=my_mkdir, source_factory=Entry)
env = Environment()
env.Append(BUILDERS={'Collect': CollectBuilder})
env.Collect('archive', ['directory_name', 'file_name'])

   emitter
          A function or list of functions to manipulate the target and
          source lists before dependencies are established and the
          target(s) are actually built. emitter can also be a string
          containing a construction variable to expand to an emitter
          function or list of functions, or a dictionary mapping source
          file suffixes to emitter functions. (Only the suffix of the
          first source file is used to select the actual emitter function
          from an emitter dictionary.)

          A function passed as emitter must accept three arguments:
          source, target and env. source is a list of source nodes, target
          is a list of target nodes, env is the construction environment
          to use for context.

          An emitter must return a tuple containing two lists, the list of
          targets to be built by this builder, and the list of sources for
          this builder.

          Example:

def e(target, source, env):
    return target + ['foo.foo'], source + ['foo.src']

# Simple association of an emitter function with a Builder.
b = Builder("my_build < $TARGET > $SOURCE", emitter=e)

def e2(target, source, env):
    return target + ['bar.foo'], source + ['bar.src']

# Simple association of a list of emitter functions with a Builder.
b = Builder("my_build < $TARGET > $SOURCE", emitter=[e, e2])

# Calling an emitter function through a construction variable.
env = Environment(MY_EMITTER=e)
b = Builder("my_build < $TARGET > $SOURCE", emitter='$MY_EMITTER')

# Calling a list of emitter functions through a construction variable.
env = Environment(EMITTER_LIST=[e, e2])
b = Builder("my_build < $TARGET > $SOURCE", emitter='$EMITTER_LIST')

# Associating multiple emitters with different file
# suffixes using a dictionary.
def e_suf1(target, source, env):
    return target + ['another_target_file'], source

def e_suf2(target, source, env):
    return target, source + ['another_source_file']

b = Builder(
    action="my_build < $TARGET > $SOURCE",
    emitter={'.suf1': e_suf1, '.suf2': e_suf2}
)

   multi
          Specifies whether this builder is allowed to be called multiple
          times for the same target file(s). The default is False, which
          means the builder can not be called multiple times for the same
          target file(s). Calling a builder multiple times for the same
          target simply adds additional source files to the target; it is
          not allowed to change the environment associated with the
          target, specify additional environment overrides, or associate a
          different builder with the target.

   env
          A construction environment that can be used to fetch source code
          using this Builder. (Note that this environment is not used for
          normal builds of normal target files, which use the environment
          that was used to call the Builder for the target file.)

   generator
          A function that returns a list of actions that will be executed
          to build the target(s) from the source(s). The returned
          action(s) may be an Action object, or anything that can be
          converted into an Action object (see the next section).

          A function passed as generator must accept four arguments:
          source, target, env and for_signature. source is a list of
          source nodes, target is a list of target nodes, env is the
          construction environment to use for context, and for_signature
          is a Boolean value that tells the function if it is being called
          for the purpose of generating a build signature (as opposed to
          actually executing the command). Since the build signature is
          used for rebuild determination, the function should omit those
          elements that do not affect whether a rebuild should be
          triggered if for_signature is true.

          Example:

def g(source, target, env, for_signature):
    return [["gcc", "-c", "-o"] + target + source]

b = Builder(generator=g)

          The generator and action arguments must not both be used for the
          same Builder.

   src_builder
          Specifies a builder to use when a source file name suffix does
          not match any of the suffixes of the builder. Using this
          argument produces a multi-stage builder.

   single_source
          Specifies that this builder expects exactly one source file per
          call. Giving more than one source file without target files
          results in implicitly calling the builder multiple times (once
          for each source given). Giving multiple source files together
          with target files results in a UserError exception.

   source_ext_match
          When the specified action argument is a dictionary, the default
          behavior when a builder is passed multiple source files is to
          make sure that the extensions of all the source files match. If
          it is legal for this builder to be called with a list of source
          files with different extensions, this check can be suppressed by
          setting source_ext_match to False or some other non-true value.
          In this case, scons will use the suffix of the first specified
          source file to select the appropriate action from the action
          dictionary.

          In the following example, the setting of source_ext_match
          prevents scons from exiting with an error due to the mismatched
          suffixes of foo.in and foo.extra.

b = Builder(action={'.in' : 'build $SOURCES > $TARGET'},
            source_ext_match=False)

env = Environment(BUILDERS={'MyBuild':b})
env.MyBuild('foo.out', ['foo.in', 'foo.extra'])

   env
          A construction environment that can be used to fetch source code
          using this Builder. (Note that this environment is not used for
          normal builds of normal target files, which use the environment
          that was used to call the Builder for the target file.)

b = Builder(action="build < $SOURCE > $TARGET")
env = Environment(BUILDERS={'MyBuild' : b})
env.MyBuild('foo.out', 'foo.in', my_arg='xyzzy')

   chdir
          A directory from which scons will execute the action(s)
          specified for this Builder. If the chdir argument is a string or
          a directory Node, scons will change to the specified directory.
          If the chdir is not a string or Node and is non-zero, then scons
          will change to the target file's directory.

          Note that scons will not automatically modify its expansion of
          construction variables like $TARGET and $SOURCE when using the
          chdir keyword argument--that is, the expanded file names will
          still be relative to the top-level directory containing the
          SConstruct file, and consequently incorrect relative to the
          chdir directory. Builders created using chdir keyword argument,
          will need to use construction variable expansions like
          ${TARGET.file} and ${SOURCE.file} to use just the filename
          portion of the targets and source.

b = Builder(action="build < ${SOURCE.file} > ${TARGET.file}",
            chdir=1)
env = Environment(BUILDERS={'MyBuild' : b})
env.MyBuild('sub/dir/foo.out', 'sub/dir/foo.in')

Warning

          Python only keeps one current directory location even if there
          are multiple threads. This means that use of the chdir argument
          will not work with the SCons -j option, because individual
          worker threads spawned by SCons interfere with each other when
          they start changing directory.

   Any additional keyword arguments supplied when a Builder object is
   created (that is, when the [2290]Builder function is called) will be
   set in the executing construction environment when the Builder object
   is called. The canonical example here would be to set a construction
   variable to the repository of a source code system.

   Any such keyword arguments supplied when a Builder object is called
   will only be associated with the target created by that particular
   Builder call (and any other files built as a result of the call). These
   extra keyword arguments are passed to the following functions:
   [2291]command generator functions, [2292]function Actions, and
   [2293]emitter functions.

Action Objects

   The [2294]Builder factory function will turn its action keyword
   argument into an appropriate internal Action object, as will the
   [2295]Command function. You can also explicitly create Action objects
   for passing to Builder, or other functions that take actions as
   arguments, by calling the [2296]Action factory function. This may more
   efficient when multiple Builder objects need to do the same thing
   rather than letting each of those Builder objects create a separate
   Action object. It also allows more flexible configuration of an Action
   object. For example, to control the message printed when the action is
   taken you need to create the action object using Action.

   The Action factory function returns an appropriate object for the
   action represented by the type of the action argument (the first
   positional parameter):
     * If action is already an Action object, the object is simply
       returned.
     * If action is a string, a command-line Action is returned. If such a
       string begins with @, the command line is not printed. If the
       string begins with hyphen (-), the exit status from the specified
       command is ignored, allowing execution to continue even if the
       command reports failure:
Action('$CC -c -o $TARGET $SOURCES')

# Doesn't print the line being executed.
Action('@build $TARGET $SOURCES')

# Ignores return value
Action('-build $TARGET $SOURCES')

     * If action is a list, then a list of Action objects is returned. An
       Action object is created as necessary for each element in the list.
       If an element within the list is itself a list, the embedded list
       is taken as the command and arguments to be executed via the
       command line. This allows white space to be enclosed in an argument
       rather than taken as a separator by defining a command in a list
       within a list:
Action([['cc', '-c', '-DWHITE SPACE', '-o', '$TARGET', '$SOURCES']])

     * If action is a callable object, a Function Action is returned. The
       callable must accept three keyword arguments: target, source and
       env. target is a Node object representing the target file, source
       is a Node object representing the source file and env is the
       construction environment used for building the target file.
       The target and source arguments may be lists of Node objects if
       there is more than one target file or source file. The actual
       target and source file name(s) may be retrieved from their Node
       objects via the built-in Python str function:
target_file_name = str(target)
source_file_names = [str(x) for x in source]

       The function should return 0 or None to indicate a successful build
       of the target file(s). The function may raise an exception or
       return a non-zero exit status to indicate an unsuccessful build.
def build_it(target=None, source=None, env=None):
    # build the target from the source
    return 0

a = Action(build_it)

     * If action is not one of the above types, no action object is
       generated and Action returns None.

   The environment method form [2297]env.Action will expand construction
   variables in any argument strings, including action, at the time it is
   called, using the construction variables in the construction
   environment through which it was called. The global function form
   [2298]Action delays variable expansion until the Action object is
   actually used.

   The optional second argument to Action is used to control the output
   which is printed when the Action is actually performed. If this
   parameter is omitted, or if the value is an empty string, a default
   output depending on the type of the action is used. For example, a
   command-line action will print the executed command. The following
   argument types are accepted:
     * If the second argument is a string, or if the cmdstr keyword
       argument is supplied, the string defines what is printed.
       Substitution is performed on the string before it is printed. The
       string typically contains substitutable variables, notably
       $TARGET(S) and $SOURCE(S), or consists of just a single variable
       which is optionally defined somewhere else. SCons itself heavily
       uses the latter variant.
     * If the second argument is a function, or if the strfunction keyword
       argument is supplied, the function will be called to obtain the
       string to be printed when the action is performed. The function
       must accept three keyword arguments: target, source and env, with
       the same interpretation as for a callable action argument above.
       The function is responsible for handling any required
       substitutions.
     * If the second argument is None, or if cmdstr=None is supplied,
       output is suppressed entirely.

   The cmdstr and strfunction keyword arguments may not both be supplied
   in a single call to Action

   Printing of action strings is affected by the setting of
   [2299]$PRINT_CMD_LINE_FUNC.

   Examples:
def build_it(target, source, env):
    # build the target from the source
    return 0

def string_it(target, source, env):
    return "building '%s' from '%s'" % (target[0], source[0])

# Use a positional argument.
f = Action(build_it, string_it)
s = Action(build_it, "building '$TARGET' from '$SOURCE'")

# Alternatively, use a keyword argument.
f = Action(build_it, strfunction=string_it)
s = Action(build_it, cmdstr="building '$TARGET' from '$SOURCE'")

# You can provide a configurable variable.
l = Action(build_it, '$STRINGIT')

   Any additional positional arguments, if present, may either be
   construction variables or lists of construction variables whose values
   will be included in the signature of the Action (the build signature)
   when deciding whether a target should be rebuilt because the action
   changed. Such variables may also be specified using the varlist keyword
   parameter; both positional and keyword forms may be present, and will
   be combined. This is necessary whenever you want a target to be rebuilt
   when a specific construction variable changes. This is not often needed
   for a string action, as the expanded variables will normally be part of
   the command line, but may be needed if a Python function action uses
   the value of a construction variable when generating the command line.
def build_it(target, source, env):
    # build the target from the 'XXX' construction variable
    with open(target[0], 'w') as f:
        f.write(env['XXX'])
    return 0

# Use positional arguments.
a = Action(build_it, '$STRINGIT', ['XXX'])

# Alternatively, use a keyword argument.
a = Action(build_it, varlist=['XXX'])

   The Action factory function can be passed the following optional
   keyword arguments to modify the Action object's behavior:

   chdir
          If chdir is true (the default is False), SCons will change
          directories before executing the action. If the value of chdir
          is a string or a directory Node, SCons will change to the
          specified directory. Otherwise, if chdir evaluates true, SCons
          will change to the target file's directory.

          Note that SCons will not automatically modify its expansion of
          construction variables like $TARGET and $SOURCE when using the
          chdir parameter - that is, the expanded file names will still be
          relative to the top-level directory containing the SConstruct
          file, and consequently incorrect relative to the chdir
          directory. Builders created using chdir keyword argument, will
          need to use construction variable expansions like ${TARGET.file}
          and ${SOURCE.file} to use just the filename portion of the
          targets and source. Example:

a = Action("build < ${SOURCE.file} > ${TARGET.file}", chdir=True)

   exitstatfunc
          If provided, must be a callable which accepts a single
          parameter, the exit status (or return value) from the specified
          action, and which returns an arbitrary or modified value. This
          can be used, for example, to specify that an Action object's
          return value should be ignored under special conditions and
          SCons should, therefore, consider that the action always
          succeeds. Example:

def always_succeed(s):
    # Always return 0, which indicates success.
    return 0

a = Action("build < ${SOURCE.file} > ${TARGET.file}",
           exitstatfunc=always_succeed)

   batch_key
          If provided, indicates that the Action can create multiple
          target files by processing multiple independent source files
          simultaneously. (The canonical example is "batch compilation" of
          multiple object files by passing multiple source files to a
          single invocation of a compiler such as Microsoft's Visual C /
          C++ compiler.) If the batch_key argument evaluates True and is
          not a callable object, the configured Action object will cause
          scons to collect all targets built with the Action object and
          configured with the same construction environment into single
          invocations of the Action object's command line or function.
          Command lines will typically want to use the $CHANGED_SOURCES
          construction variable (and possibly $CHANGED_TARGETS as well) to
          only pass to the command line those sources that have actually
          changed since their targets were built. Example:

a = Action('build $CHANGED_SOURCES', batch_key=True)

          The batch_key argument may also be a callable function that
          returns a key that will be used to identify different "batches"
          of target files to be collected for batch building. A batch_key
          function must accept four parameters: action, env, target and
          source. The first parameter, action, is the active action
          object. The second parameter, env, is the construction
          environment configured for the target. The target and source
          parameters are the lists of targets and sources for the
          configured action.

          The returned key should typically be a tuple of values derived
          from the arguments, using any appropriate logic to decide how
          multiple invocations should be batched. For example, a batch_key
          function may decide to return the value of a specific
          construction variable from env which will cause scons to
          batch-build targets with matching values of that construction
          variable, or perhaps return the Python id() of the entire
          construction environment, in which case scons will batch-build
          all targets configured with the same construction environment.
          Returning None indicates that the particular target should not
          be part of any batched build, but instead will be built by a
          separate invocation of action's command or function. Example:

def batch_key(action, env, target, source):
    tdir = target[0].dir
    if tdir.name == 'special':
        # Don't batch-build any target
        # in the special/ subdirectory.
        return None
    return (id(action), id(env), tdir)
a = Action('build $CHANGED_SOURCES', batch_key=batch_key)

Miscellaneous Action Functions

   SCons supplies Action functions that arrange for various common file
   and directory manipulations to be performed. These are similar in
   concept to "tasks" in the Ant build tool, although the implementation
   is slightly different. These functions do not actually perform the
   specified action at the time the function is called, but rather are
   factory functions which return an Action object that can be executed at
   the appropriate time.

   There are two natural ways that these Action Functions are intended to
   be used.

   First, if you need to perform the action at the time the SConscript
   file is being read, you can use the [2300]Execute global function:
Execute(Touch('file'))

   Second, you can use these functions to supply Actions in a list for use
   by the [2301]env.Command method. This can allow you to perform more
   complicated sequences of file manipulation without relying on
   platform-specific external commands:
env = Environment(TMPBUILD='/tmp/builddir')
env.Command(
    target='foo.out',
    source='foo.in',
    action=[
        Mkdir('$TMPBUILD'),
        Copy('$TMPBUILD', '${SOURCE.dir}'),
        "cd $TMPBUILD && make",
        Delete('$TMPBUILD'),
    ],
)

   Chmod(dest, mode)
          Returns an Action object that changes the permissions on the
          specified dest file or directory to the specified mode which can
          be octal or string, similar to the bash command. Examples:

Execute(Chmod('file', 0o755))

env.Command('foo.out', 'foo.in',
            [Copy('$TARGET', '$SOURCE'),
             Chmod('$TARGET', 0o755)])

Execute(Chmod('file', "ugo+w"))

env.Command('foo.out', 'foo.in',
            [Copy('$TARGET', '$SOURCE'),
             Chmod('$TARGET', "ugo+w")])

          The behavior of Chmod is limited on Windows, see the notes in
          the Python documentation for os.chmod, which is the underlying
          function.

   Copy(dest, src)
          Returns an Action object that will copy the src source file or
          directory to the dest destination file or directory. Examples:

Execute(Copy('foo.output', 'foo.input'))

env.Command('bar.out', 'bar.in', Copy('$TARGET', '$SOURCE'))

   Delete(entry, [must_exist])
          Returns an Action that deletes the specified entry, which may be
          a file or a directory tree. If a directory is specified, the
          entire directory tree will be removed. If the must_exist flag is
          set to a true value, then a Python error will be raised if the
          specified entry does not exist; the default is false, that is,
          the Action will silently do nothing if the entry does not exist.
          Examples:

Execute(Delete('/tmp/buildroot'))

env.Command(
    'foo.out',
    'foo.in',
    action=[
        Delete('${TARGET.dir}'),
        MyBuildAction,
    ],
)

Execute(Delete('file_that_must_exist', must_exist=True))

   Mkdir(name)
          Returns an Action that creates the directory name and all needed
          intermediate directories. name may also be a list of directories
          to create. Examples:

Execute(Mkdir('/tmp/outputdir'))

env.Command(
    'foo.out',
    'foo.in',
    action=[
        Mkdir('/tmp/builddir'),
        Copy('/tmp/builddir/foo.in', '$SOURCE'),
        "cd /tmp/builddir && make",
        Copy('$TARGET', '/tmp/builddir/foo.out'),
    ],
)

   Move(dest, src)
          Returns an Action that moves the specified src file or directory
          to the specified dest file or directory. Examples:

Execute(Move('file.destination', 'file.source'))

env.Command(
    'output_file',
    'input_file',
    action=[MyBuildAction, Move('$TARGET', 'file_created_by_MyBuildAction')],
)

   Touch(file)
          Returns an Action that updates the modification time on the
          specified file. Examples:

Execute(Touch('file_to_be_touched'))

env.Command('marker', 'input_file', action=[MyBuildAction, Touch('$TARGET')])

Variable Substitution

   Before executing a command, scons performs parameter expansion
   (substitution) on the string that makes up the action part of the
   builder. The format of a substitutable parameter is ${expression}. If
   expression refers to a variable, the braces in ${expression} can be
   omitted unless the variable name is immediately followed by a character
   that could either be interpreted as part of the name, or is Python
   syntax such as [ (for indexing/slicing) or . (for attribute access -
   see [2302]Special Attributes below).

   If expression refers to a construction variable, it is replaced with
   the value of that variable in the construction environment at the time
   of execution. If expression looks like a variable name but is not
   defined in the construction environment it is replaced with an empty
   string. If expression refers to one of the [2303]Special Variables (see
   below) the corresponding value of the variable is substituted.
   expression may also be a Python expression to be evaluated. See
   [2304]Python Code Substitution below for a description.

   SCons uses the following rules when converting construction variables
   into command line strings:
     * If the value is a string it is interpreted as space delimited
       command line arguments.
     * If the value is a list it is interpreted as a list of command line
       arguments. Each element of the list is converted to a string.
     * Anything that is not a list or string is converted to a string and
       interpreted as a single command line argument.
     * Newline characters (\n) delimit lines. The newline parsing is done
       after all other parsing, so it is not possible for arguments (e.g.
       file names) to contain embedded newline characters.
     * For a literal $ use $$. For example, $$FOO will be left in the
       final string as $FOO.

   When a build action is executed, a hash of the command line is saved,
   together with other information about the target(s) built by the
   action, for future use in rebuild determination. This is called the
   build signature (or build action signature). The escape sequence $(
   subexpression $) may be used to indicate parts of a command line that
   may change without causing a rebuild--that is, which are not to be
   included when calculating the build signature. All text from $( up to
   and including the matching $) will be removed from the command line
   before it is added to the build signature while only the $( and $) will
   be removed before the command is executed. For example, the command
   line string:
"echo Last build occurred $( $TODAY $). > $TARGET"

   would execute the command:
echo Last build occurred $TODAY. > $TARGET

   but the build signature added to any target files would be computed
   from:
echo Last build occurred  . > $TARGET

   While construction variables are normally directly substituted, if a
   construction variable has a value which is a callable Python object (a
   function, or a class with a __call__ method), that object is called
   during substitution. The callable must accept four arguments: target,
   source, env and for_signature. source is a list of source nodes, target
   is a list of target nodes, env is the construction environment to use
   for context, and for_signature is a boolean value that tells the
   callable if it is being called for the purpose of generating a build
   signature. Since the build signature is used for rebuild determination,
   variable elements that do not affect whether a rebuild should be
   triggered should be omitted from the returned string if for_signature
   is true. See $( and $) above for the syntax.

   SCons will insert whatever the callable returns into the expanded
   string:
def foo(target, source, env, for_signature):
    return "bar"

# Will expand $BAR to "bar baz"
env = Environment(FOO=foo, BAR="$FOO baz")

   As a reminder, substitution happens when $BAR is actually used in a
   builder action. The value of env['BAR'] will be exactly as it was set:
   "$FOO baz". This can make debugging tricky, as the substituted result
   is not available at the time the SConscript files are being interpreted
   and thus not available to print(). However, you can perform the
   substitution on demand by calling the [2305]env.subst method for this
   purpose.

   You can use this feature to pass arguments to a callable variable by
   creating a callable class that stores passed arguments in the instance,
   and then uses them (in the __call__ method) when the instance is
   called. Note that in this case, the entire variable expansion must be
   enclosed by curly braces so that the arguments will be associated with
   the instantiation of the class:
class foo:
    def __init__(self, arg):
        self.arg = arg

    def __call__(self, target, source, env, for_signature):
        return self.arg + " bar"

# Will expand $BAR to "my argument bar baz"
env=Environment(FOO=foo, BAR="${FOO('my argument')} baz")

Substitution: Special Variables

   Besides regular construction variables, scons provides the following
   Special Variables for use in expanding commands:

   $CHANGED_SOURCES
          The file names of all sources of the build command that have
          changed since the target was last built.

   $CHANGED_TARGETS
          The file names of all targets that would be built from sources
          that have changed since the target was last built.

   $SOURCE
          The file name of the source of the build command, or the file
          name of the first source if multiple sources are being built.

   $SOURCES
          The file names of the sources of the build command.

   $TARGET
          The file name of the target being built, or the file name of the
          first target if multiple targets are being built.

   $TARGETS
          The file names of all targets being built.

   $UNCHANGED_SOURCES
          The file names of all sources of the build command that have not
          changed since the target was last built.

   $UNCHANGED_TARGETS
          The file names of all targets that would be built from sources
          that have not changed since the target was last built.

   These names are reserved and may not be assigned to or used as
   construction variables. SCons computes them in a context-dependent
   manner and they and are not retrieved from a construction environment.

   For example, the following builder call:
env = Environment(CC='cc')
env.Command(
    target=['foo'],
    source=['foo.c', 'bar.c'],
    action='@echo $CC -c -o $TARGET $SOURCES'
)

   would produce the following output:
cc -c -o foo foo.c bar.c

   In the previous example, a string ${SOURCES[1]} would expand to: bar.c.

Substitution: Special Attributes

   A variable name may have the following modifiers appended within the
   enclosing curly braces to access properties of the interpolated string.
   These are known as special attributes.
   base - The base path of the file name, including the directory path but
   excluding any suffix.
   dir - The name of the directory in which the file exists.
   file - The file name, minus any directory portion.
   filebase - Like file but minus its suffix.
   suffix - Just the file suffix.
   abspath - The absolute path name of the file.
   relpath - The path name of the file relative to the root SConstruct
   file's directory.
   posix - The path with directories separated by forward slashes (/).
   Sometimes necessary on Windows systems when a path references a file on
   other (POSIX) systems.
   windows - The path with directories separated by backslashes (\\).
   Sometimes necessary on POSIX-style systems when a path references a
   file on other (Windows) systems. win32 is a (deprecated) synonym for
   windows.
   srcpath - The directory and file name to the source file linked to this
   file through VariantDir(). If this file isn't linked, it just returns
   the directory and filename unchanged.
   srcdir - The directory containing the source file linked to this file
   through VariantDir(). If this file isn't linked, it just returns the
   directory part of the filename.
   rsrcpath - The directory and file name to the source file linked to
   this file through VariantDir(). If the file does not exist locally but
   exists in a Repository, the path in the Repository is returned. If this
   file isn't linked, it just returns the directory and filename
   unchanged.
   rsrcdir - The Repository directory containing the source file linked to
   this file through VariantDir(). If this file isn't linked, it just
   returns the directory part of the filename.

   For example, the specified target will expand as follows for the
   corresponding modifiers:
$TARGET              => sub/dir/file.x
${TARGET.base}       => sub/dir/file
${TARGET.dir}        => sub/dir
${TARGET.file}       => file.x
${TARGET.filebase}   => file
${TARGET.suffix}     => .x
${TARGET.abspath}    => /top/dir/sub/dir/file.x
${TARGET.relpath}    => sub/dir/file.x

$TARGET              => ../dir2/file.x
${TARGET.abspath}    => /top/dir2/file.x
${TARGET.relpath}    => ../dir2/file.x

SConscript('src/SConscript', variant_dir='sub/dir')
$SOURCE              => sub/dir/file.x
${SOURCE.srcpath}    => src/file.x
${SOURCE.srcdir}     => src

Repository('/usr/repository')
$SOURCE              => sub/dir/file.x
${SOURCE.rsrcpath}   => /usr/repository/src/file.x
${SOURCE.rsrcdir}    => /usr/repository/src

   Some modifiers can be combined, like ${TARGET.srcpath.base),
   ${TARGET.file.suffix}, etc.

Python Code Substitution

   If a substitutable expression using the notation ${expression} does not
   appear to match one of the other substitution patterns, it is evaluated
   as a Python expression. This uses Python's eval function, with the
   globals parameter set to the current environment's set of construction
   variables, and the result substituted in. So in the following case:
env.Command(
    'foo.out', 'foo.in', "echo ${COND==1 and 'FOO' or 'BAR'} > $TARGET"
)

   the command executed will be either
echo FOO > foo.out

   or
echo BAR > foo.out

   according to the current value of env['COND'] when the command is
   executed. The evaluation takes place when the target is being built,
   not when the SConscript is being read. So if env['COND'] is changed
   later in the SConscript, the final value will be used.

   Here's a more complete example. Note that all of COND, FOO, and BAR are
   construction variables, and their values are substituted into the final
   command. FOO is a list, so its elements are interpolated separated by
   spaces.
env=Environment()
env['COND'] = 1
env['FOO'] = ['foo1', 'foo2']
env['BAR'] = 'barbar'
env.Command(
    'foo.out', 'foo.in', "echo ${COND==1 and FOO or BAR} > $TARGET"
)

   will execute:
echo foo1 foo2 > foo.out

   In point of fact, Python expression evaluation is how the special
   attributes are substituted: they are simply attributes of the Python
   objects that represent $TARGET, $SOURCES, etc., which SCons passes to
   eval which returns the value.

Note

   Use of the Python eval function is considered to have security
   implications, since, depending on input sources, arbitrary unchecked
   strings of code can be executed by the Python interpreter. Although
   SCons makes use of it in a somewhat restricted context, you should be
   aware of this issue when using the ${python-expression-for-subst} form.

Scanner Objects

   Scanner objects are used to scan specific file types for implicit
   dependencies, for example embedded preprocessor/compiler directives
   that cause other files to be included during processing. SCons has a
   number of pre-built Scanner objects, so it is usually only necessary to
   set up Scanners for new file types. You do this by calling the
   [2306]Scanner factory function. Scanner accepts the following
   arguments. Only function is required; the rest are optional:

   function
          A scanner function to call to process a given Node (usually a
          file) and return a list of Nodes representing the implicit
          dependencies (usually files) found in the contents. The function
          must accept three required arguments, node, env and path, and an
          optional fourth, arg. node is the internal SCons node
          representing the file to scan, env is the construction
          environment to use during the scan, and path is a tuple of
          directories that can be searched for files, as generated by the
          optional scanner path_function (see below). If argument was
          supplied when the Scanner object was created, it is given as arg
          when the scanner function is called; since argument is optional,
          the default is no arg.

          The function can use use str(node) to fetch the name of the
          file, node.dir to fetch the directory the file is in,
          node.get_contents() to fetch the contents of the file as bytes
          or node.get_text_contents() to fetch the contents of the file as
          text.

          The function must take into account the path directories when
          generating the dependency Nodes. To illustrate this, a C
          language source file may contain a line like #include "foo.h".
          However, there is no guarantee that foo.h exists in the current
          directory: the contents of [2307]$CPPPATH is passed to the C
          preprocessor which will look in those places for the header, so
          the scanner function needs to look in those places as well in
          order to build Nodes with correct paths. Using
          [2308]FindPathDirs with an argument of CPPPATH as the
          path_function in the Scanner call means the scanner function
          will be called with the paths extracted from $CPPPATH in the
          environment env passed as the paths parameter.

          Note that the file to scan is not guaranteed to exist at the
          time the scanner is called - it could be a generated file which
          has not been generated yet - so the scanner function must be
          tolerant of that.

          Alternatively, you can supply a dictionary as the function
          parameter, to map keys (such as file suffixes) to other Scanner
          objects. A Scanner created this way serves as a dispatcher: the
          Scanner's skeys parameter is automatically populated with the
          dictionary's keys, indicating that the Scanner handles Nodes
          which would be selected by those keys; the mapping is then used
          to pass the file on to a different Scanner that would not have
          been selected to handle that Node based on its own skeys.

   name
          The name to use for the Scanner. This is mainly used to identify
          the Scanner internally. The default value is "NONE".

   argument
          If specified, will be passed to the scanner function function
          and the path function path_function when called, as the optional
          parameter each of those functions takes.

   skeys
          Scanner key(s) indicating the file types this scanner is
          associated with. Used internally to select an appropriate
          scanner. In the usual case of scanning for file names, this
          argument will be a list of suffixes for the different file types
          that this Scanner knows how to scan. If skeys is a string, it
          will be expanded into a list by the current environment.

   path_function
          A Python function that takes four or five arguments: a
          construction environment, a Node for the directory containing
          the SConscript file in which the first target was defined, a
          list of target nodes, a list of source nodes, and the value of
          argument if it was supplied when the Scanner was created. Must
          return a tuple of directories that can be searched for files to
          be returned by this Scanner object. (Note that the
          [2309]FindPathDirs function can be used to return a ready-made
          path_function for a given construction variable name, instead of
          having to write your own function from scratch.)

   node_class
          The class of Node that should be returned by this Scanner
          object. Any strings or other objects returned by the scanner
          function that are not of this class will be run through the
          function supplied by the node_factory argument. A value of None
          can be supplied to indicate no conversion; the default is to
          return File nodes.

   node_factory
          A Python function that will take a string or other object and
          turn it into the appropriate class of Node to be returned by
          this Scanner object, as indicated by node_class.

   scan_check
          A Python function that takes two arguments, a Node (file) and a
          construction environment, and returns whether the Node should,
          in fact, be scanned for dependencies. This check can be used to
          eliminate unnecessary calls to the scanner function when, for
          example, the underlying file represented by a Node does not yet
          exist.

   recursive
          Specifies whether this scanner should be re-invoked on the
          dependency files returned by the scanner. If omitted, the Node
          subsystem will only invoke the scanner on the file being scanned
          and not recurse. Recursion is needed when the files returned by
          the scanner may themselves contain further file dependencies, as
          in the case of preprocessor #include lines. A value that
          evaluates true enables recursion; recursive may be a callable
          function, in which case it will be called with a list of Nodes
          found and should return a list of Nodes that should be scanned
          recursively; this can be used to select a specific subset of
          Nodes for additional scanning.

   Once created, a Scanner can added to an environment by setting it in
   the [2310]$SCANNERS list, which automatically triggers SCons to also
   add it to the environment as a method. However, usually a scanner is
   not truly standalone, but needs to be plugged in to the existing
   selection mechanism for deciding how to scan source files based on
   filename extensions. For this, SCons has a global SourceFileScanner
   object that is used by the [2311]Object, [2312]SharedObject and
   [2313]StaticObject builders to decide which scanner should be used. You
   can use the SourceFileScanner.add_scanner() method to add your own
   Scanner object to the SCons infrastructure that builds target programs
   or libraries from a list of source files of different types:
def xyz_scan(node, env, path):
    contents = node.get_text_contents()
    # Scan the contents and return the included files.

XYZScanner = Scanner(xyz_scan)

SourceFileScanner.add_scanner('.xyz', XYZScanner)

env.Program('my_prog', ['file1.c', 'file2.f', 'file3.xyz'])

Tool Modules

   Additional tools can be added to a project either by placing them in a
   site_tools subdirectory of a site directory, or in a custom location
   specified to scons by giving the toolpath keyword argument to
   [2314]Environment. A tool module is a form of Python module, invoked
   internally using the Python import mechanism, so a tool can consist
   either of a single source file taking the name of the tool (e.g.
   mytool.py) or a directory taking the name of the tool (e.g. mytool/)
   which contains at least an __init__.py file.

   The toolpath parameter takes a list as its value:
env = Environment(tools=['default', 'foo'], toolpath=['tools'])

   This looks for a tool specification module (mytool.py, or directory
   mytool) in directory tools and in the standard locations, as well as
   using the ordinary default tools for the platform.

   Directories specified via toolpath are prepended to the existing tool
   path. The default tool path is any site_tools directories, so tools in
   a specified toolpath take priority, followed by tools in a site_tools
   directory, followed by built-in tools. For example, adding a tool
   specification module gcc.py to the toolpath directory would override
   the built-in [2315]gcc tool. The tool path is stored in the environment
   and will be used by subsequent calls to the [2316]Tool method, as well
   as by [2317]env.Clone.
base = Environment(toolpath=['custom_path'])
derived = base.Clone(tools=['custom_tool'])
derived.CustomBuilder()

   A tool specification module must include two functions:

   generate(env, **kwargs)
          Modify the construction environment env to set up necessary
          construction variables, Builders, Emitters, etc., so the
          facilities represented by the tool can be executed. Care should
          be taken not to overwrite construction variables intended to be
          settable by the user. For example:

def generate(env):
    ...
    if 'MYTOOL' not in env:
        env['MYTOOL'] = env.Detect("mytool")
    if 'MYTOOLFLAGS' not in env:
        env['MYTOOLFLAGS'] = SCons.Util.CLVar('--myarg')
    ...

          The generate function may use any keyword arguments that the
          user supplies via kwargs to vary its initialization.

   exists(env)
          Return a true value if the tool can be called in the context of
          env. else false. Usually this means looking up one or more known
          programs using the PATH from the supplied env, but the tool can
          make the exists decision in any way it chooses.

Note

   At the moment, user-added tools do not automatically have their exists
   function called. As a result, it is recommended that the generate
   function be defensively coded - that is, do not rely on any necessary
   existence checks already having been performed. This is expected to be
   a temporary limitation, and the exists function should still be
   provided.

   The elements of the tools list may also be functions or callable
   objects, in which case the Environment method will call those objects
   to update the new construction environment (see [2318]Tool for more
   details):
def my_tool(env):
    env['XYZZY'] = 'xyzzy'

env = Environment(tools=[my_tool])

   The individual elements of the tools list may also themselves be lists
   or tuples of the form (toolname, kw_dict). SCons searches for the
   toolname specification file as described above, and passes kw_dict,
   which must be a dictionary, as keyword arguments to the tool's generate
   function. The generate function can use the arguments to modify the
   tool's behavior by setting up the environment in different ways or
   otherwise changing its initialization.
# in tools/my_tool.py:
def generate(env, **kwargs):
  # Sets MY_TOOL to the value of keyword 'arg1' '1' if not supplied
  env['MY_TOOL'] = kwargs.get('arg1', '1')

def exists(env):
  return True

# in SConstruct:
env = Environment(tools=['default', ('my_tool', {'arg1': 'abc'})],
                  toolpath=['tools'])

   The tool specification (my_tool in the example) can use the
   [2319]$PLATFORM variable from the construction environment it is passed
   to customize the tool for different platforms.

   Tools can be "nested" - that is, they can be located within a
   subdirectory in the toolpath. A nested tool name uses a dot to
   represent a directory separator
# namespaced builder
env = Environment(ENV=os.environ.copy(), tools=['SubDir1.SubDir2.SomeTool'])
env.SomeTool(targets, sources)

# Search Paths
# SCons\Tool\SubDir1\SubDir2\SomeTool.py
# SCons\Tool\SubDir1\SubDir2\SomeTool\__init__.py
# .\site_scons\site_tools\SubDir1\SubDir2\SomeTool.py
# .\site_scons\site_tools\SubDir1\SubDir2\SomeTool\__init__.py

SYSTEM-SPECIFIC BEHAVIOR

   scons and its configuration files are very portable, due largely to its
   implementation in Python. There are, however, a few portability issues
   waiting to trap the unwary.

.C File Suffix

   scons handles the upper-case .C file suffix differently, depending on
   the capabilities of the underlying system. On a case-sensitive system
   such as Linux or UNIX, scons treats a file with a .C suffix as a C++
   source file. On a case-insensitive system such as Windows, scons treats
   a file with a .C suffix as a C source file.

Fortran File Suffixes

   There are several ways source file suffixes impact the behavior of
   SCons when working with Fortran language code (not all are
   system-specific, but they are included here for completeness).

   As the Fortran language has evolved through multiple standards
   editions, projects might have a need to handle files from different
   language generations differently. To this end, SCons dispatches to a
   different compiler dialect setup (expressed as a set of construction
   variables) depending on the file suffix. By default, all of these
   setups start out the same, but individual construction variables can be
   modified as needed to tune a given dialect. Each of these dialacts has
   a tool specification module whose documentation describes the
   construction variables associated with that dialect: .f (as well as
   .for and .ftn) in [2320]fortran; (construction variables start with
   FORTRAN) .f77 in [2321]f77; (construction variables start with F77)
   .f90 in [2322]f90; (construction variables start with F90) .f95 in
   [2323]f95; (construction variables start with F95) .f03 in [2324]f03;
   (construction variables start with F03) .f08 in [2325]f08 (construction
   variables start with F08).

   While SCons recognizes multiple internal dialects based on filename
   suffixes, the convention of various available Fortran compilers is to
   assign an actual meaning to only two of these suffixes: .f (as well as
   .for and .ftn) refers to the fixed-format source code that was the only
   available option in FORTRAN 77 and earlier, and .f90 refers to
   free-format source code which became available as of the Fortran 90
   standard. Some compilers recognize suffixes which correspond to Fortran
   specifications later then F90 as equivalent to .f90 for this purpose,
   while some do not - check the documentation for your compiler. An
   occasionally suggested policy suggestion is to use only .f and .f90 as
   Fortran filename suffixes. The fixed/free form determination can
   usually be controlled explicitly with compiler flags (e.g. -ffixed-form
   for gfortran), overriding any assumption that may be made based on the
   source file suffix.

   The source file suffix does not imply conformance with the
   similarly-named Fortran standard - a suffix of .f08 does not mean you
   are compiling specifically for Fortran 2008. Normally, compilers
   provide command-line options for making this selection (e.g. -std=f2008
   for gfortran).

   For dialects from F90 on (including the generic FORTRAN dialect), a
   suffix of .mod is recognized for Fortran modules. These files are a
   side effect of compiling a Fortran source file containing module
   declarations, and must be available when other code which declares that
   it uses the module is processed. SCons does not currently have
   integrated support for submodules, introduced in the Fortran 2008
   standard - the invoked compiler will produce results, but SCons will
   not recognize .smod files as tracked objects.

   On a case-sensitive system such as Linux or UNIX, a file with a an
   upper-cased suffix from the set .F, .FOR, .FTN, .F90, .F95, .F03 and
   .F08 is treated as a Fortran source file which shall first be run
   through the standard C preprocessor. The lower-cased versions of these
   suffixes do not trigger this behavior. On systems which do not
   distinguish between uppper and lower case in filenames, this behavior
   is not available, but files suffixed with either .FPP or .fpp are
   always passed to the preprocessor first. This matches the convention of
   gfortran from the GNU Compiler Collection, and also followed by certain
   other Fortran compilers. For these two suffixes, the generic FORTRAN
   dialect will be selected.

   SCons itself does not invoke the preprocessor, that is handled by the
   compiler, but it adds construction variables which are applicable to
   the preprocessor run. You can see this difference by examining
   [2326]$FORTRANPPCOM and [2327]$FORTRANPPCOMSTR which are used instead
   of [2328]$FORTRANCOM and [2329]$FORTRANCOMSTR for that dialect.

Windows: Cygwin Tools and Cygwin Python vs. Windows Pythons

   Cygwin supplies a set of tools and utilities that let users work on a
   Windows system using a POSIX-like environment. The Cygwin tools,
   including Cygwin Python, do this, in part, by sharing an ability to
   interpret POSIX-style path names. For example, the Cygwin tools will
   internally translate a Cygwin path name like /cygdrive/c/mydir to an
   equivalent Windows pathname of C:/mydir (equivalent to C:\mydir).

   Versions of Python that are built for native Windows execution, such as
   the python.org and ActiveState versions, do not understand the Cygwin
   path name semantics. This means that using a native Windows version of
   Python to build compiled programs using Cygwin tools (such as gcc,
   bison and flex) may yield unpredictable results. "Mixing and matching"
   in this way can be made to work, but it requires careful attention to
   the use of path names in your SConscript files.

   In practice, users can sidestep the issue by adopting the following
   guidelines: When using Cygwin's gcc for compiling, use the
   Cygwin-supplied Python interpreter to run scons; when using Microsoft
   Visual C/C++ (or some other "native" Windows compiler) use the
   python.org, Microsoft Store, ActiveState or other native version of
   Python to run scons.

   This discussion largely applies to the msys2 environment as well (with
   the use of the mingw compiler toolchain), in particular the
   recommendation to use the msys2 version of Python if running scons from
   inside an msys2 shell.

Windows: scons.bat file

   On Windows, if scons is executed via a wrapper scons.bat batch file,
   there are (at least) two ramifications. Note this is no longer the
   default - scons installed via Python''s pip installer will have an
   scons.exe which does not have these limitations:

   First, Windows command-line users that want to use variable assignment
   on the command line may have to put double quotes around the
   assignments, otherwise the Windows command shell will consume those as
   arguments to itself, not to scons:
scons "FOO=BAR" "BAZ=BLEH"

   Second, the Cygwin shell does not recognize typing scons at the command
   line prompt as referring to this wrapper. You can work around this
   either by executing scons.bat (including the extension) from the Cygwin
   command line, or by creating a wrapper shell script named scons which
   invokes scons.bat.

MinGW

   The MinGW bin directory must be in your PATH environment variable or
   the ['ENV']['PATH'] construction variable for scons to detect and use
   the MinGW tools. When running under the native Windows Python;
   interpreter, scons will prefer the MinGW tools over the Cygwin tools,
   if they are both installed, regardless of the order of the bin
   directories in the PATH variable. If you have both MSVC and MinGW
   installed and you want to use MinGW instead of MSVC, then you must
   explicitly tell scons to use MinGW by passing tools=['mingw'] to the
   Environment function, because scons will prefer the MSVC tools over the
   MinGW tools.

ENVIRONMENT

   In general, scons is not controlled by environment variables set in the
   shell used to invoke it, leaving it up to the SConscript file author to
   import those if desired. However the following variables are imported
   by scons itself if set:

   SCONS_LIB_DIR
          Specifies the directory that contains the scons Python module
          directory. Normally scons can deduce this, but in some
          circumstances, such as working with a source release, it may be
          necessary to specify (for example,
          /home/aroach/scons-src-0.01/src/engine).

   SCONSFLAGS
          A string containing options that will be used by scons in
          addition to those passed on the command line. Can be used to
          reduce frequent retyping of common options. The contents of
          SCONSFLAGS are considered before any passed command line
          options, so the command line can be used to override SCONSFLAGS
          options if necessary.

   SCONS_CACHE_MSVC_CONFIG
          (Windows only). If set, save the shell environment variables
          generated when setting up the Microsoft Visual C++ compiler
          (and/or Build Tools) to a cache file, to give these settings,
          which are relatively expensive to generate, persistence across
          scons invocations. Use of this option is primarily intended to
          aid performance in tightly controlled Continuous Integration
          setups.

          If set to a True-like value ("1", "true" or "True") will cache
          to a file named .scons_msvc_cache.json in the user's home
          directory. If set to a pathname, will use that pathname for the
          cache.

          Note: use this cache with caution as it might be somewhat
          fragile: while each major toolset version (e.g. Visual Studio
          2017 vs 2019) and architecture pair will get separate cache
          entries, if toolset updates cause a change to settings within a
          given release series, scons will not detect the change and will
          reuse old settings. Remove the cache file in case of problems
          with this. scons will ignore failures reading or writing the
          file and will silently revert to non-cached behavior in such
          cases.

          Available since scons 3.1 (experimental).

   QTDIR
          If using the [2330]qt tool, this is the path to the Qt
          installation to build against. SCons respects this setting
          because it is a long-standing convention in the Qt world, where
          multiple Qt installations are possible.

SEE ALSO

   The SCons User Guide at
   [2331]https://scons.org/doc/production/HTML/scons-user.html
   The SCons Design Document (old)
   The SCons Cookbook at [2332]https://scons-cookbook.readthedocs.io for
   examples of how to solve various problems with SCons.
   SCons source code [2333]on GitHub
   The SCons API Reference
   [2334]https://scons.org/doc/production/HTML/scons-api/index.html (for
   internal details)

AUTHORS

   Originally: Steven Knight <[2335]knight@baldmt.com> and Anthony Roach
   <[2336]aroach@electriceyeball.com>.

   Since 2010: The SCons Development Team <[2337]scons-dev@scons.org>.

References

   1. https://www.python.org/dev/peps/pep-0478
   2. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Decider
   3. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#sconscript_files
   4. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-SConscript
   5. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-site-dir
   6. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-site-dir
   7. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-no-site-dir
   8. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-Q
   9. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ENV
  10. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#environment
  11. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-SCONSFLAGS
  12. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#options
  13. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-ARGUMENTS
  14. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-ARGLIST
  15. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#commandline_construction_variables
  16. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-cache-force
  17. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-cache-disable
  18. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-cache-readonly
  19. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html
  20. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-random
  21. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Alias
  22. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-COMMAND_LINE_TARGETS
  23. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Default
  24. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-DEFAULT_TARGETS
  25. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-C
  26. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-D
  27. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-u
  28. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-U
  29. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-debug
  30. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-u
  31. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-D
  32. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-U
  33. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-clean
  34. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clean
  35. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-NoClean
  36. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-j
  37. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clean
  38. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-NoClean
  39. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-GetOption
  40. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-CacheDir
  41. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-CacheDir
  42. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Configure
  43. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-f
  44. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-u
  45. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-U
  46. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-D
  47. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-u
  48. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Help
  49. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AddOption
  50. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
  51. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
  52. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
  53. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
  54. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Install
  55. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-InstallAs
  56. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-InstallVersionedLib
  57. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#opt-hash-chunksize
  58. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-GetOption
  59. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
  60. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-packaging
  61. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-CacheDir
  62. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-CacheDir
  63. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Builder
  64. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-qt
  65. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-SConscript
  66. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Export
  67. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Return
  68. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Import
  69. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#construction_environments
  70. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#tools
  71. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#builder_methods
  72. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#methods_and_functions_to_do_things
  73. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#sconscript_variables
  74. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#construction_variables
  75. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#configure_contexts
  76. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#commandline_construction_variables
  77. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#node_objects
  78. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
  79. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
  80. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-MergeFlags
  81. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-ParseFlags
  82. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
  83. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
  84. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
  85. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clone
  86. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
  87. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-DefaultEnvironment
  88. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Platform
  89. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#tools
  90. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#commandline_construction_variables
  91. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Object
  92. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Tool
  93. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#extending_scons
  94. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#tool_modules
  95. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AS
  96. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASCOM
  97. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASFLAGS
  98. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPCOM
  99. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPFLAGS
 100. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 101. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
 102. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
 103. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
 104. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 105. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXVERSION
 106. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
 107. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
 108. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 109. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCVERSION
 110. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCC
 111. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77
 112. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77
 113. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
 114. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBSUFFIX
 115. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 116. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_COMPATIBILITY_VERSION
 117. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_CURRENT_VERSION
 118. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_NO_COMPATIBILITY_VERSION
 119. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_NO_CURRENT_VERSION
 120. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKPATHPREFIX
 121. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOM
 122. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEFLAGS
 123. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEPREFIX
 124. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULESUFFIX
 125. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
 126. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
 127. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 128. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_APPLELINK_COMPATIBILITY_VERSION
 129. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_APPLELINK_CURRENT_VERSION
 130. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FRAMEWORKPATH
 131. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FRAMEWORKS
 132. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKSFLAGS
 133. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AR
 134. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOM
 135. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARFLAGS
 136. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPREFIX
 137. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIX
 138. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RANLIB
 139. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RANLIBCOM
 140. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RANLIBFLAGS
 141. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AS
 142. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASCOM
 143. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASFLAGS
 144. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPCOM
 145. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPFLAGS
 146. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 147. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
 148. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
 149. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
 150. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 151. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
 152. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
 153. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFILESUFFIX
 154. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFLAGS
 155. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFPREFIX
 156. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFSUFFIX
 157. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
 158. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
 159. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCC
 160. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOM
 161. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
 162. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCFLAGS
 163. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
 164. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
 165. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
 166. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 167. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
 168. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCDEPFLAGS
 169. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
 170. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFILESUFFIX
 171. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFLAGS
 172. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFPREFIX
 173. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFSUFFIX
 174. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKPATH
 175. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKS
 176. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
 177. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
 178. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCC
 179. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOM
 180. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
 181. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCFLAGS
 182. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
 183. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOMSTR
 184. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PLATFORM
 185. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOMSTR
 186. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 187. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCDEPFLAGS
 188. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCVERSION
 189. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
 190. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 191. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXVERSION
 192. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
 193. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
 194. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME
 195. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-CompilationDatabase
 196. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-COMPILATIONDB_COMSTR
 197. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-COMPILATIONDB_PATH_FILTER
 198. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-COMPILATIONDB_USE_ABSPATH
 199. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
 200. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
 201. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANMODDIR
 202. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANMODDIRPREFIX
 203. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANMODDIRSUFFIX
 204. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
 205. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-OBJSUFFIX
 206. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
 207. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
 208. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
 209. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
 210. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
 211. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
 212. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
 213. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
 214. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFPREFIX
 215. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFSUFFIX
 216. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 217. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOM
 218. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFILESUFFIX
 219. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFLAGS
 220. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
 221. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
 222. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-OBJSUFFIX
 223. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
 224. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOM
 225. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
 226. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
 227. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOMSTR
 228. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOMSTR
 229. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-IMPLIBPREFIX
 230. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-IMPLIBSUFFIX
 231. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSIONFLAGS
 232. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
 233. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPATHPREFIX
 234. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPATHSUFFIX
 235. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBPREFIX
 236. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBSUFFIX
 237. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSIONFLAGS
 238. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
 239. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 240. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LDMODULEVERSIONFLAGS
 241. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_SHLIBVERSIONFLAGS
 242. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TOOLS
 243. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-lex
 244. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-yacc
 245. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-rpcgen
 246. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-swig
 247. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-jar
 248. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-javac
 249. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-javah
 250. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-rmic
 251. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-dvipdf
 252. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-dvips
 253. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gs
 254. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-tex
 255. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-latex
 256. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-pdflatex
 257. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-pdftex
 258. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-tar
 259. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-zip
 260. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-textfile
 261. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gcc
 262. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-intelc
 263. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-icc
 264. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cc
 265. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gXX
 266. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-intelc
 267. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-icc
 268. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cXX
 269. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gas
 270. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-nasm
 271. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-masm
 272. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gnulink
 273. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ilink
 274. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gfortran
 275. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-g77
 276. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ifort
 277. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ifl
 278. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f95
 279. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f90
 280. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f77
 281. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ar
 282. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-m4
 283. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
 284. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-mingw
 285. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gcc
 286. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-intelc
 287. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-icl
 288. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-icc
 289. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cc
 290. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-bcc32
 291. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
 292. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-intelc
 293. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-icc
 294. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gXX
 295. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cXX
 296. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-bcc32
 297. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-masm
 298. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-nasm
 299. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gas
 300. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-386asm
 301. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-mslink
 302. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gnulink
 303. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ilink
 304. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-linkloc
 305. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ilink32
 306. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gfortran
 307. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-g77
 308. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ifl
 309. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cvf
 310. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f95
 311. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f90
 312. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-fortran
 313. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-mslib
 314. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ar
 315. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-tlib
 316. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
 317. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-midl
 318. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gcc
 319. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cc
 320. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gXX
 321. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cXX
 322. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-as
 323. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-applelink
 324. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gnulink
 325. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gfortran
 326. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f95
 327. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f90
 328. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-g77
 329. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-ar
 330. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-m4
 331. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DC
 332. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DCOM
 333. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUG
 334. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUGPREFIX
 335. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUGSUFFIX
 336. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFILESUFFIX
 337. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGPREFIX
 338. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGS
 339. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGSUFFIX
 340. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DINCPREFIX
 341. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DINCSUFFIX
 342. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIB
 343. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBCOM
 344. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBDIRPREFIX
 345. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBDIRSUFFIX
 346. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBFLAGPREFIX
 347. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBFLAGSUFFIX
 348. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBLINKPREFIX
 349. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBLINKSUFFIX
 350. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINK
 351. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKCOM
 352. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGPREFIX
 353. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGS
 354. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGSUFFIX
 355. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DPATH
 356. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DRPATHPREFIX
 357. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DRPATHSUFFIX
 358. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERPREFIX
 359. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERSIONS
 360. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERSUFFIX
 361. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDC
 362. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDCOM
 363. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLIBVERSIONFLAGS
 364. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINK
 365. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKCOM
 366. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKFLAGS
 367. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookHtml
 368. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookPdf
 369. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookEpub
 370. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookSlidesPdf
 371. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookXInclude
 372. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookMan
 373. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookHtmlChunked
 374. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookHtmlhelp
 375. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookSlidesHtml
 376. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_DEFAULT_XSL_EPUB
 377. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_DEFAULT_XSL_HTML
 378. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_DEFAULT_XSL_HTMLCHUNKED
 379. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_DEFAULT_XSL_HTMLHELP
 380. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_DEFAULT_XSL_MAN
 381. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_DEFAULT_XSL_PDF
 382. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_DEFAULT_XSL_SLIDESHTML
 383. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_DEFAULT_XSL_SLIDESPDF
 384. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_FOP
 385. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_FOPCOM
 386. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_FOPFLAGS
 387. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XMLLINT
 388. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XMLLINTCOM
 389. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XMLLINTFLAGS
 390. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XSLTPROC
 391. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XSLTPROCCOM
 392. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XSLTPROCFLAGS
 393. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XSLTPROCPARAMS
 394. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_FOPCOMSTR
 395. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XMLLINTCOMSTR
 396. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DOCBOOK_XSLTPROCCOMSTR
 397. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DVI
 398. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVIPDF
 399. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVIPDFCOM
 400. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVIPDFFLAGS
 401. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVIPDFCOMSTR
 402. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVIPS
 403. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVIPSFLAGS
 404. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PSCOM
 405. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PSPREFIX
 406. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PSSUFFIX
 407. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PSCOMSTR
 408. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03
 409. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03COM
 410. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03FLAGS
 411. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PPCOM
 412. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03
 413. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03COM
 414. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03FLAGS
 415. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03PPCOM
 416. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F03INCFLAGS
 417. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03COMSTR
 418. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PPCOMSTR
 419. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
 420. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03COMSTR
 421. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03PPCOMSTR
 422. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08
 423. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08COM
 424. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08FLAGS
 425. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PPCOM
 426. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08
 427. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08COM
 428. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08FLAGS
 429. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08PPCOM
 430. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F08INCFLAGS
 431. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08COMSTR
 432. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PPCOMSTR
 433. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
 434. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08COMSTR
 435. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08PPCOMSTR
 436. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77
 437. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77COM
 438. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77FILESUFFIXES
 439. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77FLAGS
 440. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PPCOM
 441. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PPFILESUFFIXES
 442. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
 443. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
 444. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
 445. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77
 446. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77COM
 447. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77FLAGS
 448. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77PPCOM
 449. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
 450. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
 451. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
 452. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
 453. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F77INCFLAGS
 454. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77COMSTR
 455. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PPCOMSTR
 456. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
 457. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMSTR
 458. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
 459. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOMSTR
 460. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77COMSTR
 461. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77PPCOMSTR
 462. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOMSTR
 463. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
 464. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOMSTR
 465. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90
 466. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90COM
 467. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90FLAGS
 468. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PPCOM
 469. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90
 470. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90COM
 471. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90FLAGS
 472. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90PPCOM
 473. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F90INCFLAGS
 474. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90COMSTR
 475. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PPCOMSTR
 476. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
 477. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90COMSTR
 478. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90PPCOMSTR
 479. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95
 480. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95COM
 481. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95FLAGS
 482. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PPCOM
 483. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95
 484. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95COM
 485. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95FLAGS
 486. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95PPCOM
 487. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F95INCFLAGS
 488. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95COMSTR
 489. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PPCOMSTR
 490. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
 491. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95COMSTR
 492. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95PPCOMSTR
 493. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
 494. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
 495. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
 496. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
 497. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
 498. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
 499. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
 500. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
 501. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMSTR
 502. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOMSTR
 503. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOMSTR
 504. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOMSTR
 505. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
 506. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 507. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXVERSION
 508. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
 509. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
 510. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77
 511. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77COM
 512. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77FILESUFFIXES
 513. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PPCOM
 514. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PPFILESUFFIXES
 515. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
 516. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
 517. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
 518. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77
 519. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77COM
 520. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77FLAGS
 521. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77PPCOM
 522. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
 523. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
 524. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
 525. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
 526. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77FLAGS
 527. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
 528. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
 529. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-as
 530. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AS
 531. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 532. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCDEPFLAGS
 533. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCVERSION
 534. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
 535. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DC
 536. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DCOM
 537. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUG
 538. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUGPREFIX
 539. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUGSUFFIX
 540. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFILESUFFIX
 541. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGPREFIX
 542. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGS
 543. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGSUFFIX
 544. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DINCPREFIX
 545. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DINCSUFFIX
 546. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIB
 547. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBCOM
 548. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBDIRPREFIX
 549. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBDIRSUFFIX
 550. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBFLAGPREFIX
 551. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBFLAGSUFFIX
 552. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBLINKPREFIX
 553. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBLINKSUFFIX
 554. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINK
 555. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKCOM
 556. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGPREFIX
 557. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGS
 558. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGSUFFIX
 559. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DPATH
 560. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DRPATHPREFIX
 561. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DRPATHSUFFIX
 562. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERPREFIX
 563. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERSIONS
 564. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERSUFFIX
 565. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDC
 566. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDCOM
 567. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLIBVERSIONFLAGS
 568. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINK
 569. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKCOM
 570. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKFLAGS
 571. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
 572. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
 573. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgmerge
 574. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgfmt
 575. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Translate
 576. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-fortran
 577. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77
 578. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90
 579. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95
 580. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
 581. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77
 582. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77FLAGS
 583. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90
 584. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90FLAGS
 585. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95
 586. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95FLAGS
 587. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
 588. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
 589. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSIONFLAGS
 590. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPATHPREFIX
 591. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPATHSUFFIX
 592. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSIONFLAGS
 593. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 594. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LDMODULESONAME
 595. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_SHLIBSONAME
 596. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-PDF
 597. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Gs
 598. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-GS
 599. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-GSCOM
 600. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-GSFLAGS
 601. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-GSCOMSTR
 602. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cXX
 603. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 604. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXVERSION
 605. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
 606. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
 607. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBSUFFIX
 608. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 609. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 610. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
 611. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFILESUFFIX
 612. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFPREFIX
 613. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFSUFFIX
 614. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOM
 615. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFILESUFFIX
 616. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
 617. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
 618. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
 619. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFLAGS
 620. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
 621. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
 622. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
 623. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
 624. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
 625. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
 626. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
 627. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
 628. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
 629. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
 630. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
 631. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
 632. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77
 633. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90
 634. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95
 635. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
 636. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77
 637. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77FLAGS
 638. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90
 639. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90FLAGS
 640. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95
 641. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95FLAGS
 642. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
 643. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
 644. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRPREFIX
 645. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRSUFFIX
 646. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKPREFIX
 647. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKSUFFIX
 648. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
 649. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
 650. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
 651. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRPREFIX
 652. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRSUFFIX
 653. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKPREFIX
 654. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKSUFFIX
 655. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
 656. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
 657. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
 658. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INSTALL
 659. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INSTALLSTR
 660. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gcc
 661. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
 662. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AR
 663. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 664. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 665. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INTEL_C_COMPILER_VERSION
 666. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
 667. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAR
 668. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JARCOM
 669. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JARFLAGS
 670. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JARSUFFIX
 671. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JARCOMSTR
 672. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVABOOTCLASSPATH
 673. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAC
 674. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACCOM
 675. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACFLAGS
 676. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACLASSPATH
 677. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACLASSSUFFIX
 678. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAINCLUDES
 679. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVASOURCEPATH
 680. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVASUFFIX
 681. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACCOMSTR
 682. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACLASSSUFFIX
 683. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAH
 684. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAHCOM
 685. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAHFLAGS
 686. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACLASSPATH
 687. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAHCOMSTR
 688. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEX
 689. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXCOM
 690. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXFLAGS
 691. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXCOMSTR
 692. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DC
 693. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DCOM
 694. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUG
 695. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUGPREFIX
 696. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DDEBUGSUFFIX
 697. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFILESUFFIX
 698. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGPREFIX
 699. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGS
 700. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGSUFFIX
 701. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DINCPREFIX
 702. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DINCSUFFIX
 703. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIB
 704. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBCOM
 705. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBDIRPREFIX
 706. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBDIRSUFFIX
 707. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBFLAGPREFIX
 708. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBFLAGSUFFIX
 709. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBLINKPREFIX
 710. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLIBLINKSUFFIX
 711. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINK
 712. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKCOM
 713. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGPREFIX
 714. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGS
 715. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGSUFFIX
 716. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DPATH
 717. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DRPATHPREFIX
 718. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DRPATHSUFFIX
 719. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERPREFIX
 720. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERSIONS
 721. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVERSUFFIX
 722. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDC
 723. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDCOM
 724. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLIBVERSIONFLAGS
 725. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINK
 726. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKCOM
 727. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKFLAGS
 728. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEX
 729. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEXCOM
 730. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEXFLAGS
 731. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEXUNISTD
 732. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEXCOMSTR
 733. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEXFLAGS
 734. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEX_HEADER_FILE
 735. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEX_TABLES_FILE
 736. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULE
 737. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOM
 738. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEFLAGS
 739. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULENOVERSIONSYMLINKS
 740. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEPREFIX
 741. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULESUFFIX
 742. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSION
 743. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSIONFLAGS
 744. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRPREFIX
 745. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRSUFFIX
 746. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKPREFIX
 747. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKSUFFIX
 748. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
 749. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
 750. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
 751. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBSUFFIX
 752. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
 753. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
 754. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 755. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-__LDMODULEVERSIONFLAGS
 756. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-__SHLIBVERSIONFLAGS
 757. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOMSTR
 758. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOMSTR
 759. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOMSTR
 760. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRPREFIX
 761. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRSUFFIX
 762. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKPREFIX
 763. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKSUFFIX
 764. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
 765. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
 766. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
 767. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
 768. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
 769. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 770. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOMSTR
 771. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOMSTR
 772. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-M4
 773. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-M4COM
 774. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-M4FLAGS
 775. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-M4COMSTR
 776. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AS
 777. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASCOM
 778. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASFLAGS
 779. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPCOM
 780. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPFLAGS
 781. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASCOMSTR
 782. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPCOMSTR
 783. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
 784. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
 785. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
 786. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MIDL
 787. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MIDLCOM
 788. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MIDLFLAGS
 789. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MIDLCOMSTR
 790. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AS
 791. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 792. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 793. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOM
 794. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPREFIX
 795. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIX
 796. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-OBJSUFFIX
 797. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RC
 798. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCCOM
 799. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCFLAGS
 800. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCINCFLAGS
 801. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCINCPREFIX
 802. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCINCSUFFIX
 803. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
 804. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
 805. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
 806. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 807. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
 808. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSDEFPREFIX
 809. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSDEFSUFFIX
 810. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCCOMSTR
 811. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOMSTR
 812. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gettext
 813. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MOSUFFIX
 814. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGFMT
 815. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGFMTCOM
 816. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGFMTCOMSTR
 817. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGFMTFLAGS
 818. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POSUFFIX
 819. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINGUAS_FILE
 820. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gettext
 821. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGINIT
 822. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGINITCOM
 823. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGINITCOMSTR
 824. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGINITFLAGS
 825. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POAUTOINIT
 826. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POCREATE_ALIAS
 827. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POSUFFIX
 828. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTSUFFIX
 829. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_MSGINITLOCALE
 830. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINGUAS_FILE
 831. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POAUTOINIT
 832. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTDOMAIN
 833. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gettext
 834. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGMERGE
 835. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGMERGECOM
 836. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGMERGECOMSTR
 837. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGMERGEFLAGS
 838. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POSUFFIX
 839. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTSUFFIX
 840. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POUPDATE_ALIAS
 841. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINGUAS_FILE
 842. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POAUTOINIT
 843. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTDOMAIN
 844. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AR
 845. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOM
 846. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARFLAGS
 847. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPREFIX
 848. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIX
 849. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOMSTR
 850. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULE
 851. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOM
 852. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEFLAGS
 853. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEPREFIX
 854. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULESUFFIX
 855. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRPREFIX
 856. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRSUFFIX
 857. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKPREFIX
 858. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKSUFFIX
 859. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
 860. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
 861. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
 862. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVR
 863. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVRCOM
 864. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVRFLAGS
 865. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
 866. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
 867. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 868. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSDEFPREFIX
 869. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSDEFSUFFIX
 870. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSEXPPREFIX
 871. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSEXPSUFFIX
 872. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSPROGMANIFESTPREFIX
 873. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSPROGMANIFESTSUFFIX
 874. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSSHLIBMANIFESTPREFIX
 875. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSSHLIBMANIFESTSUFFIX
 876. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWS_INSERT_DEF
 877. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOMSTR
 878. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOMSTR
 879. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVRCOMSTR
 880. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOMSTR
 881. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSSDK_DIR
 882. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSSDK_VERSION
 883. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVS_VERSION
 884. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BUILDERS
 885. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 886. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
 887. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCDEPFLAGS
 888. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
 889. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCPCHFLAGS
 890. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCPDBFLAGS
 891. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFILESUFFIX
 892. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFLAGS
 893. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFPREFIX
 894. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFSUFFIX
 895. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 896. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOM
 897. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFILESUFFIX
 898. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFLAGS
 899. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
 900. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
 901. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-OBJPREFIX
 902. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-OBJSUFFIX
 903. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PCHCOM
 904. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PCHPDBFLAGS
 905. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RC
 906. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCCOM
 907. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCFLAGS
 908. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCC
 909. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOM
 910. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
 911. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCFLAGS
 912. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
 913. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOM
 914. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
 915. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJPREFIX
 916. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
 917. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOMSTR
 918. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOMSTR
 919. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_NOTFOUND_POLICY
 920. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PCH
 921. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PCHSTOP
 922. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDB
 923. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOMSTR
 924. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOMSTR
 925. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSBUILDCOM
 926. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSCLEANCOM
 927. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSENCODING
 928. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSPROJECTCOM
 929. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSREBUILDCOM
 930. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSSCONS
 931. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSSCONSCOM
 932. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSSCONSCRIPT
 933. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSSCONSFLAGS
 934. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSSOLUTIONCOM
 935. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
 936. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
 937. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFILESUFFIX
 938. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFPREFIX
 939. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFSUFFIX
 940. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
 941. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOM
 942. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFILESUFFIX
 943. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
 944. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
 945. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MWCW_VERSION
 946. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MWCW_VERSIONS
 947. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCC
 948. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOM
 949. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
 950. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCFLAGS
 951. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
 952. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOM
 953. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
 954. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOMSTR
 955. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOMSTR
 956. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOMSTR
 957. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOMSTR
 958. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AR
 959. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOM
 960. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRPREFIX
 961. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRSUFFIX
 962. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKPREFIX
 963. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKSUFFIX
 964. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
 965. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
 966. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
 967. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
 968. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
 969. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AS
 970. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASCOM
 971. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASFLAGS
 972. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPCOM
 973. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPFLAGS
 974. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASCOMSTR
 975. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPCOMSTR
 976. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Ninja
 977. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-IMPLICIT_COMMAND_DEPENDENCIES
 978. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_ALIAS_NAME
 979. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_CMD_ARGS
 980. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_COMPDB_EXPAND
 981. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_DEPFILE_PARSE_FORMAT
 982. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_DIR
 983. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_DISABLE_AUTO_RUN
 984. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_ENV_VAR_CACHE
 985. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_FILE_NAME
 986. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_FORCE_SCONS_BUILD
 987. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_GENERATED_SOURCE_ALIAS_NAME
 988. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_GENERATED_SOURCE_SUFFIXES
 989. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_MSVC_DEPS_PREFIX
 990. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_POOL
 991. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_REGENERATE_DEPS
 992. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_SCONS_DAEMON_KEEP_ALIVE
 993. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_SCONS_DAEMON_PORT
 994. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-NINJA_SYNTAX
 995. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_NINJA_REGENERATE_DEPS_FUNC
 996. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AR
 997. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOM
 998. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARFLAGS
 999. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
1000. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
1001. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCDEPFLAGS
1002. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
1003. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
1004. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOM
1005. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ESCAPE
1006. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
1007. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
1008. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PLATFORM
1009. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PRINT_CMD_LINE_FUNC
1010. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PROGSUFFIX
1011. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RANLIB
1012. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RANLIBCOM
1013. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOM
1014. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOM
1015. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
1016. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
1017. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1018. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFPREFIX
1019. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFSUFFIX
1020. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXRETRIES
1021. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEX
1022. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEXCOM
1023. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEXFLAGS
1024. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEXCOMSTR
1025. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXRETRIES
1026. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEX
1027. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEXCOM
1028. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEXFLAGS
1029. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFTEX
1030. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFTEXCOM
1031. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFTEXFLAGS
1032. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEXCOMSTR
1033. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFTEXCOMSTR
1034. https://github.com/SCons/scons-contrib
1035. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1036. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
1037. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1038. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PROGEMITTER
1039. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBEMITTER
1040. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBEMITTER
1041. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_AUTOSCAN
1042. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Moc
1043. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-VariantDir
1044. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Moc
1045. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
1046. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Library
1047. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
1048. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-VariantDir
1049. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Uic
1050. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QTDIR
1051. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_AUTOSCAN
1052. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_BINPATH
1053. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_CPPPATH
1054. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_LIB
1055. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_LIBPATH
1056. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOC
1057. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCCXXPREFIX
1058. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCCXXSUFFIX
1059. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCFROMCXXCOM
1060. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCFROMCXXFLAGS
1061. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCFROMHCOM
1062. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCFROMHFLAGS
1063. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCHPREFIX
1064. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCHSUFFIX
1065. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UIC
1066. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UICCOM
1067. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UICDECLFLAGS
1068. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UICDECLPREFIX
1069. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UICDECLSUFFIX
1070. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UICIMPLFLAGS
1071. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UICIMPLPREFIX
1072. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UICIMPLSUFFIX
1073. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UISUFFIX
1074. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QTDIR
1075. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACLASSSUFFIX
1076. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RMIC
1077. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RMICCOM
1078. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RMICFLAGS
1079. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RMICCOMSTR
1080. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGEN
1081. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENCLIENTFLAGS
1082. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENFLAGS
1083. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENHEADERFLAGS
1084. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENSERVICEFLAGS
1085. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENXDRFLAGS
1086. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AR
1087. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOMSTR
1088. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARFLAGS
1089. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPREFIX
1090. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIX
1091. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
1092. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
1093. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOMSTR
1094. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOMSTR
1095. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
1096. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFLAGS
1097. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
1098. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
1099. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
1100. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
1101. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
1102. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPATHPREFIX
1103. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPATHSUFFIX
1104. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
1105. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AR
1106. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOM
1107. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARFLAGS
1108. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPREFIX
1109. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIX
1110. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOMSTR
1111. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
1112. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXVERSION
1113. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
1114. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
1115. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJPREFIX
1116. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
1117. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
1118. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
1119. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJPREFIX
1120. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
1121. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77
1122. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
1123. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77
1124. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77FLAGS
1125. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
1126. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
1127. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90
1128. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
1129. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90
1130. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90FLAGS
1131. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
1132. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
1133. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95
1134. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
1135. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95
1136. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95FLAGS
1137. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
1138. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
1139. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPATHPREFIX
1140. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPATHSUFFIX
1141. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
1142. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIG
1143. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGCFILESUFFIX
1144. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGCOM
1145. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGCXXFILESUFFIX
1146. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGDIRECTORSUFFIX
1147. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGFLAGS
1148. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGINCPREFIX
1149. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGINCSUFFIX
1150. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGPATH
1151. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGVERSION
1152. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_SWIGINCFLAGS
1153. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGCOMSTR
1154. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TAR
1155. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARCOM
1156. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARFLAGS
1157. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARSUFFIX
1158. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARCOMSTR
1159. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BIBTEX
1160. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BIBTEXCOM
1161. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BIBTEXFLAGS
1162. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEX
1163. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXCOM
1164. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXFLAGS
1165. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAKEINDEX
1166. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAKEINDEXCOM
1167. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAKEINDEXFLAGS
1168. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEX
1169. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXCOM
1170. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXFLAGS
1171. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BIBTEXCOMSTR
1172. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXCOMSTR
1173. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAKEINDEXCOMSTR
1174. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXCOMSTR
1175. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINESEPARATOR
1176. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SUBSTFILEPREFIX
1177. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SUBSTFILESUFFIX
1178. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXTFILEPREFIX
1179. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXTFILESUFFIX
1180. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SUBST_DICT
1181. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-AR
1182. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOM
1183. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARFLAGS
1184. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPREFIX
1185. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIX
1186. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOMSTR
1187. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gettext
1188. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTSUFFIX
1189. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTUPDATE_ALIAS
1190. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTCOM
1191. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTCOMSTR
1192. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTFLAGS
1193. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTFROM
1194. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTFROMPREFIX
1195. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTFROMSUFFIX
1196. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTPATH
1197. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTPATHPREFIX
1198. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTPATHSUFFIX
1199. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_XGETTEXTDOMAIN
1200. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_XGETTEXTFROMFLAGS
1201. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_XGETTEXTPATHFLAGS
1202. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTDOMAIN
1203. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACC
1204. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCCOM
1205. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCFLAGS
1206. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCHFILESUFFIX
1207. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCHXXFILESUFFIX
1208. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCVCGFILESUFFIX
1209. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCCOMSTR
1210. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCFLAGS
1211. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACC_GRAPH_FILE
1212. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACC_HEADER_FILE
1213. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ZIP
1214. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ZIPCOM
1215. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ZIPCOMPRESSION
1216. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ZIPFLAGS
1217. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ZIPSUFFIX
1218. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ZIPCOMSTR
1219. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#builder_objects
1220. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#tools
1221. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BUILDERS
1222. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Split
1223. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-MergeFlags
1224. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1225. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1226. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1227. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARGET
1228. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SOURCE
1229. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBSUFFIX
1230. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIXES
1231. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#builder_objects
1232. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PROGEMITTER
1233. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
1234. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#node_objects
1235. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
1236. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Default
1237. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-StaticObject
1238. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Flatten
1239. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFILESUFFIX
1240. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Command
1241. https://clang.llvm.org/docs/JSONCompilationDatabase.html
1242. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-COMPILATIONDB_PATH_FILTER
1243. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFILESUFFIX
1244. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXCOM
1245. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXCOM
1246. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BIBTEX
1247. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAKEINDEX
1248. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXCOM
1249. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Java
1250. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JARCHDIR
1251. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Java
1252. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Java
1253. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACLASSDIR
1254. https:openjdk.java.net/jeps/313
1255. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAH
1256. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAHFLAGS
1257. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-M4FLAGS
1258. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-qt
1259. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QTDIR
1260. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgfmt
1261. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVS_VERSION
1262. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SOURCES
1263. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSPROJECTSUFFIX
1264. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
1265. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVS_VERSION
1266. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSSOLUTIONSUFFIX
1267. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-packaging
1268. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PACKAGETYPE
1269. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-FindInstalledFiles
1270. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Install
1271. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-InstallAs
1272. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-InstallVersionedLib
1273. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Tag
1274. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PACKAGEROOT
1275. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PACKAGEROOT
1276. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PCH
1277. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFSUFFIX
1278. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1279. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POAUTOINIT
1280. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POAUTOINIT
1281. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1282. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1283. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POCREATE_ALIAS
1284. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTDOMAIN
1285. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PSSUFFIX
1286. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
1287. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTUPDATE_ALIAS
1288. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
1289. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTDOMAIN
1290. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTFROM
1291. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTPATH
1292. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgmerge
1293. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1294. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1295. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POAUTOINIT
1296. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1297. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POUPDATE_ALIAS
1298. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTDOMAIN
1299. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
1300. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POAUTOINIT
1301. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PROGPREFIX
1302. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PROGSUFFIX
1303. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACLASSDIR
1304. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBPREFIX
1305. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBSUFFIX
1306. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-LoadableModule
1307. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1308. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
1309. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVR
1310. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVRFLAGS
1311. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVRFLAGS
1312. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVRFLAGS
1313. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJPREFIX
1314. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-OBJPREFIX
1315. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHOBJSUFFIX
1316. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPREFIX
1317. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIX
1318. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-OBJPREFIX
1319. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-OBJSUFFIX
1320. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SUBST_DICT
1321. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINESEPARATOR
1322. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Textfile
1323. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SUBSTFILEPREFIX
1324. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SUBSTFILESUFFIX
1325. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SUBST_DICT
1326. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SUBST_DICT
1327. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Substfile
1328. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINESEPARATOR
1329. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Value
1330. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXTFILEPREFIX
1331. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXTFILESUFFIX
1332. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gettext
1333. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POAUTOINIT
1334. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINGUAS_FILE
1335. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-POTDOMAIN
1336. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
1337. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1338. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-qt
1339. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
1340. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Library
1341. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
1342. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QTDIR
1343. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Depends
1344. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Object
1345. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-StaticObject
1346. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedObject
1347. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#scanner_objects
1348. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-GetOption
1349. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-GetOption
1350. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-SetOption
1351. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Help
1352. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1353. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBEMITTER
1354. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BUILDERS
1355. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1356. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1357. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1358. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1359. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AppendUnique
1360. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Prepend
1361. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-PrependUnique
1362. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ENV
1363. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-PrependENVPath
1364. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Append
1365. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Append
1366. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Prepend
1367. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-PrependUnique
1368. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-CacheDir
1369. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-CacheDir
1370. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-NoCache
1371. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-NoClean
1372. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1373. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-MergeFlags
1374. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Dir
1375. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Dir
1376. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Alias
1377. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1378. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clone
1379. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-WhereIs
1380. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Action
1381. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#action_objects
1382. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-SConscript
1383. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Install
1384. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-InstallAs
1385. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1386. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
1387. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-VariantDir
1388. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARGET
1389. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SOURCE
1390. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-SetOption
1391. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AddOption
1392. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-install
1393. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-packaging
1394. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Repository
1395. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-VariantDir
1396. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AddOption
1397. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Export
1398. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-SConscript
1399. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-ParseFlags
1400. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-CacheDir
1401. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clean
1402. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-MergeFlags
1403. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ENV
1404. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-ParseFlags
1405. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-MergeFlags
1406. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-ParseConfig
1407. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1408. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Append
1409. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Append
1410. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AppendUnique
1411. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-PrependUnique
1412. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ENV
1413. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AppendENVPath
1414. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Append
1415. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Append
1416. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AppendUnique
1417. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Prepend
1418. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Local
1419. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Split
1420. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Export
1421. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Import
1422. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-VariantDir
1423. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-VariantDir
1424. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-VariantDir
1425. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Return
1426. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#ftn.idp105548934513104
1427. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#idp105548934513104
1428. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clean
1429. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1430. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TOOLS
1431. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1432. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clone
1433. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Import
1434. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-SConscript
1435. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Default
1436. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Default
1437. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Dictionary
1438. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clone
1439. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Dump
1440. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LDMODULEVERSIONFLAGS
1441. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSION
1442. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_SHLIBVERSIONFLAGS
1443. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1444. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1445. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_NO_COMPATIBILITY_VERSION
1446. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_COMPATIBILITY_VERSION
1447. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_NO_COMPATIBILITY_VERSION
1448. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1449. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1450. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_NO_CURRENT_VERSION
1451. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_CURRENT_VERSION
1452. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_NO_CURRENT_VERSION
1453. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1454. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_COMPATIBILITY_VERSION
1455. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-APPLELINK_CURRENT_VERSION
1456. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1457. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ARCOM
1458. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASCOM
1459. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASFLAGS
1460. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1461. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPCOM
1462. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASFLAGS
1463. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BIBTEXCOM
1464. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
1465. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Library
1466. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-CacheDir
1467. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFLAGS
1468. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
1469. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1470. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOM
1471. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
1472. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOMSTR
1473. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gcc
1474. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-clang
1475. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1476. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
1477. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PCH
1478. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDB
1479. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCPDBFLAGS
1480. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCPDBFLAGS
1481. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCFLAGS
1482. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1483. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1484. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-CompilationDatabase
1485. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-CompilationDatabase
1486. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-CompilationDatabase
1487. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
1488. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
1489. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFPREFIX
1490. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFSUFFIX
1491. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1492. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
1493. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFPREFIX
1494. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFSUFFIX
1495. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1496. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1497. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
1498. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPDEFINES
1499. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
1500. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
1501. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOM
1502. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOM
1503. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOM
1504. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1505. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
1506. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PPCOM
1507. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77PPCOM
1508. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ASPPCOM
1509. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1510. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
1511. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1512. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1513. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1514. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
1515. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFLAGS
1516. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Dir
1517. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
1518. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1519. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1520. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1521. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
1522. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
1523. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFLAGS
1524. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1525. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOM
1526. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOM
1527. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOMSTR
1528. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
1529. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFLAGS
1530. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
1531. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDC
1532. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DFLAGS
1533. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDCOM
1534. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DCOM
1535. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDCOMSTR
1536. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1537. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1538. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINK
1539. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKCOM
1540. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKFLAGS
1541. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookEpub
1542. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookHtml
1543. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookHtmlChunked
1544. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookHtmlhelp
1545. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookMan
1546. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookPdf
1547. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookSlidesHtml
1548. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-DocbookSlidesPdf
1549. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DVIPDFCOM
1550. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
1551. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03
1552. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03COM
1553. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1554. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03COM
1555. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1556. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PATH
1557. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F03INCFLAGS
1558. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03FLAGS
1559. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
1560. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F03INCFLAGS
1561. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1562. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1563. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PATH
1564. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03FLAGS
1565. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PATH
1566. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PATH
1567. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1568. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F03INCFLAGS
1569. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1570. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1571. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PATH
1572. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F03INCFLAGS
1573. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03FLAGS
1574. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1575. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PPCOM
1576. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1577. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F03PPCOM
1578. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1579. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
1580. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08
1581. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08COM
1582. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1583. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08COM
1584. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1585. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PATH
1586. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F08INCFLAGS
1587. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08FLAGS
1588. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
1589. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F08INCFLAGS
1590. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1591. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1592. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PATH
1593. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08FLAGS
1594. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PATH
1595. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PATH
1596. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1597. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F08INCFLAGS
1598. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1599. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1600. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PATH
1601. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F08INCFLAGS
1602. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08FLAGS
1603. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1604. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PPCOM
1605. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1606. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F08PPCOM
1607. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1608. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
1609. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77
1610. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77COM
1611. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1612. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77COM
1613. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1614. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PATH
1615. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F77INCFLAGS
1616. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77FLAGS
1617. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
1618. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F77INCFLAGS
1619. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1620. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1621. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PATH
1622. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77FLAGS
1623. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PATH
1624. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PATH
1625. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1626. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F77INCFLAGS
1627. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1628. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1629. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PATH
1630. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F77INCFLAGS
1631. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77FLAGS
1632. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1633. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PPCOM
1634. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1635. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F77PPCOM
1636. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1637. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
1638. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90
1639. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90COM
1640. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1641. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90COM
1642. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1643. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PATH
1644. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F90INCFLAGS
1645. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90FLAGS
1646. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
1647. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F90INCFLAGS
1648. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1649. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1650. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PATH
1651. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90FLAGS
1652. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PATH
1653. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PATH
1654. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1655. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F90INCFLAGS
1656. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1657. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1658. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PATH
1659. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F90INCFLAGS
1660. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90FLAGS
1661. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1662. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PPCOM
1663. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1664. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F90PPCOM
1665. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1666. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRAN
1667. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95
1668. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95COM
1669. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1670. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95COM
1671. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1672. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PATH
1673. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F95INCFLAGS
1674. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95FLAGS
1675. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
1676. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F95INCFLAGS
1677. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1678. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1679. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PATH
1680. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95FLAGS
1681. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PATH
1682. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PATH
1683. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1684. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F95INCFLAGS
1685. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1686. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1687. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PATH
1688. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_F95INCFLAGS
1689. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95FLAGS
1690. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1691. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PPCOM
1692. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1693. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-F95PPCOM
1694. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1695. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
1696. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
1697. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
1698. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
1699. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
1700. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1701. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
1702. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
1703. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
1704. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1705. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1706. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1707. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANMODDIR
1708. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
1709. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANMODDIR
1710. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
1711. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
1712. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANMODDIRPREFIX
1713. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANMODDIRSUFFIX
1714. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANMODDIR
1715. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
1716. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCPREFIX
1717. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-INCSUFFIX
1718. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1719. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
1720. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANFLAGS
1721. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
1722. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
1723. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
1724. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
1725. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
1726. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKS
1727. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKPATH
1728. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKPATH
1729. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKS
1730. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKPATH
1731. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKPATHPREFIX
1732. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKPREFIX
1733. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKS
1734. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-GSCOM
1735. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PLATFORM
1736. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1737. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1738. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARGET_ARCH
1739. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PLATFORM
1740. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1741. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBNOVERSIONSYMLINKS
1742. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULENOVERSIONSYMLINKS
1743. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBNOVERSIONSYMLINKS
1744. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULENOVERSIONSYMLINKS
1745. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cyglink
1746. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-IMPLIBPREFIX
1747. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBPREFIX
1748. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-cyglink
1749. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-IMPLIBSUFFIX
1750. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBSUFFIX
1751. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1752. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSION
1753. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1754. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSION
1755. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1756. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1757. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
1758. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
1759. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1760. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPATH
1761. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPINCFLAGS
1762. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
1763. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-intelc
1764. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JARCOM
1765. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACFLAGS
1766. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVACCOM
1767. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAHFLAGS
1768. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAHCOM
1769. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Java
1770. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-JAVAC
1771. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXCOM
1772. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LATEXCOM
1773. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
1774. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULE
1775. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEFLAGS
1776. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FRAMEWORKSFLAGS
1777. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
1778. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOM
1779. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-LoadableModule
1780. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-LoadableModule
1781. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBPREFIX
1782. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-LoadableModule
1783. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gnulink
1784. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-LoadableModule
1785. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LDMODULEVERSIONFLAGS
1786. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOM
1787. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSION
1788. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
1789. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOM
1790. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-LoadableModule
1791. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSION
1792. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSIONFLAGS
1793. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULECOM
1794. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-LoadableModule
1795. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LDMODULEVERSION
1796. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEXFLAGS
1797. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEXFLAGS
1798. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEXCOM
1799. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-lex
1800. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEX_HEADER_FILE
1801. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LEX_TABLES_FILE
1802. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRPREFIX
1803. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRSUFFIX
1804. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
1805. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
1806. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBDIRFLAGS
1807. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
1808. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBDIRFLAGS
1809. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-StaticLibrary
1810. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBFLAGS
1811. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKPREFIX
1812. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBLINKSUFFIX
1813. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1814. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1815. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBFLAGS
1816. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1817. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBFLAGS
1818. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1819. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Dir
1820. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBDIRFLAGS
1821. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRPREFIX
1822. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBDIRSUFFIX
1823. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBSUFFIXES
1824. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
1825. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPREFIXES
1826. http://www.opensource.org/licenses/alphabetical
1827. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1828. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Substfile
1829. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Textfile
1830. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1831. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1832. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-MOFiles
1833. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Translate
1834. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINK
1835. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-link
1836. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
1837. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
1838. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
1839. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOMSTR
1840. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1841. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
1842. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBFLAGS
1843. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBDIRFLAGS
1844. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKFLAGS
1845. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-M4COM
1846. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAKEINDEXCOM
1847. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MIDLCOM
1848. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgfmt
1849. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-MOFiles
1850. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgfmt
1851. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-MOFiles
1852. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgfmt
1853. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-MOFiles
1854. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGFMTCOM
1855. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgfmt
1856. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-MOFiles
1857. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgfmt
1858. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-MOFiles
1859. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1860. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1861. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1862. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1863. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGINITCOM
1864. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1865. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1866. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1867. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1868. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1869. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1870. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgmerge
1871. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1872. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgmerge
1873. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1874. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSGMERGECOM
1875. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgmerge
1876. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1877. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgmerge
1878. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1879. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CHANGED_SOURCES
1880. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1881. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1882. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1883. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1884. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_TOOLSET_VERSION
1885. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SDK_VERSION
1886. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SDK_VERSION
1887. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_TOOLSET_VERSION
1888. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_TOOLSET_VERSION
1889. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SPECTRE_LIBS
1890. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SPECTRE_LIBS
1891. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_UWP_APP
1892. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_UWP_APP
1893. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1894. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1895. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1896. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1897. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1898. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1899. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1900. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1901. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1902. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1903. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_VERSION
1904. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_TOOLSET_VERSION
1905. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1906. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1907. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1908. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1909. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1910. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1911. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1912. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1913. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1914. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1915. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1916. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_VERSION
1917. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1918. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1919. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1920. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1921. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1922. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1923. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_USE_SCRIPT_ARGS
1924. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_VERSION
1925. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARGET_ARCH
1926. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_USE_SCRIPT
1927. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_USE_SCRIPT
1928. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_USE_SCRIPT
1929. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1930. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1931. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1932. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1933. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1934. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_SCRIPT_ARGS
1935. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1936. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1937. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1938. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1939. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1940. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
1941. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
1942. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1943. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVS_VERSION
1944. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSSCONSCOM
1945. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWS_EMBED_MANIFEST
1946. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MTSHLIBCOM
1947. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MT
1948. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MTEXECOM
1949. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1950. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
1951. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1952. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1953. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1954. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
1955. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-PCH
1956. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PCHCOM
1957. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDB
1958. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCPDBFLAGS
1959. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFLATEXCOM
1960. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PDFTEXCOM
1961. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
1962. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1963. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1964. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1965. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1966. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1967. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msginit
1968. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1969. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
1970. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POInit
1971. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1972. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
1973. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
1974. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1975. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
1976. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
1977. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1978. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msgmerge
1979. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POUpdate
1980. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
1981. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PSCOM
1982. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Moc
1983. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QTDIR
1984. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QTDIR
1985. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
1986. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
1987. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QTDIR
1988. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
1989. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_BINPATH
1990. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCFROMCXXCOM
1991. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_MOCFROMHCOM
1992. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFILESUFFIX
1993. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_BINPATH
1994. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-QT_UICCOM
1995. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFILESUFFIX
1996. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-qt
1997. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RANLIBCOM
1998. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCCOM
1999. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-RES
2000. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCINCPREFIX
2001. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCINCSUFFIX
2002. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
2003. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
2004. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCINCFLAGS
2005. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
2006. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RCINCFLAGS
2007. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2008. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2009. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-REGSVRCOM
2010. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RMICFLAGS
2011. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RMICCOM
2012. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENFLAGS
2013. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENFLAGS
2014. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENFLAGS
2015. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-RPCGENFLAGS
2016. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVSSCONS
2017. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
2018. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCFLAGS
2019. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCFLAGS
2020. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2021. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOM
2022. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCCCOM
2023. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCCOMSTR
2024. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CCFLAGS
2025. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFLAGS
2026. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
2027. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXFLAGS
2028. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2029. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOM
2030. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXXCOM
2031. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXCOMSTR
2032. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFLAGS
2033. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DC
2034. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DCOM
2035. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDCOM
2036. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DCOMSTR
2037. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHDLINKCOM
2038. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2039. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
2040. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINK
2041. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKCOM
2042. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-DLINKFLAGS
2043. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SPAWN
2044. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
2045. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03
2046. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03COM
2047. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2048. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03COM
2049. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2050. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03FLAGS
2051. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
2052. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03FLAGS
2053. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2054. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03PPCOM
2055. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2056. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF03PPCOM
2057. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2058. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
2059. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08
2060. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08COM
2061. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2062. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08COM
2063. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2064. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08FLAGS
2065. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
2066. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08FLAGS
2067. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2068. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08PPCOM
2069. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2070. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF08PPCOM
2071. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2072. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
2073. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77
2074. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77COM
2075. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2076. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77COM
2077. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2078. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77FLAGS
2079. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
2080. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77FLAGS
2081. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2082. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77PPCOM
2083. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2084. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF77PPCOM
2085. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2086. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
2087. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90
2088. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90COM
2089. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2090. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90COM
2091. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2092. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90FLAGS
2093. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
2094. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90FLAGS
2095. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2096. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90PPCOM
2097. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2098. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF90PPCOM
2099. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2100. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRAN
2101. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95
2102. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95COM
2103. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2104. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95COM
2105. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2106. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95FLAGS
2107. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMMONFLAGS
2108. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95FLAGS
2109. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2110. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95PPCOM
2111. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2112. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHF95PPCOM
2113. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2114. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
2115. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
2116. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
2117. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
2118. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2119. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANFLAGS
2120. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2121. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_CPPDEFFLAGS
2122. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANMODFLAG
2123. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_FORTRANINCFLAGS
2124. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANCOM
2125. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHFORTRANPPCOM
2126. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2127. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2128. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2129. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gnulink
2130. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2131. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_SHLIBVERSIONFLAGS
2132. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
2133. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
2134. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
2135. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
2136. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2137. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
2138. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSIONFLAGS
2139. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
2140. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedLibrary
2141. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLIBVERSION
2142. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
2143. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-link
2144. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
2145. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOM
2146. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHLINKCOM
2147. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKCOMSTR
2148. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
2149. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBPATH
2150. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBFLAGS
2151. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-_LIBDIRFLAGS
2152. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINKFLAGS
2153. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gnulink
2154. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
2155. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gnulink
2156. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Substfile
2157. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Textfile
2158. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Substfile
2159. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Substfile
2160. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
2161. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFILESUFFIX
2162. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGFLAGS
2163. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGCOM
2164. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXXFILESUFFIX
2165. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGFLAGS
2166. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGFLAGS
2167. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SWIGPATH
2168. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TARCOM
2169. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
2170. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
2171. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-HOST_ARCH
2172. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-HOST_ARCH
2173. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MSVC_VERSION
2174. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
2175. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAXLINELENGTH
2176. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEMPFILEPREFIX
2177. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEMPFILESUFFIX
2178. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEMPFILEARGJOIN
2179. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEMPFILEDIR
2180. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEMPFILEARGESCFUNC
2181. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEMPFILE
2182. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAXLINELENGTH
2183. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAXLINELENGTH
2184. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MAXLINELENGTH
2185. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-TEXCOM
2186. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Textfile
2187. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Textfile
2188. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
2189. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
2190. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvc
2191. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-msvs
2192. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-mslink
2193. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Tool
2194. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Tool
2195. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MT
2196. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MTEXECOM
2197. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-MTSHLIBCOM
2198. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWS_INSERT_MANIFEST
2199. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSDEFSUFFIX
2200. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSDEFPREFIX
2201. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSPROGMANIFESTSUFFIX
2202. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSPROGMANIFESTPREFIX
2203. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSSHLIBMANIFESTSUFFIX
2204. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWSSHLIBMANIFESTPREFIX
2205. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-WINDOWS_EMBED_MANIFEST
2206. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
2207. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
2208. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
2209. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Package
2210. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
2211. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
2212. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
2213. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
2214. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTCOM
2215. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
2216. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
2217. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
2218. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
2219. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
2220. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
2221. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTPATH
2222. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTFROM
2223. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTFROM
2224. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-xgettext
2225. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-POTUpdate
2226. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-XGETTEXTFROM
2227. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCFLAGS
2228. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCFLAGS
2229. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCCOM
2230. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-yacc
2231. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCHFILESUFFIX
2232. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCHXXFILESUFFIX
2233. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACCVCGFILESUFFIX
2234. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACC_HEADER_FILE
2235. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-YACC_GRAPH_FILE
2236. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-ZIPCOM
2237. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CFLAGS
2238. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPFLAGS
2239. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LIBS
2240. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
2241. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Object
2242. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CXX
2243. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Object
2244. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCC
2245. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedObject
2246. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SHCXX
2247. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedObject
2248. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Configure
2249. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Object
2250. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
2251. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
2252. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#action_objects
2253. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#construction_variables
2254. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-BoolVariable
2255. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-EnumVariable
2256. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-ListVariable
2257. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-PackageVariable
2258. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-PathVariable
2259. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-Add
2260. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-UnknownVariables
2261. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
2262. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#v-Variables
2263. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Help
2264. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-File
2265. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Dir
2266. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Value
2267. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Alias
2268. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-File
2269. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Dir
2270. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Alias
2271. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Alias
2272. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Value
2273. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#builder_objects
2274. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#scanner_objects
2275. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AddPostAction
2276. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-AddPreAction
2277. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Alias
2278. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#action_objects
2279. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#tool_modules
2280. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Program
2281. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Object
2282. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Library
2283. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CC
2284. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-LINK
2285. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Builder
2286. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-BUILDERS
2287. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#action_objects
2288. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#scanner_objects
2289. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#scanner_objects
2290. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Builder
2291. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#generator_function
2292. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#miscellaneous_action_functions
2293. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#emitter_function
2294. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Builder
2295. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Command
2296. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Action
2297. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Action
2298. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Action
2299. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PRINT_CMD_LINE_FUNC
2300. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Execute
2301. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Command
2302. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#special_attributes
2303. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#special_variables
2304. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#python_code_substitution
2305. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-subst
2306. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Scanner
2307. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-CPPPATH
2308. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-FindPathDirs
2309. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-FindPathDirs
2310. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-SCANNERS
2311. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-Object
2312. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-SharedObject
2313. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#b-StaticObject
2314. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Environment
2315. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-gcc
2316. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Tool
2317. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Clone
2318. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#f-Tool
2319. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-PLATFORM
2320. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-fortran
2321. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f77
2322. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f90
2323. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f95
2324. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f03
2325. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-f08
2326. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOM
2327. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANPPCOMSTR
2328. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOM
2329. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#cv-FORTRANCOMSTR
2330. file:///Users/bdbaddog/devel/scons/git/as_scons/build/doc/man/scons-scons.html#t-qt
2331. https://scons.org/doc/production/HTML/scons-user.html
2332. https://scons-cookbook.readthedocs.io/
2333. https://github.com/SCons/scons
2334. https://scons.org/doc/production/HTML/scons-api/index.html
2335. mailto:knight@baldmt.com
2336. mailto:aroach@electriceyeball.com
2337. mailto:scons-dev@scons.org
